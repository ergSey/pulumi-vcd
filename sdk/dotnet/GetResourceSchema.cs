// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetResourceSchema
    {
        /// <summary>
        /// Provides a VMware Cloud Director generic structure data source. It shows the structure of any VCD resource.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Showing a structure with simple attributes only 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var orgStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "org_struct",
        ///         ResourceType = "vcd_org",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgStruct"] = orgStruct.Apply(getResourceSchemaResult =&gt; getResourceSchemaResult.Attributes),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Showing a structure with both simple and compound attributes
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var networkIsolatedStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "net_struct",
        ///         ResourceType = "vcd_network_isolated",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["netStruct"] = netStructVcdResourceSchema,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetResourceSchemaResult> InvokeAsync(GetResourceSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourceSchemaResult>("vcd:index/getResourceSchema:getResourceSchema", args ?? new GetResourceSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director generic structure data source. It shows the structure of any VCD resource.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Showing a structure with simple attributes only 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var orgStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "org_struct",
        ///         ResourceType = "vcd_org",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgStruct"] = orgStruct.Apply(getResourceSchemaResult =&gt; getResourceSchemaResult.Attributes),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Showing a structure with both simple and compound attributes
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var networkIsolatedStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "net_struct",
        ///         ResourceType = "vcd_network_isolated",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["netStruct"] = netStructVcdResourceSchema,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetResourceSchemaResult> Invoke(GetResourceSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceSchemaResult>("vcd:index/getResourceSchema:getResourceSchema", args ?? new GetResourceSchemaInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director generic structure data source. It shows the structure of any VCD resource.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Showing a structure with simple attributes only 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var orgStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "org_struct",
        ///         ResourceType = "vcd_org",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgStruct"] = orgStruct.Apply(getResourceSchemaResult =&gt; getResourceSchemaResult.Attributes),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Showing a structure with both simple and compound attributes
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var networkIsolatedStruct = Vcd.GetResourceSchema.Invoke(new()
        ///     {
        ///         Name = "net_struct",
        ///         ResourceType = "vcd_network_isolated",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["netStruct"] = netStructVcdResourceSchema,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetResourceSchemaResult> Invoke(GetResourceSchemaInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceSchemaResult>("vcd:index/getResourceSchema:getResourceSchema", args ?? new GetResourceSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourceSchemaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An unique name to identify the data source
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Which resource we want to list. It needs to use the full name of the resource (i.e. "vcd.Org",
        /// not simply "org")
        /// </summary>
        [Input("resourceType", required: true)]
        public string ResourceType { get; set; } = null!;

        public GetResourceSchemaArgs()
        {
        }
        public static new GetResourceSchemaArgs Empty => new GetResourceSchemaArgs();
    }

    public sealed class GetResourceSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An unique name to identify the data source
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Which resource we want to list. It needs to use the full name of the resource (i.e. "vcd.Org",
        /// not simply "org")
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        public GetResourceSchemaInvokeArgs()
        {
        }
        public static new GetResourceSchemaInvokeArgs Empty => new GetResourceSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourceSchemaResult
    {
        /// <summary>
        /// (Computed) Same composition of the simple `attributes` above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResourceSchemaAttributeResult> Attributes;
        /// <summary>
        /// (Computed) The list of compound attributes
        /// Each bock attribute is made of:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResourceSchemaBlockAttributeResult> BlockAttributes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// the attribute name
        /// </summary>
        public readonly string Name;
        public readonly string ResourceType;

        [OutputConstructor]
        private GetResourceSchemaResult(
            ImmutableArray<Outputs.GetResourceSchemaAttributeResult> attributes,

            ImmutableArray<Outputs.GetResourceSchemaBlockAttributeResult> blockAttributes,

            string id,

            string name,

            string resourceType)
        {
            Attributes = attributes;
            BlockAttributes = blockAttributes;
            Id = id;
            Name = name;
            ResourceType = resourceType;
        }
    }
}
