// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtSegmentIpDiscoveryProfile
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Discovery Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentIpDiscoveryProfile.Invoke(new()
        ///     {
        ///         Name = "ip-discovery-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtSegmentIpDiscoveryProfileResult> InvokeAsync(GetNsxtSegmentIpDiscoveryProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtSegmentIpDiscoveryProfileResult>("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", args ?? new GetNsxtSegmentIpDiscoveryProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Discovery Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentIpDiscoveryProfile.Invoke(new()
        ///     {
        ///         Name = "ip-discovery-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentIpDiscoveryProfileResult> Invoke(GetNsxtSegmentIpDiscoveryProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentIpDiscoveryProfileResult>("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", args ?? new GetNsxtSegmentIpDiscoveryProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Discovery Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentIpDiscoveryProfile.Invoke(new()
        ///     {
        ///         Name = "ip-discovery-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentIpDiscoveryProfileResult> Invoke(GetNsxtSegmentIpDiscoveryProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentIpDiscoveryProfileResult>("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", args ?? new GetNsxtSegmentIpDiscoveryProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtSegmentIpDiscoveryProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public string? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public string? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public string? VdcId { get; set; }

        public GetNsxtSegmentIpDiscoveryProfileArgs()
        {
        }
        public static new GetNsxtSegmentIpDiscoveryProfileArgs Empty => new GetNsxtSegmentIpDiscoveryProfileArgs();
    }

    public sealed class GetNsxtSegmentIpDiscoveryProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public Input<string>? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        public GetNsxtSegmentIpDiscoveryProfileInvokeArgs()
        {
        }
        public static new GetNsxtSegmentIpDiscoveryProfileInvokeArgs Empty => new GetNsxtSegmentIpDiscoveryProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtSegmentIpDiscoveryProfileResult
    {
        /// <summary>
        /// Indicates the number of ARP snooped IP addresses to be remembered per
        /// logical port
        /// </summary>
        public readonly int ArpBindingLimit;
        /// <summary>
        /// ARP and ND (Neighbor Discovery) cache timeout (in minutes)
        /// </summary>
        public readonly int ArpBindingTimeout;
        /// <summary>
        /// Description of IP Discovery Profile
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Defines whether ARP snooping is enabled
        /// </summary>
        public readonly bool IsArpSnoopingEnabled;
        /// <summary>
        /// Defines whether DHCP snooping for IPv4 is enabled
        /// </summary>
        public readonly bool IsDhcpSnoopingV4Enabled;
        /// <summary>
        /// Defines whether DHCP snooping for IPv6 is enabled
        /// </summary>
        public readonly bool IsDhcpSnoopingV6Enabled;
        /// <summary>
        /// Defines whether duplicate IP detection is enabled. Duplicate
        /// IP detection is used to determine if there is any IP conflict with any other port on the same
        /// logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where
        /// the IP was discovered last
        /// </summary>
        public readonly bool IsDuplicateIpDetectionEnabled;
        /// <summary>
        /// Defines whether ND (Neighbor Discovery) snooping is enabled. If true,
        /// this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in
        /// the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS
        /// messages, we will learn about the source which sent this NS message. From the NA message, we will
        /// learn the resolved address in the message which the VM is a recipient of. Addresses snooped by
        /// this method are subject to TOFU
        /// </summary>
        public readonly bool IsNdSnoopingEnabled;
        /// <summary>
        /// Defines whether `Trust on First Use(TOFU)` paradigm is enabled
        /// </summary>
        public readonly bool IsTofuEnabled;
        /// <summary>
        /// Defines whether fetching IPv4 address using vm-tools is enabled. This
        /// option is only supported on ESX where vm-tools is installed
        /// </summary>
        public readonly bool IsVmtoolsV4Enabled;
        /// <summary>
        /// Defines whether fetching IPv6 address using vm-tools is enabled. This
        /// will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the
        /// VMTools software
        /// </summary>
        public readonly bool IsVmtoolsV6Enabled;
        public readonly string Name;
        /// <summary>
        /// Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses
        /// </summary>
        public readonly int NdSnoopingLimit;
        public readonly string? NsxtManagerId;
        public readonly string? VdcGroupId;
        public readonly string? VdcId;

        [OutputConstructor]
        private GetNsxtSegmentIpDiscoveryProfileResult(
            int arpBindingLimit,

            int arpBindingTimeout,

            string description,

            string id,

            bool isArpSnoopingEnabled,

            bool isDhcpSnoopingV4Enabled,

            bool isDhcpSnoopingV6Enabled,

            bool isDuplicateIpDetectionEnabled,

            bool isNdSnoopingEnabled,

            bool isTofuEnabled,

            bool isVmtoolsV4Enabled,

            bool isVmtoolsV6Enabled,

            string name,

            int ndSnoopingLimit,

            string? nsxtManagerId,

            string? vdcGroupId,

            string? vdcId)
        {
            ArpBindingLimit = arpBindingLimit;
            ArpBindingTimeout = arpBindingTimeout;
            Description = description;
            Id = id;
            IsArpSnoopingEnabled = isArpSnoopingEnabled;
            IsDhcpSnoopingV4Enabled = isDhcpSnoopingV4Enabled;
            IsDhcpSnoopingV6Enabled = isDhcpSnoopingV6Enabled;
            IsDuplicateIpDetectionEnabled = isDuplicateIpDetectionEnabled;
            IsNdSnoopingEnabled = isNdSnoopingEnabled;
            IsTofuEnabled = isTofuEnabled;
            IsVmtoolsV4Enabled = isVmtoolsV4Enabled;
            IsVmtoolsV6Enabled = isVmtoolsV6Enabled;
            Name = name;
            NdSnoopingLimit = ndSnoopingLimit;
            NsxtManagerId = nsxtManagerId;
            VdcGroupId = vdcGroupId;
            VdcId = vdcId;
        }
    }
}
