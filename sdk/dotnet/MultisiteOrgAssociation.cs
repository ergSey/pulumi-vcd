// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation")]
    public partial class MultisiteOrgAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the remote org associated with the current one.
        /// </summary>
        [Output("associatedOrgId")]
        public Output<string> AssociatedOrgId { get; private set; } = null!;

        /// <summary>
        /// The name of the associated org.
        /// </summary>
        [Output("associatedOrgName")]
        public Output<string> AssociatedOrgName { get; private set; } = null!;

        /// <summary>
        /// ID of the remote site to which the associated org belongs.
        /// </summary>
        [Output("associatedSiteId")]
        public Output<string> AssociatedSiteId { get; private set; } = null!;

        /// <summary>
        /// Data produced from another org, needed to associate to this org from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Output("associationData")]
        public Output<string?> AssociationData { get; private set; } = null!;

        /// <summary>
        /// Name of the file containing the data used to associate to this org from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `vcd.getMultisiteOrgData`.
        /// </summary>
        [Output("associationDataFile")]
        public Output<string?> AssociationDataFile { get; private set; } = null!;

        /// <summary>
        /// How many minutes to keep checking for connection (0=no check)
        /// </summary>
        [Output("connectionTimeoutMins")]
        public Output<int?> ConnectionTimeoutMins { get; private set; } = null!;

        /// <summary>
        /// The ID of the current organization where we start the association with a remote one.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a MultisiteOrgAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MultisiteOrgAssociation(string name, MultisiteOrgAssociationArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation", name, args ?? new MultisiteOrgAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MultisiteOrgAssociation(string name, Input<string> id, MultisiteOrgAssociationState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MultisiteOrgAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MultisiteOrgAssociation Get(string name, Input<string> id, MultisiteOrgAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new MultisiteOrgAssociation(name, id, state, options);
        }
    }

    public sealed class MultisiteOrgAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the remote org associated with the current one.
        /// </summary>
        [Input("associatedOrgId")]
        public Input<string>? AssociatedOrgId { get; set; }

        /// <summary>
        /// Data produced from another org, needed to associate to this org from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Input("associationData")]
        public Input<string>? AssociationData { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate to this org from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `vcd.getMultisiteOrgData`.
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        /// <summary>
        /// How many minutes to keep checking for connection (0=no check)
        /// </summary>
        [Input("connectionTimeoutMins")]
        public Input<int>? ConnectionTimeoutMins { get; set; }

        /// <summary>
        /// The ID of the current organization where we start the association with a remote one.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public MultisiteOrgAssociationArgs()
        {
        }
        public static new MultisiteOrgAssociationArgs Empty => new MultisiteOrgAssociationArgs();
    }

    public sealed class MultisiteOrgAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the remote org associated with the current one.
        /// </summary>
        [Input("associatedOrgId")]
        public Input<string>? AssociatedOrgId { get; set; }

        /// <summary>
        /// The name of the associated org.
        /// </summary>
        [Input("associatedOrgName")]
        public Input<string>? AssociatedOrgName { get; set; }

        /// <summary>
        /// ID of the remote site to which the associated org belongs.
        /// </summary>
        [Input("associatedSiteId")]
        public Input<string>? AssociatedSiteId { get; set; }

        /// <summary>
        /// Data produced from another org, needed to associate to this org from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Input("associationData")]
        public Input<string>? AssociationData { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate to this org from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other org administrator) using the data source `vcd.getMultisiteOrgData`.
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        /// <summary>
        /// How many minutes to keep checking for connection (0=no check)
        /// </summary>
        [Input("connectionTimeoutMins")]
        public Input<int>? ConnectionTimeoutMins { get; set; }

        /// <summary>
        /// The ID of the current organization where we start the association with a remote one.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public MultisiteOrgAssociationState()
        {
        }
        public static new MultisiteOrgAssociationState Empty => new MultisiteOrgAssociationState();
    }
}
