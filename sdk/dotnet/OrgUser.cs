// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/orgUser:OrgUser")]
    public partial class OrgUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Output("deployedVmQuota")]
        public Output<int> DeployedVmQuota { get; private set; } = null!;

        /// <summary>
        /// An optional description of the user.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Org User email address. Needs to be a properly formatted email address.
        /// </summary>
        [Output("emailAddress")]
        public Output<string> EmailAddress { get; private set; } = null!;

        /// <summary>
        /// True if the user is enabled and can log in. The default is `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The full name of the user.
        /// </summary>
        [Output("fullName")]
        public Output<string> FullName { get; private set; } = null!;

        /// <summary>
        /// The set of group names to which this user belongs. It's only populated if the users
        /// are created after the group (with this user having a `depends_on` of the given group).
        /// </summary>
        [Output("groupNames")]
        public Output<ImmutableArray<string>> GroupNames { get; private set; } = null!;

        /// <summary>
        /// The Org User instant messaging.
        /// </summary>
        [Output("instantMessaging")]
        public Output<string> InstantMessaging { get; private set; } = null!;

        /// <summary>
        /// If the user account is going to be imported from an external resource, like an LDAP.
        /// In this case, `password` nor `password_file` are not required. Defaults to `false`.
        /// </summary>
        [Output("isExternal")]
        public Output<bool?> IsExternal { get; private set; } = null!;

        /// <summary>
        /// True if this user has a group role. The default is `false`.
        /// </summary>
        [Output("isGroupRole")]
        public Output<bool?> IsGroupRole { get; private set; } = null!;

        /// <summary>
        /// If the user account has been locked due to too many invalid login attempts, the value will 
        /// change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        /// </summary>
        [Output("isLocked")]
        public Output<bool?> IsLocked { get; private set; } = null!;

        /// <summary>
        /// A unique name for the user.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to which the user belongs. Optional if defined at provider level. If we 
        /// want to create a user at provider level, use "System" as org name.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        /// creation unless is_external is true.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        /// is_external is true.
        /// </summary>
        [Output("passwordFile")]
        public Output<string?> PasswordFile { get; private set; } = null!;

        /// <summary>
        /// Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        /// is `INTEGRATED`.
        /// </summary>
        [Output("providerType")]
        public Output<string?> ProviderType { get; private set; } = null!;

        /// <summary>
        /// The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Output("storedVmQuota")]
        public Output<int> StoredVmQuota { get; private set; } = null!;

        /// <summary>
        /// Take ownership of user's objects on deletion.
        /// </summary>
        [Output("takeOwnership")]
        public Output<bool?> TakeOwnership { get; private set; } = null!;

        /// <summary>
        /// The Org User telephone number.
        /// </summary>
        [Output("telephone")]
        public Output<string> Telephone { get; private set; } = null!;


        /// <summary>
        /// Create a OrgUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgUser(string name, OrgUserArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/orgUser:OrgUser", name, args ?? new OrgUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgUser(string name, Input<string> id, OrgUserState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/orgUser:OrgUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgUser Get(string name, Input<string> id, OrgUserState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgUser(name, id, state, options);
        }
    }

    public sealed class OrgUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Input("deployedVmQuota")]
        public Input<int>? DeployedVmQuota { get; set; }

        /// <summary>
        /// An optional description of the user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Org User email address. Needs to be a properly formatted email address.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        /// <summary>
        /// True if the user is enabled and can log in. The default is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The full name of the user.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// The Org User instant messaging.
        /// </summary>
        [Input("instantMessaging")]
        public Input<string>? InstantMessaging { get; set; }

        /// <summary>
        /// If the user account is going to be imported from an external resource, like an LDAP.
        /// In this case, `password` nor `password_file` are not required. Defaults to `false`.
        /// </summary>
        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        /// <summary>
        /// True if this user has a group role. The default is `false`.
        /// </summary>
        [Input("isGroupRole")]
        public Input<bool>? IsGroupRole { get; set; }

        /// <summary>
        /// If the user account has been locked due to too many invalid login attempts, the value will 
        /// change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        /// </summary>
        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        /// <summary>
        /// A unique name for the user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to which the user belongs. Optional if defined at provider level. If we 
        /// want to create a user at provider level, use "System" as org name.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        /// creation unless is_external is true.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        /// is_external is true.
        /// </summary>
        [Input("passwordFile")]
        public Input<string>? PasswordFile { get; set; }

        /// <summary>
        /// Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        /// is `INTEGRATED`.
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Input("storedVmQuota")]
        public Input<int>? StoredVmQuota { get; set; }

        /// <summary>
        /// Take ownership of user's objects on deletion.
        /// </summary>
        [Input("takeOwnership")]
        public Input<bool>? TakeOwnership { get; set; }

        /// <summary>
        /// The Org User telephone number.
        /// </summary>
        [Input("telephone")]
        public Input<string>? Telephone { get; set; }

        public OrgUserArgs()
        {
        }
        public static new OrgUserArgs Empty => new OrgUserArgs();
    }

    public sealed class OrgUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Input("deployedVmQuota")]
        public Input<int>? DeployedVmQuota { get; set; }

        /// <summary>
        /// An optional description of the user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Org User email address. Needs to be a properly formatted email address.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        /// <summary>
        /// True if the user is enabled and can log in. The default is `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The full name of the user.
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        [Input("groupNames")]
        private InputList<string>? _groupNames;

        /// <summary>
        /// The set of group names to which this user belongs. It's only populated if the users
        /// are created after the group (with this user having a `depends_on` of the given group).
        /// </summary>
        public InputList<string> GroupNames
        {
            get => _groupNames ?? (_groupNames = new InputList<string>());
            set => _groupNames = value;
        }

        /// <summary>
        /// The Org User instant messaging.
        /// </summary>
        [Input("instantMessaging")]
        public Input<string>? InstantMessaging { get; set; }

        /// <summary>
        /// If the user account is going to be imported from an external resource, like an LDAP.
        /// In this case, `password` nor `password_file` are not required. Defaults to `false`.
        /// </summary>
        [Input("isExternal")]
        public Input<bool>? IsExternal { get; set; }

        /// <summary>
        /// True if this user has a group role. The default is `false`.
        /// </summary>
        [Input("isGroupRole")]
        public Input<bool>? IsGroupRole { get; set; }

        /// <summary>
        /// If the user account has been locked due to too many invalid login attempts, the value will 
        /// change to true (only the system can lock the user). To unlock the user re-set this flag to false.
        /// </summary>
        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        /// <summary>
        /// A unique name for the user.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to which the user belongs. Optional if defined at provider level. If we 
        /// want to create a user at provider level, use "System" as org name.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
        /// creation unless is_external is true.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
        /// is_external is true.
        /// </summary>
        [Input("passwordFile")]
        public Input<string>? PasswordFile { get; set; }

        /// <summary>
        /// Identity provider type for this user. One of: `INTEGRATED`, `SAML`, `OAUTH`. The default
        /// is `INTEGRATED`.
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// The role of the user. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
        /// The default is 0.
        /// </summary>
        [Input("storedVmQuota")]
        public Input<int>? StoredVmQuota { get; set; }

        /// <summary>
        /// Take ownership of user's objects on deletion.
        /// </summary>
        [Input("takeOwnership")]
        public Input<bool>? TakeOwnership { get; set; }

        /// <summary>
        /// The Org User telephone number.
        /// </summary>
        [Input("telephone")]
        public Input<string>? Telephone { get; set; }

        public OrgUserState()
        {
        }
        public static new OrgUserState Empty => new OrgUserState();
    }
}
