// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/catalog:Catalog")]
    public partial class Catalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        /// </summary>
        [Output("cacheEnabled")]
        public Output<bool?> CacheEnabled { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Version number from this catalog.
        /// </summary>
        [Output("catalogVersion")]
        public Output<int> CatalogVersion { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Date and time of catalog creation
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Output("deleteForce")]
        public Output<bool?> DeleteForce { get; private set; } = null!;

        /// <summary>
        /// When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Output("deleteRecursive")]
        public Output<bool?> DeleteRecursive { get; private set; } = null!;

        /// <summary>
        /// Description of catalog
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Catalog HREF
        /// </summary>
        [Output("href")]
        public Output<string> Href { get; private set; } = null!;

        /// <summary>
        /// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        /// </summary>
        [Output("isLocal")]
        public Output<bool> IsLocal { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Indicates if this catalog is shared to all organizations.
        /// </summary>
        [Output("isPublished")]
        public Output<bool> IsPublished { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Indicates if the catalog is shared.
        /// </summary>
        [Output("isShared")]
        public Output<bool> IsShared { get; private set; } = null!;

        /// <summary>
        /// (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        /// </summary>
        [Output("mediaItemLists")]
        public Output<ImmutableArray<string>> MediaItemLists { get; private set; } = null!;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.CatalogMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// Catalog name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Number of media items available in this catalog.
        /// </summary>
        [Output("numberOfMedia")]
        public Output<int> NumberOfMedia { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Number of vApp templates available in this catalog.
        /// </summary>
        [Output("numberOfVappTemplates")]
        public Output<int> NumberOfVappTemplates { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        /// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        /// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Owner of the catalog.
        /// </summary>
        [Output("ownerName")]
        public Output<string> OwnerName { get; private set; } = null!;

        /// <summary>
        /// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        /// </summary>
        [Output("preserveIdentityInformation")]
        public Output<bool?> PreserveIdentityInformation { get; private set; } = null!;

        /// <summary>
        /// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        /// </summary>
        [Output("publishEnabled")]
        public Output<bool?> PublishEnabled { get; private set; } = null!;

        /// <summary>
        /// (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        /// </summary>
        [Output("publishSubscriptionType")]
        public Output<string> PublishSubscriptionType { get; private set; } = null!;

        /// <summary>
        /// (*v3.8+*) URL to which other catalogs can subscribe.
        /// </summary>
        [Output("publishSubscriptionUrl")]
        public Output<string> PublishSubscriptionUrl { get; private set; } = null!;

        /// <summary>
        /// Allows to set specific storage profile to be used for catalog. **Note.** Data
        /// source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        /// </summary>
        [Output("storageProfileId")]
        public Output<string?> StorageProfileId { get; private set; } = null!;

        /// <summary>
        /// (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        /// </summary>
        [Output("vappTemplateLists")]
        public Output<ImmutableArray<string>> VappTemplateLists { get; private set; } = null!;


        /// <summary>
        /// Create a Catalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Catalog(string name, CatalogArgs? args = null, CustomResourceOptions? options = null)
            : base("vcd:index/catalog:Catalog", name, args ?? new CatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Catalog(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/catalog:Catalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Catalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Catalog Get(string name, Input<string> id, CatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new Catalog(name, id, state, options);
        }
    }

    public sealed class CatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        /// </summary>
        [Input("cacheEnabled")]
        public Input<bool>? CacheEnabled { get; set; }

        /// <summary>
        /// When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Input("deleteForce")]
        public Input<bool>? DeleteForce { get; set; }

        /// <summary>
        /// When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Description of catalog
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign.
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Catalog name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        /// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        /// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        /// </summary>
        [Input("preserveIdentityInformation")]
        public Input<bool>? PreserveIdentityInformation { get; set; }

        /// <summary>
        /// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        /// </summary>
        [Input("publishEnabled")]
        public Input<bool>? PublishEnabled { get; set; }

        /// <summary>
        /// Allows to set specific storage profile to be used for catalog. **Note.** Data
        /// source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        /// </summary>
        [Input("storageProfileId")]
        public Input<string>? StorageProfileId { get; set; }

        public CatalogArgs()
        {
        }
        public static new CatalogArgs Empty => new CatalogArgs();
    }

    public sealed class CatalogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
        /// </summary>
        [Input("cacheEnabled")]
        public Input<bool>? CacheEnabled { get; set; }

        /// <summary>
        /// (*v3.6+*) Version number from this catalog.
        /// </summary>
        [Input("catalogVersion")]
        public Input<int>? CatalogVersion { get; set; }

        /// <summary>
        /// (*v3.6+*) Date and time of catalog creation
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Input("deleteForce")]
        public Input<bool>? DeleteForce { get; set; }

        /// <summary>
        /// When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Description of catalog
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Catalog HREF
        /// </summary>
        [Input("href")]
        public Input<string>? Href { get; set; }

        /// <summary>
        /// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        /// </summary>
        [Input("isLocal")]
        public Input<bool>? IsLocal { get; set; }

        /// <summary>
        /// (*v3.6+*) Indicates if this catalog is shared to all organizations.
        /// </summary>
        [Input("isPublished")]
        public Input<bool>? IsPublished { get; set; }

        /// <summary>
        /// (*v3.6+*) Indicates if the catalog is shared.
        /// </summary>
        [Input("isShared")]
        public Input<bool>? IsShared { get; set; }

        [Input("mediaItemLists")]
        private InputList<string>? _mediaItemLists;

        /// <summary>
        /// (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        /// </summary>
        public InputList<string> MediaItemLists
        {
            get => _mediaItemLists ?? (_mediaItemLists = new InputList<string>());
            set => _mediaItemLists = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign.
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Catalog name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (*v3.6+*) Number of media items available in this catalog.
        /// </summary>
        [Input("numberOfMedia")]
        public Input<int>? NumberOfMedia { get; set; }

        /// <summary>
        /// (*v3.6+*) Number of vApp templates available in this catalog.
        /// </summary>
        [Input("numberOfVappTemplates")]
        public Input<int>? NumberOfVappTemplates { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
        /// When using a catalog shared from another organization, this field must have the name of that one, not the current one.
        /// If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// (*v3.6+*) Owner of the catalog.
        /// </summary>
        [Input("ownerName")]
        public Input<string>? OwnerName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
        /// </summary>
        [Input("preserveIdentityInformation")]
        public Input<bool>? PreserveIdentityInformation { get; set; }

        /// <summary>
        /// Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        /// </summary>
        [Input("publishEnabled")]
        public Input<bool>? PublishEnabled { get; set; }

        /// <summary>
        /// (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        /// </summary>
        [Input("publishSubscriptionType")]
        public Input<string>? PublishSubscriptionType { get; set; }

        /// <summary>
        /// (*v3.8+*) URL to which other catalogs can subscribe.
        /// </summary>
        [Input("publishSubscriptionUrl")]
        public Input<string>? PublishSubscriptionUrl { get; set; }

        /// <summary>
        /// Allows to set specific storage profile to be used for catalog. **Note.** Data
        /// source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
        /// </summary>
        [Input("storageProfileId")]
        public Input<string>? StorageProfileId { get; set; }

        [Input("vappTemplateLists")]
        private InputList<string>? _vappTemplateLists;

        /// <summary>
        /// (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        /// </summary>
        public InputList<string> VappTemplateLists
        {
            get => _vappTemplateLists ?? (_vappTemplateLists = new InputList<string>());
            set => _vappTemplateLists = value;
        }

        public CatalogState()
        {
        }
        public static new CatalogState Empty => new CatalogState();
    }
}
