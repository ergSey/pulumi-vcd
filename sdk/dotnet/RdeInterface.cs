// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/rdeInterface:RdeInterface")]
    public partial class RdeInterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the RDE Interface.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Output("nss")]
        public Output<string> Nss { get; private set; } = null!;

        /// <summary>
        /// Specifies if the RDE Interface can be only read.
        /// </summary>
        [Output("readonly")]
        public Output<bool> Readonly { get; private set; } = null!;

        /// <summary>
        /// The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Output("vendor")]
        public Output<string> Vendor { get; private set; } = null!;

        /// <summary>
        /// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a RdeInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdeInterface(string name, RdeInterfaceArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/rdeInterface:RdeInterface", name, args ?? new RdeInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdeInterface(string name, Input<string> id, RdeInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/rdeInterface:RdeInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdeInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdeInterface Get(string name, Input<string> id, RdeInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new RdeInterface(name, id, state, options);
        }
    }

    public sealed class RdeInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the RDE Interface.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Input("nss", required: true)]
        public Input<string> Nss { get; set; } = null!;

        /// <summary>
        /// The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Input("vendor", required: true)]
        public Input<string> Vendor { get; set; } = null!;

        /// <summary>
        /// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public RdeInterfaceArgs()
        {
        }
        public static new RdeInterfaceArgs Empty => new RdeInterfaceArgs();
    }

    public sealed class RdeInterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the RDE Interface.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A unique namespace associated with the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Input("nss")]
        public Input<string>? Nss { get; set; }

        /// <summary>
        /// Specifies if the RDE Interface can be only read.
        /// </summary>
        [Input("readonly")]
        public Input<bool>? Readonly { get; set; }

        /// <summary>
        /// The vendor of the RDE Interface. Only alphanumeric characters, underscores and hyphens allowed.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        /// <summary>
        /// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public RdeInterfaceState()
        {
        }
        public static new RdeInterfaceState Empty => new RdeInterfaceState();
    }
}
