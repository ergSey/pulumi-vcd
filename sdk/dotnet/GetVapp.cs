// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVapp
    {
        /// <summary>
        /// Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test_tf = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "test-tf",
        ///         Org = "tf",
        ///         Vdc = "vdc-tf",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Id)),
        ///         ["name"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Name)),
        ///         ["description"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Description)),
        ///         ["href"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Href)),
        ///         ["statusText"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.StatusText)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Task<GetVappResult> InvokeAsync(GetVappArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVappResult>("vcd:index/getVapp:getVapp", args ?? new GetVappArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test_tf = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "test-tf",
        ///         Org = "tf",
        ///         Vdc = "vdc-tf",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Id)),
        ///         ["name"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Name)),
        ///         ["description"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Description)),
        ///         ["href"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Href)),
        ///         ["statusText"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.StatusText)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetVappResult> Invoke(GetVappInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVappResult>("vcd:index/getVapp:getVapp", args ?? new GetVappInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test_tf = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "test-tf",
        ///         Org = "tf",
        ///         Vdc = "vdc-tf",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Id)),
        ///         ["name"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Name)),
        ///         ["description"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Description)),
        ///         ["href"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.Href)),
        ///         ["statusText"] = test_tf.Apply(test_tf =&gt; test_tf.Apply(getVappResult =&gt; getVappResult.StatusText)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetVappResult> Invoke(GetVappInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVappResult>("vcd:index/getVapp:getVapp", args ?? new GetVappInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVappArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name for the vApp
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetVappArgs()
        {
        }
        public static new GetVappArgs Empty => new GetVappArgs();
    }

    public sealed class GetVappInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name for the vApp
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetVappInvokeArgs()
        {
        }
        public static new GetVappInvokeArgs Empty => new GetVappInvokeArgs();
    }


    [OutputType]
    public sealed class GetVappResult
    {
        /// <summary>
        /// An optional description for the vApp
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Key value map of vApp guest properties.
        /// </summary>
        public readonly ImmutableDictionary<string, string> GuestProperties;
        /// <summary>
        /// The vApp Hyper Reference
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        /// details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
        /// </summary>
        public readonly ImmutableDictionary<string, string> InheritedMetadata;
        /// <summary>
        /// (*v3.5+*) - The information about the vApp lease. It includes the following fields:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappLeaseResult> Leases;
        /// <summary>
        /// (Deprecated) Use `metadata_entry` instead. Key value map of metadata assigned to this vApp. Key and value can be any string.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to this vApp. See Metadata section for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        public readonly string? Org;
        /// <summary>
        /// The vApp status as a numeric code
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// The vApp status as text.
        /// </summary>
        public readonly string StatusText;
        /// <summary>
        /// (*3.13.0+*) A list of vApp network names included in this vApp
        /// </summary>
        public readonly ImmutableArray<string> VappNetworkNames;
        /// <summary>
        /// (*v3.13.0+*) A list of vApp Org network names included in this vApp
        /// </summary>
        public readonly ImmutableArray<string> VappOrgNetworkNames;
        public readonly string? Vdc;
        /// <summary>
        /// (*v3.13.0+*) A list of VM names included in this vApp
        /// </summary>
        public readonly ImmutableArray<string> VmNames;

        [OutputConstructor]
        private GetVappResult(
            string description,

            ImmutableDictionary<string, string> guestProperties,

            string href,

            string id,

            ImmutableDictionary<string, string> inheritedMetadata,

            ImmutableArray<Outputs.GetVappLeaseResult> leases,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetVappMetadataEntryResult> metadataEntries,

            string name,

            string? org,

            int status,

            string statusText,

            ImmutableArray<string> vappNetworkNames,

            ImmutableArray<string> vappOrgNetworkNames,

            string? vdc,

            ImmutableArray<string> vmNames)
        {
            Description = description;
            GuestProperties = guestProperties;
            Href = href;
            Id = id;
            InheritedMetadata = inheritedMetadata;
            Leases = leases;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            Status = status;
            StatusText = statusText;
            VappNetworkNames = vappNetworkNames;
            VappOrgNetworkNames = vappOrgNetworkNames;
            Vdc = vdc;
            VmNames = vmNames;
        }
    }
}
