// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetEdgegateway
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-V edge gateway data source, directly connected to one or more external networks. This can be used to reference
        /// edge gateways for Org VDC networks to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mygw = Vcd.GetEdgegateway.Invoke(new()
        ///     {
        ///         Name = "mygw",
        ///         Org = "myorg",
        ///         Vdc = "myvdc",
        ///     });
        /// 
        ///     // Get the name of the default gateway from the data source
        ///     // and use it to establish a second data source
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.ExternalNetworks?.Name),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["edgeGatewayId"] = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.Id),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetEdgegatewayResult> InvokeAsync(GetEdgegatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEdgegatewayResult>("vcd:index/getEdgegateway:getEdgegateway", args ?? new GetEdgegatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-V edge gateway data source, directly connected to one or more external networks. This can be used to reference
        /// edge gateways for Org VDC networks to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mygw = Vcd.GetEdgegateway.Invoke(new()
        ///     {
        ///         Name = "mygw",
        ///         Org = "myorg",
        ///         Vdc = "myvdc",
        ///     });
        /// 
        ///     // Get the name of the default gateway from the data source
        ///     // and use it to establish a second data source
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.ExternalNetworks?.Name),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["edgeGatewayId"] = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.Id),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetEdgegatewayResult> Invoke(GetEdgegatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEdgegatewayResult>("vcd:index/getEdgegateway:getEdgegateway", args ?? new GetEdgegatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-V edge gateway data source, directly connected to one or more external networks. This can be used to reference
        /// edge gateways for Org VDC networks to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mygw = Vcd.GetEdgegateway.Invoke(new()
        ///     {
        ///         Name = "mygw",
        ///         Org = "myorg",
        ///         Vdc = "myvdc",
        ///     });
        /// 
        ///     // Get the name of the default gateway from the data source
        ///     // and use it to establish a second data source
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.ExternalNetworks?.Name),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["edgeGatewayId"] = mygw.Apply(getEdgegatewayResult =&gt; getEdgegatewayResult.Id),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetEdgegatewayResult> Invoke(GetEdgegatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEdgegatewayResult>("vcd:index/getEdgegateway:getEdgegateway", args ?? new GetEdgegatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEdgegatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetEdgegatewayFilterArgs? Filter { get; set; }

        /// <summary>
        /// A unique name for the edge gateway (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC that owns the edge gateway. Optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetEdgegatewayArgs()
        {
        }
        public static new GetEdgegatewayArgs Empty => new GetEdgegatewayArgs();
    }

    public sealed class GetEdgegatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetEdgegatewayFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// A unique name for the edge gateway (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC that owns the edge gateway. Optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetEdgegatewayInvokeArgs()
        {
        }
        public static new GetEdgegatewayInvokeArgs Empty => new GetEdgegatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetEdgegatewayResult
    {
        public readonly string Configuration;
        public readonly string DefaultExternalNetworkIp;
        public readonly string Description;
        public readonly bool DistributedRouting;
        public readonly ImmutableArray<string> ExternalNetworkIps;
        public readonly ImmutableArray<Outputs.GetEdgegatewayExternalNetworkResult> ExternalNetworks;
        public readonly Outputs.GetEdgegatewayFilterResult? Filter;
        public readonly bool FipsModeEnabled;
        public readonly string FwDefaultRuleAction;
        public readonly bool FwDefaultRuleLoggingEnabled;
        public readonly bool FwEnabled;
        public readonly bool HaEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool LbAccelerationEnabled;
        public readonly bool LbEnabled;
        public readonly bool LbLoggingEnabled;
        public readonly string LbLoglevel;
        public readonly string? Name;
        public readonly string? Org;
        public readonly bool UseDefaultRouteForDnsRelay;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetEdgegatewayResult(
            string configuration,

            string defaultExternalNetworkIp,

            string description,

            bool distributedRouting,

            ImmutableArray<string> externalNetworkIps,

            ImmutableArray<Outputs.GetEdgegatewayExternalNetworkResult> externalNetworks,

            Outputs.GetEdgegatewayFilterResult? filter,

            bool fipsModeEnabled,

            string fwDefaultRuleAction,

            bool fwDefaultRuleLoggingEnabled,

            bool fwEnabled,

            bool haEnabled,

            string id,

            bool lbAccelerationEnabled,

            bool lbEnabled,

            bool lbLoggingEnabled,

            string lbLoglevel,

            string? name,

            string? org,

            bool useDefaultRouteForDnsRelay,

            string? vdc)
        {
            Configuration = configuration;
            DefaultExternalNetworkIp = defaultExternalNetworkIp;
            Description = description;
            DistributedRouting = distributedRouting;
            ExternalNetworkIps = externalNetworkIps;
            ExternalNetworks = externalNetworks;
            Filter = filter;
            FipsModeEnabled = fipsModeEnabled;
            FwDefaultRuleAction = fwDefaultRuleAction;
            FwDefaultRuleLoggingEnabled = fwDefaultRuleLoggingEnabled;
            FwEnabled = fwEnabled;
            HaEnabled = haEnabled;
            Id = id;
            LbAccelerationEnabled = lbAccelerationEnabled;
            LbEnabled = lbEnabled;
            LbLoggingEnabled = lbLoggingEnabled;
            LbLoglevel = lbLoglevel;
            Name = name;
            Org = org;
            UseDefaultRouteForDnsRelay = useDefaultRouteForDnsRelay;
            Vdc = vdc;
        }
    }
}
