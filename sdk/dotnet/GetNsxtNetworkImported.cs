// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtNetworkImported
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ### Looking Up Imported Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Imported Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetNsxtNetworkImportedResult> InvokeAsync(GetNsxtNetworkImportedArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtNetworkImportedResult>("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", args ?? new GetNsxtNetworkImportedArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ### Looking Up Imported Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Imported Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNsxtNetworkImportedResult> Invoke(GetNsxtNetworkImportedInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtNetworkImportedResult>("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", args ?? new GetNsxtNetworkImportedInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ### Looking Up Imported Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Imported Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNsxtNetworkImported.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNsxtNetworkImportedResult> Invoke(GetNsxtNetworkImportedInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtNetworkImportedResult>("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", args ?? new GetNsxtNetworkImportedInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtNetworkImportedArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetNsxtNetworkImportedFilterArgs? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        /// and inherited from provider configuration)
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId { get; set; }

        /// <summary>
        /// The name of VDC to use. **Deprecated**  in favor of new field
        /// `owner_id` which supports VDC and VDC Group IDs.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtNetworkImportedArgs()
        {
        }
        public static new GetNsxtNetworkImportedArgs Empty => new GetNsxtNetworkImportedArgs();
    }

    public sealed class GetNsxtNetworkImportedInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetNsxtNetworkImportedFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        /// and inherited from provider configuration)
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The name of VDC to use. **Deprecated**  in favor of new field
        /// `owner_id` which supports VDC and VDC Group IDs.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtNetworkImportedInvokeArgs()
        {
        }
        public static new GetNsxtNetworkImportedInvokeArgs Empty => new GetNsxtNetworkImportedInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtNetworkImportedResult
    {
        public readonly string Description;
        public readonly string Dns1;
        public readonly string Dns2;
        public readonly string DnsSuffix;
        public readonly bool DualStackEnabled;
        public readonly string DvpgId;
        public readonly Outputs.GetNsxtNetworkImportedFilterResult? Filter;
        public readonly string Gateway;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string NsxtLogicalSwitchId;
        public readonly string? Org;
        public readonly string OwnerId;
        public readonly int PrefixLength;
        public readonly string SecondaryGateway;
        public readonly string SecondaryPrefixLength;
        public readonly ImmutableArray<Outputs.GetNsxtNetworkImportedSecondaryStaticIpPoolResult> SecondaryStaticIpPools;
        public readonly ImmutableArray<Outputs.GetNsxtNetworkImportedStaticIpPoolResult> StaticIpPools;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNsxtNetworkImportedResult(
            string description,

            string dns1,

            string dns2,

            string dnsSuffix,

            bool dualStackEnabled,

            string dvpgId,

            Outputs.GetNsxtNetworkImportedFilterResult? filter,

            string gateway,

            string id,

            string? name,

            string nsxtLogicalSwitchId,

            string? org,

            string ownerId,

            int prefixLength,

            string secondaryGateway,

            string secondaryPrefixLength,

            ImmutableArray<Outputs.GetNsxtNetworkImportedSecondaryStaticIpPoolResult> secondaryStaticIpPools,

            ImmutableArray<Outputs.GetNsxtNetworkImportedStaticIpPoolResult> staticIpPools,

            string? vdc)
        {
            Description = description;
            Dns1 = dns1;
            Dns2 = dns2;
            DnsSuffix = dnsSuffix;
            DualStackEnabled = dualStackEnabled;
            DvpgId = dvpgId;
            Filter = filter;
            Gateway = gateway;
            Id = id;
            Name = name;
            NsxtLogicalSwitchId = nsxtLogicalSwitchId;
            Org = org;
            OwnerId = ownerId;
            PrefixLength = prefixLength;
            SecondaryGateway = secondaryGateway;
            SecondaryPrefixLength = secondaryPrefixLength;
            SecondaryStaticIpPools = secondaryStaticIpPools;
            StaticIpPools = staticIpPools;
            Vdc = vdc;
        }
    }
}
