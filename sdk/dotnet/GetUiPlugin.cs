// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetUiPlugin
    {
        /// <summary>
        /// Provides a VMware Cloud Director UI Plugin data source. This can be used to fetch and read an existing UI Plugin.
        /// 
        /// &gt; Reading UI Plugins requires System Administrator privileges.
        /// 
        /// Supported in provider *v3.10+* and requires VCD 10.3+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existingUiPlugin = Vcd.GetUiPlugin.Invoke(new()
        ///     {
        ///         Vendor = "VMware",
        ///         Name = "Customize Portal",
        ///         Version = "3.1.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["license"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.License),
        ///         ["tenants"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.TenantIds),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetUiPluginResult> InvokeAsync(GetUiPluginArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUiPluginResult>("vcd:index/getUiPlugin:getUiPlugin", args ?? new GetUiPluginArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director UI Plugin data source. This can be used to fetch and read an existing UI Plugin.
        /// 
        /// &gt; Reading UI Plugins requires System Administrator privileges.
        /// 
        /// Supported in provider *v3.10+* and requires VCD 10.3+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existingUiPlugin = Vcd.GetUiPlugin.Invoke(new()
        ///     {
        ///         Vendor = "VMware",
        ///         Name = "Customize Portal",
        ///         Version = "3.1.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["license"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.License),
        ///         ["tenants"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.TenantIds),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUiPluginResult> Invoke(GetUiPluginInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUiPluginResult>("vcd:index/getUiPlugin:getUiPlugin", args ?? new GetUiPluginInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director UI Plugin data source. This can be used to fetch and read an existing UI Plugin.
        /// 
        /// &gt; Reading UI Plugins requires System Administrator privileges.
        /// 
        /// Supported in provider *v3.10+* and requires VCD 10.3+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existingUiPlugin = Vcd.GetUiPlugin.Invoke(new()
        ///     {
        ///         Vendor = "VMware",
        ///         Name = "Customize Portal",
        ///         Version = "3.1.4",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["license"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.License),
        ///         ["tenants"] = existingUiPlugin.Apply(getUiPluginResult =&gt; getUiPluginResult.TenantIds),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUiPluginResult> Invoke(GetUiPluginInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUiPluginResult>("vcd:index/getUiPlugin:getUiPlugin", args ?? new GetUiPluginInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUiPluginArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the UI Plugin
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The vendor of the UI Plugin
        /// </summary>
        [Input("vendor", required: true)]
        public string Vendor { get; set; } = null!;

        /// <summary>
        /// The version of the UI Plugin
        /// </summary>
        [Input("version", required: true)]
        public string Version { get; set; } = null!;

        public GetUiPluginArgs()
        {
        }
        public static new GetUiPluginArgs Empty => new GetUiPluginArgs();
    }

    public sealed class GetUiPluginInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the UI Plugin
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The vendor of the UI Plugin
        /// </summary>
        [Input("vendor", required: true)]
        public Input<string> Vendor { get; set; } = null!;

        /// <summary>
        /// The version of the UI Plugin
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public GetUiPluginInvokeArgs()
        {
        }
        public static new GetUiPluginInvokeArgs Empty => new GetUiPluginInvokeArgs();
    }


    [OutputType]
    public sealed class GetUiPluginResult
    {
        public readonly string Description;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string License;
        public readonly string Link;
        public readonly string Name;
        public readonly bool ProviderScoped;
        public readonly string Status;
        public readonly ImmutableArray<string> TenantIds;
        public readonly bool TenantScoped;
        public readonly string Vendor;
        public readonly string Version;

        [OutputConstructor]
        private GetUiPluginResult(
            string description,

            bool enabled,

            string id,

            string license,

            string link,

            string name,

            bool providerScoped,

            string status,

            ImmutableArray<string> tenantIds,

            bool tenantScoped,

            string vendor,

            string version)
        {
            Description = description;
            Enabled = enabled;
            Id = id;
            License = license;
            Link = link;
            Name = name;
            ProviderScoped = providerScoped;
            Status = status;
            TenantIds = tenantIds;
            TenantScoped = tenantScoped;
            Vendor = vendor;
            Version = version;
        }
    }
}
