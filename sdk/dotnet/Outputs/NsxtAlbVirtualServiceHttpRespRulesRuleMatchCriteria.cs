// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd.Outputs
{

    [OutputType]
    public sealed class NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteria
    {
        /// <summary>
        /// Client IP Address criteria
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaClientIpAddress? ClientIpAddress;
        /// <summary>
        /// Criteria for matching cookie
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaCookie? Cookie;
        /// <summary>
        /// HTTP methods that should be matched
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaHttpMethods? HttpMethods;
        /// <summary>
        /// A matching criteria for Location header
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaLocationHeader? LocationHeader;
        /// <summary>
        /// Request path criteria
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaPath? Path;
        /// <summary>
        /// Protocol to match - 'HTTP' or 'HTTPS'
        /// </summary>
        public readonly string? ProtocolType;
        /// <summary>
        /// HTTP request query strings to match
        /// </summary>
        public readonly ImmutableArray<string> Queries;
        /// <summary>
        /// A set of rules for matching request headers
        /// </summary>
        public readonly ImmutableArray<Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaRequestHeader> RequestHeaders;
        /// <summary>
        /// A set of criteria to match response headers
        /// </summary>
        public readonly ImmutableArray<Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaResponseHeader> ResponseHeaders;
        /// <summary>
        /// Service Port criteria
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaServicePorts? ServicePorts;
        /// <summary>
        /// HTTP Status code to match
        /// </summary>
        public readonly Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaStatusCode? StatusCode;

        [OutputConstructor]
        private NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteria(
            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaClientIpAddress? clientIpAddress,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaCookie? cookie,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaHttpMethods? httpMethods,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaLocationHeader? locationHeader,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaPath? path,

            string? protocolType,

            ImmutableArray<string> queries,

            ImmutableArray<Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaRequestHeader> requestHeaders,

            ImmutableArray<Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaResponseHeader> responseHeaders,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaServicePorts? servicePorts,

            Outputs.NsxtAlbVirtualServiceHttpRespRulesRuleMatchCriteriaStatusCode? statusCode)
        {
            ClientIpAddress = clientIpAddress;
            Cookie = cookie;
            HttpMethods = httpMethods;
            LocationHeader = locationHeader;
            Path = path;
            ProtocolType = protocolType;
            Queries = queries;
            RequestHeaders = requestHeaders;
            ResponseHeaders = responseHeaders;
            ServicePorts = servicePorts;
            StatusCode = statusCode;
        }
    }
}
