// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetCatalogItem
    {
        /// <summary>
        /// &gt; If you only need vApp Template features, you may use [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
        /// 
        /// Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_first_item = Vcd.GetCatalogItem.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Catalog = "my-cat",
        ///         Name = "my-first-item",
        ///     });
        /// 
        ///     var my_second_item = new Vcd.CatalogItem("my-second-item", new()
        ///     {
        ///         Org = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Org)),
        ///         Catalog = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)),
        ///         Name = "my-second-item",
        ///         Description = my_first_item.Apply(my_first_item =&gt; $"Belongs to {my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///         Metadata = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Metadata)),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `date` - (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetCatalogItemResult> InvokeAsync(GetCatalogItemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogItemResult>("vcd:index/getCatalogItem:getCatalogItem", args ?? new GetCatalogItemArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; If you only need vApp Template features, you may use [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
        /// 
        /// Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_first_item = Vcd.GetCatalogItem.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Catalog = "my-cat",
        ///         Name = "my-first-item",
        ///     });
        /// 
        ///     var my_second_item = new Vcd.CatalogItem("my-second-item", new()
        ///     {
        ///         Org = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Org)),
        ///         Catalog = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)),
        ///         Name = "my-second-item",
        ///         Description = my_first_item.Apply(my_first_item =&gt; $"Belongs to {my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///         Metadata = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Metadata)),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `date` - (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetCatalogItemResult> Invoke(GetCatalogItemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogItemResult>("vcd:index/getCatalogItem:getCatalogItem", args ?? new GetCatalogItemInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; If you only need vApp Template features, you may use [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
        /// 
        /// Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_first_item = Vcd.GetCatalogItem.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Catalog = "my-cat",
        ///         Name = "my-first-item",
        ///     });
        /// 
        ///     var my_second_item = new Vcd.CatalogItem("my-second-item", new()
        ///     {
        ///         Org = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Org)),
        ///         Catalog = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)),
        ///         Name = "my-second-item",
        ///         Description = my_first_item.Apply(my_first_item =&gt; $"Belongs to {my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Catalog)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///         Metadata = my_first_item.Apply(my_first_item =&gt; my_first_item.Apply(getCatalogItemResult =&gt; getCatalogItemResult.Metadata)),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `date` - (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetCatalogItemResult> Invoke(GetCatalogItemInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogItemResult>("vcd:index/getCatalogItem:getCatalogItem", args ?? new GetCatalogItemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogItemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Catalog name
        /// </summary>
        [Input("catalog", required: true)]
        public string Catalog { get; set; } = null!;

        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetCatalogItemFilterArgs? Filter { get; set; }

        /// <summary>
        /// Catalog Item name (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetCatalogItemArgs()
        {
        }
        public static new GetCatalogItemArgs Empty => new GetCatalogItemArgs();
    }

    public sealed class GetCatalogItemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Catalog name
        /// </summary>
        [Input("catalog", required: true)]
        public Input<string> Catalog { get; set; } = null!;

        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetCatalogItemFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Catalog Item name (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetCatalogItemInvokeArgs()
        {
        }
        public static new GetCatalogItemInvokeArgs Empty => new GetCatalogItemInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogItemResult
    {
        public readonly string Catalog;
        /// <summary>
        /// (Deprecated) Use `metadata_entry` instead. Key value map of metadata assigned to the catalog item.
        /// </summary>
        public readonly ImmutableDictionary<string, string> CatalogItemMetadata;
        public readonly string Created;
        /// <summary>
        /// Catalog item description.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetCatalogItemFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Key value map of metadata assigned to the associated vApp template.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to the catalog item. See Metadata section for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogItemMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;

        [OutputConstructor]
        private GetCatalogItemResult(
            string catalog,

            ImmutableDictionary<string, string> catalogItemMetadata,

            string created,

            string description,

            Outputs.GetCatalogItemFilterResult? filter,

            string id,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetCatalogItemMetadataEntryResult> metadataEntries,

            string? name,

            string? org)
        {
            Catalog = catalog;
            CatalogItemMetadata = catalogItemMetadata;
            Created = created;
            Description = description;
            Filter = filter;
            Id = id;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
        }
    }
}
