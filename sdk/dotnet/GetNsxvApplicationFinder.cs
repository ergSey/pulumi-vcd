// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxvApplicationFinder
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-V distributed firewall applications and application groups finder
        /// used to retrieve existing ones by regular expressions.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 2
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var applications = Vcd.GetNsxvApplicationFinder.Invoke(new()
        ///     {
        ///         VdcId = my_vdc.Id,
        ///         SearchExpression = "dns",
        ///         CaseSensitive = false,
        ///         Type = "application",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// applications = {
        ///   "case_sensitive" = false
        ///   "id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        ///   "objects" = toset([
        ///     {
        ///       "name" = "APP_DNS"
        ///       "type" = "Application"
        ///       "value" = "application-297"
        ///     },
        ///     {
        ///       "name" = "DNS"
        ///       "type" = "Application"
        ///       "value" = "application-136"
        ///     },
        ///     {
        ///       "name" = "DNS-UDP"
        ///       "type" = "Application"
        ///       "value" = "application-286"
        ///     },
        ///   ])
        ///   "search_expression" = "dns"
        ///   "type" = "application"
        ///   "vdc_id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        /// }
        /// ```
        /// 
        /// ## Search expressions
        /// 
        /// To search for an application or application group, we can use simple or complex [regular expressions](https://en.wikipedia.org/wiki/Regular_expression).
        /// The expressions in this data source follow the [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) standard.
        /// 
        /// A **simple** regular expression is a (short) text that we expect to find within the application name. For example, the
        /// expression `sql` will find, among others, `Oracle i*SQLPlus` and `MSSQL Server Database Engine`, because the search, by default,
        /// ignores the case of the searched text.
        /// 
        /// A more complex regular expression could use meta-characters and regular expression directives to search more precisely.
        /// For example, the expression `^server` tells the search to find a name that starts (`^`) with "server", thus finding
        /// "Server Message Block (SMB)" (starts with `server`), but not  "SAP MDM Server" (where `server` is not at the beginning
        /// of the name).
        /// 
        /// If we want to search with even more accuracy, we could set the property `case_sensitive = true`, where the case of the
        /// text matters. Thus, searching for `VMware` would find `VMware-SRM-Replication` and `VMware-VCO-Messaging`, but not
        /// `Vmware-VC-WebAccess` (lowercase `m` after `V`).
        /// </summary>
        public static Task<GetNsxvApplicationFinderResult> InvokeAsync(GetNsxvApplicationFinderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxvApplicationFinderResult>("vcd:index/getNsxvApplicationFinder:getNsxvApplicationFinder", args ?? new GetNsxvApplicationFinderArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-V distributed firewall applications and application groups finder
        /// used to retrieve existing ones by regular expressions.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 2
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var applications = Vcd.GetNsxvApplicationFinder.Invoke(new()
        ///     {
        ///         VdcId = my_vdc.Id,
        ///         SearchExpression = "dns",
        ///         CaseSensitive = false,
        ///         Type = "application",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// applications = {
        ///   "case_sensitive" = false
        ///   "id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        ///   "objects" = toset([
        ///     {
        ///       "name" = "APP_DNS"
        ///       "type" = "Application"
        ///       "value" = "application-297"
        ///     },
        ///     {
        ///       "name" = "DNS"
        ///       "type" = "Application"
        ///       "value" = "application-136"
        ///     },
        ///     {
        ///       "name" = "DNS-UDP"
        ///       "type" = "Application"
        ///       "value" = "application-286"
        ///     },
        ///   ])
        ///   "search_expression" = "dns"
        ///   "type" = "application"
        ///   "vdc_id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        /// }
        /// ```
        /// 
        /// ## Search expressions
        /// 
        /// To search for an application or application group, we can use simple or complex [regular expressions](https://en.wikipedia.org/wiki/Regular_expression).
        /// The expressions in this data source follow the [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) standard.
        /// 
        /// A **simple** regular expression is a (short) text that we expect to find within the application name. For example, the
        /// expression `sql` will find, among others, `Oracle i*SQLPlus` and `MSSQL Server Database Engine`, because the search, by default,
        /// ignores the case of the searched text.
        /// 
        /// A more complex regular expression could use meta-characters and regular expression directives to search more precisely.
        /// For example, the expression `^server` tells the search to find a name that starts (`^`) with "server", thus finding
        /// "Server Message Block (SMB)" (starts with `server`), but not  "SAP MDM Server" (where `server` is not at the beginning
        /// of the name).
        /// 
        /// If we want to search with even more accuracy, we could set the property `case_sensitive = true`, where the case of the
        /// text matters. Thus, searching for `VMware` would find `VMware-SRM-Replication` and `VMware-VCO-Messaging`, but not
        /// `Vmware-VC-WebAccess` (lowercase `m` after `V`).
        /// </summary>
        public static Output<GetNsxvApplicationFinderResult> Invoke(GetNsxvApplicationFinderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxvApplicationFinderResult>("vcd:index/getNsxvApplicationFinder:getNsxvApplicationFinder", args ?? new GetNsxvApplicationFinderInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-V distributed firewall applications and application groups finder
        /// used to retrieve existing ones by regular expressions.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 2
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var applications = Vcd.GetNsxvApplicationFinder.Invoke(new()
        ///     {
        ///         VdcId = my_vdc.Id,
        ///         SearchExpression = "dns",
        ///         CaseSensitive = false,
        ///         Type = "application",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// applications = {
        ///   "case_sensitive" = false
        ///   "id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        ///   "objects" = toset([
        ///     {
        ///       "name" = "APP_DNS"
        ///       "type" = "Application"
        ///       "value" = "application-297"
        ///     },
        ///     {
        ///       "name" = "DNS"
        ///       "type" = "Application"
        ///       "value" = "application-136"
        ///     },
        ///     {
        ///       "name" = "DNS-UDP"
        ///       "type" = "Application"
        ///       "value" = "application-286"
        ///     },
        ///   ])
        ///   "search_expression" = "dns"
        ///   "type" = "application"
        ///   "vdc_id" = "urn:vcloud:vdc:e5680ceb-1c15-48a8-9a54-e0bbc6fe909f"
        /// }
        /// ```
        /// 
        /// ## Search expressions
        /// 
        /// To search for an application or application group, we can use simple or complex [regular expressions](https://en.wikipedia.org/wiki/Regular_expression).
        /// The expressions in this data source follow the [PCRE](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions) standard.
        /// 
        /// A **simple** regular expression is a (short) text that we expect to find within the application name. For example, the
        /// expression `sql` will find, among others, `Oracle i*SQLPlus` and `MSSQL Server Database Engine`, because the search, by default,
        /// ignores the case of the searched text.
        /// 
        /// A more complex regular expression could use meta-characters and regular expression directives to search more precisely.
        /// For example, the expression `^server` tells the search to find a name that starts (`^`) with "server", thus finding
        /// "Server Message Block (SMB)" (starts with `server`), but not  "SAP MDM Server" (where `server` is not at the beginning
        /// of the name).
        /// 
        /// If we want to search with even more accuracy, we could set the property `case_sensitive = true`, where the case of the
        /// text matters. Thus, searching for `VMware` would find `VMware-SRM-Replication` and `VMware-VCO-Messaging`, but not
        /// `Vmware-VC-WebAccess` (lowercase `m` after `V`).
        /// </summary>
        public static Output<GetNsxvApplicationFinderResult> Invoke(GetNsxvApplicationFinderInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxvApplicationFinderResult>("vcd:index/getNsxvApplicationFinder:getNsxvApplicationFinder", args ?? new GetNsxvApplicationFinderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxvApplicationFinderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Makes the search case-sensitive. By default, it is false
        /// </summary>
        [Input("caseSensitive")]
        public bool? CaseSensitive { get; set; }

        /// <summary>
        /// The regular expression that will be used to search the applications. See Search Expressions below
        /// </summary>
        [Input("searchExpression", required: true)]
        public string SearchExpression { get; set; } = null!;

        /// <summary>
        /// What kind of application we seek. One of `application`, `application_group`
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        /// <summary>
        /// The ID of VDC to use
        /// </summary>
        [Input("vdcId", required: true)]
        public string VdcId { get; set; } = null!;

        public GetNsxvApplicationFinderArgs()
        {
        }
        public static new GetNsxvApplicationFinderArgs Empty => new GetNsxvApplicationFinderArgs();
    }

    public sealed class GetNsxvApplicationFinderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Makes the search case-sensitive. By default, it is false
        /// </summary>
        [Input("caseSensitive")]
        public Input<bool>? CaseSensitive { get; set; }

        /// <summary>
        /// The regular expression that will be used to search the applications. See Search Expressions below
        /// </summary>
        [Input("searchExpression", required: true)]
        public Input<string> SearchExpression { get; set; } = null!;

        /// <summary>
        /// What kind of application we seek. One of `application`, `application_group`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The ID of VDC to use
        /// </summary>
        [Input("vdcId", required: true)]
        public Input<string> VdcId { get; set; } = null!;

        public GetNsxvApplicationFinderInvokeArgs()
        {
        }
        public static new GetNsxvApplicationFinderInvokeArgs Empty => new GetNsxvApplicationFinderInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxvApplicationFinderResult
    {
        public readonly bool? CaseSensitive;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of objects found by the search expression. Each one contains the following properties:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNsxvApplicationFinderObjectResult> Objects;
        public readonly string SearchExpression;
        /// <summary>
        /// the type of the object (`Application` or `ApplicationGroup`)
        /// </summary>
        public readonly string Type;
        public readonly string VdcId;

        [OutputConstructor]
        private GetNsxvApplicationFinderResult(
            bool? caseSensitive,

            string id,

            ImmutableArray<Outputs.GetNsxvApplicationFinderObjectResult> objects,

            string searchExpression,

            string type,

            string vdcId)
        {
            CaseSensitive = caseSensitive;
            Id = id;
            Objects = objects;
            SearchExpression = searchExpression;
            Type = type;
            VdcId = vdcId;
        }
    }
}
