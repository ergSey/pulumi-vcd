// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/providerVdc:ProviderVdc")]
    public partial class ProviderVdc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of virtual hardware versions supported by this Provider VDC.
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<string>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// An indicator of CPU and memory capacity. See Compute Capacity below for details.
        /// </summary>
        [Output("computeCapacities")]
        public Output<ImmutableArray<Outputs.ProviderVdcComputeCapacity>> ComputeCapacities { get; private set; } = null!;

        /// <summary>
        /// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        /// </summary>
        [Output("computeProviderScope")]
        public Output<string> ComputeProviderScope { get; private set; } = null!;

        /// <summary>
        /// Description of the Provider VDC.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Set of IDs of External Networks.
        /// </summary>
        [Output("externalNetworkIds")]
        public Output<ImmutableArray<string>> ExternalNetworkIds { get; private set; } = null!;

        /// <summary>
        /// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        /// </summary>
        [Output("highestSupportedHardwareVersion")]
        public Output<string> HighestSupportedHardwareVersion { get; private set; } = null!;

        /// <summary>
        /// Set containing all the hosts which are connected to VC server.
        /// </summary>
        [Output("hostIds")]
        public Output<ImmutableArray<string>> HostIds { get; private set; } = null!;

        /// <summary>
        /// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.ProviderVdcMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// Provider VDC name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set IDs of the Network Pools used by this Provider VDC.
        /// </summary>
        [Output("networkPoolIds")]
        public Output<ImmutableArray<string>> NetworkPoolIds { get; private set; } = null!;

        /// <summary>
        /// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        /// </summary>
        [Output("nsxtManagerId")]
        public Output<string?> NsxtManagerId { get; private set; } = null!;

        /// <summary>
        /// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        /// </summary>
        [Output("resourcePoolIds")]
        public Output<ImmutableArray<string>> ResourcePoolIds { get; private set; } = null!;

        /// <summary>
        /// Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;

        /// <summary>
        /// Set of IDs of the vSphere datastores backing this provider VDC
        /// </summary>
        [Output("storageContainerIds")]
        public Output<ImmutableArray<string>> StorageContainerIds { get; private set; } = null!;

        /// <summary>
        /// Set of IDs to the Storage Profiles available to this Provider VDC.
        /// </summary>
        [Output("storageProfileIds")]
        public Output<ImmutableArray<string>> StorageProfileIds { get; private set; } = null!;

        /// <summary>
        /// Set of Storage Profile names used to create this provider VDC.
        /// </summary>
        [Output("storageProfileNames")]
        public Output<ImmutableArray<string>> StorageProfileNames { get; private set; } = null!;

        /// <summary>
        /// ID of the universal network reference.
        /// </summary>
        [Output("universalNetworkPoolId")]
        public Output<string> UniversalNetworkPoolId { get; private set; } = null!;

        /// <summary>
        /// ID of the vCenter Server that provides the Resource Pools and Datastores.
        /// </summary>
        [Output("vcenterId")]
        public Output<string> VcenterId { get; private set; } = null!;


        /// <summary>
        /// Create a ProviderVdc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProviderVdc(string name, ProviderVdcArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/providerVdc:ProviderVdc", name, args ?? new ProviderVdcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProviderVdc(string name, Input<string> id, ProviderVdcState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/providerVdc:ProviderVdc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProviderVdc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProviderVdc Get(string name, Input<string> id, ProviderVdcState? state = null, CustomResourceOptions? options = null)
        {
            return new ProviderVdc(name, id, state, options);
        }
    }

    public sealed class ProviderVdcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the Provider VDC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        /// </summary>
        [Input("highestSupportedHardwareVersion", required: true)]
        public Input<string> HighestSupportedHardwareVersion { get; set; } = null!;

        /// <summary>
        /// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("metadataEntries")]
        private InputList<Inputs.ProviderVdcMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.ProviderVdcMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.ProviderVdcMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Provider VDC name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkPoolIds")]
        private InputList<string>? _networkPoolIds;

        /// <summary>
        /// Set IDs of the Network Pools used by this Provider VDC.
        /// </summary>
        public InputList<string> NetworkPoolIds
        {
            get => _networkPoolIds ?? (_networkPoolIds = new InputList<string>());
            set => _networkPoolIds = value;
        }

        /// <summary>
        /// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        [Input("resourcePoolIds", required: true)]
        private InputList<string>? _resourcePoolIds;

        /// <summary>
        /// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        /// </summary>
        public InputList<string> ResourcePoolIds
        {
            get => _resourcePoolIds ?? (_resourcePoolIds = new InputList<string>());
            set => _resourcePoolIds = value;
        }

        [Input("storageProfileNames", required: true)]
        private InputList<string>? _storageProfileNames;

        /// <summary>
        /// Set of Storage Profile names used to create this provider VDC.
        /// </summary>
        public InputList<string> StorageProfileNames
        {
            get => _storageProfileNames ?? (_storageProfileNames = new InputList<string>());
            set => _storageProfileNames = value;
        }

        /// <summary>
        /// ID of the vCenter Server that provides the Resource Pools and Datastores.
        /// </summary>
        [Input("vcenterId", required: true)]
        public Input<string> VcenterId { get; set; } = null!;

        public ProviderVdcArgs()
        {
        }
        public static new ProviderVdcArgs Empty => new ProviderVdcArgs();
    }

    public sealed class ProviderVdcState : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<string>? _capabilities;

        /// <summary>
        /// Set of virtual hardware versions supported by this Provider VDC.
        /// </summary>
        public InputList<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<string>());
            set => _capabilities = value;
        }

        [Input("computeCapacities")]
        private InputList<Inputs.ProviderVdcComputeCapacityGetArgs>? _computeCapacities;

        /// <summary>
        /// An indicator of CPU and memory capacity. See Compute Capacity below for details.
        /// </summary>
        public InputList<Inputs.ProviderVdcComputeCapacityGetArgs> ComputeCapacities
        {
            get => _computeCapacities ?? (_computeCapacities = new InputList<Inputs.ProviderVdcComputeCapacityGetArgs>());
            set => _computeCapacities = value;
        }

        /// <summary>
        /// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        /// </summary>
        [Input("computeProviderScope")]
        public Input<string>? ComputeProviderScope { get; set; }

        /// <summary>
        /// Description of the Provider VDC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("externalNetworkIds")]
        private InputList<string>? _externalNetworkIds;

        /// <summary>
        /// Set of IDs of External Networks.
        /// </summary>
        public InputList<string> ExternalNetworkIds
        {
            get => _externalNetworkIds ?? (_externalNetworkIds = new InputList<string>());
            set => _externalNetworkIds = value;
        }

        /// <summary>
        /// The highest virtual hardware version supported by this Provider VDC. This value cannot be changed to a lower version, and can only be updated when adding a new resource pool.
        /// </summary>
        [Input("highestSupportedHardwareVersion")]
        public Input<string>? HighestSupportedHardwareVersion { get; set; }

        [Input("hostIds")]
        private InputList<string>? _hostIds;

        /// <summary>
        /// Set containing all the hosts which are connected to VC server.
        /// </summary>
        public InputList<string> HostIds
        {
            get => _hostIds ?? (_hostIds = new InputList<string>());
            set => _hostIds = value;
        }

        /// <summary>
        /// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("metadataEntries")]
        private InputList<Inputs.ProviderVdcMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.ProviderVdcMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.ProviderVdcMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Provider VDC name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkPoolIds")]
        private InputList<string>? _networkPoolIds;

        /// <summary>
        /// Set IDs of the Network Pools used by this Provider VDC.
        /// </summary>
        public InputList<string> NetworkPoolIds
        {
            get => _networkPoolIds ?? (_networkPoolIds = new InputList<string>());
            set => _networkPoolIds = value;
        }

        /// <summary>
        /// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        [Input("resourcePoolIds")]
        private InputList<string>? _resourcePoolIds;

        /// <summary>
        /// Set of IDs of the Resource Pools backing this provider VDC. (Note: only one resource pool can be set at creation).
        /// </summary>
        public InputList<string> ResourcePoolIds
        {
            get => _resourcePoolIds ?? (_resourcePoolIds = new InputList<string>());
            set => _resourcePoolIds = value;
        }

        /// <summary>
        /// Status of the Provider VDC: -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        [Input("storageContainerIds")]
        private InputList<string>? _storageContainerIds;

        /// <summary>
        /// Set of IDs of the vSphere datastores backing this provider VDC
        /// </summary>
        public InputList<string> StorageContainerIds
        {
            get => _storageContainerIds ?? (_storageContainerIds = new InputList<string>());
            set => _storageContainerIds = value;
        }

        [Input("storageProfileIds")]
        private InputList<string>? _storageProfileIds;

        /// <summary>
        /// Set of IDs to the Storage Profiles available to this Provider VDC.
        /// </summary>
        public InputList<string> StorageProfileIds
        {
            get => _storageProfileIds ?? (_storageProfileIds = new InputList<string>());
            set => _storageProfileIds = value;
        }

        [Input("storageProfileNames")]
        private InputList<string>? _storageProfileNames;

        /// <summary>
        /// Set of Storage Profile names used to create this provider VDC.
        /// </summary>
        public InputList<string> StorageProfileNames
        {
            get => _storageProfileNames ?? (_storageProfileNames = new InputList<string>());
            set => _storageProfileNames = value;
        }

        /// <summary>
        /// ID of the universal network reference.
        /// </summary>
        [Input("universalNetworkPoolId")]
        public Input<string>? UniversalNetworkPoolId { get; set; }

        /// <summary>
        /// ID of the vCenter Server that provides the Resource Pools and Datastores.
        /// </summary>
        [Input("vcenterId")]
        public Input<string>? VcenterId { get; set; }

        public ProviderVdcState()
        {
        }
        public static new ProviderVdcState Empty => new ProviderVdcState();
    }
}
