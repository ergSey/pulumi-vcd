// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtAlbVirtualService
    {
        /// <summary>
        /// Supported in provider *v3.5+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Virtual services for particular NSX-T Edge Gateway. A virtual service
        /// advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives
        /// traffic, it directs it to members in ALB Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "nsxt-vdc",
        ///         Name = "nsxt-gw",
        ///     });
        /// 
        ///     var test = Vcd.GetNsxtAlbVirtualService.Invoke(new()
        ///     {
        ///         Org = "dainius",
        ///         EdgeGatewayId = existingVcdNsxtEdgegateway.Id,
        ///         Name = "virutal-service-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtAlbVirtualServiceResult> InvokeAsync(GetNsxtAlbVirtualServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtAlbVirtualServiceResult>("vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService", args ?? new GetNsxtAlbVirtualServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.5+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Virtual services for particular NSX-T Edge Gateway. A virtual service
        /// advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives
        /// traffic, it directs it to members in ALB Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "nsxt-vdc",
        ///         Name = "nsxt-gw",
        ///     });
        /// 
        ///     var test = Vcd.GetNsxtAlbVirtualService.Invoke(new()
        ///     {
        ///         Org = "dainius",
        ///         EdgeGatewayId = existingVcdNsxtEdgegateway.Id,
        ///         Name = "virutal-service-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAlbVirtualServiceResult> Invoke(GetNsxtAlbVirtualServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAlbVirtualServiceResult>("vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService", args ?? new GetNsxtAlbVirtualServiceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.5+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Virtual services for particular NSX-T Edge Gateway. A virtual service
        /// advertises an IP address and ports to the external world and listens for client traffic. When a virtual service receives
        /// traffic, it directs it to members in ALB Pool.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "nsxt-vdc",
        ///         Name = "nsxt-gw",
        ///     });
        /// 
        ///     var test = Vcd.GetNsxtAlbVirtualService.Invoke(new()
        ///     {
        ///         Org = "dainius",
        ///         EdgeGatewayId = existingVcdNsxtEdgegateway.Id,
        ///         Name = "virutal-service-name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAlbVirtualServiceResult> Invoke(GetNsxtAlbVirtualServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAlbVirtualServiceResult>("vcd:index/getNsxtAlbVirtualService:getNsxtAlbVirtualService", args ?? new GetNsxtAlbVirtualServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtAlbVirtualServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An ID of NSX-T Edge Gateway. Can be looked up using
        /// [vcd.NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public string EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of ALB Virtual Service
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the edge gateway belongs. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtAlbVirtualServiceArgs()
        {
        }
        public static new GetNsxtAlbVirtualServiceArgs Empty => new GetNsxtAlbVirtualServiceArgs();
    }

    public sealed class GetNsxtAlbVirtualServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An ID of NSX-T Edge Gateway. Can be looked up using
        /// [vcd.NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of ALB Virtual Service
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the edge gateway belongs. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtAlbVirtualServiceInvokeArgs()
        {
        }
        public static new GetNsxtAlbVirtualServiceInvokeArgs Empty => new GetNsxtAlbVirtualServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtAlbVirtualServiceResult
    {
        public readonly string ApplicationProfileType;
        public readonly string CaCertificateId;
        public readonly string Description;
        public readonly string EdgeGatewayId;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ipv6VirtualIpAddress;
        public readonly bool IsTransparentModeEnabled;
        public readonly string Name;
        public readonly string? Org;
        public readonly string PoolId;
        public readonly string ServiceEngineGroupId;
        public readonly ImmutableArray<Outputs.GetNsxtAlbVirtualServiceServicePortResult> ServicePorts;
        public readonly string Vdc;
        public readonly string VirtualIpAddress;

        [OutputConstructor]
        private GetNsxtAlbVirtualServiceResult(
            string applicationProfileType,

            string caCertificateId,

            string description,

            string edgeGatewayId,

            bool enabled,

            string id,

            string ipv6VirtualIpAddress,

            bool isTransparentModeEnabled,

            string name,

            string? org,

            string poolId,

            string serviceEngineGroupId,

            ImmutableArray<Outputs.GetNsxtAlbVirtualServiceServicePortResult> servicePorts,

            string vdc,

            string virtualIpAddress)
        {
            ApplicationProfileType = applicationProfileType;
            CaCertificateId = caCertificateId;
            Description = description;
            EdgeGatewayId = edgeGatewayId;
            Enabled = enabled;
            Id = id;
            Ipv6VirtualIpAddress = ipv6VirtualIpAddress;
            IsTransparentModeEnabled = isTransparentModeEnabled;
            Name = name;
            Org = org;
            PoolId = poolId;
            ServiceEngineGroupId = serviceEngineGroupId;
            ServicePorts = servicePorts;
            Vdc = vdc;
            VirtualIpAddress = virtualIpAddress;
        }
    }
}
