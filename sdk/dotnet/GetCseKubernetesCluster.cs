// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetCseKubernetesCluster
    {
        /// <summary>
        /// Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.
        /// 
        /// Supported in provider *v3.12+*
        /// 
        /// Supports the following **Container Service Extension** versions:
        /// 
        /// * 4.1.0
        /// * 4.1.1 / 4.1.1a
        /// * 4.2.0
        /// * 4.2.1
        /// * 4.2.2
        /// * 4.2.3
        /// 
        /// &gt; To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)
        /// 
        /// ## Example Usage
        /// 
        /// ### With ID
        /// 
        /// The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
        /// the desired cluster and obtaining the ID from the displayed information.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Vcd.GetCseKubernetesCluster.Invoke(new()
        ///     {
        ///         ClusterId = "urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCseKubernetesClusterResult> InvokeAsync(GetCseKubernetesClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCseKubernetesClusterResult>("vcd:index/getCseKubernetesCluster:getCseKubernetesCluster", args ?? new GetCseKubernetesClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.
        /// 
        /// Supported in provider *v3.12+*
        /// 
        /// Supports the following **Container Service Extension** versions:
        /// 
        /// * 4.1.0
        /// * 4.1.1 / 4.1.1a
        /// * 4.2.0
        /// * 4.2.1
        /// * 4.2.2
        /// * 4.2.3
        /// 
        /// &gt; To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)
        /// 
        /// ## Example Usage
        /// 
        /// ### With ID
        /// 
        /// The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
        /// the desired cluster and obtaining the ID from the displayed information.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Vcd.GetCseKubernetesCluster.Invoke(new()
        ///     {
        ///         ClusterId = "urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCseKubernetesClusterResult> Invoke(GetCseKubernetesClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCseKubernetesClusterResult>("vcd:index/getCseKubernetesCluster:getCseKubernetesCluster", args ?? new GetCseKubernetesClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.
        /// 
        /// Supported in provider *v3.12+*
        /// 
        /// Supports the following **Container Service Extension** versions:
        /// 
        /// * 4.1.0
        /// * 4.1.1 / 4.1.1a
        /// * 4.2.0
        /// * 4.2.1
        /// * 4.2.2
        /// * 4.2.3
        /// 
        /// &gt; To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)
        /// 
        /// ## Example Usage
        /// 
        /// ### With ID
        /// 
        /// The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
        /// the desired cluster and obtaining the ID from the displayed information.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Vcd.GetCseKubernetesCluster.Invoke(new()
        ///     {
        ///         ClusterId = "urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCseKubernetesClusterResult> Invoke(GetCseKubernetesClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCseKubernetesClusterResult>("vcd:index/getCseKubernetesCluster:getCseKubernetesCluster", args ?? new GetCseKubernetesClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCseKubernetesClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unequivocally identifies a cluster in VCD. Either `cluster_id` or `name` must be set.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        /// <summary>
        /// Specifies the CSE Version of the cluster to find when `name` is used instead of `cluster_id`.
        /// </summary>
        [Input("cseVersion")]
        public string? CseVersion { get; set; }

        /// <summary>
        /// Allows to find a Kubernetes cluster by name inside the given Organization with ID `org_id`. Either `cluster_id` or `name` must be set. This argument requires `cse_version` and `org_id` to be set.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the Organization to which the Kubernetes cluster belongs. Only used if `cluster_id` is not set. Must be present if `name` is used.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        public GetCseKubernetesClusterArgs()
        {
        }
        public static new GetCseKubernetesClusterArgs Empty => new GetCseKubernetesClusterArgs();
    }

    public sealed class GetCseKubernetesClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unequivocally identifies a cluster in VCD. Either `cluster_id` or `name` must be set.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Specifies the CSE Version of the cluster to find when `name` is used instead of `cluster_id`.
        /// </summary>
        [Input("cseVersion")]
        public Input<string>? CseVersion { get; set; }

        /// <summary>
        /// Allows to find a Kubernetes cluster by name inside the given Organization with ID `org_id`. Either `cluster_id` or `name` must be set. This argument requires `cse_version` and `org_id` to be set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Organization to which the Kubernetes cluster belongs. Only used if `cluster_id` is not set. Must be present if `name` is used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        public GetCseKubernetesClusterInvokeArgs()
        {
        }
        public static new GetCseKubernetesClusterInvokeArgs Empty => new GetCseKubernetesClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetCseKubernetesClusterResult
    {
        public readonly bool AutoRepairOnErrors;
        public readonly string CapvcdVersion;
        public readonly string? ClusterId;
        public readonly ImmutableArray<string> ClusterResourceSetBindings;
        public readonly ImmutableArray<Outputs.GetCseKubernetesClusterControlPlaneResult> ControlPlanes;
        public readonly string CpiVersion;
        public readonly string? CseVersion;
        public readonly string CsiVersion;
        public readonly ImmutableArray<Outputs.GetCseKubernetesClusterDefaultStorageClassResult> DefaultStorageClasses;
        public readonly ImmutableArray<Outputs.GetCseKubernetesClusterEventResult> Events;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Kubeconfig;
        public readonly string KubernetesTemplateId;
        public readonly string KubernetesVersion;
        public readonly string? Name;
        public readonly string NetworkId;
        public readonly bool NodeHealthCheck;
        public readonly string? OrgId;
        public readonly string Owner;
        public readonly string PodsCidr;
        public readonly string Runtime;
        public readonly string ServicesCidr;
        public readonly string SshPublicKey;
        public readonly string State;
        public readonly ImmutableArray<string> SupportedUpgrades;
        public readonly string TkgProductVersion;
        public readonly string VdcId;
        public readonly string VirtualIpSubnet;
        public readonly ImmutableArray<Outputs.GetCseKubernetesClusterWorkerPoolResult> WorkerPools;

        [OutputConstructor]
        private GetCseKubernetesClusterResult(
            bool autoRepairOnErrors,

            string capvcdVersion,

            string? clusterId,

            ImmutableArray<string> clusterResourceSetBindings,

            ImmutableArray<Outputs.GetCseKubernetesClusterControlPlaneResult> controlPlanes,

            string cpiVersion,

            string? cseVersion,

            string csiVersion,

            ImmutableArray<Outputs.GetCseKubernetesClusterDefaultStorageClassResult> defaultStorageClasses,

            ImmutableArray<Outputs.GetCseKubernetesClusterEventResult> events,

            string id,

            string kubeconfig,

            string kubernetesTemplateId,

            string kubernetesVersion,

            string? name,

            string networkId,

            bool nodeHealthCheck,

            string? orgId,

            string owner,

            string podsCidr,

            string runtime,

            string servicesCidr,

            string sshPublicKey,

            string state,

            ImmutableArray<string> supportedUpgrades,

            string tkgProductVersion,

            string vdcId,

            string virtualIpSubnet,

            ImmutableArray<Outputs.GetCseKubernetesClusterWorkerPoolResult> workerPools)
        {
            AutoRepairOnErrors = autoRepairOnErrors;
            CapvcdVersion = capvcdVersion;
            ClusterId = clusterId;
            ClusterResourceSetBindings = clusterResourceSetBindings;
            ControlPlanes = controlPlanes;
            CpiVersion = cpiVersion;
            CseVersion = cseVersion;
            CsiVersion = csiVersion;
            DefaultStorageClasses = defaultStorageClasses;
            Events = events;
            Id = id;
            Kubeconfig = kubeconfig;
            KubernetesTemplateId = kubernetesTemplateId;
            KubernetesVersion = kubernetesVersion;
            Name = name;
            NetworkId = networkId;
            NodeHealthCheck = nodeHealthCheck;
            OrgId = orgId;
            Owner = owner;
            PodsCidr = podsCidr;
            Runtime = runtime;
            ServicesCidr = servicesCidr;
            SshPublicKey = sshPublicKey;
            State = state;
            SupportedUpgrades = supportedUpgrades;
            TkgProductVersion = tkgProductVersion;
            VdcId = vdcId;
            VirtualIpSubnet = virtualIpSubnet;
            WorkerPools = workerPools;
        }
    }
}
