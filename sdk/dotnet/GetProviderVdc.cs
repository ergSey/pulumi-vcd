// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetProviderVdc
    {
        /// <summary>
        /// Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = "my-pvdc",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["providerVdc"] = my_pvdc.Apply(my_pvdc =&gt; my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Compute Capacity
        /// 
        /// The `compute_capacity` attribute is a list with a single item which has the following nested attributes:
        /// 
        /// * `cpu` - An indicator of CPU. See CPU and memory below.
        /// * `memory` - An indicator of memory. See CPU and memory below.
        /// * `is_elastic` -  True if compute capacity can grow or shrink based on demand.
        /// * `is_ha` - True if compute capacity is highly available.
        /// 
        /// &lt;a id="cpu-and-memory"&gt;&lt;/a&gt;
        /// ### CPU and memory
        /// 
        /// The `cpu` and `memory` indicators have the following nested attributes:
        /// 
        /// * `allocation` - Allocated CPU/Memory for this Provider VDC.
        /// * `overhead` - CPU/Memory overhead for this Provider VDC.
        /// * `reserved` - Reserved CPU/Memory for this Provider VDC.
        /// * `total` - Total CPU/Memory for this Provider VDC.
        /// * `units` - Units for the CPU/Memory of this Provider VDC.
        /// * `used` - Used CPU/Memory in this Provider VDC.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Task<GetProviderVdcResult> InvokeAsync(GetProviderVdcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProviderVdcResult>("vcd:index/getProviderVdc:getProviderVdc", args ?? new GetProviderVdcArgs(), options.WithDefaults());

        /// <summary>
        /// Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = "my-pvdc",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["providerVdc"] = my_pvdc.Apply(my_pvdc =&gt; my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Compute Capacity
        /// 
        /// The `compute_capacity` attribute is a list with a single item which has the following nested attributes:
        /// 
        /// * `cpu` - An indicator of CPU. See CPU and memory below.
        /// * `memory` - An indicator of memory. See CPU and memory below.
        /// * `is_elastic` -  True if compute capacity can grow or shrink based on demand.
        /// * `is_ha` - True if compute capacity is highly available.
        /// 
        /// &lt;a id="cpu-and-memory"&gt;&lt;/a&gt;
        /// ### CPU and memory
        /// 
        /// The `cpu` and `memory` indicators have the following nested attributes:
        /// 
        /// * `allocation` - Allocated CPU/Memory for this Provider VDC.
        /// * `overhead` - CPU/Memory overhead for this Provider VDC.
        /// * `reserved` - Reserved CPU/Memory for this Provider VDC.
        /// * `total` - Total CPU/Memory for this Provider VDC.
        /// * `units` - Units for the CPU/Memory of this Provider VDC.
        /// * `used` - Used CPU/Memory in this Provider VDC.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetProviderVdcResult> Invoke(GetProviderVdcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderVdcResult>("vcd:index/getProviderVdc:getProviderVdc", args ?? new GetProviderVdcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = "my-pvdc",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["providerVdc"] = my_pvdc.Apply(my_pvdc =&gt; my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Compute Capacity
        /// 
        /// The `compute_capacity` attribute is a list with a single item which has the following nested attributes:
        /// 
        /// * `cpu` - An indicator of CPU. See CPU and memory below.
        /// * `memory` - An indicator of memory. See CPU and memory below.
        /// * `is_elastic` -  True if compute capacity can grow or shrink based on demand.
        /// * `is_ha` - True if compute capacity is highly available.
        /// 
        /// &lt;a id="cpu-and-memory"&gt;&lt;/a&gt;
        /// ### CPU and memory
        /// 
        /// The `cpu` and `memory` indicators have the following nested attributes:
        /// 
        /// * `allocation` - Allocated CPU/Memory for this Provider VDC.
        /// * `overhead` - CPU/Memory overhead for this Provider VDC.
        /// * `reserved` - Reserved CPU/Memory for this Provider VDC.
        /// * `total` - Total CPU/Memory for this Provider VDC.
        /// * `units` - Units for the CPU/Memory of this Provider VDC.
        /// * `used` - Used CPU/Memory in this Provider VDC.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetProviderVdcResult> Invoke(GetProviderVdcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderVdcResult>("vcd:index/getProviderVdc:getProviderVdc", args ?? new GetProviderVdcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderVdcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Provider VDC name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetProviderVdcArgs()
        {
        }
        public static new GetProviderVdcArgs Empty => new GetProviderVdcArgs();
    }

    public sealed class GetProviderVdcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Provider VDC name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetProviderVdcInvokeArgs()
        {
        }
        public static new GetProviderVdcInvokeArgs Empty => new GetProviderVdcInvokeArgs();
    }


    [OutputType]
    public sealed class GetProviderVdcResult
    {
        /// <summary>
        /// Set of virtual hardware versions supported by this Provider VDC.
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// An indicator of CPU and memory capacity. See Compute Capacity below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProviderVdcComputeCapacityResult> ComputeCapacities;
        /// <summary>
        /// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
        /// </summary>
        public readonly string ComputeProviderScope;
        /// <summary>
        /// Optional description of the Provider VDC.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Set of IDs of External Networks.
        /// </summary>
        public readonly ImmutableArray<string> ExternalNetworkIds;
        /// <summary>
        /// The highest virtual hardware version supported by this Provider VDC.
        /// </summary>
        public readonly string HighestSupportedHardwareVersion;
        /// <summary>
        /// Set with all the hosts which are connected to VC server.
        /// </summary>
        public readonly ImmutableArray<string> HostIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// (Deprecated) Use `metadata_entry` instead. Key and value pairs for Provider VDC Metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProviderVdcMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        /// <summary>
        /// Set IDs of the Network Pools used by this Provider VDC.
        /// </summary>
        public readonly ImmutableArray<string> NetworkPoolIds;
        /// <summary>
        /// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
        /// </summary>
        public readonly string NsxtManagerId;
        /// <summary>
        /// Set of IDs of the Resource Pools backing this provider VDC.
        /// </summary>
        public readonly ImmutableArray<string> ResourcePoolIds;
        /// <summary>
        /// Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
        /// </summary>
        public readonly int Status;
        public readonly ImmutableArray<string> StorageContainerIds;
        /// <summary>
        /// Set of IDs to the Storage Profiles available to this Provider VDC.
        /// </summary>
        public readonly ImmutableArray<string> StorageProfileIds;
        public readonly ImmutableArray<string> StorageProfileNames;
        /// <summary>
        /// ID of the universal network reference.
        /// </summary>
        public readonly string UniversalNetworkPoolId;
        /// <summary>
        /// ID of the vCenter Server that provides the Resource Pools and Datastores.
        /// </summary>
        public readonly string VcenterId;

        [OutputConstructor]
        private GetProviderVdcResult(
            ImmutableArray<string> capabilities,

            ImmutableArray<Outputs.GetProviderVdcComputeCapacityResult> computeCapacities,

            string computeProviderScope,

            string description,

            ImmutableArray<string> externalNetworkIds,

            string highestSupportedHardwareVersion,

            ImmutableArray<string> hostIds,

            string id,

            bool isEnabled,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetProviderVdcMetadataEntryResult> metadataEntries,

            string name,

            ImmutableArray<string> networkPoolIds,

            string nsxtManagerId,

            ImmutableArray<string> resourcePoolIds,

            int status,

            ImmutableArray<string> storageContainerIds,

            ImmutableArray<string> storageProfileIds,

            ImmutableArray<string> storageProfileNames,

            string universalNetworkPoolId,

            string vcenterId)
        {
            Capabilities = capabilities;
            ComputeCapacities = computeCapacities;
            ComputeProviderScope = computeProviderScope;
            Description = description;
            ExternalNetworkIds = externalNetworkIds;
            HighestSupportedHardwareVersion = highestSupportedHardwareVersion;
            HostIds = hostIds;
            Id = id;
            IsEnabled = isEnabled;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            NetworkPoolIds = networkPoolIds;
            NsxtManagerId = nsxtManagerId;
            ResourcePoolIds = resourcePoolIds;
            Status = status;
            StorageContainerIds = storageContainerIds;
            StorageProfileIds = storageProfileIds;
            StorageProfileNames = storageProfileNames;
            UniversalNetworkPoolId = universalNetworkPoolId;
            VcenterId = vcenterId;
        }
    }
}
