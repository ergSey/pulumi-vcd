// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/solutionAddOn:SolutionAddOn")]
    public partial class SolutionAddOn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Local filesystem path of Solution Add-On. The Add-On image is required
        /// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        /// Director.
        /// </summary>
        [Output("addOnPath")]
        public Output<string> AddOnPath { get; private set; } = null!;

        /// <summary>
        /// Plugin can automatically trust the certificate of Solution
        /// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        /// using the Solution Add-On if not enabled here.
        /// </summary>
        [Output("autoTrustCertificate")]
        public Output<bool?> AutoTrustCertificate { get; private set; } = null!;

        /// <summary>
        /// The catalog item ID of Solution Add-On. It can be uploaded using
        /// [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        /// </summary>
        [Output("catalogItemId")]
        public Output<string> CatalogItemId { get; private set; } = null!;

        /// <summary>
        /// reports the name of Solution Add-On as defined in the system. This name can be also used
        /// in data source
        /// [`vcd.SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parent RDE state
        /// </summary>
        [Output("rdeState")]
        public Output<string> RdeState { get; private set; } = null!;


        /// <summary>
        /// Create a SolutionAddOn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SolutionAddOn(string name, SolutionAddOnArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/solutionAddOn:SolutionAddOn", name, args ?? new SolutionAddOnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SolutionAddOn(string name, Input<string> id, SolutionAddOnState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/solutionAddOn:SolutionAddOn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SolutionAddOn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SolutionAddOn Get(string name, Input<string> id, SolutionAddOnState? state = null, CustomResourceOptions? options = null)
        {
            return new SolutionAddOn(name, id, state, options);
        }
    }

    public sealed class SolutionAddOnArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Local filesystem path of Solution Add-On. The Add-On image is required
        /// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        /// Director.
        /// </summary>
        [Input("addOnPath", required: true)]
        public Input<string> AddOnPath { get; set; } = null!;

        /// <summary>
        /// Plugin can automatically trust the certificate of Solution
        /// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        /// using the Solution Add-On if not enabled here.
        /// </summary>
        [Input("autoTrustCertificate")]
        public Input<bool>? AutoTrustCertificate { get; set; }

        /// <summary>
        /// The catalog item ID of Solution Add-On. It can be uploaded using
        /// [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        /// </summary>
        [Input("catalogItemId", required: true)]
        public Input<string> CatalogItemId { get; set; } = null!;

        public SolutionAddOnArgs()
        {
        }
        public static new SolutionAddOnArgs Empty => new SolutionAddOnArgs();
    }

    public sealed class SolutionAddOnState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Local filesystem path of Solution Add-On. The Add-On image is required
        /// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
        /// Director.
        /// </summary>
        [Input("addOnPath")]
        public Input<string>? AddOnPath { get; set; }

        /// <summary>
        /// Plugin can automatically trust the certificate of Solution
        /// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
        /// using the Solution Add-On if not enabled here.
        /// </summary>
        [Input("autoTrustCertificate")]
        public Input<bool>? AutoTrustCertificate { get; set; }

        /// <summary>
        /// The catalog item ID of Solution Add-On. It can be uploaded using
        /// [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
        /// </summary>
        [Input("catalogItemId")]
        public Input<string>? CatalogItemId { get; set; }

        /// <summary>
        /// reports the name of Solution Add-On as defined in the system. This name can be also used
        /// in data source
        /// [`vcd.SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent RDE state
        /// </summary>
        [Input("rdeState")]
        public Input<string>? RdeState { get; set; }

        public SolutionAddOnState()
        {
        }
        public static new SolutionAddOnState Empty => new SolutionAddOnState();
    }
}
