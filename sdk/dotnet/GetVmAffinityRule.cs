// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVmAffinityRule
    {
        /// <summary>
        /// Provides a VMware Cloud Director VM affinity rule data source. This can be
        /// used to read VM affinity and anti-affinity rules.
        /// 
        /// Supported in provider *v2.9+*
        /// 
        /// &gt; **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
        /// entities: they are differentiated by the `polarity` property (See below).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_rule_by_name = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     var tf_rule_by_id = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         RuleId = "eda9011c-6841-4060-9336-d2f609c110c3",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVmAffinityRuleResult> InvokeAsync(GetVmAffinityRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmAffinityRuleResult>("vcd:index/getVmAffinityRule:getVmAffinityRule", args ?? new GetVmAffinityRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM affinity rule data source. This can be
        /// used to read VM affinity and anti-affinity rules.
        /// 
        /// Supported in provider *v2.9+*
        /// 
        /// &gt; **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
        /// entities: they are differentiated by the `polarity` property (See below).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_rule_by_name = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     var tf_rule_by_id = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         RuleId = "eda9011c-6841-4060-9336-d2f609c110c3",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmAffinityRuleResult> Invoke(GetVmAffinityRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmAffinityRuleResult>("vcd:index/getVmAffinityRule:getVmAffinityRule", args ?? new GetVmAffinityRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM affinity rule data source. This can be
        /// used to read VM affinity and anti-affinity rules.
        /// 
        /// Supported in provider *v2.9+*
        /// 
        /// &gt; **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
        /// entities: they are differentiated by the `polarity` property (See below).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_rule_by_name = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     var tf_rule_by_id = Vcd.GetVmAffinityRule.Invoke(new()
        ///     {
        ///         RuleId = "eda9011c-6841-4060-9336-d2f609c110c3",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmAffinityRuleResult> Invoke(GetVmAffinityRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmAffinityRuleResult>("vcd:index/getVmAffinityRule:getVmAffinityRule", args ?? new GetVmAffinityRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmAffinityRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of VM affinity rule. Needed if we don't provide `rule_id`
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
        /// rule, especially if the rule name could have duplicates
        /// </summary>
        [Input("ruleId")]
        public string? RuleId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetVmAffinityRuleArgs()
        {
        }
        public static new GetVmAffinityRuleArgs Empty => new GetVmAffinityRuleArgs();
    }

    public sealed class GetVmAffinityRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of VM affinity rule. Needed if we don't provide `rule_id`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
        /// rule, especially if the rule name could have duplicates
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetVmAffinityRuleInvokeArgs()
        {
        }
        public static new GetVmAffinityRuleInvokeArgs Empty => new GetVmAffinityRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmAffinityRuleResult
    {
        /// <summary>
        /// True if this affinity rule is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? Org;
        /// <summary>
        /// One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
        /// need to change polarity, we need to remove the rule and create a new one.
        /// </summary>
        public readonly string Polarity;
        /// <summary>
        /// True if this affinity rule is required. When a rule is mandatory, a host failover will not 
        /// power on the VM if doing so would violate the rule.
        /// </summary>
        public readonly bool Required;
        public readonly string? RuleId;
        public readonly string? Vdc;
        /// <summary>
        /// A set of virtual machine IDs that compose this rule.
        /// </summary>
        public readonly ImmutableArray<string> VmIds;

        [OutputConstructor]
        private GetVmAffinityRuleResult(
            bool enabled,

            string id,

            string? name,

            string? org,

            string polarity,

            bool required,

            string? ruleId,

            string? vdc,

            ImmutableArray<string> vmIds)
        {
            Enabled = enabled;
            Id = id;
            Name = name;
            Org = org;
            Polarity = polarity;
            Required = required;
            RuleId = ruleId;
            Vdc = vdc;
            VmIds = vmIds;
        }
    }
}
