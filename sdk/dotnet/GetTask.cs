// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetTask
    {
        /// <summary>
        /// Provides a data source for available tasks.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var some_task = Vcd.GetTask.Invoke(new()
        ///     {
        ///         Id = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["some-task"] = some_task,
        ///     };
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// some_task = {
        ///   "cancel_requested" = false
        ///   "description" = ""
        ///   "end_time" = "2022-10-27T06:17:27.326Z"
        ///   "error" = tostring(null)
        ///   "expiry_time" = "2023-01-25T06:17:26.122Z"
        ///   "href" = "https://example.com/api/task/d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "id" = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "name" = tostring(null)
        ///   "operation" = "Created Catalog remote-subscriber(919e800b-088b-40ea-813c-5458b55829e7)"
        ///   "operation_name" = "catalogCreateCatalog"
        ///   "org_id" = "79b61f14-34f2-4b65-98cb-b5427ce57d67"
        ///   "org_name" = "datacloud"
        ///   "owner_id" = "919e800b-088b-40ea-813c-5458b55829e7"
        ///   "owner_name" = "remote-subscriber"
        ///   "owner_type" = "application/vnd.vmware.admin.catalog+xml"
        ///   "progress" = 0
        ///   "start_time" = "2022-10-27T06:17:26.122Z"
        ///   "status" = "success"
        ///   "type" = "application/vnd.vmware.vcloud.task+xml"
        ///   "user_id" = "cb5df7fb-34c4-4ce1-99e2-f0094458c486"
        ///   "user_name" = "administrator"
        /// }
        /// ```
        /// </summary>
        public static Task<GetTaskResult> InvokeAsync(GetTaskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskResult>("vcd:index/getTask:getTask", args ?? new GetTaskArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for available tasks.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var some_task = Vcd.GetTask.Invoke(new()
        ///     {
        ///         Id = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["some-task"] = some_task,
        ///     };
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// some_task = {
        ///   "cancel_requested" = false
        ///   "description" = ""
        ///   "end_time" = "2022-10-27T06:17:27.326Z"
        ///   "error" = tostring(null)
        ///   "expiry_time" = "2023-01-25T06:17:26.122Z"
        ///   "href" = "https://example.com/api/task/d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "id" = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "name" = tostring(null)
        ///   "operation" = "Created Catalog remote-subscriber(919e800b-088b-40ea-813c-5458b55829e7)"
        ///   "operation_name" = "catalogCreateCatalog"
        ///   "org_id" = "79b61f14-34f2-4b65-98cb-b5427ce57d67"
        ///   "org_name" = "datacloud"
        ///   "owner_id" = "919e800b-088b-40ea-813c-5458b55829e7"
        ///   "owner_name" = "remote-subscriber"
        ///   "owner_type" = "application/vnd.vmware.admin.catalog+xml"
        ///   "progress" = 0
        ///   "start_time" = "2022-10-27T06:17:26.122Z"
        ///   "status" = "success"
        ///   "type" = "application/vnd.vmware.vcloud.task+xml"
        ///   "user_id" = "cb5df7fb-34c4-4ce1-99e2-f0094458c486"
        ///   "user_name" = "administrator"
        /// }
        /// ```
        /// </summary>
        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("vcd:index/getTask:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for available tasks.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var some_task = Vcd.GetTask.Invoke(new()
        ///     {
        ///         Id = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["some-task"] = some_task,
        ///     };
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// some_task = {
        ///   "cancel_requested" = false
        ///   "description" = ""
        ///   "end_time" = "2022-10-27T06:17:27.326Z"
        ///   "error" = tostring(null)
        ///   "expiry_time" = "2023-01-25T06:17:26.122Z"
        ///   "href" = "https://example.com/api/task/d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "id" = "d4fdcaa9-8db4-45a9-80b8-69de49901bc7"
        ///   "name" = tostring(null)
        ///   "operation" = "Created Catalog remote-subscriber(919e800b-088b-40ea-813c-5458b55829e7)"
        ///   "operation_name" = "catalogCreateCatalog"
        ///   "org_id" = "79b61f14-34f2-4b65-98cb-b5427ce57d67"
        ///   "org_name" = "datacloud"
        ///   "owner_id" = "919e800b-088b-40ea-813c-5458b55829e7"
        ///   "owner_name" = "remote-subscriber"
        ///   "owner_type" = "application/vnd.vmware.admin.catalog+xml"
        ///   "progress" = 0
        ///   "start_time" = "2022-10-27T06:17:26.122Z"
        ///   "status" = "success"
        ///   "type" = "application/vnd.vmware.vcloud.task+xml"
        ///   "user_id" = "cb5df7fb-34c4-4ce1-99e2-f0094458c486"
        ///   "user_name" = "administrator"
        /// }
        /// ```
        /// </summary>
        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("vcd:index/getTask:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the task
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTaskArgs()
        {
        }
        public static new GetTaskArgs Empty => new GetTaskArgs();
    }

    public sealed class GetTaskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the task
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTaskInvokeArgs()
        {
        }
        public static new GetTaskInvokeArgs Empty => new GetTaskInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskResult
    {
        /// <summary>
        /// Whether user has requested this processing to be canceled (`true` or `false`).
        /// </summary>
        public readonly bool CancelRequested;
        /// <summary>
        /// An optional description of the task.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The date and time that processing of the task was completed. May not be present if the task is still being executed.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// error information from a failed task.
        /// </summary>
        public readonly string Error;
        /// <summary>
        /// The date and time at which the task resource will be destroyed and no longer available for retrieval. May not be present if the task has not been executed or is still being executed.
        /// </summary>
        public readonly string ExpiryTime;
        /// <summary>
        /// The URI of the task.
        /// </summary>
        public readonly string Href;
        public readonly string Id;
        /// <summary>
        /// Name of the task. May not be unique. Defines the general operation being performed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A message describing the operation that is tracked by this task.
        /// </summary>
        public readonly string Operation;
        /// <summary>
        /// The short name of the operation that is tracked by this task.
        /// </summary>
        public readonly string OperationName;
        /// <summary>
        /// The unique identifier of the user org.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The name of the org to which the user belongs.
        /// </summary>
        public readonly string OrgName;
        /// <summary>
        /// The unique identifier of the task owner.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The name of the task owner. This is typically the object that the task is creating or updating.
        /// </summary>
        public readonly string OwnerName;
        /// <summary>
        /// The type of the task owner.
        /// </summary>
        public readonly string OwnerType;
        /// <summary>
        /// Indicator of task progress as an approximate percentage between 0 and 100. Not available for all tasks.
        /// </summary>
        public readonly int Progress;
        /// <summary>
        /// The date and time the system started executing the task. May not be present if the task has not been executed yet.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The execution status of the task. One of queued, preRunning, running, success, error, aborted.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Type of the task.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique identifier of the task user.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// The name of the user who started the task.
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetTaskResult(
            bool cancelRequested,

            string description,

            string endTime,

            string error,

            string expiryTime,

            string href,

            string id,

            string name,

            string operation,

            string operationName,

            string orgId,

            string orgName,

            string ownerId,

            string ownerName,

            string ownerType,

            int progress,

            string startTime,

            string status,

            string type,

            string userId,

            string userName)
        {
            CancelRequested = cancelRequested;
            Description = description;
            EndTime = endTime;
            Error = error;
            ExpiryTime = expiryTime;
            Href = href;
            Id = id;
            Name = name;
            Operation = operation;
            OperationName = operationName;
            OrgId = orgId;
            OrgName = orgName;
            OwnerId = ownerId;
            OwnerName = ownerName;
            OwnerType = ownerType;
            Progress = progress;
            StartTime = startTime;
            Status = status;
            Type = type;
            UserId = userId;
            UserName = userName;
        }
    }
}
