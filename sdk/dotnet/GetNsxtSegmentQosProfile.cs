// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtSegmentQosProfile
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### QoS Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentQosProfile.Invoke(new()
        ///     {
        ///         Name = "qos-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtSegmentQosProfileResult> InvokeAsync(GetNsxtSegmentQosProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtSegmentQosProfileResult>("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", args ?? new GetNsxtSegmentQosProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### QoS Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentQosProfile.Invoke(new()
        ///     {
        ///         Name = "qos-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentQosProfileResult> Invoke(GetNsxtSegmentQosProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentQosProfileResult>("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", args ?? new GetNsxtSegmentQosProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### QoS Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentQosProfile.Invoke(new()
        ///     {
        ///         Name = "qos-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentQosProfileResult> Invoke(GetNsxtSegmentQosProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentQosProfileResult>("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", args ?? new GetNsxtSegmentQosProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtSegmentQosProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public string? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public string? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public string? VdcId { get; set; }

        public GetNsxtSegmentQosProfileArgs()
        {
        }
        public static new GetNsxtSegmentQosProfileArgs Empty => new GetNsxtSegmentQosProfileArgs();
    }

    public sealed class GetNsxtSegmentQosProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public Input<string>? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        public GetNsxtSegmentQosProfileInvokeArgs()
        {
        }
        public static new GetNsxtSegmentQosProfileInvokeArgs Empty => new GetNsxtSegmentQosProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtSegmentQosProfileResult
    {
        /// <summary>
        /// Class of service groups similar types of traffic in the network and each type
        /// of traffic is treated as a class with its own level of service priority. The lower priority
        /// traffic is slowed down or in some cases dropped to provide better throughput for higher priority
        /// traffic.
        /// </summary>
        public readonly int ClassOfService;
        /// <summary>
        /// Description of QoS Profile
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A Differentiated Services Code Point (DSCP) priority
        /// Profile.
        /// </summary>
        public readonly int DscpPriority;
        /// <summary>
        /// A Differentiated Services Code Point (DSCP) trust mode. Values are below:
        /// * `TRUSTED` - With Trusted mode the inner header DSCP value is applied to the outer IP header for
        /// IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.
        /// * `UNTRUSTED` - Untrusted mode is supported on overlay-based and VLAN-based logical port.
        /// </summary>
        public readonly string DscpTrustMode;
        /// <summary>
        /// Average egress bandwidth in Mb/s.
        /// </summary>
        public readonly int EgressRateLimiterAvgBandwidth;
        /// <summary>
        /// Egress burst size in bytes.
        /// </summary>
        public readonly int EgressRateLimiterBurstSize;
        /// <summary>
        /// Peak egress bandwidth in Mb/s.
        /// </summary>
        public readonly int EgressRateLimiterPeakBandwidth;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Average ingress broadcast bandwidth in Mb/s.
        /// </summary>
        public readonly int IngressBroadcastRateLimiterAvgBandwidth;
        /// <summary>
        /// Ingress broadcast burst size in bytes.
        /// </summary>
        public readonly int IngressBroadcastRateLimiterBurstSize;
        /// <summary>
        /// Peak ingress broadcast bandwidth in Mb/s.
        /// </summary>
        public readonly int IngressBroadcastRateLimiterPeakBandwidth;
        /// <summary>
        /// Average ingress bandwidth in Mb/s.
        /// </summary>
        public readonly int IngressRateLimiterAvgBandwidth;
        /// <summary>
        /// Ingress burst size in bytes.
        /// </summary>
        public readonly int IngressRateLimiterBurstSize;
        /// <summary>
        /// Peak ingress broadcast bandwidth in Mb/s.
        /// </summary>
        public readonly int IngressRateLimiterPeakBandwidth;
        public readonly string Name;
        public readonly string? NsxtManagerId;
        public readonly string? VdcGroupId;
        public readonly string? VdcId;

        [OutputConstructor]
        private GetNsxtSegmentQosProfileResult(
            int classOfService,

            string description,

            int dscpPriority,

            string dscpTrustMode,

            int egressRateLimiterAvgBandwidth,

            int egressRateLimiterBurstSize,

            int egressRateLimiterPeakBandwidth,

            string id,

            int ingressBroadcastRateLimiterAvgBandwidth,

            int ingressBroadcastRateLimiterBurstSize,

            int ingressBroadcastRateLimiterPeakBandwidth,

            int ingressRateLimiterAvgBandwidth,

            int ingressRateLimiterBurstSize,

            int ingressRateLimiterPeakBandwidth,

            string name,

            string? nsxtManagerId,

            string? vdcGroupId,

            string? vdcId)
        {
            ClassOfService = classOfService;
            Description = description;
            DscpPriority = dscpPriority;
            DscpTrustMode = dscpTrustMode;
            EgressRateLimiterAvgBandwidth = egressRateLimiterAvgBandwidth;
            EgressRateLimiterBurstSize = egressRateLimiterBurstSize;
            EgressRateLimiterPeakBandwidth = egressRateLimiterPeakBandwidth;
            Id = id;
            IngressBroadcastRateLimiterAvgBandwidth = ingressBroadcastRateLimiterAvgBandwidth;
            IngressBroadcastRateLimiterBurstSize = ingressBroadcastRateLimiterBurstSize;
            IngressBroadcastRateLimiterPeakBandwidth = ingressBroadcastRateLimiterPeakBandwidth;
            IngressRateLimiterAvgBandwidth = ingressRateLimiterAvgBandwidth;
            IngressRateLimiterBurstSize = ingressRateLimiterBurstSize;
            IngressRateLimiterPeakBandwidth = ingressRateLimiterPeakBandwidth;
            Name = name;
            NsxtManagerId = nsxtManagerId;
            VdcGroupId = vdcGroupId;
            VdcId = vdcId;
        }
    }
}
