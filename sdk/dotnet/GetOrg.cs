// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetOrg
    {
        /// <summary>
        /// Provides a VMware Cloud Director Org data source. An organization can be used to manage catalogs, virtual
        /// data centers, and users.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var my_org_clone = new Vcd.Org("my-org-clone", new()
        ///     {
        ///         Name = "my-org-clone",
        ///         FullName = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.FullName)),
        ///         CanPublishCatalogs = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.CanPublishCatalogs)),
        ///         DeployedVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.DeployedVmQuota)),
        ///         StoredVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.StoredVmQuota)),
        ///         IsEnabled = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.IsEnabled)),
        ///         DeleteForce = true,
        ///         DeleteRecursive = true,
        ///         VappLease = new Vcd.Inputs.OrgVappLeaseArgs
        ///         {
        ///             MaximumRuntimeLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumRuntimeLeaseInSec)),
        ///             PowerOffOnRuntimeLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.PowerOffOnRuntimeLeaseExpiration)),
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///         VappTemplateLease = new Vcd.Inputs.OrgVappTemplateLeaseArgs
        ///         {
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## vApp Lease
        /// 
        /// The `vapp_lease` section contains lease parameters for vApps created in the current organization, as defined below:
        /// 
        /// * `maximum_runtime_lease_in_sec` - How long vApps can run before they are automatically stopped (in seconds)
        /// * `power_off_on_runtime_lease_expiration` - When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
        /// * `maximum_storage_lease_in_sec` - How long stopped vApps are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
        /// 
        /// &lt;a id="vapp-template-lease"&gt;&lt;/a&gt;
        /// ## vApp Template Lease
        /// 
        /// The `vapp_template_lease` section contains lease parameters for vApp templates created in the current organization, as defined below:
        /// 
        /// * `maximum_storage_lease_in_sec` - How long vApp templates are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Task<GetOrgResult> InvokeAsync(GetOrgArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrgResult>("vcd:index/getOrg:getOrg", args ?? new GetOrgArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org data source. An organization can be used to manage catalogs, virtual
        /// data centers, and users.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var my_org_clone = new Vcd.Org("my-org-clone", new()
        ///     {
        ///         Name = "my-org-clone",
        ///         FullName = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.FullName)),
        ///         CanPublishCatalogs = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.CanPublishCatalogs)),
        ///         DeployedVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.DeployedVmQuota)),
        ///         StoredVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.StoredVmQuota)),
        ///         IsEnabled = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.IsEnabled)),
        ///         DeleteForce = true,
        ///         DeleteRecursive = true,
        ///         VappLease = new Vcd.Inputs.OrgVappLeaseArgs
        ///         {
        ///             MaximumRuntimeLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumRuntimeLeaseInSec)),
        ///             PowerOffOnRuntimeLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.PowerOffOnRuntimeLeaseExpiration)),
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///         VappTemplateLease = new Vcd.Inputs.OrgVappTemplateLeaseArgs
        ///         {
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## vApp Lease
        /// 
        /// The `vapp_lease` section contains lease parameters for vApps created in the current organization, as defined below:
        /// 
        /// * `maximum_runtime_lease_in_sec` - How long vApps can run before they are automatically stopped (in seconds)
        /// * `power_off_on_runtime_lease_expiration` - When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
        /// * `maximum_storage_lease_in_sec` - How long stopped vApps are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
        /// 
        /// &lt;a id="vapp-template-lease"&gt;&lt;/a&gt;
        /// ## vApp Template Lease
        /// 
        /// The `vapp_template_lease` section contains lease parameters for vApp templates created in the current organization, as defined below:
        /// 
        /// * `maximum_storage_lease_in_sec` - How long vApp templates are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetOrgResult> Invoke(GetOrgInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgResult>("vcd:index/getOrg:getOrg", args ?? new GetOrgInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org data source. An organization can be used to manage catalogs, virtual
        /// data centers, and users.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var my_org_clone = new Vcd.Org("my-org-clone", new()
        ///     {
        ///         Name = "my-org-clone",
        ///         FullName = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.FullName)),
        ///         CanPublishCatalogs = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.CanPublishCatalogs)),
        ///         DeployedVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.DeployedVmQuota)),
        ///         StoredVmQuota = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.StoredVmQuota)),
        ///         IsEnabled = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.IsEnabled)),
        ///         DeleteForce = true,
        ///         DeleteRecursive = true,
        ///         VappLease = new Vcd.Inputs.OrgVappLeaseArgs
        ///         {
        ///             MaximumRuntimeLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumRuntimeLeaseInSec)),
        ///             PowerOffOnRuntimeLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.PowerOffOnRuntimeLeaseExpiration)),
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///         VappTemplateLease = new Vcd.Inputs.OrgVappTemplateLeaseArgs
        ///         {
        ///             MaximumStorageLeaseInSec = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.MaximumStorageLeaseInSec)),
        ///             DeleteOnStorageLeaseExpiration = my_org.Apply(my_org =&gt; my_org.Apply(getOrgResult =&gt; getOrgResult.VappTemplateLeases[0]?.DeleteOnStorageLeaseExpiration)),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## vApp Lease
        /// 
        /// The `vapp_lease` section contains lease parameters for vApps created in the current organization, as defined below:
        /// 
        /// * `maximum_runtime_lease_in_sec` - How long vApps can run before they are automatically stopped (in seconds)
        /// * `power_off_on_runtime_lease_expiration` - When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires.
        /// * `maximum_storage_lease_in_sec` - How long stopped vApps are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
        /// 
        /// &lt;a id="vapp-template-lease"&gt;&lt;/a&gt;
        /// ## vApp Template Lease
        /// 
        /// The `vapp_template_lease` section contains lease parameters for vApp templates created in the current organization, as defined below:
        /// 
        /// * `maximum_storage_lease_in_sec` - How long vApp templates are available before being automatically cleaned up (in seconds)
        /// * `delete_on_storage_lease_expiration` - If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetOrgResult> Invoke(GetOrgInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgResult>("vcd:index/getOrg:getOrg", args ?? new GetOrgInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrgArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Org name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetOrgArgs()
        {
        }
        public static new GetOrgArgs Empty => new GetOrgArgs();
    }

    public sealed class GetOrgInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Org name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetOrgInvokeArgs()
        {
        }
        public static new GetOrgInvokeArgs Empty => new GetOrgInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrgResult
    {
        /// <summary>
        /// (*v3.14+*) Contains the account lockout properties of the read organization:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrgAccountLockoutResult> AccountLockouts;
        /// <summary>
        /// True if this organization is allowed to share catalogs.
        /// </summary>
        public readonly bool CanPublishCatalogs;
        /// <summary>
        /// (*v3.6+*) True if this organization is allowed to publish external catalogs.
        /// </summary>
        public readonly bool CanPublishExternalCatalogs;
        /// <summary>
        /// (*v3.6+*) True if this organization is allowed to subscribe to external catalogs.
        /// </summary>
        public readonly bool CanSubscribeExternalCatalogs;
        /// <summary>
        /// Specifies this organization's default for virtual machine boot delay after power on.
        /// </summary>
        public readonly int DelayAfterPowerOnSeconds;
        /// <summary>
        /// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization.
        /// </summary>
        public readonly int DeployedVmQuota;
        /// <summary>
        /// Org description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Org full name
        /// </summary>
        public readonly string FullName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// True if this organization is enabled (allows login and all other operations).
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// (*v3.11+*) List of catalogs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        public readonly ImmutableArray<string> ListOfCatalogs;
        /// <summary>
        /// (*v3.11+*) List of VDCs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        public readonly ImmutableArray<string> ListOfVdcs;
        /// <summary>
        /// (Deprecated; *v3.6+*) Use `metadata_entry` instead. Key value map of metadata assigned to this organization.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to the organization. See Metadata section for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrgMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        /// <summary>
        /// (*v3.11+*) Number of catalogs owned or shared, available to this organization.
        /// </summary>
        public readonly int NumberOfCatalogs;
        /// <summary>
        /// (*v3.11+*) Number of VDCs owned or shared, available to this organization.
        /// </summary>
        public readonly int NumberOfVdcs;
        /// <summary>
        /// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization.
        /// </summary>
        public readonly int StoredVmQuota;
        /// <summary>
        /// (*v2.7+*) Defines lease parameters for vApps created in this organization. See vApp Lease below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrgVappLeaseResult> VappLeases;
        /// <summary>
        /// (*v2.7+*) Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrgVappTemplateLeaseResult> VappTemplateLeases;

        [OutputConstructor]
        private GetOrgResult(
            ImmutableArray<Outputs.GetOrgAccountLockoutResult> accountLockouts,

            bool canPublishCatalogs,

            bool canPublishExternalCatalogs,

            bool canSubscribeExternalCatalogs,

            int delayAfterPowerOnSeconds,

            int deployedVmQuota,

            string description,

            string fullName,

            string id,

            bool isEnabled,

            ImmutableArray<string> listOfCatalogs,

            ImmutableArray<string> listOfVdcs,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetOrgMetadataEntryResult> metadataEntries,

            string name,

            int numberOfCatalogs,

            int numberOfVdcs,

            int storedVmQuota,

            ImmutableArray<Outputs.GetOrgVappLeaseResult> vappLeases,

            ImmutableArray<Outputs.GetOrgVappTemplateLeaseResult> vappTemplateLeases)
        {
            AccountLockouts = accountLockouts;
            CanPublishCatalogs = canPublishCatalogs;
            CanPublishExternalCatalogs = canPublishExternalCatalogs;
            CanSubscribeExternalCatalogs = canSubscribeExternalCatalogs;
            DelayAfterPowerOnSeconds = delayAfterPowerOnSeconds;
            DeployedVmQuota = deployedVmQuota;
            Description = description;
            FullName = fullName;
            Id = id;
            IsEnabled = isEnabled;
            ListOfCatalogs = listOfCatalogs;
            ListOfVdcs = listOfVdcs;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            NumberOfCatalogs = numberOfCatalogs;
            NumberOfVdcs = numberOfVdcs;
            StoredVmQuota = storedVmQuota;
            VappLeases = vappLeases;
            VappTemplateLeases = vappTemplateLeases;
        }
    }
}
