// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/catalogItem:CatalogItem")]
    public partial class CatalogItem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the catalog where to upload OVA file
        /// </summary>
        [Output("catalog")]
        public Output<string> Catalog { get; private set; } = null!;

        /// <summary>
        /// Use `metadata_entry` instead.  Key value map of metadata to assign to the Catalog Item
        /// 
        /// &gt; This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
        /// `metadata_entry` attribute assigns metadata to the **Catalog Item**. `catalog_item_metadata` is deprecated and should not be used.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// </summary>
        [Output("catalogItemMetadata")]
        public Output<ImmutableDictionary<string, string>> CatalogItemMetadata { get; private set; } = null!;

        /// <summary>
        /// Time stamp of when the item was created
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Description of item
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Key value map of metadata to assign to the associated vApp Template
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.CatalogItemMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// Item name in catalog
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Output("ovaPath")]
        public Output<string?> OvaPath { get; private set; } = null!;

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Output("ovfUrl")]
        public Output<string?> OvfUrl { get; private set; } = null!;

        /// <summary>
        /// Default false. Allows seeing upload progress. (See note below)
        /// </summary>
        [Output("showUploadProgress")]
        public Output<bool?> ShowUploadProgress { get; private set; } = null!;

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        /// </summary>
        [Output("uploadPieceSize")]
        public Output<int?> UploadPieceSize { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogItem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogItem(string name, CatalogItemArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/catalogItem:CatalogItem", name, args ?? new CatalogItemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogItem(string name, Input<string> id, CatalogItemState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/catalogItem:CatalogItem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogItem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogItem Get(string name, Input<string> id, CatalogItemState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogItem(name, id, state, options);
        }
    }

    public sealed class CatalogItemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the catalog where to upload OVA file
        /// </summary>
        [Input("catalog", required: true)]
        public Input<string> Catalog { get; set; } = null!;

        [Input("catalogItemMetadata")]
        private InputMap<string>? _catalogItemMetadata;

        /// <summary>
        /// Use `metadata_entry` instead.  Key value map of metadata to assign to the Catalog Item
        /// 
        /// &gt; This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
        /// `metadata_entry` attribute assigns metadata to the **Catalog Item**. `catalog_item_metadata` is deprecated and should not be used.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> CatalogItemMetadata
        {
            get => _catalogItemMetadata ?? (_catalogItemMetadata = new InputMap<string>());
            set => _catalogItemMetadata = value;
        }

        /// <summary>
        /// Description of item
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to the associated vApp Template
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogItemMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogItemMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogItemMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Item name in catalog
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Input("ovaPath")]
        public Input<string>? OvaPath { get; set; }

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Input("ovfUrl")]
        public Input<string>? OvfUrl { get; set; }

        /// <summary>
        /// Default false. Allows seeing upload progress. (See note below)
        /// </summary>
        [Input("showUploadProgress")]
        public Input<bool>? ShowUploadProgress { get; set; }

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        /// </summary>
        [Input("uploadPieceSize")]
        public Input<int>? UploadPieceSize { get; set; }

        public CatalogItemArgs()
        {
        }
        public static new CatalogItemArgs Empty => new CatalogItemArgs();
    }

    public sealed class CatalogItemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the catalog where to upload OVA file
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        [Input("catalogItemMetadata")]
        private InputMap<string>? _catalogItemMetadata;

        /// <summary>
        /// Use `metadata_entry` instead.  Key value map of metadata to assign to the Catalog Item
        /// 
        /// &gt; This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
        /// `metadata_entry` attribute assigns metadata to the **Catalog Item**. `catalog_item_metadata` is deprecated and should not be used.
        /// 
        /// &lt;a id="metadata"&gt;&lt;/a&gt;
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> CatalogItemMetadata
        {
            get => _catalogItemMetadata ?? (_catalogItemMetadata = new InputMap<string>());
            set => _catalogItemMetadata = value;
        }

        /// <summary>
        /// Time stamp of when the item was created
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Description of item
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Key value map of metadata to assign to the associated vApp Template
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogItemMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogItemMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogItemMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Item name in catalog
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Input("ovaPath")]
        public Input<string>? OvaPath { get; set; }

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Input("ovfUrl")]
        public Input<string>? OvfUrl { get; set; }

        /// <summary>
        /// Default false. Allows seeing upload progress. (See note below)
        /// </summary>
        [Input("showUploadProgress")]
        public Input<bool>? ShowUploadProgress { get; set; }

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
        /// </summary>
        [Input("uploadPieceSize")]
        public Input<int>? UploadPieceSize { get; set; }

        public CatalogItemState()
        {
        }
        public static new CatalogItemState Empty => new CatalogItemState();
    }
}
