// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkRouted
    {
        /// <summary>
        /// Provides a VMware Cloud Director Org VDC routed Network data source. This can be used to reference internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// &gt; **Note:** This data source supports only NSX-V backed Org VDC networks.
        /// Please use newer [`vcd.NetworkRoutedV2`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/network_routed_v2)
        /// data source which is compatible with NSX-T.
        /// </summary>
        public static Task<GetNetworkRoutedResult> InvokeAsync(GetNetworkRoutedArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkRoutedResult>("vcd:index/getNetworkRouted:getNetworkRouted", args ?? new GetNetworkRoutedArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC routed Network data source. This can be used to reference internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// &gt; **Note:** This data source supports only NSX-V backed Org VDC networks.
        /// Please use newer [`vcd.NetworkRoutedV2`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/network_routed_v2)
        /// data source which is compatible with NSX-T.
        /// </summary>
        public static Output<GetNetworkRoutedResult> Invoke(GetNetworkRoutedInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkRoutedResult>("vcd:index/getNetworkRouted:getNetworkRouted", args ?? new GetNetworkRoutedInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC routed Network data source. This can be used to reference internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// &gt; **Note:** This data source supports only NSX-V backed Org VDC networks.
        /// Please use newer [`vcd.NetworkRoutedV2`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/network_routed_v2)
        /// data source which is compatible with NSX-T.
        /// </summary>
        public static Output<GetNetworkRoutedResult> Invoke(GetNetworkRoutedInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkRoutedResult>("vcd:index/getNetworkRouted:getNetworkRouted", args ?? new GetNetworkRoutedInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkRoutedArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetNetworkRoutedFilterArgs? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNetworkRoutedArgs()
        {
        }
        public static new GetNetworkRoutedArgs Empty => new GetNetworkRoutedArgs();
    }

    public sealed class GetNetworkRoutedInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetNetworkRoutedFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNetworkRoutedInvokeArgs()
        {
        }
        public static new GetNetworkRoutedInvokeArgs Empty => new GetNetworkRoutedInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkRoutedResult
    {
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNetworkRoutedDhcpPoolResult> DhcpPools;
        public readonly string Dns1;
        public readonly string Dns2;
        public readonly string DnsSuffix;
        public readonly string EdgeGateway;
        public readonly Outputs.GetNetworkRoutedFilterResult? Filter;
        public readonly string Gateway;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InterfaceType;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly ImmutableArray<Outputs.GetNetworkRoutedMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string Netmask;
        public readonly string? Org;
        public readonly bool Shared;
        public readonly ImmutableArray<Outputs.GetNetworkRoutedStaticIpPoolResult> StaticIpPools;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNetworkRoutedResult(
            string description,

            ImmutableArray<Outputs.GetNetworkRoutedDhcpPoolResult> dhcpPools,

            string dns1,

            string dns2,

            string dnsSuffix,

            string edgeGateway,

            Outputs.GetNetworkRoutedFilterResult? filter,

            string gateway,

            string href,

            string id,

            string interfaceType,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetNetworkRoutedMetadataEntryResult> metadataEntries,

            string? name,

            string netmask,

            string? org,

            bool shared,

            ImmutableArray<Outputs.GetNetworkRoutedStaticIpPoolResult> staticIpPools,

            string? vdc)
        {
            Description = description;
            DhcpPools = dhcpPools;
            Dns1 = dns1;
            Dns2 = dns2;
            DnsSuffix = dnsSuffix;
            EdgeGateway = edgeGateway;
            Filter = filter;
            Gateway = gateway;
            Href = href;
            Id = id;
            InterfaceType = interfaceType;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Netmask = netmask;
            Org = org;
            Shared = shared;
            StaticIpPools = staticIpPools;
            Vdc = vdc;
        }
    }
}
