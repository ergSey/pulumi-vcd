// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/lbServerPool:LbServerPool")]
    public partial class LbServerPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        /// </summary>
        [Output("algorithm")]
        public Output<string> Algorithm { get; private set; } = null!;

        /// <summary>
        /// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        /// parameter has one option `headerName=&lt;name&gt;` while the `url` algorithm parameter has option `urlParam=&lt;url&gt;`.
        /// </summary>
        [Output("algorithmParameters")]
        public Output<string?> AlgorithmParameters { get; private set; } = null!;

        /// <summary>
        /// Server Pool description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the edge gateway on which the server pool is to be created
        /// </summary>
        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        /// <summary>
        /// When transparency is `false` (default) backend servers see the IP address of the
        /// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        /// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        /// the edge gateway.
        /// </summary>
        [Output("enableTransparency")]
        public Output<bool?> EnableTransparency { get; private set; } = null!;

        /// <summary>
        /// A block to define server pool members. Multiple can be used. See Member and 
        /// example for usage details.
        /// 
        /// 
        /// &lt;a id="member"&gt;&lt;/a&gt;
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.LbServerPoolMember>> Members { get; private set; } = null!;

        /// <summary>
        /// `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        /// </summary>
        [Output("monitorId")]
        public Output<string?> MonitorId { get; private set; } = null!;

        /// <summary>
        /// Server Pool name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a LbServerPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LbServerPool(string name, LbServerPoolArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/lbServerPool:LbServerPool", name, args ?? new LbServerPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LbServerPool(string name, Input<string> id, LbServerPoolState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/lbServerPool:LbServerPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LbServerPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LbServerPool Get(string name, Input<string> id, LbServerPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new LbServerPool(name, id, state, options);
        }
    }

    public sealed class LbServerPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        /// </summary>
        [Input("algorithm", required: true)]
        public Input<string> Algorithm { get; set; } = null!;

        /// <summary>
        /// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        /// parameter has one option `headerName=&lt;name&gt;` while the `url` algorithm parameter has option `urlParam=&lt;url&gt;`.
        /// </summary>
        [Input("algorithmParameters")]
        public Input<string>? AlgorithmParameters { get; set; }

        /// <summary>
        /// Server Pool description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the edge gateway on which the server pool is to be created
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// When transparency is `false` (default) backend servers see the IP address of the
        /// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        /// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        /// the edge gateway.
        /// </summary>
        [Input("enableTransparency")]
        public Input<bool>? EnableTransparency { get; set; }

        [Input("members")]
        private InputList<Inputs.LbServerPoolMemberArgs>? _members;

        /// <summary>
        /// A block to define server pool members. Multiple can be used. See Member and 
        /// example for usage details.
        /// 
        /// 
        /// &lt;a id="member"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<Inputs.LbServerPoolMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.LbServerPoolMemberArgs>());
            set => _members = value;
        }

        /// <summary>
        /// `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        /// </summary>
        [Input("monitorId")]
        public Input<string>? MonitorId { get; set; }

        /// <summary>
        /// Server Pool name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbServerPoolArgs()
        {
        }
        public static new LbServerPoolArgs Empty => new LbServerPoolArgs();
    }

    public sealed class LbServerPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
        /// parameter has one option `headerName=&lt;name&gt;` while the `url` algorithm parameter has option `urlParam=&lt;url&gt;`.
        /// </summary>
        [Input("algorithmParameters")]
        public Input<string>? AlgorithmParameters { get; set; }

        /// <summary>
        /// Server Pool description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the edge gateway on which the server pool is to be created
        /// </summary>
        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        /// <summary>
        /// When transparency is `false` (default) backend servers see the IP address of the
        /// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
        /// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
        /// the edge gateway.
        /// </summary>
        [Input("enableTransparency")]
        public Input<bool>? EnableTransparency { get; set; }

        [Input("members")]
        private InputList<Inputs.LbServerPoolMemberGetArgs>? _members;

        /// <summary>
        /// A block to define server pool members. Multiple can be used. See Member and 
        /// example for usage details.
        /// 
        /// 
        /// &lt;a id="member"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<Inputs.LbServerPoolMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.LbServerPoolMemberGetArgs>());
            set => _members = value;
        }

        /// <summary>
        /// `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
        /// </summary>
        [Input("monitorId")]
        public Input<string>? MonitorId { get; set; }

        /// <summary>
        /// Server Pool name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public LbServerPoolState()
        {
        }
        public static new LbServerPoolState Empty => new LbServerPoolState();
    }
}
