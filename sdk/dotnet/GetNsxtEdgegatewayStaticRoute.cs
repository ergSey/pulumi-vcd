// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtEdgegatewayStaticRoute
    {
        /// <summary>
        /// Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway Static Routes.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name Only)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "existing-static-route",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### By Name And Network CIDR )
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name_and_cidr = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "duplicate-name-sr",
        ///         NetworkCidr = "10.10.11.0/24",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtEdgegatewayStaticRouteResult> InvokeAsync(GetNsxtEdgegatewayStaticRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtEdgegatewayStaticRouteResult>("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", args ?? new GetNsxtEdgegatewayStaticRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway Static Routes.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name Only)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "existing-static-route",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### By Name And Network CIDR )
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name_and_cidr = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "duplicate-name-sr",
        ///         NetworkCidr = "10.10.11.0/24",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayStaticRouteResult> Invoke(GetNsxtEdgegatewayStaticRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayStaticRouteResult>("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", args ?? new GetNsxtEdgegatewayStaticRouteInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway Static Routes.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name Only)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "existing-static-route",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### By Name And Network CIDR )
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var by_name_and_cidr = Vcd.GetNsxtEdgegatewayStaticRoute.Invoke(new()
        ///     {
        ///         EdgeGatewayId = existing.Id,
        ///         Name = "duplicate-name-sr",
        ///         NetworkCidr = "10.10.11.0/24",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayStaticRouteResult> Invoke(GetNsxtEdgegatewayStaticRouteInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayStaticRouteResult>("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", args ?? new GetNsxtEdgegatewayStaticRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtEdgegatewayStaticRouteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// NSX-T Edge Gateway ID
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public string EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// Name of Static Route. **Note** names *can be duplicate* and one can use
        /// `network_cidr` to make filtering more precise
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Network CIDR for Static Route
        /// 
        /// &gt; It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
        /// data source will return an error as it expects to find only one entity. If this happens, one can
        /// make the filtering more precise by supplying `network_cidr` in addition to `name`.
        /// </summary>
        [Input("networkCidr")]
        public string? NetworkCidr { get; set; }

        [Input("org")]
        public string? Org { get; set; }

        public GetNsxtEdgegatewayStaticRouteArgs()
        {
        }
        public static new GetNsxtEdgegatewayStaticRouteArgs Empty => new GetNsxtEdgegatewayStaticRouteArgs();
    }

    public sealed class GetNsxtEdgegatewayStaticRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// NSX-T Edge Gateway ID
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// Name of Static Route. **Note** names *can be duplicate* and one can use
        /// `network_cidr` to make filtering more precise
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Network CIDR for Static Route
        /// 
        /// &gt; It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
        /// data source will return an error as it expects to find only one entity. If this happens, one can
        /// make the filtering more precise by supplying `network_cidr` in addition to `name`.
        /// </summary>
        [Input("networkCidr")]
        public Input<string>? NetworkCidr { get; set; }

        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetNsxtEdgegatewayStaticRouteInvokeArgs()
        {
        }
        public static new GetNsxtEdgegatewayStaticRouteInvokeArgs Empty => new GetNsxtEdgegatewayStaticRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtEdgegatewayStaticRouteResult
    {
        public readonly string Description;
        public readonly string EdgeGatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NetworkCidr;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewayStaticRouteNextHopResult> NextHops;
        public readonly string? Org;

        [OutputConstructor]
        private GetNsxtEdgegatewayStaticRouteResult(
            string description,

            string edgeGatewayId,

            string id,

            string name,

            string networkCidr,

            ImmutableArray<Outputs.GetNsxtEdgegatewayStaticRouteNextHopResult> nextHops,

            string? org)
        {
            Description = description;
            EdgeGatewayId = edgeGatewayId;
            Id = id;
            Name = name;
            NetworkCidr = networkCidr;
            NextHops = nextHops;
            Org = org;
        }
    }
}
