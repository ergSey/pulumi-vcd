// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/rde:Rde")]
    public partial class Rde : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        /// </summary>
        [Output("computedEntity")]
        public Output<string> ComputedEntity { get; private set; } = null!;

        /// <summary>
        /// It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
        /// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        /// </summary>
        [Output("entityInSync")]
        public Output<bool> EntityInSync { get; private set; } = null!;

        /// <summary>
        /// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        /// </summary>
        [Output("inputEntity")]
        public Output<string?> InputEntity { get; private set; } = null!;

        /// <summary>
        /// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        /// contents
        /// </summary>
        [Output("inputEntityUrl")]
        public Output<string?> InputEntityUrl { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.RdeMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// The name of the Runtime Defined Entity. It can be non-unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        /// </summary>
        [Output("ownerUserId")]
        public Output<string> OwnerUserId { get; private set; } = null!;

        /// <summary>
        /// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        /// updating to a **newer/lower** `version` of the **same** RDE Type.
        /// </summary>
        [Output("rdeTypeId")]
        public Output<string> RdeTypeId { get; private set; } = null!;

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        /// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        /// deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        /// </summary>
        [Output("resolve")]
        public Output<bool> Resolve { get; private set; } = null!;

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        /// </summary>
        [Output("resolveOnRemoval")]
        public Output<bool?> ResolveOnRemoval { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
        /// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
        /// otherwise it will be `RESOLUTION_ERROR`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Rde resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rde(string name, RdeArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/rde:Rde", name, args ?? new RdeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rde(string name, Input<string> id, RdeState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/rde:Rde", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rde resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rde Get(string name, Input<string> id, RdeState? state = null, CustomResourceOptions? options = null)
        {
            return new Rde(name, id, state, options);
        }
    }

    public sealed class RdeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        /// </summary>
        [Input("inputEntity")]
        public Input<string>? InputEntity { get; set; }

        /// <summary>
        /// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        /// contents
        /// </summary>
        [Input("inputEntityUrl")]
        public Input<string>? InputEntityUrl { get; set; }

        [Input("metadataEntries")]
        private InputList<Inputs.RdeMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.RdeMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.RdeMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// The name of the Runtime Defined Entity. It can be non-unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        /// updating to a **newer/lower** `version` of the **same** RDE Type.
        /// </summary>
        [Input("rdeTypeId", required: true)]
        public Input<string> RdeTypeId { get; set; } = null!;

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        /// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        /// deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        /// </summary>
        [Input("resolve", required: true)]
        public Input<bool> Resolve { get; set; } = null!;

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        /// </summary>
        [Input("resolveOnRemoval")]
        public Input<bool>? ResolveOnRemoval { get; set; }

        public RdeArgs()
        {
        }
        public static new RdeArgs Empty => new RdeArgs();
    }

    public sealed class RdeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
        /// </summary>
        [Input("computedEntity")]
        public Input<string>? ComputedEntity { get; set; }

        /// <summary>
        /// It's `true` when `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`,
        /// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
        /// </summary>
        [Input("entityInSync")]
        public Input<bool>? EntityInSync { get; set; }

        /// <summary>
        /// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `input_entity` or `input_entity_url` is required.
        /// </summary>
        [Input("inputEntity")]
        public Input<string>? InputEntity { get; set; }

        /// <summary>
        /// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
        /// contents
        /// </summary>
        [Input("inputEntityUrl")]
        public Input<string>? InputEntityUrl { get; set; }

        [Input("metadataEntries")]
        private InputList<Inputs.RdeMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.RdeMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.RdeMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// The name of the Runtime Defined Entity. It can be non-unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
        /// </summary>
        [Input("ownerUserId")]
        public Input<string>? OwnerUserId { get; set; }

        /// <summary>
        /// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
        /// updating to a **newer/lower** `version` of the **same** RDE Type.
        /// </summary>
        [Input("rdeTypeId")]
        public Input<string>? RdeTypeId { get; set; }

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
        /// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
        /// deleted until the input_entity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
        /// </summary>
        [Input("resolve")]
        public Input<bool>? Resolve { get; set; }

        /// <summary>
        /// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
        /// </summary>
        [Input("resolveOnRemoval")]
        public Input<bool>? ResolveOnRemoval { get; set; }

        /// <summary>
        /// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
        /// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
        /// otherwise it will be `RESOLUTION_ERROR`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public RdeState()
        {
        }
        public static new RdeState Empty => new RdeState();
    }
}
