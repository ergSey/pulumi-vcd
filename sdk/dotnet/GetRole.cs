// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetRole
    {
        /// <summary>
        /// Provides a VMware Cloud Director role data source. This can be used to read roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetRole.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// ```
        /// Sample output:
        /// 
        /// vapp-author = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:role:53256466-221f-3f1f-8cea-2fcfc7ab9ef7"
        ///   "name" = "vApp Author"
        ///   "org" = "datacloud"
        ///   "read_only" = true
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM metrics",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how roles and
        /// rights work together.
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("vcd:index/getRole:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director role data source. This can be used to read roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetRole.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// ```
        /// Sample output:
        /// 
        /// vapp-author = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:role:53256466-221f-3f1f-8cea-2fcfc7ab9ef7"
        ///   "name" = "vApp Author"
        ///   "org" = "datacloud"
        ///   "read_only" = true
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM metrics",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how roles and
        /// rights work together.
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("vcd:index/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director role data source. This can be used to read roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetRole.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// ```
        /// Sample output:
        /// 
        /// vapp-author = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:role:53256466-221f-3f1f-8cea-2fcfc7ab9ef7"
        ///   "name" = "vApp Author"
        ///   "org" = "datacloud"
        ///   "read_only" = true
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM metrics",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how roles and
        /// rights work together.
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("vcd:index/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        /// <summary>
        /// Key used for internationalization.
        /// </summary>
        public readonly string BundleKey;
        /// <summary>
        /// A description of the role
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Org;
        /// <summary>
        /// Whether this role is read-only
        /// </summary>
        public readonly bool ReadOnly;
        /// <summary>
        /// Set of rights assigned to this role
        /// </summary>
        public readonly ImmutableArray<string> Rights;

        [OutputConstructor]
        private GetRoleResult(
            string bundleKey,

            string description,

            string id,

            string name,

            string? org,

            bool readOnly,

            ImmutableArray<string> rights)
        {
            BundleKey = bundleKey;
            Description = description;
            Id = id;
            Name = name;
            Org = org;
            ReadOnly = readOnly;
            Rights = rights;
        }
    }
}
