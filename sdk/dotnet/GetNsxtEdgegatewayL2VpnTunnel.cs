// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtEdgegatewayL2VpnTunnel
    {
        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
        /// 
        /// ## Example Usage
        /// 
        /// ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var server_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var client_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "client-testing",
        ///     });
        /// 
        ///     var server_session = Vcd.GetNsxtEdgegatewayL2VpnTunnel.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = server_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///         Name = "server-session",
        ///     });
        /// 
        ///     var client_session = new Vcd.NsxtEdgegatewayL2VpnTunnel("client-session", new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = client_testing.Apply(client_testing =&gt; client_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id)),
        ///         SessionMode = "CLIENT",
        ///         Enabled = true,
        ///         LocalEndpointIp = "101.22.30.3",
        ///         RemoteEndpointIp = "1.2.2.3",
        ///         PeerCode = server_session.Apply(server_session =&gt; server_session.Apply(getNsxtEdgegatewayL2VpnTunnelResult =&gt; getNsxtEdgegatewayL2VpnTunnelResult.PeerCode)),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtEdgegatewayL2VpnTunnelResult> InvokeAsync(GetNsxtEdgegatewayL2VpnTunnelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtEdgegatewayL2VpnTunnelResult>("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", args ?? new GetNsxtEdgegatewayL2VpnTunnelArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
        /// 
        /// ## Example Usage
        /// 
        /// ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var server_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var client_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "client-testing",
        ///     });
        /// 
        ///     var server_session = Vcd.GetNsxtEdgegatewayL2VpnTunnel.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = server_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///         Name = "server-session",
        ///     });
        /// 
        ///     var client_session = new Vcd.NsxtEdgegatewayL2VpnTunnel("client-session", new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = client_testing.Apply(client_testing =&gt; client_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id)),
        ///         SessionMode = "CLIENT",
        ///         Enabled = true,
        ///         LocalEndpointIp = "101.22.30.3",
        ///         RemoteEndpointIp = "1.2.2.3",
        ///         PeerCode = server_session.Apply(server_session =&gt; server_session.Apply(getNsxtEdgegatewayL2VpnTunnelResult =&gt; getNsxtEdgegatewayL2VpnTunnelResult.PeerCode)),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayL2VpnTunnelResult> Invoke(GetNsxtEdgegatewayL2VpnTunnelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayL2VpnTunnelResult>("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", args ?? new GetNsxtEdgegatewayL2VpnTunnelInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
        /// 
        /// ## Example Usage
        /// 
        /// ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var server_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var client_testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "client-testing",
        ///     });
        /// 
        ///     var server_session = Vcd.GetNsxtEdgegatewayL2VpnTunnel.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = server_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///         Name = "server-session",
        ///     });
        /// 
        ///     var client_session = new Vcd.NsxtEdgegatewayL2VpnTunnel("client-session", new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = client_testing.Apply(client_testing =&gt; client_testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id)),
        ///         SessionMode = "CLIENT",
        ///         Enabled = true,
        ///         LocalEndpointIp = "101.22.30.3",
        ///         RemoteEndpointIp = "1.2.2.3",
        ///         PeerCode = server_session.Apply(server_session =&gt; server_session.Apply(getNsxtEdgegatewayL2VpnTunnelResult =&gt; getNsxtEdgegatewayL2VpnTunnelResult.PeerCode)),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayL2VpnTunnelResult> Invoke(GetNsxtEdgegatewayL2VpnTunnelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayL2VpnTunnelResult>("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", args ?? new GetNsxtEdgegatewayL2VpnTunnelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtEdgegatewayL2VpnTunnelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Edge Gateway (NSX-T only). 
        /// Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public string EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of the tunnel.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at 
        /// provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetNsxtEdgegatewayL2VpnTunnelArgs()
        {
        }
        public static new GetNsxtEdgegatewayL2VpnTunnelArgs Empty => new GetNsxtEdgegatewayL2VpnTunnelArgs();
    }

    public sealed class GetNsxtEdgegatewayL2VpnTunnelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Edge Gateway (NSX-T only). 
        /// Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of the tunnel.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at 
        /// provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetNsxtEdgegatewayL2VpnTunnelInvokeArgs()
        {
        }
        public static new GetNsxtEdgegatewayL2VpnTunnelInvokeArgs Empty => new GetNsxtEdgegatewayL2VpnTunnelInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtEdgegatewayL2VpnTunnelResult
    {
        public readonly string ConnectorInitiationMode;
        public readonly string Description;
        public readonly string EdgeGatewayId;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LocalEndpointIp;
        public readonly string Name;
        public readonly string? Org;
        public readonly string PeerCode;
        public readonly string PreSharedKey;
        public readonly string RemoteEndpointIp;
        public readonly string SessionMode;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewayL2VpnTunnelStretchedNetworkResult> StretchedNetworks;
        public readonly string TunnelInterface;

        [OutputConstructor]
        private GetNsxtEdgegatewayL2VpnTunnelResult(
            string connectorInitiationMode,

            string description,

            string edgeGatewayId,

            bool enabled,

            string id,

            string localEndpointIp,

            string name,

            string? org,

            string peerCode,

            string preSharedKey,

            string remoteEndpointIp,

            string sessionMode,

            ImmutableArray<Outputs.GetNsxtEdgegatewayL2VpnTunnelStretchedNetworkResult> stretchedNetworks,

            string tunnelInterface)
        {
            ConnectorInitiationMode = connectorInitiationMode;
            Description = description;
            EdgeGatewayId = edgeGatewayId;
            Enabled = enabled;
            Id = id;
            LocalEndpointIp = localEndpointIp;
            Name = name;
            Org = org;
            PeerCode = peerCode;
            PreSharedKey = preSharedKey;
            RemoteEndpointIp = remoteEndpointIp;
            SessionMode = sessionMode;
            StretchedNetworks = stretchedNetworks;
            TunnelInterface = tunnelInterface;
        }
    }
}
