// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVmSizingPolicy
    {
        /// <summary>
        /// Provides a VMware Cloud Director VM sizing policy data source. This can be
        /// used to read VM sizing policy.
        /// 
        /// Supported in provider *v3.0+* and requires VCD 10.0+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_policy_name = Vcd.GetVmSizingPolicy.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmSizingPolicyResult =&gt; getVmSizingPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVmSizingPolicyResult> InvokeAsync(GetVmSizingPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmSizingPolicyResult>("vcd:index/getVmSizingPolicy:getVmSizingPolicy", args ?? new GetVmSizingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM sizing policy data source. This can be
        /// used to read VM sizing policy.
        /// 
        /// Supported in provider *v3.0+* and requires VCD 10.0+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_policy_name = Vcd.GetVmSizingPolicy.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmSizingPolicyResult =&gt; getVmSizingPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmSizingPolicyResult> Invoke(GetVmSizingPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmSizingPolicyResult>("vcd:index/getVmSizingPolicy:getVmSizingPolicy", args ?? new GetVmSizingPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM sizing policy data source. This can be
        /// used to read VM sizing policy.
        /// 
        /// Supported in provider *v3.0+* and requires VCD 10.0+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tf_policy_name = Vcd.GetVmSizingPolicy.Invoke(new()
        ///     {
        ///         Name = "my-rule",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmSizingPolicyResult =&gt; getVmSizingPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmSizingPolicyResult> Invoke(GetVmSizingPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmSizingPolicyResult>("vcd:index/getVmSizingPolicy:getVmSizingPolicy", args ?? new GetVmSizingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmSizingPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name VM sizing policy
        /// 
        /// &gt; **Note:**
        /// Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
        /// To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
        /// 
        /// All arguments defined in [`vcd.VmSizingPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_sizing_policy#argument-reference) are supported.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("org")]
        public string? Org { get; set; }

        public GetVmSizingPolicyArgs()
        {
        }
        public static new GetVmSizingPolicyArgs Empty => new GetVmSizingPolicyArgs();
    }

    public sealed class GetVmSizingPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name VM sizing policy
        /// 
        /// &gt; **Note:**
        /// Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
        /// To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
        /// 
        /// All arguments defined in [`vcd.VmSizingPolicy`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vm_sizing_policy#argument-reference) are supported.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetVmSizingPolicyInvokeArgs()
        {
        }
        public static new GetVmSizingPolicyInvokeArgs Empty => new GetVmSizingPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmSizingPolicyResult
    {
        public readonly ImmutableArray<Outputs.GetVmSizingPolicyCpusResult> Cpus;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetVmSizingPolicyMemoryResult> Memories;
        public readonly string Name;
        public readonly string? Org;

        [OutputConstructor]
        private GetVmSizingPolicyResult(
            ImmutableArray<Outputs.GetVmSizingPolicyCpusResult> cpus,

            string description,

            string id,

            ImmutableArray<Outputs.GetVmSizingPolicyMemoryResult> memories,

            string name,

            string? org)
        {
            Cpus = cpus;
            Description = description;
            Id = id;
            Memories = memories;
            Name = name;
            Org = org;
        }
    }
}
