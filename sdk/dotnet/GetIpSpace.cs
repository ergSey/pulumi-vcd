// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetIpSpace
    {
        /// <summary>
        /// Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
        /// and private IP addresses by preventing the use of overlapping IP addresses across organizations and
        /// organization VDCs.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### Private IP Space Within An Org)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         Name = "private-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Public Or Shared IP Space)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         Name = "public-or-shared-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpSpaceResult> InvokeAsync(GetIpSpaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpSpaceResult>("vcd:index/getIpSpace:getIpSpace", args ?? new GetIpSpaceArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
        /// and private IP addresses by preventing the use of overlapping IP addresses across organizations and
        /// organization VDCs.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### Private IP Space Within An Org)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         Name = "private-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Public Or Shared IP Space)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         Name = "public-or-shared-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpSpaceResult> Invoke(GetIpSpaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpSpaceResult>("vcd:index/getIpSpace:getIpSpace", args ?? new GetIpSpaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
        /// and private IP addresses by preventing the use of overlapping IP addresses across organizations and
        /// organization VDCs.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### Private IP Space Within An Org)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         Name = "private-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Public Or Shared IP Space)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var space1 = Vcd.GetIpSpace.Invoke(new()
        ///     {
        ///         Name = "public-or-shared-ip-space",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpSpaceResult> Invoke(GetIpSpaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpSpaceResult>("vcd:index/getIpSpace:getIpSpace", args ?? new GetIpSpaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpSpaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of IP Space.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Org ID for Private IP Space.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        public GetIpSpaceArgs()
        {
        }
        public static new GetIpSpaceArgs Empty => new GetIpSpaceArgs();
    }

    public sealed class GetIpSpaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of IP Space.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Org ID for Private IP Space.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        public GetIpSpaceInvokeArgs()
        {
        }
        public static new GetIpSpaceInvokeArgs Empty => new GetIpSpaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpSpaceResult
    {
        public readonly bool DefaultFirewallRuleCreationEnabled;
        public readonly bool DefaultNoSnatRuleCreationEnabled;
        public readonly bool DefaultSnatRuleCreationEnabled;
        public readonly string Description;
        public readonly string ExternalScope;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InternalScopes;
        public readonly ImmutableArray<Outputs.GetIpSpaceIpPrefixResult> IpPrefixes;
        public readonly string IpRangeQuota;
        public readonly ImmutableArray<Outputs.GetIpSpaceIpRangeResult> IpRanges;
        public readonly string Name;
        public readonly string? OrgId;
        public readonly bool RouteAdvertisementEnabled;
        public readonly string Type;

        [OutputConstructor]
        private GetIpSpaceResult(
            bool defaultFirewallRuleCreationEnabled,

            bool defaultNoSnatRuleCreationEnabled,

            bool defaultSnatRuleCreationEnabled,

            string description,

            string externalScope,

            string id,

            ImmutableArray<string> internalScopes,

            ImmutableArray<Outputs.GetIpSpaceIpPrefixResult> ipPrefixes,

            string ipRangeQuota,

            ImmutableArray<Outputs.GetIpSpaceIpRangeResult> ipRanges,

            string name,

            string? orgId,

            bool routeAdvertisementEnabled,

            string type)
        {
            DefaultFirewallRuleCreationEnabled = defaultFirewallRuleCreationEnabled;
            DefaultNoSnatRuleCreationEnabled = defaultNoSnatRuleCreationEnabled;
            DefaultSnatRuleCreationEnabled = defaultSnatRuleCreationEnabled;
            Description = description;
            ExternalScope = externalScope;
            Id = id;
            InternalScopes = internalScopes;
            IpPrefixes = ipPrefixes;
            IpRangeQuota = ipRangeQuota;
            IpRanges = ipRanges;
            Name = name;
            OrgId = orgId;
            RouteAdvertisementEnabled = routeAdvertisementEnabled;
            Type = type;
        }
    }
}
