// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/dseSolutionPublish:DseSolutionPublish")]
    public partial class DseSolutionPublish : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required for `Confluent Platform` Data Solution if . One of
        /// `confluent_license_type` is set to `With License`.
        /// </summary>
        [Output("confluentLicenseKey")]
        public Output<string?> ConfluentLicenseKey { get; private set; } = null!;

        /// <summary>
        /// Required for `Confluent Platform` Data Solution. One of
        /// `With License`, `No License`.
        /// </summary>
        [Output("confluentLicenseType")]
        public Output<string?> ConfluentLicenseType { get; private set; } = null!;

        /// <summary>
        /// ID of Data Solution
        /// </summary>
        [Output("dataSolutionId")]
        public Output<string> DataSolutionId { get; private set; } = null!;

        /// <summary>
        /// Data Solution Org Configuration ID (only available for `Confluent Platform`
        /// which has additional licensing configuration)
        /// </summary>
        [Output("dsOrgConfigId")]
        public Output<string> DsOrgConfigId { get; private set; } = null!;

        /// <summary>
        /// Data Solutions Operator ACL ID
        /// </summary>
        [Output("dsoAclId")]
        public Output<string> DsoAclId { get; private set; } = null!;

        /// <summary>
        /// Organization ID
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// A set of Data Solution Instance Template ACL IDs
        /// </summary>
        [Output("templateAclIds")]
        public Output<ImmutableArray<string>> TemplateAclIds { get; private set; } = null!;


        /// <summary>
        /// Create a DseSolutionPublish resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DseSolutionPublish(string name, DseSolutionPublishArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/dseSolutionPublish:DseSolutionPublish", name, args ?? new DseSolutionPublishArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DseSolutionPublish(string name, Input<string> id, DseSolutionPublishState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/dseSolutionPublish:DseSolutionPublish", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DseSolutionPublish resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DseSolutionPublish Get(string name, Input<string> id, DseSolutionPublishState? state = null, CustomResourceOptions? options = null)
        {
            return new DseSolutionPublish(name, id, state, options);
        }
    }

    public sealed class DseSolutionPublishArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required for `Confluent Platform` Data Solution if . One of
        /// `confluent_license_type` is set to `With License`.
        /// </summary>
        [Input("confluentLicenseKey")]
        public Input<string>? ConfluentLicenseKey { get; set; }

        /// <summary>
        /// Required for `Confluent Platform` Data Solution. One of
        /// `With License`, `No License`.
        /// </summary>
        [Input("confluentLicenseType")]
        public Input<string>? ConfluentLicenseType { get; set; }

        /// <summary>
        /// ID of Data Solution
        /// </summary>
        [Input("dataSolutionId", required: true)]
        public Input<string> DataSolutionId { get; set; } = null!;

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public DseSolutionPublishArgs()
        {
        }
        public static new DseSolutionPublishArgs Empty => new DseSolutionPublishArgs();
    }

    public sealed class DseSolutionPublishState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required for `Confluent Platform` Data Solution if . One of
        /// `confluent_license_type` is set to `With License`.
        /// </summary>
        [Input("confluentLicenseKey")]
        public Input<string>? ConfluentLicenseKey { get; set; }

        /// <summary>
        /// Required for `Confluent Platform` Data Solution. One of
        /// `With License`, `No License`.
        /// </summary>
        [Input("confluentLicenseType")]
        public Input<string>? ConfluentLicenseType { get; set; }

        /// <summary>
        /// ID of Data Solution
        /// </summary>
        [Input("dataSolutionId")]
        public Input<string>? DataSolutionId { get; set; }

        /// <summary>
        /// Data Solution Org Configuration ID (only available for `Confluent Platform`
        /// which has additional licensing configuration)
        /// </summary>
        [Input("dsOrgConfigId")]
        public Input<string>? DsOrgConfigId { get; set; }

        /// <summary>
        /// Data Solutions Operator ACL ID
        /// </summary>
        [Input("dsoAclId")]
        public Input<string>? DsoAclId { get; set; }

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("templateAclIds")]
        private InputList<string>? _templateAclIds;

        /// <summary>
        /// A set of Data Solution Instance Template ACL IDs
        /// </summary>
        public InputList<string> TemplateAclIds
        {
            get => _templateAclIds ?? (_templateAclIds = new InputList<string>());
            set => _templateAclIds = value;
        }

        public DseSolutionPublishState()
        {
        }
        public static new DseSolutionPublishState Empty => new DseSolutionPublishState();
    }
}
