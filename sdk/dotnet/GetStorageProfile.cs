// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetStorageProfile
    {
        /// <summary>
        /// Provides a data source for VDC storage profile.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sp = Vcd.GetStorageProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "ssd-storage-profile",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## IOPS settings
        /// 
        /// (Supported from VCD *v10.2*)
        /// 
        /// * `iops_limiting_enabled` - True if this storage profile is IOPS-based placement enabled
        /// * `maximum_disk_iops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
        /// * `default_disk_iops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
        /// * `disk_iops_per_gb_max` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
        /// * `iops_limit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
        /// </summary>
        public static Task<GetStorageProfileResult> InvokeAsync(GetStorageProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageProfileResult>("vcd:index/getStorageProfile:getStorageProfile", args ?? new GetStorageProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for VDC storage profile.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sp = Vcd.GetStorageProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "ssd-storage-profile",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## IOPS settings
        /// 
        /// (Supported from VCD *v10.2*)
        /// 
        /// * `iops_limiting_enabled` - True if this storage profile is IOPS-based placement enabled
        /// * `maximum_disk_iops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
        /// * `default_disk_iops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
        /// * `disk_iops_per_gb_max` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
        /// * `iops_limit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
        /// </summary>
        public static Output<GetStorageProfileResult> Invoke(GetStorageProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageProfileResult>("vcd:index/getStorageProfile:getStorageProfile", args ?? new GetStorageProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for VDC storage profile.
        /// 
        /// Supported in provider *v3.1+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sp = Vcd.GetStorageProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "ssd-storage-profile",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## IOPS settings
        /// 
        /// (Supported from VCD *v10.2*)
        /// 
        /// * `iops_limiting_enabled` - True if this storage profile is IOPS-based placement enabled
        /// * `maximum_disk_iops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
        /// * `default_disk_iops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
        /// * `disk_iops_per_gb_max` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
        /// * `iops_limit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
        /// </summary>
        public static Output<GetStorageProfileResult> Invoke(GetStorageProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageProfileResult>("vcd:index/getStorageProfile:getStorageProfile", args ?? new GetStorageProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Storage profile name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetStorageProfileArgs()
        {
        }
        public static new GetStorageProfileArgs Empty => new GetStorageProfileArgs();
    }

    public sealed class GetStorageProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Storage profile name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetStorageProfileInvokeArgs()
        {
        }
        public static new GetStorageProfileInvokeArgs Empty => new GetStorageProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageProfileResult
    {
        /// <summary>
        /// True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// True if this storage profile is enabled for use in the VDC
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Total IOPS currently allocated to this storage profile
        /// </summary>
        public readonly int IopsAllocated;
        /// <summary>
        /// A block providing IOPS settings. See IOPS settings below for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStorageProfileIopsSettingResult> IopsSettings;
        /// <summary>
        /// Maximum number of storage bytes (scaled by 'units' field) allocated for this profile. `0` means `maximum possible`
        /// </summary>
        public readonly int Limit;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly ImmutableArray<Outputs.GetStorageProfileMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        public readonly string? Org;
        /// <summary>
        /// Scale used to define Limit
        /// </summary>
        public readonly string Units;
        /// <summary>
        /// Storage used, by the storage profile (in Megabytes)
        /// </summary>
        public readonly int UsedStorage;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetStorageProfileResult(
            bool @default,

            bool enabled,

            string id,

            int iopsAllocated,

            ImmutableArray<Outputs.GetStorageProfileIopsSettingResult> iopsSettings,

            int limit,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetStorageProfileMetadataEntryResult> metadataEntries,

            string name,

            string? org,

            string units,

            int usedStorage,

            string? vdc)
        {
            Default = @default;
            Enabled = enabled;
            Id = id;
            IopsAllocated = iopsAllocated;
            IopsSettings = iopsSettings;
            Limit = limit;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            Units = units;
            UsedStorage = usedStorage;
            Vdc = vdc;
        }
    }
}
