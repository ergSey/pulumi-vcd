// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtSegmentSecurityProfile
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-T Segment Security Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### Segment Security Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentSecurityProfile.Invoke(new()
        ///     {
        ///         Name = "segment-security-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtSegmentSecurityProfileResult> InvokeAsync(GetNsxtSegmentSecurityProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtSegmentSecurityProfileResult>("vcd:index/getNsxtSegmentSecurityProfile:getNsxtSegmentSecurityProfile", args ?? new GetNsxtSegmentSecurityProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T Segment Security Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### Segment Security Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentSecurityProfile.Invoke(new()
        ///     {
        ///         Name = "segment-security-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentSecurityProfileResult> Invoke(GetNsxtSegmentSecurityProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentSecurityProfileResult>("vcd:index/getNsxtSegmentSecurityProfile:getNsxtSegmentSecurityProfile", args ?? new GetNsxtSegmentSecurityProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T Segment Security Profile data source. This can be used to read NSX-T Segment Profile definitions.
        /// 
        /// Supported in provider *v3.11+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### Segment Security Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nsxt = Vcd.GetNsxtManager.Invoke(new()
        ///     {
        ///         Name = "nsxManager1",
        ///     });
        /// 
        ///     var first = Vcd.GetNsxtSegmentSecurityProfile.Invoke(new()
        ///     {
        ///         Name = "segment-security-profile-0",
        ///         NsxtManagerId = nsxt.Apply(getNsxtManagerResult =&gt; getNsxtManagerResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtSegmentSecurityProfileResult> Invoke(GetNsxtSegmentSecurityProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtSegmentSecurityProfileResult>("vcd:index/getNsxtSegmentSecurityProfile:getNsxtSegmentSecurityProfile", args ?? new GetNsxtSegmentSecurityProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtSegmentSecurityProfileArgs : global::Pulumi.InvokeArgs
    {
        [Input("bpduFilterAllowLists")]
        private List<string>? _bpduFilterAllowLists;

        /// <summary>
        /// Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
        /// </summary>
        public List<string> BpduFilterAllowLists
        {
            get => _bpduFilterAllowLists ?? (_bpduFilterAllowLists = new List<string>());
            set => _bpduFilterAllowLists = value;
        }

        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public string? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public string? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public string? VdcId { get; set; }

        public GetNsxtSegmentSecurityProfileArgs()
        {
        }
        public static new GetNsxtSegmentSecurityProfileArgs Empty => new GetNsxtSegmentSecurityProfileArgs();
    }

    public sealed class GetNsxtSegmentSecurityProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bpduFilterAllowLists")]
        private InputList<string>? _bpduFilterAllowLists;

        /// <summary>
        /// Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
        /// </summary>
        public InputList<string> BpduFilterAllowLists
        {
            get => _bpduFilterAllowLists ?? (_bpduFilterAllowLists = new InputList<string>());
            set => _bpduFilterAllowLists = value;
        }

        /// <summary>
        /// The name of Segment Profile
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Segment Profile search context. Use when searching by NSX-T manager
        /// </summary>
        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC group
        /// 
        /// &gt; Note: only one of `nsxt_manager_id`, `vdc_id`, `vdc_group_id` can be used
        /// </summary>
        [Input("vdcGroupId")]
        public Input<string>? VdcGroupId { get; set; }

        /// <summary>
        /// Segment Profile search context. Use when searching by VDC
        /// </summary>
        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        public GetNsxtSegmentSecurityProfileInvokeArgs()
        {
        }
        public static new GetNsxtSegmentSecurityProfileInvokeArgs Empty => new GetNsxtSegmentSecurityProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtSegmentSecurityProfileResult
    {
        /// <summary>
        /// Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering.
        /// </summary>
        public readonly ImmutableArray<string> BpduFilterAllowLists;
        /// <summary>
        /// Description of Segment Security Profile
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Defines whether BPDU filter is enabled.
        /// </summary>
        public readonly bool IsBpduFilterEnabled;
        /// <summary>
        /// Defines whether DHCP Client block IPv4 is enabled. This filters DHCP Client IPv4 traffic.
        /// </summary>
        public readonly bool IsDhcpV4ClientBlockEnabled;
        /// <summary>
        /// Defines whether DHCP Server block IPv4 is enabled. This filters DHCP Server IPv4 traffic.
        /// </summary>
        public readonly bool IsDhcpV4ServerBlockEnabled;
        /// <summary>
        /// Defines whether DHCP Client block IPv6 is enabled. This filters DHCP Client IPv6 traffic.
        /// </summary>
        public readonly bool IsDhcpV6ClientBlockEnabled;
        /// <summary>
        /// Defines whether DHCP Server block IPv6 is enabled. This filters DHCP Server IPv6 traffic.
        /// </summary>
        public readonly bool IsDhcpV6ServerBlockEnabled;
        /// <summary>
        /// Defines whether non IP traffic block is enabled. If true, it blocks all traffic except IP/(G)ARP/BPDU.
        /// </summary>
        public readonly bool IsNonIpTrafficBlockEnabled;
        /// <summary>
        /// Defines whether Router Advertisement Guard is enabled. This filters DHCP Server IPv6 traffic.
        /// </summary>
        public readonly bool IsRaGuardEnabled;
        /// <summary>
        /// Defines whether Rate Limiting is enabled.
        /// </summary>
        public readonly bool IsRateLimittingEnabled;
        public readonly string Name;
        public readonly string? NsxtManagerId;
        /// <summary>
        /// Incoming broadcast traffic limit in packets per second.
        /// </summary>
        public readonly int RxBroadcastLimit;
        /// <summary>
        /// Incoming multicast traffic limit in packets per second.
        /// </summary>
        public readonly int RxMulticastLimit;
        /// <summary>
        /// Outgoing broadcast traffic limit in packets per second.
        /// </summary>
        public readonly int TxBroadcastLimit;
        /// <summary>
        /// Outgoing multicast traffic limit in packets per second.
        /// </summary>
        public readonly int TxMulticastLimit;
        public readonly string? VdcGroupId;
        public readonly string? VdcId;

        [OutputConstructor]
        private GetNsxtSegmentSecurityProfileResult(
            ImmutableArray<string> bpduFilterAllowLists,

            string description,

            string id,

            bool isBpduFilterEnabled,

            bool isDhcpV4ClientBlockEnabled,

            bool isDhcpV4ServerBlockEnabled,

            bool isDhcpV6ClientBlockEnabled,

            bool isDhcpV6ServerBlockEnabled,

            bool isNonIpTrafficBlockEnabled,

            bool isRaGuardEnabled,

            bool isRateLimittingEnabled,

            string name,

            string? nsxtManagerId,

            int rxBroadcastLimit,

            int rxMulticastLimit,

            int txBroadcastLimit,

            int txMulticastLimit,

            string? vdcGroupId,

            string? vdcId)
        {
            BpduFilterAllowLists = bpduFilterAllowLists;
            Description = description;
            Id = id;
            IsBpduFilterEnabled = isBpduFilterEnabled;
            IsDhcpV4ClientBlockEnabled = isDhcpV4ClientBlockEnabled;
            IsDhcpV4ServerBlockEnabled = isDhcpV4ServerBlockEnabled;
            IsDhcpV6ClientBlockEnabled = isDhcpV6ClientBlockEnabled;
            IsDhcpV6ServerBlockEnabled = isDhcpV6ServerBlockEnabled;
            IsNonIpTrafficBlockEnabled = isNonIpTrafficBlockEnabled;
            IsRaGuardEnabled = isRaGuardEnabled;
            IsRateLimittingEnabled = isRateLimittingEnabled;
            Name = name;
            NsxtManagerId = nsxtManagerId;
            RxBroadcastLimit = rxBroadcastLimit;
            RxMulticastLimit = rxMulticastLimit;
            TxBroadcastLimit = txBroadcastLimit;
            TxMulticastLimit = txMulticastLimit;
            VdcGroupId = vdcGroupId;
            VdcId = vdcId;
        }
    }
}
