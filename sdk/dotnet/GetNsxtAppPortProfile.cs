// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtAppPortProfile
    {
        /// <summary>
        /// Supported in provider *v3.3+* and VCD 10.1+ with NSX-T backed VDCs.
        /// 
        /// Provides a data source to read NSX-T Application Port Profiles. Application Port Profiles include a
        /// combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT
        /// services on the Edge Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ### 1 (Find An Application Port Profile Defined By Provider)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "System",
        ///         ContextId = first.Id,
        ///         Name = "WINS",
        ///         Scope = "PROVIDER",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2 (Find An Application Port Profile Defined By Tenant In A VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var g1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         ContextId = g1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "SSH-custom",
        ///         Scope = "TENANT",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 3 (Find A System Defined Application Port Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         ContextId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Scope = "SYSTEM",
        ///         Name = "SSH",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtAppPortProfileResult> InvokeAsync(GetNsxtAppPortProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtAppPortProfileResult>("vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile", args ?? new GetNsxtAppPortProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.3+* and VCD 10.1+ with NSX-T backed VDCs.
        /// 
        /// Provides a data source to read NSX-T Application Port Profiles. Application Port Profiles include a
        /// combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT
        /// services on the Edge Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ### 1 (Find An Application Port Profile Defined By Provider)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "System",
        ///         ContextId = first.Id,
        ///         Name = "WINS",
        ///         Scope = "PROVIDER",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2 (Find An Application Port Profile Defined By Tenant In A VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var g1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         ContextId = g1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "SSH-custom",
        ///         Scope = "TENANT",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 3 (Find A System Defined Application Port Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         ContextId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Scope = "SYSTEM",
        ///         Name = "SSH",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAppPortProfileResult> Invoke(GetNsxtAppPortProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAppPortProfileResult>("vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile", args ?? new GetNsxtAppPortProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.3+* and VCD 10.1+ with NSX-T backed VDCs.
        /// 
        /// Provides a data source to read NSX-T Application Port Profiles. Application Port Profiles include a
        /// combination of a protocol and a port, or a group of ports, that is used for Firewall and NAT
        /// services on the Edge Gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ### 1 (Find An Application Port Profile Defined By Provider)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "System",
        ///         ContextId = first.Id,
        ///         Name = "WINS",
        ///         Scope = "PROVIDER",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2 (Find An Application Port Profile Defined By Tenant In A VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var g1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         ContextId = g1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "SSH-custom",
        ///         Scope = "TENANT",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 3 (Find A System Defined Application Port Profile)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "myOrg",
        ///         Name = "myVDC",
        ///     });
        /// 
        ///     var custom = Vcd.GetNsxtAppPortProfile.Invoke(new()
        ///     {
        ///         ContextId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Scope = "SYSTEM",
        ///         Name = "SSH",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAppPortProfileResult> Invoke(GetNsxtAppPortProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAppPortProfileResult>("vcd:index/getNsxtAppPortProfile:getNsxtAppPortProfile", args ?? new GetNsxtAppPortProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtAppPortProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated field `vdc`. Required if using more than one NSX-T Manager.
        /// </summary>
        [Input("contextId")]
        public string? ContextId { get; set; }

        /// <summary>
        /// Unique name of existing Security Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("nsxtManagerId")]
        public string? NsxtManagerId { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful
        /// when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// `SYSTEM`, `PROVIDER`, or `TENANT`.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// Deprecated and replaced by `context_id`
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtAppPortProfileArgs()
        {
        }
        public static new GetNsxtAppPortProfileArgs Empty => new GetNsxtAppPortProfileArgs();
    }

    public sealed class GetNsxtAppPortProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated field `vdc`. Required if using more than one NSX-T Manager.
        /// </summary>
        [Input("contextId")]
        public Input<string>? ContextId { get; set; }

        /// <summary>
        /// Unique name of existing Security Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nsxtManagerId")]
        public Input<string>? NsxtManagerId { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful
        /// when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// `SYSTEM`, `PROVIDER`, or `TENANT`.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// Deprecated and replaced by `context_id`
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtAppPortProfileInvokeArgs()
        {
        }
        public static new GetNsxtAppPortProfileInvokeArgs Empty => new GetNsxtAppPortProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtAppPortProfileResult
    {
        public readonly ImmutableArray<Outputs.GetNsxtAppPortProfileAppPortResult> AppPorts;
        public readonly string ContextId;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? NsxtManagerId;
        public readonly string? Org;
        public readonly string Scope;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNsxtAppPortProfileResult(
            ImmutableArray<Outputs.GetNsxtAppPortProfileAppPortResult> appPorts,

            string contextId,

            string description,

            string id,

            string name,

            string? nsxtManagerId,

            string? org,

            string scope,

            string? vdc)
        {
            AppPorts = appPorts;
            ContextId = contextId;
            Description = description;
            Id = id;
            Name = name;
            NsxtManagerId = nsxtManagerId;
            Org = org;
            Scope = scope;
            Vdc = vdc;
        }
    }
}
