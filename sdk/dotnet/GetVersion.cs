// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVersion
    {
        /// <summary>
        /// Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
        /// perform some optional checks with version constraints.
        /// 
        /// Supported in provider *v3.12+*. Requires System Administrator privileges.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
        ///     var eq1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
        ///     var gte1042 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&gt;= 10.4.2",
        ///         FailIfNotMatch = false,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is less than 10.5.0
        ///     var lt1050 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&lt; 10.5.0",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is 10.5.X
        ///     var is105 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "~&gt; 10.5",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is not 10.5.1
        ///     var not1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "!= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isGte1042"] = gte1042.Apply(getVersionResult =&gt; getVersionResult.MatchesCondition),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVersionResult> InvokeAsync(GetVersionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVersionResult>("vcd:index/getVersion:getVersion", args ?? new GetVersionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
        /// perform some optional checks with version constraints.
        /// 
        /// Supported in provider *v3.12+*. Requires System Administrator privileges.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
        ///     var eq1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
        ///     var gte1042 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&gt;= 10.4.2",
        ///         FailIfNotMatch = false,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is less than 10.5.0
        ///     var lt1050 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&lt; 10.5.0",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is 10.5.X
        ///     var is105 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "~&gt; 10.5",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is not 10.5.1
        ///     var not1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "!= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isGte1042"] = gte1042.Apply(getVersionResult =&gt; getVersionResult.MatchesCondition),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("vcd:index/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
        /// perform some optional checks with version constraints.
        /// 
        /// Supported in provider *v3.12+*. Requires System Administrator privileges.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
        ///     var eq1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
        ///     var gte1042 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&gt;= 10.4.2",
        ///         FailIfNotMatch = false,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is less than 10.5.0
        ///     var lt1050 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "&lt; 10.5.0",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is 10.5.X
        ///     var is105 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "~&gt; 10.5",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     // This data source will assert that the VCD version is not 10.5.1
        ///     var not1051 = Vcd.GetVersion.Invoke(new()
        ///     {
        ///         Condition = "!= 10.5.1",
        ///         FailIfNotMatch = true,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isGte1042"] = gte1042.Apply(getVersionResult =&gt; getVersionResult.MatchesCondition),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVersionResult> Invoke(GetVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVersionResult>("vcd:index/getVersion:getVersion", args ?? new GetVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A version constraint to check against the VCD version
        /// </summary>
        [Input("condition")]
        public string? Condition { get; set; }

        /// <summary>
        /// Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
        /// </summary>
        [Input("failIfNotMatch")]
        public bool? FailIfNotMatch { get; set; }

        public GetVersionArgs()
        {
        }
        public static new GetVersionArgs Empty => new GetVersionArgs();
    }

    public sealed class GetVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A version constraint to check against the VCD version
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
        /// </summary>
        [Input("failIfNotMatch")]
        public Input<bool>? FailIfNotMatch { get; set; }

        public GetVersionInvokeArgs()
        {
        }
        public static new GetVersionInvokeArgs Empty => new GetVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVersionResult
    {
        /// <summary>
        /// The maximum supported API version
        /// </summary>
        public readonly string ApiVersion;
        public readonly string? Condition;
        public readonly bool? FailIfNotMatch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// It is true if the VCD version matches the constraint set in `condition`
        /// </summary>
        public readonly bool MatchesCondition;
        /// <summary>
        /// The VCD version
        /// </summary>
        public readonly string VcdVersion;

        [OutputConstructor]
        private GetVersionResult(
            string apiVersion,

            string? condition,

            bool? failIfNotMatch,

            string id,

            bool matchesCondition,

            string vcdVersion)
        {
            ApiVersion = apiVersion;
            Condition = condition;
            FailIfNotMatch = failIfNotMatch;
            Id = id;
            MatchesCondition = matchesCondition;
            VcdVersion = vcdVersion;
        }
    }
}
