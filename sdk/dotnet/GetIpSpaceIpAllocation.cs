// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetIpSpaceIpAllocation
    {
        /// <summary>
        /// Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
        /// (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Space IP Prefix Allocation)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip_prefix = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "IP_PREFIX",
        ///         IpAddress = "192.168.1.1/24",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### IP Space Floating IP Allocation)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ip = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "FLOATING_IP",
        ///         IpAddress = "192.168.1.1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpSpaceIpAllocationResult> InvokeAsync(GetIpSpaceIpAllocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpSpaceIpAllocationResult>("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", args ?? new GetIpSpaceIpAllocationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
        /// (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Space IP Prefix Allocation)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip_prefix = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "IP_PREFIX",
        ///         IpAddress = "192.168.1.1/24",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### IP Space Floating IP Allocation)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ip = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "FLOATING_IP",
        ///         IpAddress = "192.168.1.1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpSpaceIpAllocationResult> Invoke(GetIpSpaceIpAllocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpSpaceIpAllocationResult>("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", args ?? new GetIpSpaceIpAllocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
        /// (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
        /// 
        /// IP Spaces require VCD 10.4.1+ with NSX-T.
        /// 
        /// ## Example Usage
        /// 
        /// ### IP Space IP Prefix Allocation)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ip_prefix = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "IP_PREFIX",
        ///         IpAddress = "192.168.1.1/24",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### IP Space Floating IP Allocation)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var floating_ip = Vcd.GetIpSpaceIpAllocation.Invoke(new()
        ///     {
        ///         OrgId = org1.Id,
        ///         IpSpaceId = space1.Id,
        ///         Type = "FLOATING_IP",
        ///         IpAddress = "192.168.1.1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpSpaceIpAllocationResult> Invoke(GetIpSpaceIpAllocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpSpaceIpAllocationResult>("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", args ?? new GetIpSpaceIpAllocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpSpaceIpAllocationArgs : global::Pulumi.InvokeArgs
    {
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
        /// </summary>
        [Input("ipAddress", required: true)]
        public string IpAddress { get; set; } = null!;

        /// <summary>
        /// Parent IP Space ID of IP Allocation
        /// </summary>
        [Input("ipSpaceId", required: true)]
        public string IpSpaceId { get; set; } = null!;

        /// <summary>
        /// Parent Org ID of IP Allocation
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        [Input("usageState")]
        public string? UsageState { get; set; }

        public GetIpSpaceIpAllocationArgs()
        {
        }
        public static new GetIpSpaceIpAllocationArgs Empty => new GetIpSpaceIpAllocationArgs();
    }

    public sealed class GetIpSpaceIpAllocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
        /// </summary>
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        /// <summary>
        /// Parent IP Space ID of IP Allocation
        /// </summary>
        [Input("ipSpaceId", required: true)]
        public Input<string> IpSpaceId { get; set; } = null!;

        /// <summary>
        /// Parent Org ID of IP Allocation
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("usageState")]
        public Input<string>? UsageState { get; set; }

        public GetIpSpaceIpAllocationInvokeArgs()
        {
        }
        public static new GetIpSpaceIpAllocationInvokeArgs Empty => new GetIpSpaceIpAllocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpSpaceIpAllocationResult
    {
        public readonly string AllocationDate;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ip;
        public readonly string IpAddress;
        public readonly string IpSpaceId;
        public readonly string OrgId;
        public readonly string PrefixLength;
        public readonly string Type;
        public readonly string UsageState;
        public readonly string UsedById;

        [OutputConstructor]
        private GetIpSpaceIpAllocationResult(
            string allocationDate,

            string description,

            string id,

            string ip,

            string ipAddress,

            string ipSpaceId,

            string orgId,

            string prefixLength,

            string type,

            string usageState,

            string usedById)
        {
            AllocationDate = allocationDate;
            Description = description;
            Id = id;
            Ip = ip;
            IpAddress = ipAddress;
            IpSpaceId = ipSpaceId;
            OrgId = orgId;
            PrefixLength = prefixLength;
            Type = type;
            UsageState = usageState;
            UsedById = usedById;
        }
    }
}
