// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns")]
    public partial class NsxtEdgegatewayDns : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set (up to 5) of conditional forwarder zones that allows to define 
        /// specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        /// </summary>
        [Output("conditionalForwarderZones")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewayDnsConditionalForwarderZone>> ConditionalForwarderZones { get; private set; } = null!;

        /// <summary>
        /// The default forwarder zone to use if 
        /// there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        /// </summary>
        [Output("defaultForwarderZone")]
        public Output<Outputs.NsxtEdgegatewayDnsDefaultForwarderZone> DefaultForwarderZone { get; private set; } = null!;

        /// <summary>
        /// NSX-T Edge Gateway ID.
        /// </summary>
        [Output("edgeGatewayId")]
        public Output<string> EdgeGatewayId { get; private set; } = null!;

        /// <summary>
        /// Status of the DNS forwarding service. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The IP on which the DNS forwarder listens. If the Edge Gateway 
        /// has a dedicated external network, this can be changed.
        /// </summary>
        [Output("listenerIp")]
        public Output<string> ListenerIp { get; private set; } = null!;

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located, required
        /// if not set in the provider section.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Is `true` if there exists a SNAT rule for the DNS forwarder. 
        /// If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
        /// is modified manually, this field will be set to `false`, otherwise `true`.
        /// </summary>
        [Output("snatRuleEnabled")]
        public Output<bool> SnatRuleEnabled { get; private set; } = null!;

        /// <summary>
        /// This argument only applies if the Edge Gateway 
        /// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        /// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        /// The specified IP can be allocated using [`vcd.IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        /// If not specified, the IP address will be computed and chosen by VCD.
        /// </summary>
        [Output("snatRuleIpAddress")]
        public Output<string> SnatRuleIpAddress { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtEdgegatewayDns resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtEdgegatewayDns(string name, NsxtEdgegatewayDnsArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns", name, args ?? new NsxtEdgegatewayDnsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtEdgegatewayDns(string name, Input<string> id, NsxtEdgegatewayDnsState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtEdgegatewayDns resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtEdgegatewayDns Get(string name, Input<string> id, NsxtEdgegatewayDnsState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtEdgegatewayDns(name, id, state, options);
        }
    }

    public sealed class NsxtEdgegatewayDnsArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditionalForwarderZones")]
        private InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneArgs>? _conditionalForwarderZones;

        /// <summary>
        /// A set (up to 5) of conditional forwarder zones that allows to define 
        /// specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneArgs> ConditionalForwarderZones
        {
            get => _conditionalForwarderZones ?? (_conditionalForwarderZones = new InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneArgs>());
            set => _conditionalForwarderZones = value;
        }

        /// <summary>
        /// The default forwarder zone to use if 
        /// there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        /// </summary>
        [Input("defaultForwarderZone", required: true)]
        public Input<Inputs.NsxtEdgegatewayDnsDefaultForwarderZoneArgs> DefaultForwarderZone { get; set; } = null!;

        /// <summary>
        /// NSX-T Edge Gateway ID.
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// Status of the DNS forwarding service. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP on which the DNS forwarder listens. If the Edge Gateway 
        /// has a dedicated external network, this can be changed.
        /// </summary>
        [Input("listenerIp")]
        public Input<string>? ListenerIp { get; set; }

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located, required
        /// if not set in the provider section.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// This argument only applies if the Edge Gateway 
        /// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        /// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        /// The specified IP can be allocated using [`vcd.IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        /// If not specified, the IP address will be computed and chosen by VCD.
        /// </summary>
        [Input("snatRuleIpAddress")]
        public Input<string>? SnatRuleIpAddress { get; set; }

        public NsxtEdgegatewayDnsArgs()
        {
        }
        public static new NsxtEdgegatewayDnsArgs Empty => new NsxtEdgegatewayDnsArgs();
    }

    public sealed class NsxtEdgegatewayDnsState : global::Pulumi.ResourceArgs
    {
        [Input("conditionalForwarderZones")]
        private InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneGetArgs>? _conditionalForwarderZones;

        /// <summary>
        /// A set (up to 5) of conditional forwarder zones that allows to define 
        /// specific forwarding routes based on the domain. See `conditional_forwarder_zone`
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneGetArgs> ConditionalForwarderZones
        {
            get => _conditionalForwarderZones ?? (_conditionalForwarderZones = new InputList<Inputs.NsxtEdgegatewayDnsConditionalForwarderZoneGetArgs>());
            set => _conditionalForwarderZones = value;
        }

        /// <summary>
        /// The default forwarder zone to use if 
        /// there’s no matching domain in the conditional forwarder zones. See `default_forwarder_zone`
        /// </summary>
        [Input("defaultForwarderZone")]
        public Input<Inputs.NsxtEdgegatewayDnsDefaultForwarderZoneGetArgs>? DefaultForwarderZone { get; set; }

        /// <summary>
        /// NSX-T Edge Gateway ID.
        /// </summary>
        [Input("edgeGatewayId")]
        public Input<string>? EdgeGatewayId { get; set; }

        /// <summary>
        /// Status of the DNS forwarding service. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP on which the DNS forwarder listens. If the Edge Gateway 
        /// has a dedicated external network, this can be changed.
        /// </summary>
        [Input("listenerIp")]
        public Input<string>? ListenerIp { get; set; }

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located, required
        /// if not set in the provider section.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Is `true` if there exists a SNAT rule for the DNS forwarder. 
        /// If the Edge Gateway is connected to a dedicated provider gateway and `listener_ip`
        /// is modified manually, this field will be set to `false`, otherwise `true`.
        /// </summary>
        [Input("snatRuleEnabled")]
        public Input<bool>? SnatRuleEnabled { get; set; }

        /// <summary>
        /// This argument only applies if the Edge Gateway 
        /// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
        /// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
        /// The specified IP can be allocated using [`vcd.IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
        /// If not specified, the IP address will be computed and chosen by VCD.
        /// </summary>
        [Input("snatRuleIpAddress")]
        public Input<string>? SnatRuleIpAddress { get; set; }

        public NsxtEdgegatewayDnsState()
        {
        }
        public static new NsxtEdgegatewayDnsState Empty => new NsxtEdgegatewayDnsState();
    }
}
