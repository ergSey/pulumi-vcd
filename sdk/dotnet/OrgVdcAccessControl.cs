// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    /// <summary>
    /// Provides a VMware Cloud Director Org VDC access control resource. This can be
    /// used to share VDC across users and/or groups.
    /// 
    /// Supported in provider *v3.7+*
    /// 
    /// &gt; **Note:** This resource requires either system or org administrator privileges.
    /// 
    /// ## Example Usage
    /// 
    /// ### Example Usage 1 (Giving VDC read only access to a couple of users)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vcd = Pulumi.Vcd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_user = Vcd.GetOrgUser.Invoke(new()
    ///     {
    ///         Org = "my-org",
    ///         Name = "my-user",
    ///     });
    /// 
    ///     var my_user2 = Vcd.GetOrgUser.Invoke(new()
    ///     {
    ///         Org = "my-org",
    ///         Name = "my-user2",
    ///     });
    /// 
    ///     var myAccessControl = new Vcd.OrgVdcAccessControl("my_access_control", new()
    ///     {
    ///         Org = "my-org",
    ///         Vdc = "my-vdc",
    ///         SharedWithEveryone = false,
    ///         SharedWiths = new[]
    ///         {
    ///             new Vcd.Inputs.OrgVdcAccessControlSharedWithArgs
    ///             {
    ///                 UserId = my_user.Apply(my_user =&gt; my_user.Apply(getOrgUserResult =&gt; getOrgUserResult.Id)),
    ///                 AccessLevel = "ReadOnly",
    ///             },
    ///             new Vcd.Inputs.OrgVdcAccessControlSharedWithArgs
    ///             {
    ///                 UserId = my_user2.Apply(my_user2 =&gt; my_user2.Apply(getOrgUserResult =&gt; getOrgUserResult.Id)),
    ///                 AccessLevel = "ReadOnly",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Usage 2 (Giving VDC read only access to everybody)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vcd = Pulumi.Vcd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myAccessControl = new Vcd.OrgVdcAccessControl("my_access_control", new()
    ///     {
    ///         Org = "my-org",
    ///         Vdc = "my-vdc",
    ///         SharedWithEveryone = true,
    ///         EveryoneAccessLevel = "ReadOnly",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Usage 3 (Creating a VDC and setting VDC read only access to everybody)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vcd = Pulumi.Vcd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myVdc = new Vcd.OrgVdc("my_vdc", new()
    ///     {
    ///         Name = "my-vdc",
    ///         Org = "my-org",
    ///         AllocationModel = "Flex",
    ///         NetworkPoolName = "my-network-pool",
    ///         ProviderVdcName = "my-provider-vdc",
    ///         ComputeCapacity = new Vcd.Inputs.OrgVdcComputeCapacityArgs
    ///         {
    ///             Cpu = new Vcd.Inputs.OrgVdcComputeCapacityCpuArgs
    ///             {
    ///                 Allocated = 1024,
    ///                 Limit = 1024,
    ///             },
    ///             Memory = new Vcd.Inputs.OrgVdcComputeCapacityMemoryArgs
    ///             {
    ///                 Allocated = 1024,
    ///                 Limit = 1024,
    ///             },
    ///         },
    ///         StorageProfiles = new[]
    ///         {
    ///             new Vcd.Inputs.OrgVdcStorageProfileArgs
    ///             {
    ///                 Name = "my-storage-profile",
    ///                 Enabled = true,
    ///                 Limit = 10240,
    ///                 Default = true,
    ///             },
    ///         },
    ///         Enabled = true,
    ///         EnableThinProvisioning = true,
    ///         EnableFastProvisioning = true,
    ///         DeleteForce = true,
    ///         DeleteRecursive = true,
    ///         Elasticity = false,
    ///         IncludeVmMemoryOverhead = false,
    ///     });
    /// 
    ///     var myAccessControl = new Vcd.OrgVdcAccessControl("my_access_control", new()
    ///     {
    ///         Org = "my-org",
    ///         Vdc = "my-vdc",
    ///         SharedWithEveryone = true,
    ///         EveryoneAccessLevel = "ReadOnly",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [VcdResourceType("vcd:index/orgVdcAccessControl:OrgVdcAccessControl")]
    public partial class OrgVdcAccessControl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        /// </summary>
        [Output("everyoneAccessLevel")]
        public Output<string?> EveryoneAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Whether the VDC is shared with everyone.
        /// </summary>
        [Output("sharedWithEveryone")]
        public Output<bool> SharedWithEveryone { get; private set; } = null!;

        /// <summary>
        /// one or more blocks defining a subject to which we are sharing.
        /// See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
        /// 
        /// &gt; **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
        /// 
        /// &lt;a id="shared_with"&gt;&lt;/a&gt;
        /// </summary>
        [Output("sharedWiths")]
        public Output<ImmutableArray<Outputs.OrgVdcAccessControlSharedWith>> SharedWiths { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a OrgVdcAccessControl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgVdcAccessControl(string name, OrgVdcAccessControlArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/orgVdcAccessControl:OrgVdcAccessControl", name, args ?? new OrgVdcAccessControlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgVdcAccessControl(string name, Input<string> id, OrgVdcAccessControlState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/orgVdcAccessControl:OrgVdcAccessControl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgVdcAccessControl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgVdcAccessControl Get(string name, Input<string> id, OrgVdcAccessControlState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgVdcAccessControl(name, id, state, options);
        }
    }

    public sealed class OrgVdcAccessControlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        /// </summary>
        [Input("everyoneAccessLevel")]
        public Input<string>? EveryoneAccessLevel { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Whether the VDC is shared with everyone.
        /// </summary>
        [Input("sharedWithEveryone", required: true)]
        public Input<bool> SharedWithEveryone { get; set; } = null!;

        [Input("sharedWiths")]
        private InputList<Inputs.OrgVdcAccessControlSharedWithArgs>? _sharedWiths;

        /// <summary>
        /// one or more blocks defining a subject to which we are sharing.
        /// See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
        /// 
        /// &gt; **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
        /// 
        /// &lt;a id="shared_with"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<Inputs.OrgVdcAccessControlSharedWithArgs> SharedWiths
        {
            get => _sharedWiths ?? (_sharedWiths = new InputList<Inputs.OrgVdcAccessControlSharedWithArgs>());
            set => _sharedWiths = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public OrgVdcAccessControlArgs()
        {
        }
        public static new OrgVdcAccessControlArgs Empty => new OrgVdcAccessControlArgs();
    }

    public sealed class OrgVdcAccessControlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when shared_with_everyone is set.
        /// </summary>
        [Input("everyoneAccessLevel")]
        public Input<string>? EveryoneAccessLevel { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Whether the VDC is shared with everyone.
        /// </summary>
        [Input("sharedWithEveryone")]
        public Input<bool>? SharedWithEveryone { get; set; }

        [Input("sharedWiths")]
        private InputList<Inputs.OrgVdcAccessControlSharedWithGetArgs>? _sharedWiths;

        /// <summary>
        /// one or more blocks defining a subject to which we are sharing.
        /// See shared_with below for detail. It cannot be used if `shared_with_everyone` is set.
        /// 
        /// &gt; **Note:** Users must either set sharing for everybody using `shared_with_everyone` and `everyone_access_level` arguments or per user/group access using `shared_with` argument. Setting both will make the resource to error.
        /// 
        /// &lt;a id="shared_with"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<Inputs.OrgVdcAccessControlSharedWithGetArgs> SharedWiths
        {
            get => _sharedWiths ?? (_sharedWiths = new InputList<Inputs.OrgVdcAccessControlSharedWithGetArgs>());
            set => _sharedWiths = value;
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public OrgVdcAccessControlState()
        {
        }
        public static new OrgVdcAccessControlState Empty => new OrgVdcAccessControlState();
    }
}
