// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/orgGroup:OrgGroup")]
    public partial class OrgGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of Organization group
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Identity provider type for this this group. One of `SAML`, `OAUTH` or
        /// `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        /// match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The set of user names that belong to this group. It's only populated if the users
        /// are created after the group (with `depends_on` the given group).
        /// </summary>
        [Output("userNames")]
        public Output<ImmutableArray<string>> UserNames { get; private set; } = null!;


        /// <summary>
        /// Create a OrgGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgGroup(string name, OrgGroupArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/orgGroup:OrgGroup", name, args ?? new OrgGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgGroup(string name, Input<string> id, OrgGroupState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/orgGroup:OrgGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgGroup Get(string name, Input<string> id, OrgGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgGroup(name, id, state, options);
        }
    }

    public sealed class OrgGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of Organization group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Identity provider type for this this group. One of `SAML`, `OAUTH` or
        /// `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        /// match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        /// </summary>
        [Input("providerType", required: true)]
        public Input<string> ProviderType { get; set; } = null!;

        /// <summary>
        /// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public OrgGroupArgs()
        {
        }
        public static new OrgGroupArgs Empty => new OrgGroupArgs();
    }

    public sealed class OrgGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of Organization group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Identity provider type for this this group. One of `SAML`, `OAUTH` or
        /// `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
        /// match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// The role of the group. Role names can be retrieved from the organization. Both built-in roles and
        /// custom built can be used. The roles normally available are:
        /// * `Organization Administrator`
        /// * `Catalog Author`
        /// * `vApp Author`
        /// * `vApp User`
        /// * `Console Access Only`
        /// * `Defer to Identity Provider`
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("userNames")]
        private InputList<string>? _userNames;

        /// <summary>
        /// The set of user names that belong to this group. It's only populated if the users
        /// are created after the group (with `depends_on` the given group).
        /// </summary>
        public InputList<string> UserNames
        {
            get => _userNames ?? (_userNames = new InputList<string>());
            set => _userNames = value;
        }

        public OrgGroupState()
        {
        }
        public static new OrgGroupState Empty => new OrgGroupState();
    }
}
