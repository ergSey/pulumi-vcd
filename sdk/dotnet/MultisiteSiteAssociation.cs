// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/multisiteSiteAssociation:MultisiteSiteAssociation")]
    public partial class MultisiteSiteAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URL of the associated site
        /// </summary>
        [Output("associatedSiteHref")]
        public Output<string> AssociatedSiteHref { get; private set; } = null!;

        /// <summary>
        /// ID of the remote site associated with the current one.
        /// </summary>
        [Output("associatedSiteId")]
        public Output<string> AssociatedSiteId { get; private set; } = null!;

        /// <summary>
        /// The name of the associated site.
        /// </summary>
        [Output("associatedSiteName")]
        public Output<string> AssociatedSiteName { get; private set; } = null!;

        /// <summary>
        /// Data produced from another site, needed to associate to this site from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Output("associationData")]
        public Output<string?> AssociationData { get; private set; } = null!;

        /// <summary>
        /// Name of the file containing the data used to associate to this site from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `vcd.getMultisiteSiteData`.
        /// </summary>
        [Output("associationDataFile")]
        public Output<string?> AssociationDataFile { get; private set; } = null!;

        /// <summary>
        /// How many minutes we wait for the association to be complete. (0 = no check) 
        /// This property is only used during update, and should not be used until both sides of the association have been completed.
        /// </summary>
        [Output("connectionTimeoutMins")]
        public Output<int?> ConnectionTimeoutMins { get; private set; } = null!;

        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a MultisiteSiteAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MultisiteSiteAssociation(string name, MultisiteSiteAssociationArgs? args = null, CustomResourceOptions? options = null)
            : base("vcd:index/multisiteSiteAssociation:MultisiteSiteAssociation", name, args ?? new MultisiteSiteAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MultisiteSiteAssociation(string name, Input<string> id, MultisiteSiteAssociationState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/multisiteSiteAssociation:MultisiteSiteAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MultisiteSiteAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MultisiteSiteAssociation Get(string name, Input<string> id, MultisiteSiteAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new MultisiteSiteAssociation(name, id, state, options);
        }
    }

    public sealed class MultisiteSiteAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data produced from another site, needed to associate to this site from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Input("associationData")]
        public Input<string>? AssociationData { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate to this site from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `vcd.getMultisiteSiteData`.
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        /// <summary>
        /// How many minutes we wait for the association to be complete. (0 = no check) 
        /// This property is only used during update, and should not be used until both sides of the association have been completed.
        /// </summary>
        [Input("connectionTimeoutMins")]
        public Input<int>? ConnectionTimeoutMins { get; set; }

        public MultisiteSiteAssociationArgs()
        {
        }
        public static new MultisiteSiteAssociationArgs Empty => new MultisiteSiteAssociationArgs();
    }

    public sealed class MultisiteSiteAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL of the associated site
        /// </summary>
        [Input("associatedSiteHref")]
        public Input<string>? AssociatedSiteHref { get; set; }

        /// <summary>
        /// ID of the remote site associated with the current one.
        /// </summary>
        [Input("associatedSiteId")]
        public Input<string>? AssociatedSiteId { get; set; }

        /// <summary>
        /// The name of the associated site.
        /// </summary>
        [Input("associatedSiteName")]
        public Input<string>? AssociatedSiteName { get; set; }

        /// <summary>
        /// Data produced from another site, needed to associate to this site from another one.
        /// (Used instead of `associated_data_file`)
        /// </summary>
        [Input("associationData")]
        public Input<string>? AssociationData { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate to this site from another one.
        /// (Used instead of `associated_data`). This file can be created (by the other site administrator) using the data source `vcd.getMultisiteSiteData`.
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        /// <summary>
        /// How many minutes we wait for the association to be complete. (0 = no check) 
        /// This property is only used during update, and should not be used until both sides of the association have been completed.
        /// </summary>
        [Input("connectionTimeoutMins")]
        public Input<int>? ConnectionTimeoutMins { get; set; }

        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public MultisiteSiteAssociationState()
        {
        }
        public static new MultisiteSiteAssociationState Empty => new MultisiteSiteAssociationState();
    }
}
