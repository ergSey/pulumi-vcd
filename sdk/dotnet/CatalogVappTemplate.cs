// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/catalogVappTemplate:CatalogVappTemplate")]
    public partial class CatalogVappTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A configuration block to create template from existing
        /// vApp (Standalone VM or vApp)
        /// </summary>
        [Output("captureVapp")]
        public Output<Outputs.CatalogVappTemplateCaptureVapp?> CaptureVapp { get; private set; } = null!;

        /// <summary>
        /// ID of the Catalog where to upload the OVA file
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// Catalog Item ID
        /// </summary>
        [Output("catalogItemId")]
        public Output<string> CatalogItemId { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the vApp Template was created
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        /// </summary>
        [Output("inheritedMetadata")]
        public Output<ImmutableDictionary<string, string>> InheritedMetadata { get; private set; } = null!;

        /// <summary>
        /// The information about the vApp Template lease. It includes the field below. When this section is
        /// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        /// </summary>
        [Output("lease")]
        public Output<Outputs.CatalogVappTemplateLease> Lease { get; private set; } = null!;

        /// <summary>
        /// Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.CatalogVappTemplateMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// vApp Template name in Catalog
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Output("ovaPath")]
        public Output<string?> OvaPath { get; private set; } = null!;

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Output("ovfUrl")]
        public Output<string?> OvfUrl { get; private set; } = null!;

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        /// </summary>
        [Output("uploadPieceSize")]
        public Output<int?> UploadPieceSize { get; private set; } = null!;

        /// <summary>
        /// The VDC ID to which this vApp Template belongs
        /// </summary>
        [Output("vdcId")]
        public Output<string> VdcId { get; private set; } = null!;

        /// <summary>
        /// Set of VM names within the vApp template
        /// </summary>
        [Output("vmNames")]
        public Output<ImmutableArray<string>> VmNames { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogVappTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogVappTemplate(string name, CatalogVappTemplateArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/catalogVappTemplate:CatalogVappTemplate", name, args ?? new CatalogVappTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogVappTemplate(string name, Input<string> id, CatalogVappTemplateState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/catalogVappTemplate:CatalogVappTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogVappTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogVappTemplate Get(string name, Input<string> id, CatalogVappTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogVappTemplate(name, id, state, options);
        }
    }

    public sealed class CatalogVappTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A configuration block to create template from existing
        /// vApp (Standalone VM or vApp)
        /// </summary>
        [Input("captureVapp")]
        public Input<Inputs.CatalogVappTemplateCaptureVappArgs>? CaptureVapp { get; set; }

        /// <summary>
        /// ID of the Catalog where to upload the OVA file
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The information about the vApp Template lease. It includes the field below. When this section is
        /// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        /// </summary>
        [Input("lease")]
        public Input<Inputs.CatalogVappTemplateLeaseArgs>? Lease { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogVappTemplateMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogVappTemplateMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogVappTemplateMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// vApp Template name in Catalog
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Input("ovaPath")]
        public Input<string>? OvaPath { get; set; }

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Input("ovfUrl")]
        public Input<string>? OvfUrl { get; set; }

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        /// </summary>
        [Input("uploadPieceSize")]
        public Input<int>? UploadPieceSize { get; set; }

        public CatalogVappTemplateArgs()
        {
        }
        public static new CatalogVappTemplateArgs Empty => new CatalogVappTemplateArgs();
    }

    public sealed class CatalogVappTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A configuration block to create template from existing
        /// vApp (Standalone VM or vApp)
        /// </summary>
        [Input("captureVapp")]
        public Input<Inputs.CatalogVappTemplateCaptureVappGetArgs>? CaptureVapp { get; set; }

        /// <summary>
        /// ID of the Catalog where to upload the OVA file
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Catalog Item ID
        /// </summary>
        [Input("catalogItemId")]
        public Input<string>? CatalogItemId { get; set; }

        /// <summary>
        /// Timestamp of when the vApp Template was created
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("inheritedMetadata")]
        private InputMap<string>? _inheritedMetadata;

        /// <summary>
        /// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
        /// </summary>
        public InputMap<string> InheritedMetadata
        {
            get => _inheritedMetadata ?? (_inheritedMetadata = new InputMap<string>());
            set => _inheritedMetadata = value;
        }

        /// <summary>
        /// The information about the vApp Template lease. It includes the field below. When this section is
        /// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
        /// </summary>
        [Input("lease")]
        public Input<Inputs.CatalogVappTemplateLeaseGetArgs>? Lease { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key/value map of metadata to assign to the associated vApp Template
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.CatalogVappTemplateMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.CatalogVappTemplateMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.CatalogVappTemplateMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// vApp Template name in Catalog
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Absolute or relative path to file to upload
        /// </summary>
        [Input("ovaPath")]
        public Input<string>? OvaPath { get; set; }

        /// <summary>
        /// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
        /// </summary>
        [Input("ovfUrl")]
        public Input<string>? OvfUrl { get; set; }

        /// <summary>
        /// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
        /// </summary>
        [Input("uploadPieceSize")]
        public Input<int>? UploadPieceSize { get; set; }

        /// <summary>
        /// The VDC ID to which this vApp Template belongs
        /// </summary>
        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        [Input("vmNames")]
        private InputList<string>? _vmNames;

        /// <summary>
        /// Set of VM names within the vApp template
        /// </summary>
        public InputList<string> VmNames
        {
            get => _vmNames ?? (_vmNames = new InputList<string>());
            set => _vmNames = value;
        }

        public CatalogVappTemplateState()
        {
        }
        public static new CatalogVappTemplateState Empty => new CatalogVappTemplateState();
    }
}
