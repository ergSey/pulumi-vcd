// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetMultisiteSiteAssociation
    {
        /// <summary>
        /// Provides a data source to read a VMware Cloud Director site association information.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving a site association using the associated site ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociatedSiteId = "urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving a site association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociationDataFile = "remote-site.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Task<GetMultisiteSiteAssociationResult> InvokeAsync(GetMultisiteSiteAssociationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultisiteSiteAssociationResult>("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", args ?? new GetMultisiteSiteAssociationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director site association information.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving a site association using the associated site ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociatedSiteId = "urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving a site association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociationDataFile = "remote-site.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteSiteAssociationResult> Invoke(GetMultisiteSiteAssociationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteSiteAssociationResult>("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", args ?? new GetMultisiteSiteAssociationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director site association information.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving a site association using the associated site ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociatedSiteId = "urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving a site association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var site1_site2 = Vcd.GetMultisiteSiteAssociation.Invoke(new()
        ///     {
        ///         AssociationDataFile = "remote-site.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteSiteAssociationResult> Invoke(GetMultisiteSiteAssociationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteSiteAssociationResult>("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", args ?? new GetMultisiteSiteAssociationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultisiteSiteAssociationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the remote site associated with the current one. (Used in alternative to
        /// `associated_data_file`)
        /// </summary>
        [Input("associatedSiteId")]
        public string? AssociatedSiteId { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate this site to another one.
        /// (Used when `associated_site_id` is not known)
        /// </summary>
        [Input("associationDataFile")]
        public string? AssociationDataFile { get; set; }

        public GetMultisiteSiteAssociationArgs()
        {
        }
        public static new GetMultisiteSiteAssociationArgs Empty => new GetMultisiteSiteAssociationArgs();
    }

    public sealed class GetMultisiteSiteAssociationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the remote site associated with the current one. (Used in alternative to
        /// `associated_data_file`)
        /// </summary>
        [Input("associatedSiteId")]
        public Input<string>? AssociatedSiteId { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate this site to another one.
        /// (Used when `associated_site_id` is not known)
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        public GetMultisiteSiteAssociationInvokeArgs()
        {
        }
        public static new GetMultisiteSiteAssociationInvokeArgs Empty => new GetMultisiteSiteAssociationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultisiteSiteAssociationResult
    {
        /// <summary>
        /// The URL of the associated site.
        /// </summary>
        public readonly string AssociatedSiteHref;
        public readonly string? AssociatedSiteId;
        /// <summary>
        /// The name of the associated site.
        /// </summary>
        public readonly string AssociatedSiteName;
        public readonly string? AssociationDataFile;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetMultisiteSiteAssociationResult(
            string associatedSiteHref,

            string? associatedSiteId,

            string associatedSiteName,

            string? associationDataFile,

            string id,

            string status)
        {
            AssociatedSiteHref = associatedSiteHref;
            AssociatedSiteId = associatedSiteId;
            AssociatedSiteName = associatedSiteName;
            AssociationDataFile = associationDataFile;
            Id = id;
            Status = status;
        }
    }
}
