// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/externalNetworkV2:ExternalNetworkV2")]
    public partial class ExternalNetworkV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An Org ID that this network should be
        /// dedicated to. Only applicable when `use_ip_spaces=true`
        /// </summary>
        [Output("dedicatedOrgId")]
        public Output<string> DedicatedOrgId { get; private set; } = null!;

        /// <summary>
        /// Network friendly description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// One or more IP scopes for the network. See IP Scope below for details.
        /// </summary>
        [Output("ipScopes")]
        public Output<ImmutableArray<Outputs.ExternalNetworkV2IpScope>> IpScopes { get; private set; } = null!;

        /// <summary>
        /// A unique name for the network
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure intentions for
        /// NAT and Firewall rule configuration:
        /// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        /// default behavior.
        /// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        /// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        /// Edge gateways.
        /// </summary>
        [Output("natAndFirewallServiceIntention")]
        public Output<string> NatAndFirewallServiceIntention { get; private set; } = null!;

        /// <summary>
        /// NSX-T network definition. See NSX-T Network below for details.
        /// </summary>
        [Output("nsxtNetwork")]
        public Output<Outputs.ExternalNetworkV2NsxtNetwork?> NsxtNetwork { get; private set; } = null!;

        /// <summary>
        /// Configure intentions for
        /// Org VDC network Route Advertisement:
        /// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        /// configured to be advertised. This is the default behavior.
        /// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        /// advertised by default but can be configured to be advertised after creation.
        /// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        /// associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        /// individual network level later, if necessary.
        /// 
        /// &lt;a id="ipscope"&gt;&lt;/a&gt;
        /// </summary>
        [Output("routeAdvertisementIntention")]
        public Output<string> RouteAdvertisementIntention { get; private set; } = null!;

        /// <summary>
        /// Defines if the network uses IP Spaces. Do
        /// not specify `ip_scope` when using IP Spaces. (default `false`)
        /// </summary>
        [Output("useIpSpaces")]
        public Output<bool?> UseIpSpaces { get; private set; } = null!;

        /// <summary>
        /// One or more blocks of vSphere Network..
        /// </summary>
        [Output("vsphereNetworks")]
        public Output<ImmutableArray<Outputs.ExternalNetworkV2VsphereNetwork>> VsphereNetworks { get; private set; } = null!;


        /// <summary>
        /// Create a ExternalNetworkV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExternalNetworkV2(string name, ExternalNetworkV2Args? args = null, CustomResourceOptions? options = null)
            : base("vcd:index/externalNetworkV2:ExternalNetworkV2", name, args ?? new ExternalNetworkV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ExternalNetworkV2(string name, Input<string> id, ExternalNetworkV2State? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/externalNetworkV2:ExternalNetworkV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExternalNetworkV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExternalNetworkV2 Get(string name, Input<string> id, ExternalNetworkV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ExternalNetworkV2(name, id, state, options);
        }
    }

    public sealed class ExternalNetworkV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An Org ID that this network should be
        /// dedicated to. Only applicable when `use_ip_spaces=true`
        /// </summary>
        [Input("dedicatedOrgId")]
        public Input<string>? DedicatedOrgId { get; set; }

        /// <summary>
        /// Network friendly description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ipScopes")]
        private InputList<Inputs.ExternalNetworkV2IpScopeArgs>? _ipScopes;

        /// <summary>
        /// One or more IP scopes for the network. See IP Scope below for details.
        /// </summary>
        public InputList<Inputs.ExternalNetworkV2IpScopeArgs> IpScopes
        {
            get => _ipScopes ?? (_ipScopes = new InputList<Inputs.ExternalNetworkV2IpScopeArgs>());
            set => _ipScopes = value;
        }

        /// <summary>
        /// A unique name for the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configure intentions for
        /// NAT and Firewall rule configuration:
        /// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        /// default behavior.
        /// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        /// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        /// Edge gateways.
        /// </summary>
        [Input("natAndFirewallServiceIntention")]
        public Input<string>? NatAndFirewallServiceIntention { get; set; }

        /// <summary>
        /// NSX-T network definition. See NSX-T Network below for details.
        /// </summary>
        [Input("nsxtNetwork")]
        public Input<Inputs.ExternalNetworkV2NsxtNetworkArgs>? NsxtNetwork { get; set; }

        /// <summary>
        /// Configure intentions for
        /// Org VDC network Route Advertisement:
        /// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        /// configured to be advertised. This is the default behavior.
        /// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        /// advertised by default but can be configured to be advertised after creation.
        /// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        /// associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        /// individual network level later, if necessary.
        /// 
        /// &lt;a id="ipscope"&gt;&lt;/a&gt;
        /// </summary>
        [Input("routeAdvertisementIntention")]
        public Input<string>? RouteAdvertisementIntention { get; set; }

        /// <summary>
        /// Defines if the network uses IP Spaces. Do
        /// not specify `ip_scope` when using IP Spaces. (default `false`)
        /// </summary>
        [Input("useIpSpaces")]
        public Input<bool>? UseIpSpaces { get; set; }

        [Input("vsphereNetworks")]
        private InputList<Inputs.ExternalNetworkV2VsphereNetworkArgs>? _vsphereNetworks;

        /// <summary>
        /// One or more blocks of vSphere Network..
        /// </summary>
        public InputList<Inputs.ExternalNetworkV2VsphereNetworkArgs> VsphereNetworks
        {
            get => _vsphereNetworks ?? (_vsphereNetworks = new InputList<Inputs.ExternalNetworkV2VsphereNetworkArgs>());
            set => _vsphereNetworks = value;
        }

        public ExternalNetworkV2Args()
        {
        }
        public static new ExternalNetworkV2Args Empty => new ExternalNetworkV2Args();
    }

    public sealed class ExternalNetworkV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An Org ID that this network should be
        /// dedicated to. Only applicable when `use_ip_spaces=true`
        /// </summary>
        [Input("dedicatedOrgId")]
        public Input<string>? DedicatedOrgId { get; set; }

        /// <summary>
        /// Network friendly description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ipScopes")]
        private InputList<Inputs.ExternalNetworkV2IpScopeGetArgs>? _ipScopes;

        /// <summary>
        /// One or more IP scopes for the network. See IP Scope below for details.
        /// </summary>
        public InputList<Inputs.ExternalNetworkV2IpScopeGetArgs> IpScopes
        {
            get => _ipScopes ?? (_ipScopes = new InputList<Inputs.ExternalNetworkV2IpScopeGetArgs>());
            set => _ipScopes = value;
        }

        /// <summary>
        /// A unique name for the network
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configure intentions for
        /// NAT and Firewall rule configuration:
        /// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
        /// default behavior.
        /// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
        /// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
        /// Edge gateways.
        /// </summary>
        [Input("natAndFirewallServiceIntention")]
        public Input<string>? NatAndFirewallServiceIntention { get; set; }

        /// <summary>
        /// NSX-T network definition. See NSX-T Network below for details.
        /// </summary>
        [Input("nsxtNetwork")]
        public Input<Inputs.ExternalNetworkV2NsxtNetworkGetArgs>? NsxtNetwork { get; set; }

        /// <summary>
        /// Configure intentions for
        /// Org VDC network Route Advertisement:
        /// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
        /// configured to be advertised. This is the default behavior.
        /// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
        /// Uplink will be advertised by default. This can be changed on an individual network level later,
        /// if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
        /// advertised by default but can be configured to be advertised after creation.
        /// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
        /// associated with IP Space Uplinks, will be advertised by default. This can be changed on an
        /// individual network level later, if necessary.
        /// 
        /// &lt;a id="ipscope"&gt;&lt;/a&gt;
        /// </summary>
        [Input("routeAdvertisementIntention")]
        public Input<string>? RouteAdvertisementIntention { get; set; }

        /// <summary>
        /// Defines if the network uses IP Spaces. Do
        /// not specify `ip_scope` when using IP Spaces. (default `false`)
        /// </summary>
        [Input("useIpSpaces")]
        public Input<bool>? UseIpSpaces { get; set; }

        [Input("vsphereNetworks")]
        private InputList<Inputs.ExternalNetworkV2VsphereNetworkGetArgs>? _vsphereNetworks;

        /// <summary>
        /// One or more blocks of vSphere Network..
        /// </summary>
        public InputList<Inputs.ExternalNetworkV2VsphereNetworkGetArgs> VsphereNetworks
        {
            get => _vsphereNetworks ?? (_vsphereNetworks = new InputList<Inputs.ExternalNetworkV2VsphereNetworkGetArgs>());
            set => _vsphereNetworks = value;
        }

        public ExternalNetworkV2State()
        {
        }
        public static new ExternalNetworkV2State Empty => new ExternalNetworkV2State();
    }
}
