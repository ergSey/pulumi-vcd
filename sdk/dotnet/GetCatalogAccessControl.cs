// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetCatalogAccessControl
    {
        /// <summary>
        /// Provides a data source to read Access Control details from a Catalog in VMware Cloud Director.
        /// 
        /// &gt; **Note:** Access control reads run in tenant context, meaning that, even if the user is a system administrator,
        /// in every request it uses headers items that define the tenant context as restricted to the organization to which the Catalog belongs.
        /// 
        /// Supported in provider *v3.14+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var catalog = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Name = "my-catalog",
        ///     });
        /// 
        ///     var ac = Vcd.GetCatalogAccessControl.Invoke(new()
        ///     {
        ///         CatalogId = catalog.Apply(getCatalogResult =&gt; getCatalogResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["sharedWith"] = ac.Apply(getCatalogAccessControlResult =&gt; getCatalogAccessControlResult.SharedWiths),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCatalogAccessControlResult> InvokeAsync(GetCatalogAccessControlArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogAccessControlResult>("vcd:index/getCatalogAccessControl:getCatalogAccessControl", args ?? new GetCatalogAccessControlArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read Access Control details from a Catalog in VMware Cloud Director.
        /// 
        /// &gt; **Note:** Access control reads run in tenant context, meaning that, even if the user is a system administrator,
        /// in every request it uses headers items that define the tenant context as restricted to the organization to which the Catalog belongs.
        /// 
        /// Supported in provider *v3.14+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var catalog = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Name = "my-catalog",
        ///     });
        /// 
        ///     var ac = Vcd.GetCatalogAccessControl.Invoke(new()
        ///     {
        ///         CatalogId = catalog.Apply(getCatalogResult =&gt; getCatalogResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["sharedWith"] = ac.Apply(getCatalogAccessControlResult =&gt; getCatalogAccessControlResult.SharedWiths),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogAccessControlResult> Invoke(GetCatalogAccessControlInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogAccessControlResult>("vcd:index/getCatalogAccessControl:getCatalogAccessControl", args ?? new GetCatalogAccessControlInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read Access Control details from a Catalog in VMware Cloud Director.
        /// 
        /// &gt; **Note:** Access control reads run in tenant context, meaning that, even if the user is a system administrator,
        /// in every request it uses headers items that define the tenant context as restricted to the organization to which the Catalog belongs.
        /// 
        /// Supported in provider *v3.14+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var catalog = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Name = "my-catalog",
        ///     });
        /// 
        ///     var ac = Vcd.GetCatalogAccessControl.Invoke(new()
        ///     {
        ///         CatalogId = catalog.Apply(getCatalogResult =&gt; getCatalogResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["sharedWith"] = ac.Apply(getCatalogAccessControlResult =&gt; getCatalogAccessControlResult.SharedWiths),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogAccessControlResult> Invoke(GetCatalogAccessControlInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogAccessControlResult>("vcd:index/getCatalogAccessControl:getCatalogAccessControl", args ?? new GetCatalogAccessControlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogAccessControlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the Catalog.
        /// </summary>
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the Catalog belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetCatalogAccessControlArgs()
        {
        }
        public static new GetCatalogAccessControlArgs Empty => new GetCatalogAccessControlArgs();
    }

    public sealed class GetCatalogAccessControlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the Catalog.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the Catalog belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetCatalogAccessControlInvokeArgs()
        {
        }
        public static new GetCatalogAccessControlInvokeArgs Empty => new GetCatalogAccessControlInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogAccessControlResult
    {
        public readonly string CatalogId;
        public readonly string EveryoneAccessLevel;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Org;
        public readonly bool ReadOnlySharedWithAllOrgs;
        public readonly bool SharedWithEveryone;
        public readonly ImmutableArray<Outputs.GetCatalogAccessControlSharedWithResult> SharedWiths;

        [OutputConstructor]
        private GetCatalogAccessControlResult(
            string catalogId,

            string everyoneAccessLevel,

            string id,

            string? org,

            bool readOnlySharedWithAllOrgs,

            bool sharedWithEveryone,

            ImmutableArray<Outputs.GetCatalogAccessControlSharedWithResult> sharedWiths)
        {
            CatalogId = catalogId;
            EveryoneAccessLevel = everyoneAccessLevel;
            Id = id;
            Org = org;
            ReadOnlySharedWithAllOrgs = readOnlySharedWithAllOrgs;
            SharedWithEveryone = sharedWithEveryone;
            SharedWiths = sharedWiths;
        }
    }
}
