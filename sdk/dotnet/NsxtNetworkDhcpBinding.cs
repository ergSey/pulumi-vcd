// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding")]
    public partial class NsxtNetworkDhcpBinding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One of `IPV4` or `IPV6`
        /// </summary>
        [Output("bindingType")]
        public Output<string> BindingType { get; private set; } = null!;

        /// <summary>
        /// Description of DHCP binding
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Additional configuration for IPv4 specific options. See IPv4 block
        /// </summary>
        [Output("dhcpV4Config")]
        public Output<Outputs.NsxtNetworkDhcpBindingDhcpV4Config?> DhcpV4Config { get; private set; } = null!;

        /// <summary>
        /// Additional configuration for IPv6 specific options. See IPv6 block
        /// 
        /// &lt;a id="ipv4-block"&gt;&lt;/a&gt;
        /// </summary>
        [Output("dhcpV6Config")]
        public Output<Outputs.NsxtNetworkDhcpBindingDhcpV6Config?> DhcpV6Config { get; private set; } = null!;

        /// <summary>
        /// A list of DNS servers. Maximum 2 can be specified
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// IP address used for binding
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Lease time in seconds. Minimum `3600` seconds
        /// </summary>
        [Output("leaseTime")]
        public Output<int> LeaseTime { get; private set; } = null!;

        /// <summary>
        /// MAC address used for binding
        /// </summary>
        [Output("macAddress")]
        public Output<string> MacAddress { get; private set; } = null!;

        /// <summary>
        /// Name of DHCP binding
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization. Optional if defined at provider level
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// The ID of an Org VDC network. **Note**  (`.id` field) of
        /// `vcd.NetworkIsolatedV2`, `vcd.NetworkRoutedV2` or `vcd.NsxtNetworkDhcp` can be referenced
        /// here. It is more convenient to use reference to `vcd.NsxtNetworkDhcp` ID because it makes sure
        /// that DHCP is enabled before configuring pools
        /// </summary>
        [Output("orgNetworkId")]
        public Output<string> OrgNetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtNetworkDhcpBinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtNetworkDhcpBinding(string name, NsxtNetworkDhcpBindingArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding", name, args ?? new NsxtNetworkDhcpBindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtNetworkDhcpBinding(string name, Input<string> id, NsxtNetworkDhcpBindingState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtNetworkDhcpBinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtNetworkDhcpBinding Get(string name, Input<string> id, NsxtNetworkDhcpBindingState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtNetworkDhcpBinding(name, id, state, options);
        }
    }

    public sealed class NsxtNetworkDhcpBindingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// One of `IPV4` or `IPV6`
        /// </summary>
        [Input("bindingType", required: true)]
        public Input<string> BindingType { get; set; } = null!;

        /// <summary>
        /// Description of DHCP binding
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Additional configuration for IPv4 specific options. See IPv4 block
        /// </summary>
        [Input("dhcpV4Config")]
        public Input<Inputs.NsxtNetworkDhcpBindingDhcpV4ConfigArgs>? DhcpV4Config { get; set; }

        /// <summary>
        /// Additional configuration for IPv6 specific options. See IPv6 block
        /// 
        /// &lt;a id="ipv4-block"&gt;&lt;/a&gt;
        /// </summary>
        [Input("dhcpV6Config")]
        public Input<Inputs.NsxtNetworkDhcpBindingDhcpV6ConfigArgs>? DhcpV6Config { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of DNS servers. Maximum 2 can be specified
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// IP address used for binding
        /// </summary>
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        /// <summary>
        /// Lease time in seconds. Minimum `3600` seconds
        /// </summary>
        [Input("leaseTime", required: true)]
        public Input<int> LeaseTime { get; set; } = null!;

        /// <summary>
        /// MAC address used for binding
        /// </summary>
        [Input("macAddress", required: true)]
        public Input<string> MacAddress { get; set; } = null!;

        /// <summary>
        /// Name of DHCP binding
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of an Org VDC network. **Note**  (`.id` field) of
        /// `vcd.NetworkIsolatedV2`, `vcd.NetworkRoutedV2` or `vcd.NsxtNetworkDhcp` can be referenced
        /// here. It is more convenient to use reference to `vcd.NsxtNetworkDhcp` ID because it makes sure
        /// that DHCP is enabled before configuring pools
        /// </summary>
        [Input("orgNetworkId", required: true)]
        public Input<string> OrgNetworkId { get; set; } = null!;

        public NsxtNetworkDhcpBindingArgs()
        {
        }
        public static new NsxtNetworkDhcpBindingArgs Empty => new NsxtNetworkDhcpBindingArgs();
    }

    public sealed class NsxtNetworkDhcpBindingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// One of `IPV4` or `IPV6`
        /// </summary>
        [Input("bindingType")]
        public Input<string>? BindingType { get; set; }

        /// <summary>
        /// Description of DHCP binding
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Additional configuration for IPv4 specific options. See IPv4 block
        /// </summary>
        [Input("dhcpV4Config")]
        public Input<Inputs.NsxtNetworkDhcpBindingDhcpV4ConfigGetArgs>? DhcpV4Config { get; set; }

        /// <summary>
        /// Additional configuration for IPv6 specific options. See IPv6 block
        /// 
        /// &lt;a id="ipv4-block"&gt;&lt;/a&gt;
        /// </summary>
        [Input("dhcpV6Config")]
        public Input<Inputs.NsxtNetworkDhcpBindingDhcpV6ConfigGetArgs>? DhcpV6Config { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of DNS servers. Maximum 2 can be specified
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// IP address used for binding
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Lease time in seconds. Minimum `3600` seconds
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// MAC address used for binding
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Name of DHCP binding
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of an Org VDC network. **Note**  (`.id` field) of
        /// `vcd.NetworkIsolatedV2`, `vcd.NetworkRoutedV2` or `vcd.NsxtNetworkDhcp` can be referenced
        /// here. It is more convenient to use reference to `vcd.NsxtNetworkDhcp` ID because it makes sure
        /// that DHCP is enabled before configuring pools
        /// </summary>
        [Input("orgNetworkId")]
        public Input<string>? OrgNetworkId { get; set; }

        public NsxtNetworkDhcpBindingState()
        {
        }
        public static new NsxtNetworkDhcpBindingState Empty => new NsxtNetworkDhcpBindingState();
    }
}
