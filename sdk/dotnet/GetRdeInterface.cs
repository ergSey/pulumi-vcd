// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetRdeInterface
    {
        /// <summary>
        /// Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myInterface = Vcd.GetRdeInterface.Invoke(new()
        ///     {
        ///         Vendor = "bigcorp",
        ///         Nss = "tech",
        ///         Version = "1.2.3",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["interfaceName"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Name),
        ///         ["interfaceId"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetRdeInterfaceResult> InvokeAsync(GetRdeInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRdeInterfaceResult>("vcd:index/getRdeInterface:getRdeInterface", args ?? new GetRdeInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myInterface = Vcd.GetRdeInterface.Invoke(new()
        ///     {
        ///         Vendor = "bigcorp",
        ///         Nss = "tech",
        ///         Version = "1.2.3",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["interfaceName"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Name),
        ///         ["interfaceId"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRdeInterfaceResult> Invoke(GetRdeInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRdeInterfaceResult>("vcd:index/getRdeInterface:getRdeInterface", args ?? new GetRdeInterfaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.
        /// 
        /// Supported in provider *v3.9+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myInterface = Vcd.GetRdeInterface.Invoke(new()
        ///     {
        ///         Vendor = "bigcorp",
        ///         Nss = "tech",
        ///         Version = "1.2.3",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["interfaceName"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Name),
        ///         ["interfaceId"] = myInterface.Apply(getRdeInterfaceResult =&gt; getRdeInterfaceResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetRdeInterfaceResult> Invoke(GetRdeInterfaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRdeInterfaceResult>("vcd:index/getRdeInterface:getRdeInterface", args ?? new GetRdeInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRdeInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique namespace associated with the RDE Interface.
        /// </summary>
        [Input("nss", required: true)]
        public string Nss { get; set; } = null!;

        /// <summary>
        /// The vendor of the RDE Interface.
        /// </summary>
        [Input("vendor", required: true)]
        public string Vendor { get; set; } = null!;

        /// <summary>
        /// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        /// </summary>
        [Input("version", required: true)]
        public string Version { get; set; } = null!;

        public GetRdeInterfaceArgs()
        {
        }
        public static new GetRdeInterfaceArgs Empty => new GetRdeInterfaceArgs();
    }

    public sealed class GetRdeInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique namespace associated with the RDE Interface.
        /// </summary>
        [Input("nss", required: true)]
        public Input<string> Nss { get; set; } = null!;

        /// <summary>
        /// The vendor of the RDE Interface.
        /// </summary>
        [Input("vendor", required: true)]
        public Input<string> Vendor { get; set; } = null!;

        /// <summary>
        /// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public GetRdeInterfaceInvokeArgs()
        {
        }
        public static new GetRdeInterfaceInvokeArgs Empty => new GetRdeInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetRdeInterfaceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string Nss;
        public readonly bool Readonly;
        public readonly string Vendor;
        public readonly string Version;

        [OutputConstructor]
        private GetRdeInterfaceResult(
            string id,

            string name,

            string nss,

            bool @readonly,

            string vendor,

            string version)
        {
            Id = id;
            Name = name;
            Nss = nss;
            Readonly = @readonly;
            Vendor = vendor;
            Version = version;
        }
    }
}
