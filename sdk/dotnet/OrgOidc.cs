// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/orgOidc:OrgOidc")]
    public partial class OrgOidc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The endpoint to use for access tokens.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Output("accessTokenEndpoint")]
        public Output<string> AccessTokenEndpoint { get; private set; } = null!;

        /// <summary>
        /// A single configuration block that specifies the claim mappings to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the claims given by `wellknown_endpoint`. The supported claims are:
        /// </summary>
        [Output("claimsMapping")]
        public Output<Outputs.OrgOidcClaimsMapping> ClaimsMapping { get; private set; } = null!;

        /// <summary>
        /// Client ID to use with the OIDC provider
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// Client Secret to use with the OIDC provider
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The issuer ID for the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Output("issuerId")]
        public Output<string> IssuerId { get; private set; } = null!;

        /// <summary>
        /// Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        /// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        /// Maximum value is `24`
        /// </summary>
        [Output("keyExpireDurationHours")]
        public Output<int?> KeyExpireDurationHours { get; private set; } = null!;

        /// <summary>
        /// Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        /// If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        /// </summary>
        [Output("keyRefreshEndpoint")]
        public Output<string> KeyRefreshEndpoint { get; private set; } = null!;

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        /// </summary>
        [Output("keyRefreshPeriodHours")]
        public Output<int?> KeyRefreshPeriodHours { get; private set; } = null!;

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        /// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        /// </summary>
        [Output("keyRefreshStrategy")]
        public Output<string?> KeyRefreshStrategy { get; private set; } = null!;

        /// <summary>
        /// One or more configuration blocks that specify the keys to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the keys given by `wellknown_endpoint`. Each key requires the following:
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.OrgOidcKey>> Keys { get; private set; } = null!;

        /// <summary>
        /// The maximum clock skew is the maximum allowable time difference between the client and server.
        /// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        /// </summary>
        [Output("maxClockSkewSeconds")]
        public Output<int?> MaxClockSkewSeconds { get; private set; } = null!;

        /// <summary>
        /// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        /// resource `vcd.OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        /// The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        /// VMware Cloud Director can fetch and consume claims from both sources
        /// </summary>
        [Output("preferIdToken")]
        public Output<bool?> PreferIdToken { get; private set; } = null!;

        /// <summary>
        /// The client configuration redirect URI used to create a client application registration with an identity provider
        /// that complies with the OpenID Connect standard
        /// </summary>
        [Output("redirectUri")]
        public Output<string> RedirectUri { get; private set; } = null!;

        /// <summary>
        /// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        /// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        /// overrides the obtained scopes
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Customizes the label of the UI button of the login screen
        /// </summary>
        [Output("uiButtonLabel")]
        public Output<string?> UiButtonLabel { get; private set; } = null!;

        /// <summary>
        /// The endpoint to use for authorization.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Output("userAuthorizationEndpoint")]
        public Output<string> UserAuthorizationEndpoint { get; private set; } = null!;

        /// <summary>
        /// The endpoint to use for User Info.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Output("userinfoEndpoint")]
        public Output<string> UserinfoEndpoint { get; private set; } = null!;

        /// <summary>
        /// This endpoint retrieves the OIDC provider configuration and automatically sets
        /// the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        /// `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        /// can be overridden by setting them explicitly in HCL code
        /// </summary>
        [Output("wellknownEndpoint")]
        public Output<string?> WellknownEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a OrgOidc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgOidc(string name, OrgOidcArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/orgOidc:OrgOidc", name, args ?? new OrgOidcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgOidc(string name, Input<string> id, OrgOidcState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/orgOidc:OrgOidc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgOidc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgOidc Get(string name, Input<string> id, OrgOidcState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgOidc(name, id, state, options);
        }
    }

    public sealed class OrgOidcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The endpoint to use for access tokens.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("accessTokenEndpoint")]
        public Input<string>? AccessTokenEndpoint { get; set; }

        /// <summary>
        /// A single configuration block that specifies the claim mappings to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the claims given by `wellknown_endpoint`. The supported claims are:
        /// </summary>
        [Input("claimsMapping")]
        public Input<Inputs.OrgOidcClaimsMappingArgs>? ClaimsMapping { get; set; }

        /// <summary>
        /// Client ID to use with the OIDC provider
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Client Secret to use with the OIDC provider
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The issuer ID for the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("issuerId")]
        public Input<string>? IssuerId { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        /// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        /// Maximum value is `24`
        /// </summary>
        [Input("keyExpireDurationHours")]
        public Input<int>? KeyExpireDurationHours { get; set; }

        /// <summary>
        /// Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        /// If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        /// </summary>
        [Input("keyRefreshEndpoint")]
        public Input<string>? KeyRefreshEndpoint { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        /// </summary>
        [Input("keyRefreshPeriodHours")]
        public Input<int>? KeyRefreshPeriodHours { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        /// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        /// </summary>
        [Input("keyRefreshStrategy")]
        public Input<string>? KeyRefreshStrategy { get; set; }

        [Input("keys")]
        private InputList<Inputs.OrgOidcKeyArgs>? _keys;

        /// <summary>
        /// One or more configuration blocks that specify the keys to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the keys given by `wellknown_endpoint`. Each key requires the following:
        /// </summary>
        public InputList<Inputs.OrgOidcKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.OrgOidcKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The maximum clock skew is the maximum allowable time difference between the client and server.
        /// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        /// </summary>
        [Input("maxClockSkewSeconds")]
        public Input<int>? MaxClockSkewSeconds { get; set; }

        /// <summary>
        /// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        /// resource `vcd.OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        /// The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        /// VMware Cloud Director can fetch and consume claims from both sources
        /// </summary>
        [Input("preferIdToken")]
        public Input<bool>? PreferIdToken { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        /// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        /// overrides the obtained scopes
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Customizes the label of the UI button of the login screen
        /// </summary>
        [Input("uiButtonLabel")]
        public Input<string>? UiButtonLabel { get; set; }

        /// <summary>
        /// The endpoint to use for authorization.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("userAuthorizationEndpoint")]
        public Input<string>? UserAuthorizationEndpoint { get; set; }

        /// <summary>
        /// The endpoint to use for User Info.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("userinfoEndpoint")]
        public Input<string>? UserinfoEndpoint { get; set; }

        /// <summary>
        /// This endpoint retrieves the OIDC provider configuration and automatically sets
        /// the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        /// `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        /// can be overridden by setting them explicitly in HCL code
        /// </summary>
        [Input("wellknownEndpoint")]
        public Input<string>? WellknownEndpoint { get; set; }

        public OrgOidcArgs()
        {
        }
        public static new OrgOidcArgs Empty => new OrgOidcArgs();
    }

    public sealed class OrgOidcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The endpoint to use for access tokens.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("accessTokenEndpoint")]
        public Input<string>? AccessTokenEndpoint { get; set; }

        /// <summary>
        /// A single configuration block that specifies the claim mappings to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the claims given by `wellknown_endpoint`. The supported claims are:
        /// </summary>
        [Input("claimsMapping")]
        public Input<Inputs.OrgOidcClaimsMappingGetArgs>? ClaimsMapping { get; set; }

        /// <summary>
        /// Client ID to use with the OIDC provider
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Client Secret to use with the OIDC provider
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The issuer ID for the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("issuerId")]
        public Input<string>? IssuerId { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
        /// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
        /// Maximum value is `24`
        /// </summary>
        [Input("keyExpireDurationHours")]
        public Input<int>? KeyExpireDurationHours { get; set; }

        /// <summary>
        /// Endpoint used to refresh the keys. If set, `key_refresh_period_hours` and `key_refresh_strategy` will be required.
        /// If `wellknown_endpoint` is set, then this argument will override the obtained endpoint
        /// </summary>
        [Input("keyRefreshEndpoint")]
        public Input<string>? KeyRefreshEndpoint { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
        /// </summary>
        [Input("keyRefreshPeriodHours")]
        public Input<int>? KeyRefreshPeriodHours { get; set; }

        /// <summary>
        /// Required if `key_refresh_endpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
        /// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
        /// </summary>
        [Input("keyRefreshStrategy")]
        public Input<string>? KeyRefreshStrategy { get; set; }

        [Input("keys")]
        private InputList<Inputs.OrgOidcKeyGetArgs>? _keys;

        /// <summary>
        /// One or more configuration blocks that specify the keys to use with the OIDC provider.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
        /// to override the keys given by `wellknown_endpoint`. Each key requires the following:
        /// </summary>
        public InputList<Inputs.OrgOidcKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.OrgOidcKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The maximum clock skew is the maximum allowable time difference between the client and server.
        /// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
        /// </summary>
        [Input("maxClockSkewSeconds")]
        public Input<int>? MaxClockSkewSeconds { get; set; }

        /// <summary>
        /// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
        /// resource `vcd.OrgOidc` per `org_id`, as there is only one OpenID configuration per Organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// If you want to combine claims from `userinfo_endpoint` and the ID Token, set this to `true`.
        /// The identity providers do not provide all the required claims set in `userinfo_endpoint`. By setting this argument to `true`,
        /// VMware Cloud Director can fetch and consume claims from both sources
        /// </summary>
        [Input("preferIdToken")]
        public Input<bool>? PreferIdToken { get; set; }

        /// <summary>
        /// The client configuration redirect URI used to create a client application registration with an identity provider
        /// that complies with the OpenID Connect standard
        /// </summary>
        [Input("redirectUri")]
        public Input<string>? RedirectUri { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
        /// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
        /// overrides the obtained scopes
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Customizes the label of the UI button of the login screen
        /// </summary>
        [Input("uiButtonLabel")]
        public Input<string>? UiButtonLabel { get; set; }

        /// <summary>
        /// The endpoint to use for authorization.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("userAuthorizationEndpoint")]
        public Input<string>? UserAuthorizationEndpoint { get; set; }

        /// <summary>
        /// The endpoint to use for User Info.
        /// If `wellknown_endpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
        /// This allows users to override the configuration given by `wellknown_endpoint`
        /// </summary>
        [Input("userinfoEndpoint")]
        public Input<string>? UserinfoEndpoint { get; set; }

        /// <summary>
        /// This endpoint retrieves the OIDC provider configuration and automatically sets
        /// the following arguments, without setting them explicitly: `issuer_id`, `user_authorization_endpoint`, `access_token_endpoint`,
        /// `userinfo_endpoint`, the `claims_mapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
        /// can be overridden by setting them explicitly in HCL code
        /// </summary>
        [Input("wellknownEndpoint")]
        public Input<string>? WellknownEndpoint { get; set; }

        public OrgOidcState()
        {
        }
        public static new OrgOidcState Empty => new OrgOidcState();
    }
}
