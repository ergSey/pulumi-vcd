// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVcenter
    {
        /// <summary>
        /// Provides a data source for vCenter server attached to VCD.
        /// 
        /// Supported in provider *v3.0+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vc = Vcd.GetVcenter.Invoke(new()
        ///     {
        ///         Name = "vcenter-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVcenterResult> InvokeAsync(GetVcenterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVcenterResult>("vcd:index/getVcenter:getVcenter", args ?? new GetVcenterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for vCenter server attached to VCD.
        /// 
        /// Supported in provider *v3.0+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vc = Vcd.GetVcenter.Invoke(new()
        ///     {
        ///         Name = "vcenter-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVcenterResult> Invoke(GetVcenterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVcenterResult>("vcd:index/getVcenter:getVcenter", args ?? new GetVcenterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for vCenter server attached to VCD.
        /// 
        /// Supported in provider *v3.0+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vc = Vcd.GetVcenter.Invoke(new()
        ///     {
        ///         Name = "vcenter-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVcenterResult> Invoke(GetVcenterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVcenterResult>("vcd:index/getVcenter:getVcenter", args ?? new GetVcenterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVcenterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vCenter name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetVcenterArgs()
        {
        }
        public static new GetVcenterArgs Empty => new GetVcenterArgs();
    }

    public sealed class GetVcenterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// vCenter name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetVcenterInvokeArgs()
        {
        }
        public static new GetVcenterInvokeArgs Empty => new GetVcenterInvokeArgs();
    }


    [OutputType]
    public sealed class GetVcenterResult
    {
        /// <summary>
        /// vCenter connection status (e.g. `CONNECTED`).
        /// </summary>
        public readonly string ConnectionStatus;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Boolean value if vCenter is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        public readonly string Name;
        /// <summary>
        /// vCenter status (e.g. `READY`).
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Hostname of configured vCenter.
        /// </summary>
        public readonly string VcenterHost;
        /// <summary>
        /// vCenter version (e.g. `6.7.0`)
        /// </summary>
        public readonly string VcenterVersion;

        [OutputConstructor]
        private GetVcenterResult(
            string connectionStatus,

            string id,

            bool isEnabled,

            string name,

            string status,

            string vcenterHost,

            string vcenterVersion)
        {
            ConnectionStatus = connectionStatus;
            Id = id;
            IsEnabled = isEnabled;
            Name = name;
            Status = status;
            VcenterHost = vcenterHost;
            VcenterVersion = vcenterVersion;
        }
    }
}
