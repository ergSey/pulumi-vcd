// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    /// <summary>
    /// Provides a VMware Cloud Director IPsec VPN. This can be used to create,
    /// modify, and delete VPN settings and rules.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Vcd = Pulumi.Vcd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpn = new Vcd.EdgegatewayVpn("vpn", new()
    ///     {
    ///         EdgeGateway = "Internet_01(nti0000bi2_123-456-2)",
    ///         Name = "west-to-east",
    ///         Description = "Description",
    ///         EncryptionProtocol = "AES256",
    ///         Mtu = 1400,
    ///         PeerId = "64.121.123.11",
    ///         PeerIpAddress = "64.121.123.11",
    ///         LocalId = "64.121.123.10",
    ///         LocalIpAddress = "64.121.123.10",
    ///         SharedSecret = "***********************",
    ///         PeerSubnets = new[]
    ///         {
    ///             new Vcd.Inputs.EdgegatewayVpnPeerSubnetArgs
    ///             {
    ///                 PeerSubnetName = "DMZ_WEST",
    ///                 PeerSubnetGateway = "10.0.10.1",
    ///                 PeerSubnetMask = "255.255.255.0",
    ///             },
    ///             new Vcd.Inputs.EdgegatewayVpnPeerSubnetArgs
    ///             {
    ///                 PeerSubnetName = "WEB_WEST",
    ///                 PeerSubnetGateway = "10.0.20.1",
    ///                 PeerSubnetMask = "255.255.255.0",
    ///             },
    ///         },
    ///         LocalSubnets = new[]
    ///         {
    ///             new Vcd.Inputs.EdgegatewayVpnLocalSubnetArgs
    ///             {
    ///                 LocalSubnetName = "DMZ_EAST",
    ///                 LocalSubnetGateway = "10.0.1.1",
    ///                 LocalSubnetMask = "255.255.255.0",
    ///             },
    ///             new Vcd.Inputs.EdgegatewayVpnLocalSubnetArgs
    ///             {
    ///                 LocalSubnetName = "WEB_EAST",
    ///                 LocalSubnetGateway = "10.0.22.1",
    ///                 LocalSubnetMask = "255.255.255.0",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Local Subnets
    /// 
    /// Each Local Subnet supports the following attributes:
    /// 
    /// * `local_subnet_name` - (Required) Name of the local subnet
    /// * `local_subnet_gateway` - (Required) Gateway of the local subnet
    /// * `local_subnet_mask` - (Required) Subnet mask of the local subnet
    /// 
    /// &lt;a id="peersubnets"&gt;&lt;/a&gt;
    /// ## Peer Subnets
    /// 
    /// Each Peer Subnet supports the following attributes:
    /// 
    /// * `peer_subnet_name` - (Required) Name of the peer subnet
    /// * `peer_subnet_gateway` - (Required) Gateway of the peer subnet
    /// * `peer_subnet_mask` - (Required) Subnet mask of the peer subnet
    /// </summary>
    [VcdResourceType("vcd:index/edgegatewayVpn:EdgegatewayVpn")]
    public partial class EdgegatewayVpn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the VPN
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the edge gateway on which to apply the Firewall Rules
        /// </summary>
        [Output("edgeGateway")]
        public Output<string> EdgeGateway { get; private set; } = null!;

        /// <summary>
        /// E.g. `AES256`
        /// </summary>
        [Output("encryptionProtocol")]
        public Output<string> EncryptionProtocol { get; private set; } = null!;

        /// <summary>
        /// Local ID
        /// </summary>
        [Output("localId")]
        public Output<string> LocalId { get; private set; } = null!;

        /// <summary>
        /// Local IP Address
        /// </summary>
        [Output("localIpAddress")]
        public Output<string> LocalIpAddress { get; private set; } = null!;

        /// <summary>
        /// List of Local Subnets see Local Subnets below for details.
        /// </summary>
        [Output("localSubnets")]
        public Output<ImmutableArray<Outputs.EdgegatewayVpnLocalSubnet>> LocalSubnets { get; private set; } = null!;

        /// <summary>
        /// The MTU setting
        /// </summary>
        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;

        /// <summary>
        /// The name of the VPN
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// Peer ID
        /// </summary>
        [Output("peerId")]
        public Output<string> PeerId { get; private set; } = null!;

        /// <summary>
        /// Peer IP Address
        /// </summary>
        [Output("peerIpAddress")]
        public Output<string> PeerIpAddress { get; private set; } = null!;

        /// <summary>
        /// List of Peer Subnets see Peer Subnets below for details.
        /// </summary>
        [Output("peerSubnets")]
        public Output<ImmutableArray<Outputs.EdgegatewayVpnPeerSubnet>> PeerSubnets { get; private set; } = null!;

        /// <summary>
        /// Shared Secret
        /// </summary>
        [Output("sharedSecret")]
        public Output<string> SharedSecret { get; private set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// 
        /// &lt;a id="localsubnets"&gt;&lt;/a&gt;
        /// </summary>
        [Output("vdc")]
        public Output<string?> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a EdgegatewayVpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgegatewayVpn(string name, EdgegatewayVpnArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/edgegatewayVpn:EdgegatewayVpn", name, args ?? new EdgegatewayVpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgegatewayVpn(string name, Input<string> id, EdgegatewayVpnState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/edgegatewayVpn:EdgegatewayVpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
                AdditionalSecretOutputs =
                {
                    "sharedSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgegatewayVpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgegatewayVpn Get(string name, Input<string> id, EdgegatewayVpnState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgegatewayVpn(name, id, state, options);
        }
    }

    public sealed class EdgegatewayVpnArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the VPN
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the edge gateway on which to apply the Firewall Rules
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// E.g. `AES256`
        /// </summary>
        [Input("encryptionProtocol", required: true)]
        public Input<string> EncryptionProtocol { get; set; } = null!;

        /// <summary>
        /// Local ID
        /// </summary>
        [Input("localId", required: true)]
        public Input<string> LocalId { get; set; } = null!;

        /// <summary>
        /// Local IP Address
        /// </summary>
        [Input("localIpAddress", required: true)]
        public Input<string> LocalIpAddress { get; set; } = null!;

        [Input("localSubnets")]
        private InputList<Inputs.EdgegatewayVpnLocalSubnetArgs>? _localSubnets;

        /// <summary>
        /// List of Local Subnets see Local Subnets below for details.
        /// </summary>
        public InputList<Inputs.EdgegatewayVpnLocalSubnetArgs> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<Inputs.EdgegatewayVpnLocalSubnetArgs>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// The MTU setting
        /// </summary>
        [Input("mtu", required: true)]
        public Input<int> Mtu { get; set; } = null!;

        /// <summary>
        /// The name of the VPN
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Peer ID
        /// </summary>
        [Input("peerId", required: true)]
        public Input<string> PeerId { get; set; } = null!;

        /// <summary>
        /// Peer IP Address
        /// </summary>
        [Input("peerIpAddress", required: true)]
        public Input<string> PeerIpAddress { get; set; } = null!;

        [Input("peerSubnets")]
        private InputList<Inputs.EdgegatewayVpnPeerSubnetArgs>? _peerSubnets;

        /// <summary>
        /// List of Peer Subnets see Peer Subnets below for details.
        /// </summary>
        public InputList<Inputs.EdgegatewayVpnPeerSubnetArgs> PeerSubnets
        {
            get => _peerSubnets ?? (_peerSubnets = new InputList<Inputs.EdgegatewayVpnPeerSubnetArgs>());
            set => _peerSubnets = value;
        }

        [Input("sharedSecret", required: true)]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// Shared Secret
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// 
        /// &lt;a id="localsubnets"&gt;&lt;/a&gt;
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgegatewayVpnArgs()
        {
        }
        public static new EdgegatewayVpnArgs Empty => new EdgegatewayVpnArgs();
    }

    public sealed class EdgegatewayVpnState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the VPN
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the edge gateway on which to apply the Firewall Rules
        /// </summary>
        [Input("edgeGateway")]
        public Input<string>? EdgeGateway { get; set; }

        /// <summary>
        /// E.g. `AES256`
        /// </summary>
        [Input("encryptionProtocol")]
        public Input<string>? EncryptionProtocol { get; set; }

        /// <summary>
        /// Local ID
        /// </summary>
        [Input("localId")]
        public Input<string>? LocalId { get; set; }

        /// <summary>
        /// Local IP Address
        /// </summary>
        [Input("localIpAddress")]
        public Input<string>? LocalIpAddress { get; set; }

        [Input("localSubnets")]
        private InputList<Inputs.EdgegatewayVpnLocalSubnetGetArgs>? _localSubnets;

        /// <summary>
        /// List of Local Subnets see Local Subnets below for details.
        /// </summary>
        public InputList<Inputs.EdgegatewayVpnLocalSubnetGetArgs> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<Inputs.EdgegatewayVpnLocalSubnetGetArgs>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// The MTU setting
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// The name of the VPN
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// Peer ID
        /// </summary>
        [Input("peerId")]
        public Input<string>? PeerId { get; set; }

        /// <summary>
        /// Peer IP Address
        /// </summary>
        [Input("peerIpAddress")]
        public Input<string>? PeerIpAddress { get; set; }

        [Input("peerSubnets")]
        private InputList<Inputs.EdgegatewayVpnPeerSubnetGetArgs>? _peerSubnets;

        /// <summary>
        /// List of Peer Subnets see Peer Subnets below for details.
        /// </summary>
        public InputList<Inputs.EdgegatewayVpnPeerSubnetGetArgs> PeerSubnets
        {
            get => _peerSubnets ?? (_peerSubnets = new InputList<Inputs.EdgegatewayVpnPeerSubnetGetArgs>());
            set => _peerSubnets = value;
        }

        [Input("sharedSecret")]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// Shared Secret
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// 
        /// &lt;a id="localsubnets"&gt;&lt;/a&gt;
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public EdgegatewayVpnState()
        {
        }
        public static new EdgegatewayVpnState Empty => new EdgegatewayVpnState();
    }
}
