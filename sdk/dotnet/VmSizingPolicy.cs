// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/vmSizingPolicy:VmSizingPolicy")]
    public partial class VmSizingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configures cpu policy; see Cpu below for details.
        /// </summary>
        [Output("cpu")]
        public Output<Outputs.VmSizingPolicyCpu?> Cpu { get; private set; } = null!;

        /// <summary>
        /// description of VM sizing policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configures memory policy; see Memory below for details.
        /// 
        /// &gt; **Note:**
        /// Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
        /// To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
        /// 
        /// &lt;a id="cpu"&gt;&lt;/a&gt;
        /// </summary>
        [Output("memory")]
        public Output<Outputs.VmSizingPolicyMemory?> Memory { get; private set; } = null!;

        /// <summary>
        /// The name of VM sizing policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of organization to use - Deprecated and unneeded: will be ignored if used
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;


        /// <summary>
        /// Create a VmSizingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VmSizingPolicy(string name, VmSizingPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("vcd:index/vmSizingPolicy:VmSizingPolicy", name, args ?? new VmSizingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VmSizingPolicy(string name, Input<string> id, VmSizingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/vmSizingPolicy:VmSizingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VmSizingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VmSizingPolicy Get(string name, Input<string> id, VmSizingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new VmSizingPolicy(name, id, state, options);
        }
    }

    public sealed class VmSizingPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures cpu policy; see Cpu below for details.
        /// </summary>
        [Input("cpu")]
        public Input<Inputs.VmSizingPolicyCpuArgs>? Cpu { get; set; }

        /// <summary>
        /// description of VM sizing policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configures memory policy; see Memory below for details.
        /// 
        /// &gt; **Note:**
        /// Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
        /// To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
        /// 
        /// &lt;a id="cpu"&gt;&lt;/a&gt;
        /// </summary>
        [Input("memory")]
        public Input<Inputs.VmSizingPolicyMemoryArgs>? Memory { get; set; }

        /// <summary>
        /// The name of VM sizing policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use - Deprecated and unneeded: will be ignored if used
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public VmSizingPolicyArgs()
        {
        }
        public static new VmSizingPolicyArgs Empty => new VmSizingPolicyArgs();
    }

    public sealed class VmSizingPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures cpu policy; see Cpu below for details.
        /// </summary>
        [Input("cpu")]
        public Input<Inputs.VmSizingPolicyCpuGetArgs>? Cpu { get; set; }

        /// <summary>
        /// description of VM sizing policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configures memory policy; see Memory below for details.
        /// 
        /// &gt; **Note:**
        /// Previously, it was incorrectly stated that the `org` argument was required. In fact, it is not, and it has been deprecated in the resource schema.
        /// To preserve compatibility until the next release, though, the parameter is still parsed, but ignored.
        /// 
        /// &lt;a id="cpu"&gt;&lt;/a&gt;
        /// </summary>
        [Input("memory")]
        public Input<Inputs.VmSizingPolicyMemoryGetArgs>? Memory { get; set; }

        /// <summary>
        /// The name of VM sizing policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use - Deprecated and unneeded: will be ignored if used
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public VmSizingPolicyState()
        {
        }
        public static new VmSizingPolicyState Empty => new VmSizingPolicyState();
    }
}
