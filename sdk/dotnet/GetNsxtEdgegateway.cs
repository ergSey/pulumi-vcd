// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtEdgegateway
    {
        /// <summary>
        /// Provides a VMware Cloud Director NSX-T edge gateway data source. This can be used to read NSX-T edge gateway configurations.
        /// 
        /// Supported in provider *v3.1+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var group1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Name = "existing-group",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = group1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtEdgegatewayResult> InvokeAsync(GetNsxtEdgegatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtEdgegatewayResult>("vcd:index/getNsxtEdgegateway:getNsxtEdgegateway", args ?? new GetNsxtEdgegatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T edge gateway data source. This can be used to read NSX-T edge gateway configurations.
        /// 
        /// Supported in provider *v3.1+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var group1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Name = "existing-group",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = group1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayResult> Invoke(GetNsxtEdgegatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayResult>("vcd:index/getNsxtEdgegateway:getNsxtEdgegateway", args ?? new GetNsxtEdgegatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director NSX-T edge gateway data source. This can be used to read NSX-T edge gateway configurations.
        /// 
        /// Supported in provider *v3.1+*.
        /// 
        /// ## Example Usage
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var group1 = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Name = "existing-group",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = group1.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### NSX-T Edge Gateway Belonging To VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vdc1 = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var t1 = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         Org = "myorg",
        ///         OwnerId = vdc1.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "nsxt-edge-gateway",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayResult> Invoke(GetNsxtEdgegatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayResult>("vcd:index/getNsxtEdgegateway:getNsxtEdgegateway", args ?? new GetNsxtEdgegatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtEdgegatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeClusterId")]
        public string? EdgeClusterId { get; set; }

        /// <summary>
        /// Sets a limit of IPs to count for
        /// `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        /// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        /// only IP count reporting. Defaults to `1000000`. While it is unlikely that a single Edge Gateway
        /// can effectively manage more IPs, one can specify `0` for *unlimited* value.
        /// </summary>
        [Input("ipCountReadLimit")]
        public int? IpCountReadLimit { get; set; }

        /// <summary>
        /// NSX-T Edge Gateway name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the NSX-T Edge Gateway belongs. Optional if
        /// defined at provider level.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The ID of VDC or VDC Group. **Note:** Data sources
        /// [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        /// [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        /// name.
        /// 
        /// &gt; Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        /// definition at provider level.
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId { get; set; }

        /// <summary>
        /// **Deprecated** - please use `owner_id` field. The name of VDC that owns the
        /// NSX-T Edge Gateway. Optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxtEdgegatewayArgs()
        {
        }
        public static new GetNsxtEdgegatewayArgs Empty => new GetNsxtEdgegatewayArgs();
    }

    public sealed class GetNsxtEdgegatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        /// <summary>
        /// Sets a limit of IPs to count for
        /// `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        /// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        /// only IP count reporting. Defaults to `1000000`. While it is unlikely that a single Edge Gateway
        /// can effectively manage more IPs, one can specify `0` for *unlimited* value.
        /// </summary>
        [Input("ipCountReadLimit")]
        public Input<int>? IpCountReadLimit { get; set; }

        /// <summary>
        /// NSX-T Edge Gateway name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to which the NSX-T Edge Gateway belongs. Optional if
        /// defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of VDC or VDC Group. **Note:** Data sources
        /// [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        /// [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        /// name.
        /// 
        /// &gt; Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        /// definition at provider level.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// **Deprecated** - please use `owner_id` field. The name of VDC that owns the
        /// NSX-T Edge Gateway. Optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxtEdgegatewayInvokeArgs()
        {
        }
        public static new GetNsxtEdgegatewayInvokeArgs Empty => new GetNsxtEdgegatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtEdgegatewayResult
    {
        public readonly bool DedicateExternalNetwork;
        public readonly string DeploymentMode;
        public readonly string Description;
        public readonly string? EdgeClusterId;
        public readonly int ExternalNetworkAllocatedIpCount;
        public readonly string ExternalNetworkId;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewayExternalNetworkResult> ExternalNetworks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? IpCountReadLimit;
        public readonly string Name;
        public readonly bool NonDistributedRoutingEnabled;
        public readonly string? Org;
        public readonly string OwnerId;
        public readonly string PrimaryIp;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetWithIpCountResult> SubnetWithIpCounts;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetWithTotalIpCountResult> SubnetWithTotalIpCounts;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetResult> Subnets;
        public readonly int TotalAllocatedIpCount;
        public readonly int UnusedIpCount;
        public readonly bool UseIpSpaces;
        public readonly int UsedIpCount;
        public readonly string Vdc;

        [OutputConstructor]
        private GetNsxtEdgegatewayResult(
            bool dedicateExternalNetwork,

            string deploymentMode,

            string description,

            string? edgeClusterId,

            int externalNetworkAllocatedIpCount,

            string externalNetworkId,

            ImmutableArray<Outputs.GetNsxtEdgegatewayExternalNetworkResult> externalNetworks,

            string id,

            int? ipCountReadLimit,

            string name,

            bool nonDistributedRoutingEnabled,

            string? org,

            string ownerId,

            string primaryIp,

            ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetWithIpCountResult> subnetWithIpCounts,

            ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetWithTotalIpCountResult> subnetWithTotalIpCounts,

            ImmutableArray<Outputs.GetNsxtEdgegatewaySubnetResult> subnets,

            int totalAllocatedIpCount,

            int unusedIpCount,

            bool useIpSpaces,

            int usedIpCount,

            string vdc)
        {
            DedicateExternalNetwork = dedicateExternalNetwork;
            DeploymentMode = deploymentMode;
            Description = description;
            EdgeClusterId = edgeClusterId;
            ExternalNetworkAllocatedIpCount = externalNetworkAllocatedIpCount;
            ExternalNetworkId = externalNetworkId;
            ExternalNetworks = externalNetworks;
            Id = id;
            IpCountReadLimit = ipCountReadLimit;
            Name = name;
            NonDistributedRoutingEnabled = nonDistributedRoutingEnabled;
            Org = org;
            OwnerId = ownerId;
            PrimaryIp = primaryIp;
            SubnetWithIpCounts = subnetWithIpCounts;
            SubnetWithTotalIpCounts = subnetWithTotalIpCounts;
            Subnets = subnets;
            TotalAllocatedIpCount = totalAllocatedIpCount;
            UnusedIpCount = unusedIpCount;
            UseIpSpaces = useIpSpaces;
            UsedIpCount = usedIpCount;
            Vdc = vdc;
        }
    }
}
