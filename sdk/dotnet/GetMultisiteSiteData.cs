// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetMultisiteSiteData
    {
        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Site association data to be used for association with another site.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// Note: there is only one site available for each VCD. No ID or name is necessary to identify it.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var currentSite = Vcd.GetMultisiteSiteData.Invoke(new()
        ///     {
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMultisiteSiteDataResult> InvokeAsync(GetMultisiteSiteDataArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultisiteSiteDataResult>("vcd:index/getMultisiteSiteData:getMultisiteSiteData", args ?? new GetMultisiteSiteDataArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Site association data to be used for association with another site.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// Note: there is only one site available for each VCD. No ID or name is necessary to identify it.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var currentSite = Vcd.GetMultisiteSiteData.Invoke(new()
        ///     {
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMultisiteSiteDataResult> Invoke(GetMultisiteSiteDataInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteSiteDataResult>("vcd:index/getMultisiteSiteData:getMultisiteSiteData", args ?? new GetMultisiteSiteDataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Site association data to be used for association with another site.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// Note: there is only one site available for each VCD. No ID or name is necessary to identify it.
        /// 
        /// &gt; Note: this data source requires System Administrator privileges
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var currentSite = Vcd.GetMultisiteSiteData.Invoke(new()
        ///     {
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMultisiteSiteDataResult> Invoke(GetMultisiteSiteDataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteSiteDataResult>("vcd:index/getMultisiteSiteData:getMultisiteSiteData", args ?? new GetMultisiteSiteDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultisiteSiteDataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the file that will contain the data needed to associate this site to a remote one.
        /// Contains the same data returned in `association_data`.
        /// </summary>
        [Input("downloadToFile")]
        public string? DownloadToFile { get; set; }

        public GetMultisiteSiteDataArgs()
        {
        }
        public static new GetMultisiteSiteDataArgs Empty => new GetMultisiteSiteDataArgs();
    }

    public sealed class GetMultisiteSiteDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the file that will contain the data needed to associate this site to a remote one.
        /// Contains the same data returned in `association_data`.
        /// </summary>
        [Input("downloadToFile")]
        public Input<string>? DownloadToFile { get; set; }

        public GetMultisiteSiteDataInvokeArgs()
        {
        }
        public static new GetMultisiteSiteDataInvokeArgs Empty => new GetMultisiteSiteDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultisiteSiteDataResult
    {
        /// <summary>
        /// The data needed to associate this site to another one. Contains the same data that would be saved into
        /// the file defined in `download_to_file`.
        /// </summary>
        public readonly string AssociationData;
        public readonly string? DownloadToFile;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetMultisiteSiteDataResult(
            string associationData,

            string? downloadToFile,

            string id)
        {
            AssociationData = associationData;
            DownloadToFile = downloadToFile;
            Id = id;
        }
    }
}
