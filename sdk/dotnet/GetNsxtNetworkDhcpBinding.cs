// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtNetworkDhcpBinding
    {
        /// <summary>
        /// Provides a data source to read NSX-T Org VDC network DHCP bindings.
        /// 
        /// &gt; This data source requires VCD 10.3.1+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pools = Vcd.GetNsxtNetworkDhcp.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = parent.Id,
        ///     });
        /// 
        ///     var binding1 = Vcd.GetNsxtNetworkDhcpBinding.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = pools.Apply(getNsxtNetworkDhcpResult =&gt; getNsxtNetworkDhcpResult.Id),
        ///         Name = "Binding-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtNetworkDhcpBindingResult> InvokeAsync(GetNsxtNetworkDhcpBindingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtNetworkDhcpBindingResult>("vcd:index/getNsxtNetworkDhcpBinding:getNsxtNetworkDhcpBinding", args ?? new GetNsxtNetworkDhcpBindingArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read NSX-T Org VDC network DHCP bindings.
        /// 
        /// &gt; This data source requires VCD 10.3.1+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pools = Vcd.GetNsxtNetworkDhcp.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = parent.Id,
        ///     });
        /// 
        ///     var binding1 = Vcd.GetNsxtNetworkDhcpBinding.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = pools.Apply(getNsxtNetworkDhcpResult =&gt; getNsxtNetworkDhcpResult.Id),
        ///         Name = "Binding-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtNetworkDhcpBindingResult> Invoke(GetNsxtNetworkDhcpBindingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtNetworkDhcpBindingResult>("vcd:index/getNsxtNetworkDhcpBinding:getNsxtNetworkDhcpBinding", args ?? new GetNsxtNetworkDhcpBindingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read NSX-T Org VDC network DHCP bindings.
        /// 
        /// &gt; This data source requires VCD 10.3.1+
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pools = Vcd.GetNsxtNetworkDhcp.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = parent.Id,
        ///     });
        /// 
        ///     var binding1 = Vcd.GetNsxtNetworkDhcpBinding.Invoke(new()
        ///     {
        ///         Org = "cloud",
        ///         OrgNetworkId = pools.Apply(getNsxtNetworkDhcpResult =&gt; getNsxtNetworkDhcpResult.Id),
        ///         Name = "Binding-one",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtNetworkDhcpBindingResult> Invoke(GetNsxtNetworkDhcpBindingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtNetworkDhcpBindingResult>("vcd:index/getNsxtNetworkDhcpBinding:getNsxtNetworkDhcpBinding", args ?? new GetNsxtNetworkDhcpBindingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtNetworkDhcpBindingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name of DHCP binding
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The ID of an Org VDC network. **Note**  `.id` field of
        /// `vcd.NetworkIsolatedV2`, `vcd.NetworkRoutedV2` or `vcd.NsxtNetworkDhcp` can be referenced
        /// here
        /// </summary>
        [Input("orgNetworkId", required: true)]
        public string OrgNetworkId { get; set; } = null!;

        public GetNsxtNetworkDhcpBindingArgs()
        {
        }
        public static new GetNsxtNetworkDhcpBindingArgs Empty => new GetNsxtNetworkDhcpBindingArgs();
    }

    public sealed class GetNsxtNetworkDhcpBindingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name of DHCP binding
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization. Optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of an Org VDC network. **Note**  `.id` field of
        /// `vcd.NetworkIsolatedV2`, `vcd.NetworkRoutedV2` or `vcd.NsxtNetworkDhcp` can be referenced
        /// here
        /// </summary>
        [Input("orgNetworkId", required: true)]
        public Input<string> OrgNetworkId { get; set; } = null!;

        public GetNsxtNetworkDhcpBindingInvokeArgs()
        {
        }
        public static new GetNsxtNetworkDhcpBindingInvokeArgs Empty => new GetNsxtNetworkDhcpBindingInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtNetworkDhcpBindingResult
    {
        public readonly string BindingType;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNsxtNetworkDhcpBindingDhcpV4ConfigResult> DhcpV4Configs;
        public readonly ImmutableArray<Outputs.GetNsxtNetworkDhcpBindingDhcpV6ConfigResult> DhcpV6Configs;
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddress;
        public readonly int LeaseTime;
        public readonly string MacAddress;
        public readonly string Name;
        public readonly string? Org;
        public readonly string OrgNetworkId;

        [OutputConstructor]
        private GetNsxtNetworkDhcpBindingResult(
            string bindingType,

            string description,

            ImmutableArray<Outputs.GetNsxtNetworkDhcpBindingDhcpV4ConfigResult> dhcpV4Configs,

            ImmutableArray<Outputs.GetNsxtNetworkDhcpBindingDhcpV6ConfigResult> dhcpV6Configs,

            ImmutableArray<string> dnsServers,

            string id,

            string ipAddress,

            int leaseTime,

            string macAddress,

            string name,

            string? org,

            string orgNetworkId)
        {
            BindingType = bindingType;
            Description = description;
            DhcpV4Configs = dhcpV4Configs;
            DhcpV6Configs = dhcpV6Configs;
            DnsServers = dnsServers;
            Id = id;
            IpAddress = ipAddress;
            LeaseTime = leaseTime;
            MacAddress = macAddress;
            Name = name;
            Org = org;
            OrgNetworkId = orgNetworkId;
        }
    }
}
