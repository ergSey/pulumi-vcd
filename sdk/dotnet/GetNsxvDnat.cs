// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxvDnat
    {
        /// <summary>
        /// Provides a VMware Cloud Director DNAT data source for advanced edge gateways (NSX-V). This can be used to
        /// read existing rule by ID and use its attributes in other resources.
        /// 
        /// &gt; **Note:** This data source requires advanced edge gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_rule = Vcd.GetNsxvDnat.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         RuleId = "197864",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxvDnatResult> InvokeAsync(GetNsxvDnatArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxvDnatResult>("vcd:index/getNsxvDnat:getNsxvDnat", args ?? new GetNsxvDnatArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director DNAT data source for advanced edge gateways (NSX-V). This can be used to
        /// read existing rule by ID and use its attributes in other resources.
        /// 
        /// &gt; **Note:** This data source requires advanced edge gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_rule = Vcd.GetNsxvDnat.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         RuleId = "197864",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxvDnatResult> Invoke(GetNsxvDnatInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxvDnatResult>("vcd:index/getNsxvDnat:getNsxvDnat", args ?? new GetNsxvDnatInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director DNAT data source for advanced edge gateways (NSX-V). This can be used to
        /// read existing rule by ID and use its attributes in other resources.
        /// 
        /// &gt; **Note:** This data source requires advanced edge gateway.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_rule = Vcd.GetNsxvDnat.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         RuleId = "197864",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxvDnatResult> Invoke(GetNsxvDnatInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxvDnatResult>("vcd:index/getNsxvDnat:getNsxvDnat", args ?? new GetNsxvDnatInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxvDnatArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the edge gateway on which to apply the DNAT rule.
        /// </summary>
        [Input("edgeGateway", required: true)]
        public string EdgeGateway { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// ID of DNAT rule as shown in the UI.
        /// </summary>
        [Input("ruleId", required: true)]
        public string RuleId { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNsxvDnatArgs()
        {
        }
        public static new GetNsxvDnatArgs Empty => new GetNsxvDnatArgs();
    }

    public sealed class GetNsxvDnatInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the edge gateway on which to apply the DNAT rule.
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// ID of DNAT rule as shown in the UI.
        /// </summary>
        [Input("ruleId", required: true)]
        public Input<string> RuleId { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNsxvDnatInvokeArgs()
        {
        }
        public static new GetNsxvDnatInvokeArgs Empty => new GetNsxvDnatInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxvDnatResult
    {
        public readonly string Description;
        public readonly string EdgeGateway;
        public readonly bool Enabled;
        public readonly string IcmpType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool LoggingEnabled;
        public readonly string NetworkName;
        public readonly string NetworkType;
        public readonly string? Org;
        public readonly string OriginalAddress;
        public readonly string OriginalPort;
        public readonly string Protocol;
        public readonly string RuleId;
        public readonly int RuleTag;
        public readonly string RuleType;
        public readonly string TranslatedAddress;
        public readonly string TranslatedPort;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNsxvDnatResult(
            string description,

            string edgeGateway,

            bool enabled,

            string icmpType,

            string id,

            bool loggingEnabled,

            string networkName,

            string networkType,

            string? org,

            string originalAddress,

            string originalPort,

            string protocol,

            string ruleId,

            int ruleTag,

            string ruleType,

            string translatedAddress,

            string translatedPort,

            string? vdc)
        {
            Description = description;
            EdgeGateway = edgeGateway;
            Enabled = enabled;
            IcmpType = icmpType;
            Id = id;
            LoggingEnabled = loggingEnabled;
            NetworkName = networkName;
            NetworkType = networkType;
            Org = org;
            OriginalAddress = originalAddress;
            OriginalPort = originalPort;
            Protocol = protocol;
            RuleId = ruleId;
            RuleTag = ruleTag;
            RuleType = ruleType;
            TranslatedAddress = translatedAddress;
            TranslatedPort = translatedPort;
            Vdc = vdc;
        }
    }
}
