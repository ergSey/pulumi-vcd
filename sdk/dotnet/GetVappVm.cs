// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVappVm
    {
        /// <summary>
        /// Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
        /// 
        /// Supported in provider *v2.6+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var web = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "web",
        ///     });
        /// 
        ///     var web1 = Vcd.GetVappVm.Invoke(new()
        ///     {
        ///         VappName = web.Apply(getVappResult =&gt; getVappResult.Name),
        ///         Name = "web1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmId"] = id,
        ///         ["vm"] = web1,
        ///     };
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// vm = {
        ///   "computer_name" = "TestVM"
        ///   "cpu_cores" = 1
        ///   "cpus" = 2
        ///   "description" = "This OVA provides a minimal installed profile of PhotonOS. Default password for root user is changeme"
        ///   "disk" = []
        ///   "guest_properties" = {}
        ///   "href" = "https://my-vcd.org/api/vApp/vm-ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "id" = "urn:vcloud:vm:ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "memory" = 1024
        ///   "metadata" = {
        ///     "vm_metadata" = "VM Metadata."
        ///   }
        ///   "name" = "vm-datacloud"
        ///   "network" = [
        ///     {
        ///       "ip" = "192.168.2.10"
        ///       "ip_allocation_mode" = "MANUAL"
        ///       "is_primary" = true
        ///       "mac" = "00:50:56:29:08:89"
        ///       "name" = "net-datacloud-r"
        ///       "type" = "org"
        ///     },
        ///   ]
        ///   "org" = "datacloud"
        ///   "storage_profile" = "*"
        ///   "vapp_name" = "vapp-datacloud"
        ///   "vdc" = "vdc-datacloud"
        /// }
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Task<GetVappVmResult> InvokeAsync(GetVappVmArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVappVmResult>("vcd:index/getVappVm:getVappVm", args ?? new GetVappVmArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
        /// 
        /// Supported in provider *v2.6+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var web = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "web",
        ///     });
        /// 
        ///     var web1 = Vcd.GetVappVm.Invoke(new()
        ///     {
        ///         VappName = web.Apply(getVappResult =&gt; getVappResult.Name),
        ///         Name = "web1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmId"] = id,
        ///         ["vm"] = web1,
        ///     };
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// vm = {
        ///   "computer_name" = "TestVM"
        ///   "cpu_cores" = 1
        ///   "cpus" = 2
        ///   "description" = "This OVA provides a minimal installed profile of PhotonOS. Default password for root user is changeme"
        ///   "disk" = []
        ///   "guest_properties" = {}
        ///   "href" = "https://my-vcd.org/api/vApp/vm-ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "id" = "urn:vcloud:vm:ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "memory" = 1024
        ///   "metadata" = {
        ///     "vm_metadata" = "VM Metadata."
        ///   }
        ///   "name" = "vm-datacloud"
        ///   "network" = [
        ///     {
        ///       "ip" = "192.168.2.10"
        ///       "ip_allocation_mode" = "MANUAL"
        ///       "is_primary" = true
        ///       "mac" = "00:50:56:29:08:89"
        ///       "name" = "net-datacloud-r"
        ///       "type" = "org"
        ///     },
        ///   ]
        ///   "org" = "datacloud"
        ///   "storage_profile" = "*"
        ///   "vapp_name" = "vapp-datacloud"
        ///   "vdc" = "vdc-datacloud"
        /// }
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetVappVmResult> Invoke(GetVappVmInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVappVmResult>("vcd:index/getVappVm:getVappVm", args ?? new GetVappVmInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
        /// 
        /// Supported in provider *v2.6+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var web = Vcd.GetVapp.Invoke(new()
        ///     {
        ///         Name = "web",
        ///     });
        /// 
        ///     var web1 = Vcd.GetVappVm.Invoke(new()
        ///     {
        ///         VappName = web.Apply(getVappResult =&gt; getVappResult.Name),
        ///         Name = "web1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vmId"] = id,
        ///         ["vm"] = web1,
        ///     };
        /// });
        /// ```
        /// 
        /// Sample output:
        /// 
        /// ```
        /// vm = {
        ///   "computer_name" = "TestVM"
        ///   "cpu_cores" = 1
        ///   "cpus" = 2
        ///   "description" = "This OVA provides a minimal installed profile of PhotonOS. Default password for root user is changeme"
        ///   "disk" = []
        ///   "guest_properties" = {}
        ///   "href" = "https://my-vcd.org/api/vApp/vm-ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "id" = "urn:vcloud:vm:ecb449a2-0b11-494d-bbc7-6ae2f2ff9b82"
        ///   "memory" = 1024
        ///   "metadata" = {
        ///     "vm_metadata" = "VM Metadata."
        ///   }
        ///   "name" = "vm-datacloud"
        ///   "network" = [
        ///     {
        ///       "ip" = "192.168.2.10"
        ///       "ip_allocation_mode" = "MANUAL"
        ///       "is_primary" = true
        ///       "mac" = "00:50:56:29:08:89"
        ///       "name" = "net-datacloud-r"
        ///       "type" = "org"
        ///     },
        ///   ]
        ///   "org" = "datacloud"
        ///   "storage_profile" = "*"
        ///   "vapp_name" = "vapp-datacloud"
        ///   "vdc" = "vdc-datacloud"
        /// }
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// </summary>
        public static Output<GetVappVmResult> Invoke(GetVappVmInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVappVmResult>("vcd:index/getVappVm:getVappVm", args ?? new GetVappVmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVappVmArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the VM, unique within the vApp
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Allows to wait for up to a defined amount of
        /// seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
        /// constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
        /// __at least one__ of the following __must be true__:
        /// * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
        /// does not require for the VM to use Edge Gateways DHCP service.
        /// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
        /// relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
        /// until UI reports IP addresses, but is more constrained. However this is the only option if guest
        /// tools are not present on the VM.
        /// </summary>
        [Input("networkDhcpWaitSeconds")]
        public int? NetworkDhcpWaitSeconds { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// (*v3.8+*) VM placement policy ID.
        /// </summary>
        [Input("placementPolicyId")]
        public string? PlacementPolicyId { get; set; }

        /// <summary>
        /// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
        /// </summary>
        [Input("sizingPolicyId")]
        public string? SizingPolicyId { get; set; }

        /// <summary>
        /// The vApp this VM belongs to.
        /// </summary>
        [Input("vappName", required: true)]
        public string VappName { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetVappVmArgs()
        {
        }
        public static new GetVappVmArgs Empty => new GetVappVmArgs();
    }

    public sealed class GetVappVmInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the VM, unique within the vApp
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Allows to wait for up to a defined amount of
        /// seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
        /// constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
        /// __at least one__ of the following __must be true__:
        /// * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
        /// does not require for the VM to use Edge Gateways DHCP service.
        /// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
        /// relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
        /// until UI reports IP addresses, but is more constrained. However this is the only option if guest
        /// tools are not present on the VM.
        /// </summary>
        [Input("networkDhcpWaitSeconds")]
        public Input<int>? NetworkDhcpWaitSeconds { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// (*v3.8+*) VM placement policy ID.
        /// </summary>
        [Input("placementPolicyId")]
        public Input<string>? PlacementPolicyId { get; set; }

        /// <summary>
        /// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
        /// </summary>
        [Input("sizingPolicyId")]
        public Input<string>? SizingPolicyId { get; set; }

        /// <summary>
        /// The vApp this VM belongs to.
        /// </summary>
        [Input("vappName", required: true)]
        public Input<string> VappName { get; set; } = null!;

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetVappVmInvokeArgs()
        {
        }
        public static new GetVappVmInvokeArgs Empty => new GetVappVmInvokeArgs();
    }


    [OutputType]
    public sealed class GetVappVmResult
    {
        public readonly ImmutableArray<Outputs.GetVappVmBootOptionResult> BootOptions;
        /// <summary>
        /// Computer name to assign to this virtual machine.
        /// </summary>
        public readonly string ComputerName;
        /// <summary>
        /// The number of cores per socket
        /// </summary>
        public readonly int CpuCores;
        public readonly bool CpuHotAddEnabled;
        /// <summary>
        /// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        /// </summary>
        public readonly int CpuLimit;
        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
        /// </summary>
        public readonly string CpuPriority;
        /// <summary>
        /// The amount of MHz reservation on the underlying virtualization infrastructure
        /// </summary>
        public readonly int CpuReservation;
        /// <summary>
        /// Custom priority for the resource in MHz
        /// </summary>
        public readonly int CpuShares;
        /// <summary>
        /// The number of virtual CPUs allocated to the VM
        /// </summary>
        public readonly int Cpus;
        public readonly ImmutableArray<Outputs.GetVappVmCustomizationResult> Customizations;
        /// <summary>
        /// The VM description. Note: description is read only. Currently, this field has
        /// the description of the OVA used to create the VM
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Independent disk attachment configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappVmDiskResult> Disks;
        /// <summary>
        /// Expose hardware-assisted CPU virtualization to guest OS
        /// </summary>
        public readonly bool ExposeHardwareVirtualization;
        public readonly ImmutableArray<Outputs.GetVappVmExtraConfigResult> ExtraConfigs;
        public readonly string Firmware;
        /// <summary>
        /// Key value map of guest properties
        /// </summary>
        public readonly ImmutableDictionary<string, string> GuestProperties;
        /// <summary>
        /// (*v2.9+*) Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.).
        /// </summary>
        public readonly string HardwareVersion;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
        /// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
        /// </summary>
        public readonly ImmutableDictionary<string, string> InheritedMetadata;
        /// <summary>
        /// (*v2.7+*) A block providing internal disk of VM details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappVmInternalDiskResult> InternalDisks;
        /// <summary>
        /// The amount of RAM (in MB) allocated to the VM
        /// </summary>
        public readonly int Memory;
        public readonly bool MemoryHotAddEnabled;
        /// <summary>
        /// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
        /// </summary>
        public readonly int MemoryLimit;
        /// <summary>
        /// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
        /// </summary>
        public readonly string MemoryPriority;
        /// <summary>
        /// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
        /// </summary>
        public readonly int MemoryReservation;
        /// <summary>
        /// Custom priority for the resource in MB
        /// </summary>
        public readonly int MemoryShares;
        /// <summary>
        /// (Deprecated) Use `metadata_entry` instead. Key value map of metadata assigned to this VM
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to this VM. See Metadata section for details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappVmMetadataEntryResult> MetadataEntries;
        public readonly string Name;
        public readonly int? NetworkDhcpWaitSeconds;
        /// <summary>
        /// A block defining a network interface. Multiple can be used.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVappVmNetworkResult> Networks;
        public readonly string? Org;
        /// <summary>
        /// (*v2.9+*) Operating System type.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// (*v3.8+*) VM placement policy ID.
        /// </summary>
        public readonly string PlacementPolicyId;
        /// <summary>
        /// (*v3.9+*) Set of security tags assigned to this VM.
        /// </summary>
        public readonly ImmutableArray<string> SecurityTags;
        /// <summary>
        /// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
        /// </summary>
        public readonly string SizingPolicyId;
        /// <summary>
        /// (*v3.8+*) The vApp status as a numeric code.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// (*v3.8+*) The vApp status as text.
        /// </summary>
        public readonly string StatusText;
        public readonly string StorageProfile;
        public readonly string VappId;
        public readonly string VappName;
        public readonly string? Vdc;
        /// <summary>
        /// (*3.2+*) - type of the VM (either `vcd.VappVm` or `vcd.Vm`)
        /// </summary>
        public readonly string VmType;

        [OutputConstructor]
        private GetVappVmResult(
            ImmutableArray<Outputs.GetVappVmBootOptionResult> bootOptions,

            string computerName,

            int cpuCores,

            bool cpuHotAddEnabled,

            int cpuLimit,

            string cpuPriority,

            int cpuReservation,

            int cpuShares,

            int cpus,

            ImmutableArray<Outputs.GetVappVmCustomizationResult> customizations,

            string description,

            ImmutableArray<Outputs.GetVappVmDiskResult> disks,

            bool exposeHardwareVirtualization,

            ImmutableArray<Outputs.GetVappVmExtraConfigResult> extraConfigs,

            string firmware,

            ImmutableDictionary<string, string> guestProperties,

            string hardwareVersion,

            string href,

            string id,

            ImmutableDictionary<string, string> inheritedMetadata,

            ImmutableArray<Outputs.GetVappVmInternalDiskResult> internalDisks,

            int memory,

            bool memoryHotAddEnabled,

            int memoryLimit,

            string memoryPriority,

            int memoryReservation,

            int memoryShares,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetVappVmMetadataEntryResult> metadataEntries,

            string name,

            int? networkDhcpWaitSeconds,

            ImmutableArray<Outputs.GetVappVmNetworkResult> networks,

            string? org,

            string osType,

            string placementPolicyId,

            ImmutableArray<string> securityTags,

            string sizingPolicyId,

            int status,

            string statusText,

            string storageProfile,

            string vappId,

            string vappName,

            string? vdc,

            string vmType)
        {
            BootOptions = bootOptions;
            ComputerName = computerName;
            CpuCores = cpuCores;
            CpuHotAddEnabled = cpuHotAddEnabled;
            CpuLimit = cpuLimit;
            CpuPriority = cpuPriority;
            CpuReservation = cpuReservation;
            CpuShares = cpuShares;
            Cpus = cpus;
            Customizations = customizations;
            Description = description;
            Disks = disks;
            ExposeHardwareVirtualization = exposeHardwareVirtualization;
            ExtraConfigs = extraConfigs;
            Firmware = firmware;
            GuestProperties = guestProperties;
            HardwareVersion = hardwareVersion;
            Href = href;
            Id = id;
            InheritedMetadata = inheritedMetadata;
            InternalDisks = internalDisks;
            Memory = memory;
            MemoryHotAddEnabled = memoryHotAddEnabled;
            MemoryLimit = memoryLimit;
            MemoryPriority = memoryPriority;
            MemoryReservation = memoryReservation;
            MemoryShares = memoryShares;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            NetworkDhcpWaitSeconds = networkDhcpWaitSeconds;
            Networks = networks;
            Org = org;
            OsType = osType;
            PlacementPolicyId = placementPolicyId;
            SecurityTags = securityTags;
            SizingPolicyId = sizingPolicyId;
            Status = status;
            StatusText = statusText;
            StorageProfile = storageProfile;
            VappId = vappId;
            VappName = vappName;
            Vdc = vdc;
            VmType = vmType;
        }
    }
}
