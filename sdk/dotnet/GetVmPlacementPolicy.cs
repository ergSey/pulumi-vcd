// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetVmPlacementPolicy
    {
        /// <summary>
        /// Provides a VMware Cloud Director VM Placement Policy data source. This can be used to read a VM Placement Policy.
        /// 
        /// Supported in provider *v3.8+* and requires VCD 10.2+
        /// 
        /// &gt; **Note:** This resource can be used by both system administrators and tenant users.
        /// 
        /// ## Example Usage
        /// 
        /// ### System Administrators
        /// 
        /// System administrators have full privileges to retrieve information of the Provider VDC to which the VM Placement Policy
        /// belongs. The way to fetch a VM Placement Policy in this case would be:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.ProviderVdcName),
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         ProviderVdcId = my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### Tenant Users
        /// 
        /// Tenant users don't have access to Provider VDC information so the only way to retrieve VM Placement Policies is to
        /// fetch them using the VDC information. The only constraint is that the desired VM Placement Policy **must be assigned
        /// to the VDC**.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         VdcId = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVmPlacementPolicyResult> InvokeAsync(GetVmPlacementPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmPlacementPolicyResult>("vcd:index/getVmPlacementPolicy:getVmPlacementPolicy", args ?? new GetVmPlacementPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM Placement Policy data source. This can be used to read a VM Placement Policy.
        /// 
        /// Supported in provider *v3.8+* and requires VCD 10.2+
        /// 
        /// &gt; **Note:** This resource can be used by both system administrators and tenant users.
        /// 
        /// ## Example Usage
        /// 
        /// ### System Administrators
        /// 
        /// System administrators have full privileges to retrieve information of the Provider VDC to which the VM Placement Policy
        /// belongs. The way to fetch a VM Placement Policy in this case would be:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.ProviderVdcName),
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         ProviderVdcId = my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### Tenant Users
        /// 
        /// Tenant users don't have access to Provider VDC information so the only way to retrieve VM Placement Policies is to
        /// fetch them using the VDC information. The only constraint is that the desired VM Placement Policy **must be assigned
        /// to the VDC**.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         VdcId = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmPlacementPolicyResult> Invoke(GetVmPlacementPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmPlacementPolicyResult>("vcd:index/getVmPlacementPolicy:getVmPlacementPolicy", args ?? new GetVmPlacementPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director VM Placement Policy data source. This can be used to read a VM Placement Policy.
        /// 
        /// Supported in provider *v3.8+* and requires VCD 10.2+
        /// 
        /// &gt; **Note:** This resource can be used by both system administrators and tenant users.
        /// 
        /// ## Example Usage
        /// 
        /// ### System Administrators
        /// 
        /// System administrators have full privileges to retrieve information of the Provider VDC to which the VM Placement Policy
        /// belongs. The way to fetch a VM Placement Policy in this case would be:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var my_pvdc = Vcd.GetProviderVdc.Invoke(new()
        ///     {
        ///         Name = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.ProviderVdcName),
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         ProviderVdcId = my_pvdc.Apply(getProviderVdcResult =&gt; getProviderVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// 
        /// ### Tenant Users
        /// 
        /// Tenant users don't have access to Provider VDC information so the only way to retrieve VM Placement Policies is to
        /// fetch them using the VDC information. The only constraint is that the desired VM Placement Policy **must be assigned
        /// to the VDC**.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vdc = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "test",
        ///         Name = "vdc-test",
        ///     });
        /// 
        ///     var tf_policy_name = Vcd.GetVmPlacementPolicy.Invoke(new()
        ///     {
        ///         Name = "my-policy",
        ///         VdcId = my_vdc.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policyId"] = tf_policy_name.Apply(tf_policy_name =&gt; tf_policy_name.Apply(getVmPlacementPolicyResult =&gt; getVmPlacementPolicyResult.Id)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVmPlacementPolicyResult> Invoke(GetVmPlacementPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmPlacementPolicyResult>("vcd:index/getVmPlacementPolicy:getVmPlacementPolicy", args ?? new GetVmPlacementPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmPlacementPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name VM Placement Policy.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Placement Policy belongs.
        /// </summary>
        [Input("providerVdcId")]
        public string? ProviderVdcId { get; set; }

        /// <summary>
        /// The ID of the [VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) to which the VM Placement Policy is assigned.
        /// </summary>
        [Input("vdcId")]
        public string? VdcId { get; set; }

        public GetVmPlacementPolicyArgs()
        {
        }
        public static new GetVmPlacementPolicyArgs Empty => new GetVmPlacementPolicyArgs();
    }

    public sealed class GetVmPlacementPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name VM Placement Policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the [Provider VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/provider_vdc) to which the VM Placement Policy belongs.
        /// </summary>
        [Input("providerVdcId")]
        public Input<string>? ProviderVdcId { get; set; }

        /// <summary>
        /// The ID of the [VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) to which the VM Placement Policy is assigned.
        /// </summary>
        [Input("vdcId")]
        public Input<string>? VdcId { get; set; }

        public GetVmPlacementPolicyInvokeArgs()
        {
        }
        public static new GetVmPlacementPolicyInvokeArgs Empty => new GetVmPlacementPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmPlacementPolicyResult
    {
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This attribute can't be retrieved if the data source is used by a tenant user when fetching by `vdc_id`.
        /// </summary>
        public readonly ImmutableArray<string> LogicalVmGroupIds;
        public readonly string Name;
        public readonly string? ProviderVdcId;
        public readonly string? VdcId;
        /// <summary>
        /// This attribute can't be retrieved if the data source is used by a tenant user when fetching by `vdc_id`.
        /// </summary>
        public readonly ImmutableArray<string> VmGroupIds;

        [OutputConstructor]
        private GetVmPlacementPolicyResult(
            string description,

            string id,

            ImmutableArray<string> logicalVmGroupIds,

            string name,

            string? providerVdcId,

            string? vdcId,

            ImmutableArray<string> vmGroupIds)
        {
            Description = description;
            Id = id;
            LogicalVmGroupIds = logicalVmGroupIds;
            Name = name;
            ProviderVdcId = providerVdcId;
            VdcId = vdcId;
            VmGroupIds = vmGroupIds;
        }
    }
}
