// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetOrgSamlMetadata
    {
        /// <summary>
        /// Supported in provider *v3.10+*.
        /// 
        /// Provides a data source to read service provider SAML metadata for an organization.
        /// This service provider metadata is used to configure the identity provider.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var first = Vcd.GetOrgSamlMetadata.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         FileName = "vcd-metadata.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrgSamlMetadataResult> InvokeAsync(GetOrgSamlMetadataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrgSamlMetadataResult>("vcd:index/getOrgSamlMetadata:getOrgSamlMetadata", args ?? new GetOrgSamlMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.10+*.
        /// 
        /// Provides a data source to read service provider SAML metadata for an organization.
        /// This service provider metadata is used to configure the identity provider.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var first = Vcd.GetOrgSamlMetadata.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         FileName = "vcd-metadata.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrgSamlMetadataResult> Invoke(GetOrgSamlMetadataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgSamlMetadataResult>("vcd:index/getOrgSamlMetadata:getOrgSamlMetadata", args ?? new GetOrgSamlMetadataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.10+*.
        /// 
        /// Provides a data source to read service provider SAML metadata for an organization.
        /// This service provider metadata is used to configure the identity provider.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var first = Vcd.GetOrgSamlMetadata.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         FileName = "vcd-metadata.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrgSamlMetadataResult> Invoke(GetOrgSamlMetadataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgSamlMetadataResult>("vcd:index/getOrgSamlMetadata:getOrgSamlMetadata", args ?? new GetOrgSamlMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrgSamlMetadataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// name of the file where to store the metadata.
        /// </summary>
        [Input("fileName")]
        public string? FileName { get; set; }

        /// <summary>
        /// ID of the organization containing the SAML metadata
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetOrgSamlMetadataArgs()
        {
        }
        public static new GetOrgSamlMetadataArgs Empty => new GetOrgSamlMetadataArgs();
    }

    public sealed class GetOrgSamlMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// name of the file where to store the metadata.
        /// </summary>
        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        /// <summary>
        /// ID of the organization containing the SAML metadata
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetOrgSamlMetadataInvokeArgs()
        {
        }
        public static new GetOrgSamlMetadataInvokeArgs Empty => new GetOrgSamlMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrgSamlMetadataResult
    {
        public readonly string? FileName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// the text of the metadata for this organization.
        /// </summary>
        public readonly string MetadataText;
        public readonly string OrgId;

        [OutputConstructor]
        private GetOrgSamlMetadataResult(
            string? fileName,

            string id,

            string metadataText,

            string orgId)
        {
            FileName = fileName;
            Id = id;
            MetadataText = metadataText;
            OrgId = orgId;
        }
    }
}
