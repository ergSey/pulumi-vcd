// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/org:Org")]
    public partial class Org : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines account lockout properties in this organization:
        /// </summary>
        [Output("accountLockout")]
        public Output<Outputs.OrgAccountLockout> AccountLockout { get; private set; } = null!;

        /// <summary>
        /// True if this organization is allowed to share catalogs. Default is `true`.
        /// </summary>
        [Output("canPublishCatalogs")]
        public Output<bool?> CanPublishCatalogs { get; private set; } = null!;

        /// <summary>
        /// True if this organization is allowed to publish external catalogs. Default is `false`.
        /// </summary>
        [Output("canPublishExternalCatalogs")]
        public Output<bool?> CanPublishExternalCatalogs { get; private set; } = null!;

        /// <summary>
        /// True if this organization is allowed to subscribe to external catalogs. Default is `false`.
        /// </summary>
        [Output("canSubscribeExternalCatalogs")]
        public Output<bool?> CanSubscribeExternalCatalogs { get; private set; } = null!;

        /// <summary>
        /// Specifies this organization's default for virtual machine boot delay after power on. Default is `0`.
        /// </summary>
        [Output("delayAfterPowerOnSeconds")]
        public Output<int?> DelayAfterPowerOnSeconds { get; private set; } = null!;

        /// <summary>
        /// Pass `delete_force=true` and `delete_recursive=true` to remove an organization or VDC and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Output("deleteForce")]
        public Output<bool?> DeleteForce { get; private set; } = null!;

        /// <summary>
        /// Pass `delete_recursive=true` as query parameter to remove an organization or VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Output("deleteRecursive")]
        public Output<bool?> DeleteRecursive { get; private set; } = null!;

        /// <summary>
        /// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Output("deployedVmQuota")]
        public Output<int?> DeployedVmQuota { get; private set; } = null!;

        /// <summary>
        /// Org description. Default is empty.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Org full name
        /// </summary>
        [Output("fullName")]
        public Output<string> FullName { get; private set; } = null!;

        /// <summary>
        /// True if this organization is enabled (allows login and all other operations). Default is `true`.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// (*v3.11+*) List of catalogs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        [Output("listOfCatalogs")]
        public Output<ImmutableArray<string>> ListOfCatalogs { get; private set; } = null!;

        /// <summary>
        /// (*v3.11+*) List of VDCs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        [Output("listOfVdcs")]
        public Output<ImmutableArray<string>> ListOfVdcs { get; private set; } = null!;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign to this organization.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        [Output("metadataEntries")]
        public Output<ImmutableArray<Outputs.OrgMetadataEntry>> MetadataEntries { get; private set; } = null!;

        /// <summary>
        /// Org name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (*v3.11+*) Number of catalogs owned or shared, available to this organization.
        /// </summary>
        [Output("numberOfCatalogs")]
        public Output<int> NumberOfCatalogs { get; private set; } = null!;

        /// <summary>
        /// (*v3.11+*) Number of VDCs owned or shared, available to this organization.
        /// </summary>
        [Output("numberOfVdcs")]
        public Output<int> NumberOfVdcs { get; private set; } = null!;

        /// <summary>
        /// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Output("storedVmQuota")]
        public Output<int?> StoredVmQuota { get; private set; } = null!;

        /// <summary>
        /// Defines lease parameters for vApps created in this organization. See vApp Lease below for details.
        /// </summary>
        [Output("vappLease")]
        public Output<Outputs.OrgVappLease> VappLease { get; private set; } = null!;

        /// <summary>
        /// Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.
        /// </summary>
        [Output("vappTemplateLease")]
        public Output<Outputs.OrgVappTemplateLease> VappTemplateLease { get; private set; } = null!;


        /// <summary>
        /// Create a Org resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Org(string name, OrgArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/org:Org", name, args ?? new OrgArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Org(string name, Input<string> id, OrgState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/org:Org", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Org resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Org Get(string name, Input<string> id, OrgState? state = null, CustomResourceOptions? options = null)
        {
            return new Org(name, id, state, options);
        }
    }

    public sealed class OrgArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines account lockout properties in this organization:
        /// </summary>
        [Input("accountLockout")]
        public Input<Inputs.OrgAccountLockoutArgs>? AccountLockout { get; set; }

        /// <summary>
        /// True if this organization is allowed to share catalogs. Default is `true`.
        /// </summary>
        [Input("canPublishCatalogs")]
        public Input<bool>? CanPublishCatalogs { get; set; }

        /// <summary>
        /// True if this organization is allowed to publish external catalogs. Default is `false`.
        /// </summary>
        [Input("canPublishExternalCatalogs")]
        public Input<bool>? CanPublishExternalCatalogs { get; set; }

        /// <summary>
        /// True if this organization is allowed to subscribe to external catalogs. Default is `false`.
        /// </summary>
        [Input("canSubscribeExternalCatalogs")]
        public Input<bool>? CanSubscribeExternalCatalogs { get; set; }

        /// <summary>
        /// Specifies this organization's default for virtual machine boot delay after power on. Default is `0`.
        /// </summary>
        [Input("delayAfterPowerOnSeconds")]
        public Input<int>? DelayAfterPowerOnSeconds { get; set; }

        /// <summary>
        /// Pass `delete_force=true` and `delete_recursive=true` to remove an organization or VDC and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Input("deleteForce")]
        public Input<bool>? DeleteForce { get; set; }

        /// <summary>
        /// Pass `delete_recursive=true` as query parameter to remove an organization or VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Input("deployedVmQuota")]
        public Input<int>? DeployedVmQuota { get; set; }

        /// <summary>
        /// Org description. Default is empty.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Org full name
        /// </summary>
        [Input("fullName", required: true)]
        public Input<string> FullName { get; set; } = null!;

        /// <summary>
        /// True if this organization is enabled (allows login and all other operations). Default is `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign to this organization.
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.OrgMetadataEntryArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.OrgMetadataEntryArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.OrgMetadataEntryArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Input("storedVmQuota")]
        public Input<int>? StoredVmQuota { get; set; }

        /// <summary>
        /// Defines lease parameters for vApps created in this organization. See vApp Lease below for details.
        /// </summary>
        [Input("vappLease")]
        public Input<Inputs.OrgVappLeaseArgs>? VappLease { get; set; }

        /// <summary>
        /// Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.
        /// </summary>
        [Input("vappTemplateLease")]
        public Input<Inputs.OrgVappTemplateLeaseArgs>? VappTemplateLease { get; set; }

        public OrgArgs()
        {
        }
        public static new OrgArgs Empty => new OrgArgs();
    }

    public sealed class OrgState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines account lockout properties in this organization:
        /// </summary>
        [Input("accountLockout")]
        public Input<Inputs.OrgAccountLockoutGetArgs>? AccountLockout { get; set; }

        /// <summary>
        /// True if this organization is allowed to share catalogs. Default is `true`.
        /// </summary>
        [Input("canPublishCatalogs")]
        public Input<bool>? CanPublishCatalogs { get; set; }

        /// <summary>
        /// True if this organization is allowed to publish external catalogs. Default is `false`.
        /// </summary>
        [Input("canPublishExternalCatalogs")]
        public Input<bool>? CanPublishExternalCatalogs { get; set; }

        /// <summary>
        /// True if this organization is allowed to subscribe to external catalogs. Default is `false`.
        /// </summary>
        [Input("canSubscribeExternalCatalogs")]
        public Input<bool>? CanSubscribeExternalCatalogs { get; set; }

        /// <summary>
        /// Specifies this organization's default for virtual machine boot delay after power on. Default is `0`.
        /// </summary>
        [Input("delayAfterPowerOnSeconds")]
        public Input<int>? DelayAfterPowerOnSeconds { get; set; }

        /// <summary>
        /// Pass `delete_force=true` and `delete_recursive=true` to remove an organization or VDC and any objects it contains, regardless of their state. Default is `false`
        /// </summary>
        [Input("deleteForce")]
        public Input<bool>? DeleteForce { get; set; }

        /// <summary>
        /// Pass `delete_recursive=true` as query parameter to remove an organization or VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
        /// </summary>
        [Input("deleteRecursive")]
        public Input<bool>? DeleteRecursive { get; set; }

        /// <summary>
        /// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Input("deployedVmQuota")]
        public Input<int>? DeployedVmQuota { get; set; }

        /// <summary>
        /// Org description. Default is empty.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Org full name
        /// </summary>
        [Input("fullName")]
        public Input<string>? FullName { get; set; }

        /// <summary>
        /// True if this organization is enabled (allows login and all other operations). Default is `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("listOfCatalogs")]
        private InputList<string>? _listOfCatalogs;

        /// <summary>
        /// (*v3.11+*) List of catalogs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        public InputList<string> ListOfCatalogs
        {
            get => _listOfCatalogs ?? (_listOfCatalogs = new InputList<string>());
            set => _listOfCatalogs = value;
        }

        [Input("listOfVdcs")]
        private InputList<string>? _listOfVdcs;

        /// <summary>
        /// (*v3.11+*) List of VDCs (sorted alphabetically), owned or shared, available to this organization.
        /// </summary>
        public InputList<string> ListOfVdcs
        {
            get => _listOfVdcs ?? (_listOfVdcs = new InputList<string>());
            set => _listOfVdcs = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Use `metadata_entry` instead. Key value map of metadata to assign to this organization.
        /// </summary>
        [Obsolete(@"Use metadata_entry instead")]
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("metadataEntries")]
        private InputList<Inputs.OrgMetadataEntryGetArgs>? _metadataEntries;

        /// <summary>
        /// A set of metadata entries to assign. See Metadata section for details.
        /// </summary>
        public InputList<Inputs.OrgMetadataEntryGetArgs> MetadataEntries
        {
            get => _metadataEntries ?? (_metadataEntries = new InputList<Inputs.OrgMetadataEntryGetArgs>());
            set => _metadataEntries = value;
        }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (*v3.11+*) Number of catalogs owned or shared, available to this organization.
        /// </summary>
        [Input("numberOfCatalogs")]
        public Input<int>? NumberOfCatalogs { get; set; }

        /// <summary>
        /// (*v3.11+*) Number of VDCs owned or shared, available to this organization.
        /// </summary>
        [Input("numberOfVdcs")]
        public Input<int>? NumberOfVdcs { get; set; }

        /// <summary>
        /// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. Default is unlimited (0)
        /// </summary>
        [Input("storedVmQuota")]
        public Input<int>? StoredVmQuota { get; set; }

        /// <summary>
        /// Defines lease parameters for vApps created in this organization. See vApp Lease below for details.
        /// </summary>
        [Input("vappLease")]
        public Input<Inputs.OrgVappLeaseGetArgs>? VappLease { get; set; }

        /// <summary>
        /// Defines lease parameters for vApp templates created in this organization. See vApp Template Lease below for details.
        /// </summary>
        [Input("vappTemplateLease")]
        public Input<Inputs.OrgVappTemplateLeaseGetArgs>? VappTemplateLease { get; set; }

        public OrgState()
        {
        }
        public static new OrgState Empty => new OrgState();
    }
}
