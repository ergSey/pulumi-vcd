// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkIsolatedV2
    {
        /// <summary>
        /// Provides a VMware Cloud Director Org VDC isolated Network data source to read data or reference existing network.
        /// 
        /// Supported in provider *v3.2+* for both NSX-T and NSX-V VDCs.
        /// 
        /// ## Example Usage
        /// 
        /// ### Looking Up Isolated Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Isolated Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetNetworkIsolatedV2Result> InvokeAsync(GetNetworkIsolatedV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkIsolatedV2Result>("vcd:index/getNetworkIsolatedV2:getNetworkIsolatedV2", args ?? new GetNetworkIsolatedV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC isolated Network data source to read data or reference existing network.
        /// 
        /// Supported in provider *v3.2+* for both NSX-T and NSX-V VDCs.
        /// 
        /// ## Example Usage
        /// 
        /// ### Looking Up Isolated Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Isolated Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNetworkIsolatedV2Result> Invoke(GetNetworkIsolatedV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkIsolatedV2Result>("vcd:index/getNetworkIsolatedV2:getNetworkIsolatedV2", args ?? new GetNetworkIsolatedV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC isolated Network data source to read data or reference existing network.
        /// 
        /// Supported in provider *v3.2+* for both NSX-T and NSX-V VDCs.
        /// 
        /// ## Example Usage
        /// 
        /// ### Looking Up Isolated Network In VDC)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-edge",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Looking Up Isolated Network In VDC Group)
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Vcd.GetVdcGroup.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "main-group",
        ///     });
        /// 
        ///     var net = Vcd.GetNetworkIsolatedV2.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         OwnerId = main.Apply(getVdcGroupResult =&gt; getVdcGroupResult.Id),
        ///         Name = "my-net",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNetworkIsolatedV2Result> Invoke(GetNetworkIsolatedV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkIsolatedV2Result>("vcd:index/getNetworkIsolatedV2:getNetworkIsolatedV2", args ?? new GetNetworkIsolatedV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkIsolatedV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters. **Note**
        /// filters do not support searching for networks in VDC Groups.
        /// </summary>
        [Input("filter")]
        public Inputs.GetNetworkIsolatedV2FilterArgs? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        /// and inherited from provider configuration)
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId { get; set; }

        /// <summary>
        /// The name of VDC to use. **Deprecated**  in favor of new field
        /// `owner_id` which supports VDC and VDC Group IDs.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNetworkIsolatedV2Args()
        {
        }
        public static new GetNetworkIsolatedV2Args Empty => new GetNetworkIsolatedV2Args();
    }

    public sealed class GetNetworkIsolatedV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters. **Note**
        /// filters do not support searching for networks in VDC Groups.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetNetworkIsolatedV2FilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
        /// and inherited from provider configuration)
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The name of VDC to use. **Deprecated**  in favor of new field
        /// `owner_id` which supports VDC and VDC Group IDs.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNetworkIsolatedV2InvokeArgs()
        {
        }
        public static new GetNetworkIsolatedV2InvokeArgs Empty => new GetNetworkIsolatedV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkIsolatedV2Result
    {
        public readonly string Description;
        public readonly string Dns1;
        public readonly string Dns2;
        public readonly string DnsSuffix;
        public readonly bool DualStackEnabled;
        public readonly Outputs.GetNetworkIsolatedV2FilterResult? Filter;
        public readonly string Gateway;
        public readonly bool GuestVlanAllowed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsShared;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedV2MetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;
        public readonly string OwnerId;
        public readonly int PrefixLength;
        public readonly string SecondaryGateway;
        public readonly string SecondaryPrefixLength;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedV2SecondaryStaticIpPoolResult> SecondaryStaticIpPools;
        public readonly ImmutableArray<Outputs.GetNetworkIsolatedV2StaticIpPoolResult> StaticIpPools;
        public readonly string Vdc;

        [OutputConstructor]
        private GetNetworkIsolatedV2Result(
            string description,

            string dns1,

            string dns2,

            string dnsSuffix,

            bool dualStackEnabled,

            Outputs.GetNetworkIsolatedV2FilterResult? filter,

            string gateway,

            bool guestVlanAllowed,

            string id,

            bool isShared,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetNetworkIsolatedV2MetadataEntryResult> metadataEntries,

            string? name,

            string? org,

            string ownerId,

            int prefixLength,

            string secondaryGateway,

            string secondaryPrefixLength,

            ImmutableArray<Outputs.GetNetworkIsolatedV2SecondaryStaticIpPoolResult> secondaryStaticIpPools,

            ImmutableArray<Outputs.GetNetworkIsolatedV2StaticIpPoolResult> staticIpPools,

            string vdc)
        {
            Description = description;
            Dns1 = dns1;
            Dns2 = dns2;
            DnsSuffix = dnsSuffix;
            DualStackEnabled = dualStackEnabled;
            Filter = filter;
            Gateway = gateway;
            GuestVlanAllowed = guestVlanAllowed;
            Id = id;
            IsShared = isShared;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            OwnerId = ownerId;
            PrefixLength = prefixLength;
            SecondaryGateway = secondaryGateway;
            SecondaryPrefixLength = secondaryPrefixLength;
            SecondaryStaticIpPools = secondaryStaticIpPools;
            StaticIpPools = staticIpPools;
            Vdc = vdc;
        }
    }
}
