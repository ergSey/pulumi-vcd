// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtEdgegatewayDhcpv6:NsxtEdgegatewayDhcpv6")]
    public partial class NsxtEdgegatewayDhcpv6 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of IPv6 DNS servers (only applicable for `DHCPv6` mode)
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Set of domain names (only applicable for `DHCPv6` mode)
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// NSX-T Edge Gateway ID
        /// </summary>
        [Output("edgeGatewayId")]
        public Output<string> EdgeGatewayId { get; private set; } = null!;

        /// <summary>
        /// One of `SLAAC` (Stateless Address Autoconfiguration), `DHCPv6` (Dynamic Host
        /// Configuration Protocol) or `DISABLED` (to disable the service). **Note:** destroying the resource
        /// will also disable DHCPv6.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtEdgegatewayDhcpv6 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtEdgegatewayDhcpv6(string name, NsxtEdgegatewayDhcpv6Args args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegatewayDhcpv6:NsxtEdgegatewayDhcpv6", name, args ?? new NsxtEdgegatewayDhcpv6Args(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtEdgegatewayDhcpv6(string name, Input<string> id, NsxtEdgegatewayDhcpv6State? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegatewayDhcpv6:NsxtEdgegatewayDhcpv6", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtEdgegatewayDhcpv6 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtEdgegatewayDhcpv6 Get(string name, Input<string> id, NsxtEdgegatewayDhcpv6State? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtEdgegatewayDhcpv6(name, id, state, options);
        }
    }

    public sealed class NsxtEdgegatewayDhcpv6Args : global::Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Set of IPv6 DNS servers (only applicable for `DHCPv6` mode)
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// Set of domain names (only applicable for `DHCPv6` mode)
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// NSX-T Edge Gateway ID
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// One of `SLAAC` (Stateless Address Autoconfiguration), `DHCPv6` (Dynamic Host
        /// Configuration Protocol) or `DISABLED` (to disable the service). **Note:** destroying the resource
        /// will also disable DHCPv6.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public NsxtEdgegatewayDhcpv6Args()
        {
        }
        public static new NsxtEdgegatewayDhcpv6Args Empty => new NsxtEdgegatewayDhcpv6Args();
    }

    public sealed class NsxtEdgegatewayDhcpv6State : global::Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Set of IPv6 DNS servers (only applicable for `DHCPv6` mode)
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// Set of domain names (only applicable for `DHCPv6` mode)
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// NSX-T Edge Gateway ID
        /// </summary>
        [Input("edgeGatewayId")]
        public Input<string>? EdgeGatewayId { get; set; }

        /// <summary>
        /// One of `SLAAC` (Stateless Address Autoconfiguration), `DHCPv6` (Dynamic Host
        /// Configuration Protocol) or `DISABLED` (to disable the service). **Note:** destroying the resource
        /// will also disable DHCPv6.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Org in which the NSX-T Edge Gateway is located
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public NsxtEdgegatewayDhcpv6State()
        {
        }
        public static new NsxtEdgegatewayDhcpv6State Empty => new NsxtEdgegatewayDhcpv6State();
    }
}
