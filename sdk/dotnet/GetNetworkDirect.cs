// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkDirect
    {
        /// <summary>
        /// Provides a VMware Cloud Director Org VDC Network data source directly connected to an external network. This can be used to reference
        /// internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Vcd.GetNetworkDirect.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "my-net",
        ///     });
        /// 
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["externalNetwork"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["externalNetworkGateway"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkGateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["externalNetworkNetmask"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkNetmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalNetworkDns"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkDns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetNetworkDirectResult> InvokeAsync(GetNetworkDirectArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkDirectResult>("vcd:index/getNetworkDirect:getNetworkDirect", args ?? new GetNetworkDirectArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC Network data source directly connected to an external network. This can be used to reference
        /// internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Vcd.GetNetworkDirect.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "my-net",
        ///     });
        /// 
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["externalNetwork"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["externalNetworkGateway"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkGateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["externalNetworkNetmask"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkNetmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalNetworkDns"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkDns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNetworkDirectResult> Invoke(GetNetworkDirectInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkDirectResult>("vcd:index/getNetworkDirect:getNetworkDirect", args ?? new GetNetworkDirectInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Org VDC Network data source directly connected to an external network. This can be used to reference
        /// internal networks for vApps to connect.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var net = Vcd.GetNetworkDirect.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Name = "my-net",
        ///     });
        /// 
        ///     var externalNetwork1 = Vcd.GetExternalNetwork.Invoke(new()
        ///     {
        ///         Name = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["externalNetwork"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetwork),
        ///         ["gateway"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Gateway),
        ///         ["externalNetworkGateway"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkGateway),
        ///         ["netmask"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Netmask),
        ///         ["externalNetworkNetmask"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkNetmask),
        ///         ["DNS"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.Dns1),
        ///         ["externalNetworkDns"] = net.Apply(getNetworkDirectResult =&gt; getNetworkDirectResult.ExternalNetworkDns1),
        ///         ["externalIp"] = externalNetwork1.Apply(getExternalNetworkResult =&gt; getExternalNetworkResult.IpScopes[0]?.StaticIpPools[0]?.StartAddress),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` - (Optional) matches the name using a regular expression.
        /// * `ip` - (Optional) matches the IP of the resource using a regular expression.
        /// * `metadata` - (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetNetworkDirectResult> Invoke(GetNetworkDirectInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkDirectResult>("vcd:index/getNetworkDirect:getNetworkDirect", args ?? new GetNetworkDirectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkDirectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetNetworkDirectFilterArgs? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetNetworkDirectArgs()
        {
        }
        public static new GetNetworkDirectArgs Empty => new GetNetworkDirectArgs();
    }

    public sealed class GetNetworkDirectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetNetworkDirectFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// A unique name for the network (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetNetworkDirectInvokeArgs()
        {
        }
        public static new GetNetworkDirectInvokeArgs Empty => new GetNetworkDirectInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkDirectResult
    {
        public readonly string Description;
        /// <summary>
        /// The name of the external network.
        /// </summary>
        public readonly string ExternalNetwork;
        public readonly string ExternalNetworkDns1;
        public readonly string ExternalNetworkDns2;
        public readonly string ExternalNetworkDnsSuffix;
        public readonly string ExternalNetworkGateway;
        public readonly string ExternalNetworkNetmask;
        public readonly Outputs.GetNetworkDirectFilterResult? Filter;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly ImmutableArray<Outputs.GetNetworkDirectMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;
        /// <summary>
        /// Defines if this network is shared between multiple vDCs in the vOrg.
        /// </summary>
        public readonly bool Shared;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetNetworkDirectResult(
            string description,

            string externalNetwork,

            string externalNetworkDns1,

            string externalNetworkDns2,

            string externalNetworkDnsSuffix,

            string externalNetworkGateway,

            string externalNetworkNetmask,

            Outputs.GetNetworkDirectFilterResult? filter,

            string href,

            string id,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetNetworkDirectMetadataEntryResult> metadataEntries,

            string? name,

            string? org,

            bool shared,

            string? vdc)
        {
            Description = description;
            ExternalNetwork = externalNetwork;
            ExternalNetworkDns1 = externalNetworkDns1;
            ExternalNetworkDns2 = externalNetworkDns2;
            ExternalNetworkDnsSuffix = externalNetworkDnsSuffix;
            ExternalNetworkGateway = externalNetworkGateway;
            ExternalNetworkNetmask = externalNetworkNetmask;
            Filter = filter;
            Href = href;
            Id = id;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            Shared = shared;
            Vdc = vdc;
        }
    }
}
