// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetCatalog
    {
        /// <summary>
        /// Provides a VMware Cloud Director Catalog data source. A Catalog can be used to manage catalog items and media items.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_cat = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "my-cat",
        ///     });
        /// 
        ///     var myItem = new Vcd.CatalogItem("myItem", new()
        ///     {
        ///         Org = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Org)),
        ///         Catalog = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Name)),
        ///         Name = "myItem",
        ///         Description = my_cat.Apply(my_cat =&gt; $"Belongs to {my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Id)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetCatalogResult> InvokeAsync(GetCatalogArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogResult>("vcd:index/getCatalog:getCatalog", args ?? new GetCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Catalog data source. A Catalog can be used to manage catalog items and media items.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_cat = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "my-cat",
        ///     });
        /// 
        ///     var myItem = new Vcd.CatalogItem("myItem", new()
        ///     {
        ///         Org = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Org)),
        ///         Catalog = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Name)),
        ///         Name = "myItem",
        ///         Description = my_cat.Apply(my_cat =&gt; $"Belongs to {my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Id)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetCatalogResult> Invoke(GetCatalogInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogResult>("vcd:index/getCatalog:getCatalog", args ?? new GetCatalogInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Catalog data source. A Catalog can be used to manage catalog items and media items.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_cat = Vcd.GetCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "my-cat",
        ///     });
        /// 
        ///     var myItem = new Vcd.CatalogItem("myItem", new()
        ///     {
        ///         Org = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Org)),
        ///         Catalog = my_cat.Apply(my_cat =&gt; my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Name)),
        ///         Name = "myItem",
        ///         Description = my_cat.Apply(my_cat =&gt; $"Belongs to {my_cat.Apply(getCatalogResult =&gt; getCatalogResult.Id)}"),
        ///         OvaPath = "/path/to/test_vapp_template.ova",
        ///         UploadPieceSize = 5,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Metadata
        /// 
        /// The `metadata_entry` (*v3.8+*) is a set of metadata entries that have the following structure:
        /// 
        /// * `key` - Key of this metadata entry.
        /// * `value` - Value of this metadata entry.
        /// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
        /// * `user_access` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
        /// * `is_system` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
        /// 
        /// ## Filter arguments
        /// 
        /// (Supported in provider *v2.9+*)
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetCatalogResult> Invoke(GetCatalogInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogResult>("vcd:index/getCatalog:getCatalog", args ?? new GetCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Catalog description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetCatalogFilterArgs? Filter { get; set; }

        /// <summary>
        /// Catalog name (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetCatalogArgs()
        {
        }
        public static new GetCatalogArgs Empty => new GetCatalogArgs();
    }

    public sealed class GetCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Catalog description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetCatalogFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Catalog name (optional when `filter` is used)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Org name
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetCatalogInvokeArgs()
        {
        }
        public static new GetCatalogInvokeArgs Empty => new GetCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogResult
    {
        /// <summary>
        /// (*v3.6+*) Enable early catalog export to optimize synchronization. Default is `false`.
        /// </summary>
        public readonly bool CacheEnabled;
        /// <summary>
        /// (*v3.6+*) Version number from this catalog.
        /// </summary>
        public readonly int CatalogVersion;
        /// <summary>
        /// (*v3.6+*) Date and time of catalog creation
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Catalog description.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetCatalogFilterResult? Filter;
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        /// </summary>
        public readonly bool IsLocal;
        /// <summary>
        /// (*v3.6+*) Indicates if this catalog is shared to all organizations.
        /// </summary>
        public readonly bool IsPublished;
        /// <summary>
        /// (*v3.6+*) Indicates if the catalog is shared.
        /// </summary>
        public readonly bool IsShared;
        /// <summary>
        /// (*v3.8+*) List of media item names in this catalog, in alphabetical order.
        /// </summary>
        public readonly ImmutableArray<string> MediaItemLists;
        /// <summary>
        /// (Deprecated; *v3.6+*) Use `metadata_entry` instead. Key value map of metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A set of metadata entries assigned to this Catalog. See Metadata section for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        /// <summary>
        /// (*v3.6+*) Number of media items available in this catalog.
        /// </summary>
        public readonly int NumberOfMedia;
        /// <summary>
        /// (*v3.6+*) Number of vApp templates available in this catalog.
        /// </summary>
        public readonly int NumberOfVappTemplates;
        public readonly string? Org;
        /// <summary>
        /// (*v3.6+*) Owner of the catalog.
        /// </summary>
        public readonly string OwnerName;
        /// <summary>
        /// (*v3.6+*) Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary. Default is `false`.
        /// </summary>
        public readonly bool PreserveIdentityInformation;
        /// <summary>
        /// (*v3.6+*) Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
        /// </summary>
        public readonly bool PublishEnabled;
        /// <summary>
        /// (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
        /// </summary>
        public readonly string PublishSubscriptionType;
        /// <summary>
        /// (*v3.8+*) URL to which other catalogs can subscribe.
        /// </summary>
        public readonly string PublishSubscriptionUrl;
        public readonly string StorageProfileId;
        /// <summary>
        /// (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
        /// </summary>
        public readonly ImmutableArray<string> VappTemplateLists;

        [OutputConstructor]
        private GetCatalogResult(
            bool cacheEnabled,

            int catalogVersion,

            string created,

            string description,

            Outputs.GetCatalogFilterResult? filter,

            string href,

            string id,

            bool isLocal,

            bool isPublished,

            bool isShared,

            ImmutableArray<string> mediaItemLists,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetCatalogMetadataEntryResult> metadataEntries,

            string? name,

            int numberOfMedia,

            int numberOfVappTemplates,

            string? org,

            string ownerName,

            bool preserveIdentityInformation,

            bool publishEnabled,

            string publishSubscriptionType,

            string publishSubscriptionUrl,

            string storageProfileId,

            ImmutableArray<string> vappTemplateLists)
        {
            CacheEnabled = cacheEnabled;
            CatalogVersion = catalogVersion;
            Created = created;
            Description = description;
            Filter = filter;
            Href = href;
            Id = id;
            IsLocal = isLocal;
            IsPublished = isPublished;
            IsShared = isShared;
            MediaItemLists = mediaItemLists;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            NumberOfMedia = numberOfMedia;
            NumberOfVappTemplates = numberOfVappTemplates;
            Org = org;
            OwnerName = ownerName;
            PreserveIdentityInformation = preserveIdentityInformation;
            PublishEnabled = publishEnabled;
            PublishSubscriptionType = publishSubscriptionType;
            PublishSubscriptionUrl = publishSubscriptionUrl;
            StorageProfileId = storageProfileId;
            VappTemplateLists = vappTemplateLists;
        }
    }
}
