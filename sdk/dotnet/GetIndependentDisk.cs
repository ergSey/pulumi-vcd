// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetIndependentDisk
    {
        /// <summary>
        /// Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing_disk = Vcd.GetIndependentDisk.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Id = "urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
        ///         Name = "my-disk",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["disk-iops"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.Iops)),
        ///         ["typeIsAttached"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.IsAttached)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIndependentDiskResult> InvokeAsync(GetIndependentDiskArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIndependentDiskResult>("vcd:index/getIndependentDisk:getIndependentDisk", args ?? new GetIndependentDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing_disk = Vcd.GetIndependentDisk.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Id = "urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
        ///         Name = "my-disk",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["disk-iops"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.Iops)),
        ///         ["typeIsAttached"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.IsAttached)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIndependentDiskResult> Invoke(GetIndependentDiskInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndependentDiskResult>("vcd:index/getIndependentDisk:getIndependentDisk", args ?? new GetIndependentDiskInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its 
        /// data within other resources or data sources.
        /// 
        /// Supported in provider *v2.5+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing_disk = Vcd.GetIndependentDisk.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-vdc",
        ///         Id = "urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
        ///         Name = "my-disk",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["disk-iops"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.Iops)),
        ///         ["typeIsAttached"] = existing_disk.Apply(existing_disk =&gt; existing_disk.Apply(getIndependentDiskResult =&gt; getIndependentDiskResult.IsAttached)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIndependentDiskResult> Invoke(GetIndependentDiskInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndependentDiskResult>("vcd:index/getIndependentDisk:getIndependentDisk", args ?? new GetIndependentDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndependentDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetIndependentDiskArgs()
        {
        }
        public static new GetIndependentDiskArgs Empty => new GetIndependentDiskArgs();
    }

    public sealed class GetIndependentDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetIndependentDiskInvokeArgs()
        {
        }
        public static new GetIndependentDiskInvokeArgs Empty => new GetIndependentDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetIndependentDiskResult
    {
        public readonly ImmutableArray<string> AttachedVmIds;
        public readonly string BusSubType;
        public readonly string BusType;
        public readonly string DatastoreName;
        public readonly string Description;
        public readonly bool Encrypted;
        public readonly string? Id;
        public readonly int Iops;
        public readonly bool IsAttached;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly ImmutableArray<Outputs.GetIndependentDiskMetadataEntryResult> MetadataEntries;
        public readonly string? Name;
        public readonly string? Org;
        public readonly string OwnerName;
        public readonly string SharingType;
        public readonly int SizeInMb;
        public readonly string StorageProfile;
        public readonly string Uuid;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetIndependentDiskResult(
            ImmutableArray<string> attachedVmIds,

            string busSubType,

            string busType,

            string datastoreName,

            string description,

            bool encrypted,

            string? id,

            int iops,

            bool isAttached,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetIndependentDiskMetadataEntryResult> metadataEntries,

            string? name,

            string? org,

            string ownerName,

            string sharingType,

            int sizeInMb,

            string storageProfile,

            string uuid,

            string? vdc)
        {
            AttachedVmIds = attachedVmIds;
            BusSubType = busSubType;
            BusType = busType;
            DatastoreName = datastoreName;
            Description = description;
            Encrypted = encrypted;
            Id = id;
            Iops = iops;
            IsAttached = isAttached;
            Metadata = metadata;
            MetadataEntries = metadataEntries;
            Name = name;
            Org = org;
            OwnerName = ownerName;
            SharingType = sharingType;
            SizeInMb = sizeInMb;
            StorageProfile = storageProfile;
            Uuid = uuid;
            Vdc = vdc;
        }
    }
}
