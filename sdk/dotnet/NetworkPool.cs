// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/networkPool:NetworkPool")]
    public partial class NetworkPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The components used by the network pool. See Backing below for details
        /// </summary>
        [Output("backing")]
        public Output<Outputs.NetworkPoolBacking> Backing { get; private set; } = null!;

        /// <summary>
        /// Define how the backing components are considered. It should be one of the following:
        /// * `use-explicit-name` (Default) The backing components must be named explicitly;
        /// * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        /// * `use-first-available` Use the first available backing component.
        /// </summary>
        [Output("backingSelectionConstraint")]
        public Output<string?> BackingSelectionConstraint { get; private set; } = null!;

        /// <summary>
        /// Description of the network pool
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Unique name of network pool
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Id of the network provider (either vCenter or NSX-T manager)
        /// </summary>
        [Output("networkProviderId")]
        public Output<string> NetworkProviderId { get; private set; } = null!;

        /// <summary>
        /// Name of the network provider
        /// </summary>
        [Output("networkProviderName")]
        public Output<string> NetworkProviderName { get; private set; } = null!;

        /// <summary>
        /// Type of network provider
        /// </summary>
        [Output("networkProviderType")]
        public Output<string> NetworkProviderType { get; private set; } = null!;

        /// <summary>
        /// Whether the network pool is in promiscuous mode
        /// </summary>
        [Output("promiscuousMode")]
        public Output<bool> PromiscuousMode { get; private set; } = null!;

        /// <summary>
        /// Status of the network pool
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Total number of backings
        /// </summary>
        [Output("totalBackingsCount")]
        public Output<int> TotalBackingsCount { get; private set; } = null!;

        /// <summary>
        /// Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Number of used backings
        /// </summary>
        [Output("usedBackingsCount")]
        public Output<int> UsedBackingsCount { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPool(string name, NetworkPoolArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/networkPool:NetworkPool", name, args ?? new NetworkPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPool(string name, Input<string> id, NetworkPoolState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/networkPool:NetworkPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPool Get(string name, Input<string> id, NetworkPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPool(name, id, state, options);
        }
    }

    public sealed class NetworkPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The components used by the network pool. See Backing below for details
        /// </summary>
        [Input("backing")]
        public Input<Inputs.NetworkPoolBackingArgs>? Backing { get; set; }

        /// <summary>
        /// Define how the backing components are considered. It should be one of the following:
        /// * `use-explicit-name` (Default) The backing components must be named explicitly;
        /// * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        /// * `use-first-available` Use the first available backing component.
        /// </summary>
        [Input("backingSelectionConstraint")]
        public Input<string>? BackingSelectionConstraint { get; set; }

        /// <summary>
        /// Description of the network pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique name of network pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the network provider (either vCenter or NSX-T manager)
        /// </summary>
        [Input("networkProviderId", required: true)]
        public Input<string> NetworkProviderId { get; set; } = null!;

        /// <summary>
        /// Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NetworkPoolArgs()
        {
        }
        public static new NetworkPoolArgs Empty => new NetworkPoolArgs();
    }

    public sealed class NetworkPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The components used by the network pool. See Backing below for details
        /// </summary>
        [Input("backing")]
        public Input<Inputs.NetworkPoolBackingGetArgs>? Backing { get; set; }

        /// <summary>
        /// Define how the backing components are considered. It should be one of the following:
        /// * `use-explicit-name` (Default) The backing components must be named explicitly;
        /// * `use-when-only-one` The automatically selected backing component will be used if there is only one available;
        /// * `use-first-available` Use the first available backing component.
        /// </summary>
        [Input("backingSelectionConstraint")]
        public Input<string>? BackingSelectionConstraint { get; set; }

        /// <summary>
        /// Description of the network pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique name of network pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the network provider (either vCenter or NSX-T manager)
        /// </summary>
        [Input("networkProviderId")]
        public Input<string>? NetworkProviderId { get; set; }

        /// <summary>
        /// Name of the network provider
        /// </summary>
        [Input("networkProviderName")]
        public Input<string>? NetworkProviderName { get; set; }

        /// <summary>
        /// Type of network provider
        /// </summary>
        [Input("networkProviderType")]
        public Input<string>? NetworkProviderType { get; set; }

        /// <summary>
        /// Whether the network pool is in promiscuous mode
        /// </summary>
        [Input("promiscuousMode")]
        public Input<bool>? PromiscuousMode { get; set; }

        /// <summary>
        /// Status of the network pool
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Total number of backings
        /// </summary>
        [Input("totalBackingsCount")]
        public Input<int>? TotalBackingsCount { get; set; }

        /// <summary>
        /// Type of the network pool (one of `GENEVE`, `VLAN`, `PORTGROUP_BACKED`)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Number of used backings
        /// </summary>
        [Input("usedBackingsCount")]
        public Input<int>? UsedBackingsCount { get; set; }

        public NetworkPoolState()
        {
        }
        public static new NetworkPoolState Empty => new NetworkPoolState();
    }
}
