// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetDseSolutionPublish
    {
        /// <summary>
        /// Supported in provider *v3.13+* with Data Solution Extension.
        /// 
        /// Provides a data source to read Data Solution publishing settings for a particular tenant.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tenant_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "tenant_org",
        ///     });
        /// 
        ///     var mongodb_community = Vcd.GetDseSolutionPublish.Invoke(new()
        ///     {
        ///         DataSolutionId = mongodb_communityVcdDseRegistryConfiguration.Id,
        ///         OrgId = tenant_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDseSolutionPublishResult> InvokeAsync(GetDseSolutionPublishArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDseSolutionPublishResult>("vcd:index/getDseSolutionPublish:getDseSolutionPublish", args ?? new GetDseSolutionPublishArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.13+* with Data Solution Extension.
        /// 
        /// Provides a data source to read Data Solution publishing settings for a particular tenant.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tenant_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "tenant_org",
        ///     });
        /// 
        ///     var mongodb_community = Vcd.GetDseSolutionPublish.Invoke(new()
        ///     {
        ///         DataSolutionId = mongodb_communityVcdDseRegistryConfiguration.Id,
        ///         OrgId = tenant_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDseSolutionPublishResult> Invoke(GetDseSolutionPublishInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDseSolutionPublishResult>("vcd:index/getDseSolutionPublish:getDseSolutionPublish", args ?? new GetDseSolutionPublishInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.13+* with Data Solution Extension.
        /// 
        /// Provides a data source to read Data Solution publishing settings for a particular tenant.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var tenant_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "tenant_org",
        ///     });
        /// 
        ///     var mongodb_community = Vcd.GetDseSolutionPublish.Invoke(new()
        ///     {
        ///         DataSolutionId = mongodb_communityVcdDseRegistryConfiguration.Id,
        ///         OrgId = tenant_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDseSolutionPublishResult> Invoke(GetDseSolutionPublishInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDseSolutionPublishResult>("vcd:index/getDseSolutionPublish:getDseSolutionPublish", args ?? new GetDseSolutionPublishInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDseSolutionPublishArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of Data Solution
        /// </summary>
        [Input("dataSolutionId", required: true)]
        public string DataSolutionId { get; set; } = null!;

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetDseSolutionPublishArgs()
        {
        }
        public static new GetDseSolutionPublishArgs Empty => new GetDseSolutionPublishArgs();
    }

    public sealed class GetDseSolutionPublishInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of Data Solution
        /// </summary>
        [Input("dataSolutionId", required: true)]
        public Input<string> DataSolutionId { get; set; } = null!;

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetDseSolutionPublishInvokeArgs()
        {
        }
        public static new GetDseSolutionPublishInvokeArgs Empty => new GetDseSolutionPublishInvokeArgs();
    }


    [OutputType]
    public sealed class GetDseSolutionPublishResult
    {
        public readonly string ConfluentLicenseType;
        public readonly string DataSolutionId;
        public readonly string DsOrgConfigId;
        public readonly string DsoAclId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrgId;
        public readonly ImmutableArray<string> TemplateAclIds;

        [OutputConstructor]
        private GetDseSolutionPublishResult(
            string confluentLicenseType,

            string dataSolutionId,

            string dsOrgConfigId,

            string dsoAclId,

            string id,

            string orgId,

            ImmutableArray<string> templateAclIds)
        {
            ConfluentLicenseType = confluentLicenseType;
            DataSolutionId = dataSolutionId;
            DsOrgConfigId = dsOrgConfigId;
            DsoAclId = dsoAclId;
            Id = id;
            OrgId = orgId;
            TemplateAclIds = templateAclIds;
        }
    }
}
