// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtAlbServiceEngineGroup
    {
        /// <summary>
        /// Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Service Engine Groups. A Service Engine Group is an isolation domain that also
        /// defines shared service engine properties, such as size, network access, and failover. Resources in a service engine
        /// group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared
        /// between different service engine groups.
        /// 
        /// &gt; Only `System Administrator` can use this data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var demo = Vcd.GetNsxtAlbServiceEngineGroup.Invoke(new()
        ///     {
        ///         Name = "configured-service-engine-group",
        ///         SyncOnRefresh = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtAlbServiceEngineGroupResult> InvokeAsync(GetNsxtAlbServiceEngineGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtAlbServiceEngineGroupResult>("vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup", args ?? new GetNsxtAlbServiceEngineGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Service Engine Groups. A Service Engine Group is an isolation domain that also
        /// defines shared service engine properties, such as size, network access, and failover. Resources in a service engine
        /// group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared
        /// between different service engine groups.
        /// 
        /// &gt; Only `System Administrator` can use this data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var demo = Vcd.GetNsxtAlbServiceEngineGroup.Invoke(new()
        ///     {
        ///         Name = "configured-service-engine-group",
        ///         SyncOnRefresh = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAlbServiceEngineGroupResult> Invoke(GetNsxtAlbServiceEngineGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAlbServiceEngineGroupResult>("vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup", args ?? new GetNsxtAlbServiceEngineGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.
        /// 
        /// Provides a data source to read ALB Service Engine Groups. A Service Engine Group is an isolation domain that also
        /// defines shared service engine properties, such as size, network access, and failover. Resources in a service engine
        /// group can be used for different virtual services, depending on your tenant needs. These resources cannot be shared
        /// between different service engine groups.
        /// 
        /// &gt; Only `System Administrator` can use this data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var demo = Vcd.GetNsxtAlbServiceEngineGroup.Invoke(new()
        ///     {
        ///         Name = "configured-service-engine-group",
        ///         SyncOnRefresh = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtAlbServiceEngineGroupResult> Invoke(GetNsxtAlbServiceEngineGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtAlbServiceEngineGroupResult>("vcd:index/getNsxtAlbServiceEngineGroup:getNsxtAlbServiceEngineGroup", args ?? new GetNsxtAlbServiceEngineGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtAlbServiceEngineGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of Service Engine Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("overallocated")]
        public bool? Overallocated { get; set; }

        [Input("syncOnRefresh")]
        public bool? SyncOnRefresh { get; set; }

        public GetNsxtAlbServiceEngineGroupArgs()
        {
        }
        public static new GetNsxtAlbServiceEngineGroupArgs Empty => new GetNsxtAlbServiceEngineGroupArgs();
    }

    public sealed class GetNsxtAlbServiceEngineGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of Service Engine Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("overallocated")]
        public Input<bool>? Overallocated { get; set; }

        [Input("syncOnRefresh")]
        public Input<bool>? SyncOnRefresh { get; set; }

        public GetNsxtAlbServiceEngineGroupInvokeArgs()
        {
        }
        public static new GetNsxtAlbServiceEngineGroupInvokeArgs Empty => new GetNsxtAlbServiceEngineGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtAlbServiceEngineGroupResult
    {
        public readonly string AlbCloudId;
        public readonly int DeployedVirtualServices;
        public readonly string Description;
        public readonly string HaMode;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int MaxVirtualServices;
        public readonly string Name;
        public readonly bool? Overallocated;
        public readonly string ReservationModel;
        public readonly int ReservedVirtualServices;
        public readonly string SupportedFeatureSet;
        public readonly bool? SyncOnRefresh;

        [OutputConstructor]
        private GetNsxtAlbServiceEngineGroupResult(
            string albCloudId,

            int deployedVirtualServices,

            string description,

            string haMode,

            string id,

            int maxVirtualServices,

            string name,

            bool? overallocated,

            string reservationModel,

            int reservedVirtualServices,

            string supportedFeatureSet,

            bool? syncOnRefresh)
        {
            AlbCloudId = albCloudId;
            DeployedVirtualServices = deployedVirtualServices;
            Description = description;
            HaMode = haMode;
            Id = id;
            MaxVirtualServices = maxVirtualServices;
            Name = name;
            Overallocated = overallocated;
            ReservationModel = reservationModel;
            ReservedVirtualServices = reservedVirtualServices;
            SupportedFeatureSet = supportedFeatureSet;
            SyncOnRefresh = syncOnRefresh;
        }
    }
}
