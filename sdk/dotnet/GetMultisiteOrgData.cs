// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetMultisiteOrgData
    {
        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var currentOrg = Vcd.GetMultisiteOrgData.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Task<GetMultisiteOrgDataResult> InvokeAsync(GetMultisiteOrgDataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultisiteOrgDataResult>("vcd:index/getMultisiteOrgData:getMultisiteOrgData", args ?? new GetMultisiteOrgDataArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var currentOrg = Vcd.GetMultisiteOrgData.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteOrgDataResult> Invoke(GetMultisiteOrgDataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteOrgDataResult>("vcd:index/getMultisiteOrgData:getMultisiteOrgData", args ?? new GetMultisiteOrgDataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var currentOrg = Vcd.GetMultisiteOrgData.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         DownloadToFile = "filename.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteOrgDataResult> Invoke(GetMultisiteOrgDataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteOrgDataResult>("vcd:index/getMultisiteOrgData:getMultisiteOrgData", args ?? new GetMultisiteOrgDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultisiteOrgDataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the file that will contain the data needed to associate this Org to another one, 
        /// either on the same VCD or in a different one.
        /// Contains the same data returned in `association_data`.
        /// </summary>
        [Input("downloadToFile")]
        public string? DownloadToFile { get; set; }

        /// <summary>
        /// The ID of the organization for which we need to collect the data.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetMultisiteOrgDataArgs()
        {
        }
        public static new GetMultisiteOrgDataArgs Empty => new GetMultisiteOrgDataArgs();
    }

    public sealed class GetMultisiteOrgDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the file that will contain the data needed to associate this Org to another one, 
        /// either on the same VCD or in a different one.
        /// Contains the same data returned in `association_data`.
        /// </summary>
        [Input("downloadToFile")]
        public Input<string>? DownloadToFile { get; set; }

        /// <summary>
        /// The ID of the organization for which we need to collect the data.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetMultisiteOrgDataInvokeArgs()
        {
        }
        public static new GetMultisiteOrgDataInvokeArgs Empty => new GetMultisiteOrgDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultisiteOrgDataResult
    {
        /// <summary>
        /// The data needed to associate this Org to another one. Contains the same data that would be saved into
        /// the file defined in `download_to_file`.
        /// </summary>
        public readonly string AssociationData;
        /// <summary>
        /// An alphabetically sorted list of current associations.
        /// </summary>
        public readonly ImmutableArray<string> Associations;
        public readonly string? DownloadToFile;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of current associations with other Orgs.
        /// </summary>
        public readonly int NumberOfAssociations;
        public readonly string OrgId;

        [OutputConstructor]
        private GetMultisiteOrgDataResult(
            string associationData,

            ImmutableArray<string> associations,

            string? downloadToFile,

            string id,

            int numberOfAssociations,

            string orgId)
        {
            AssociationData = associationData;
            Associations = associations;
            DownloadToFile = downloadToFile;
            Id = id;
            NumberOfAssociations = numberOfAssociations;
            OrgId = orgId;
        }
    }
}
