// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetGlobalRole
    {
        /// <summary>
        /// Provides a VMware Cloud Director global role data source. This can be used to read global roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetGlobalRole.Invoke(new()
        ///     {
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// global-role-vapp = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:globalRole:1bf4457f-a253-3cf1-b163-f319f1a31802"
        ///   "name" = "vApp Author"
        ///   "publish_to_all_tenants" = true
        ///   "read_only" = false
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Encryption Status",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Compute Policy",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM and VM's Disks Encryption Status",
        ///     "vApp: View VM metrics",
        ///   ])
        ///   "tenants" = toset([
        ///     "org1",
        ///     "org2",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how global roles and
        /// rights work together.
        /// </summary>
        public static Task<GetGlobalRoleResult> InvokeAsync(GetGlobalRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalRoleResult>("vcd:index/getGlobalRole:getGlobalRole", args ?? new GetGlobalRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director global role data source. This can be used to read global roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetGlobalRole.Invoke(new()
        ///     {
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// global-role-vapp = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:globalRole:1bf4457f-a253-3cf1-b163-f319f1a31802"
        ///   "name" = "vApp Author"
        ///   "publish_to_all_tenants" = true
        ///   "read_only" = false
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Encryption Status",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Compute Policy",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM and VM's Disks Encryption Status",
        ///     "vApp: View VM metrics",
        ///   ])
        ///   "tenants" = toset([
        ///     "org1",
        ///     "org2",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how global roles and
        /// rights work together.
        /// </summary>
        public static Output<GetGlobalRoleResult> Invoke(GetGlobalRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalRoleResult>("vcd:index/getGlobalRole:getGlobalRole", args ?? new GetGlobalRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director global role data source. This can be used to read global roles.
        /// 
        /// Supported in provider *v3.3+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vapp_author = Vcd.GetGlobalRole.Invoke(new()
        ///     {
        ///         Name = "vApp Author",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```
        /// Sample output:
        /// 
        /// global-role-vapp = {
        ///   "bundle_key" = "ROLE_VAPP_AUTHOR"
        ///   "description" = "Rights given to a user who uses catalogs and creates vApps"
        ///   "id" = "urn:vcloud:globalRole:1bf4457f-a253-3cf1-b163-f319f1a31802"
        ///   "name" = "vApp Author"
        ///   "publish_to_all_tenants" = true
        ///   "read_only" = false
        ///   "rights" = toset([
        ///     "Catalog: Add vApp from My Cloud",
        ///     "Catalog: View Private and Shared Catalogs",
        ///     "Organization vDC Compute Policy: View",
        ///     "Organization vDC Named Disk: Create",
        ///     "Organization vDC Named Disk: Delete",
        ///     "Organization vDC Named Disk: Edit Properties",
        ///     "Organization vDC Named Disk: View Encryption Status",
        ///     "Organization vDC Named Disk: View Properties",
        ///     "Organization vDC Network: View Properties",
        ///     "Organization vDC: VM-VM Affinity Edit",
        ///     "Organization: View",
        ///     "UI Plugins: View",
        ///     "VAPP_VM_METADATA_TO_VCENTER",
        ///     "vApp Template / Media: Copy",
        ///     "vApp Template / Media: Edit",
        ///     "vApp Template / Media: View",
        ///     "vApp Template: Checkout",
        ///     "vApp: Copy",
        ///     "vApp: Create / Reconfigure",
        ///     "vApp: Delete",
        ///     "vApp: Download",
        ///     "vApp: Edit Properties",
        ///     "vApp: Edit VM CPU",
        ///     "vApp: Edit VM Compute Policy",
        ///     "vApp: Edit VM Hard Disk",
        ///     "vApp: Edit VM Memory",
        ///     "vApp: Edit VM Network",
        ///     "vApp: Edit VM Properties",
        ///     "vApp: Manage VM Password Settings",
        ///     "vApp: Power Operations",
        ///     "vApp: Sharing",
        ///     "vApp: Snapshot Operations",
        ///     "vApp: Upload",
        ///     "vApp: Use Console",
        ///     "vApp: VM Boot Options",
        ///     "vApp: View ACL",
        ///     "vApp: View VM and VM's Disks Encryption Status",
        ///     "vApp: View VM metrics",
        ///   ])
        ///   "tenants" = toset([
        ///     "org1",
        ///     "org2",
        ///   ])
        /// }
        /// ```
        /// 
        /// 
        /// ## More information
        /// 
        /// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how global roles and
        /// rights work together.
        /// </summary>
        public static Output<GetGlobalRoleResult> Invoke(GetGlobalRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalRoleResult>("vcd:index/getGlobalRole:getGlobalRole", args ?? new GetGlobalRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGlobalRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the global role.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetGlobalRoleArgs()
        {
        }
        public static new GetGlobalRoleArgs Empty => new GetGlobalRoleArgs();
    }

    public sealed class GetGlobalRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the global role.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetGlobalRoleInvokeArgs()
        {
        }
        public static new GetGlobalRoleInvokeArgs Empty => new GetGlobalRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetGlobalRoleResult
    {
        /// <summary>
        /// Key used for internationalization.
        /// </summary>
        public readonly string BundleKey;
        /// <summary>
        /// A description of the global role
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// When true, publishes the global role to all tenants
        /// </summary>
        public readonly bool PublishToAllTenants;
        /// <summary>
        /// Whether this global role is read-only
        /// </summary>
        public readonly bool ReadOnly;
        /// <summary>
        /// List of rights assigned to this role
        /// </summary>
        public readonly ImmutableArray<string> Rights;
        /// <summary>
        /// List of tenants to which this global role gets published. Ignored if `publish_to_all_tenants` is true.
        /// </summary>
        public readonly ImmutableArray<string> Tenants;

        [OutputConstructor]
        private GetGlobalRoleResult(
            string bundleKey,

            string description,

            string id,

            string name,

            bool publishToAllTenants,

            bool readOnly,

            ImmutableArray<string> rights,

            ImmutableArray<string> tenants)
        {
            BundleKey = bundleKey;
            Description = description;
            Id = id;
            Name = name;
            PublishToAllTenants = publishToAllTenants;
            ReadOnly = readOnly;
            Rights = rights;
            Tenants = tenants;
        }
    }
}
