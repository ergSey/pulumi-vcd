// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetSubscribedCatalog
    {
        /// <summary>
        /// Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
        /// 
        /// A `vcd.SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
        /// like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
        /// may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subscriber = Vcd.GetSubscribedCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "subscriber",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Task<GetSubscribedCatalogResult> InvokeAsync(GetSubscribedCatalogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscribedCatalogResult>("vcd:index/getSubscribedCatalog:getSubscribedCatalog", args ?? new GetSubscribedCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
        /// 
        /// A `vcd.SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
        /// like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
        /// may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subscriber = Vcd.GetSubscribedCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "subscriber",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetSubscribedCatalogResult> Invoke(GetSubscribedCatalogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscribedCatalogResult>("vcd:index/getSubscribedCatalog:getSubscribedCatalog", args ?? new GetSubscribedCatalogInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
        /// 
        /// A `vcd.SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
        /// like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
        /// may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
        /// 
        /// Supported in provider *v3.8+*
        /// 
        /// ## Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subscriber = Vcd.GetSubscribedCatalog.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Name = "subscriber",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filter arguments
        /// 
        /// * `name_regex` (Optional) matches the name using a regular expression.
        /// * `date` (Optional) is an expression starting with an operator (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`), followed by a date, with
        ///   optional spaces in between. For example: `&gt; 2020-02-01 12:35:00.523Z`
        ///   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
        ///   is recommended.
        ///   Comparison with equality operator (`==`) need to define the date to the microseconds.
        /// * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the newest item.
        /// * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
        ///   are set, it retrieves the oldest item.
        /// * `metadata` (Optional) One or more parameters that will match metadata contents.
        /// 
        /// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
        /// </summary>
        public static Output<GetSubscribedCatalogResult> Invoke(GetSubscribedCatalogInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscribedCatalogResult>("vcd:index/getSubscribedCatalog:getSubscribedCatalog", args ?? new GetSubscribedCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscribedCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Inputs.GetSubscribedCatalogFilterArgs? Filter { get; set; }

        /// <summary>
        /// Catalog name. Required if `filter` is not set.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetSubscribedCatalogArgs()
        {
        }
        public static new GetSubscribedCatalogArgs Empty => new GetSubscribedCatalogArgs();
    }

    public sealed class GetSubscribedCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Retrieves the data source using one or more filter parameters
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetSubscribedCatalogFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Catalog name. Required if `filter` is not set.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetSubscribedCatalogInvokeArgs()
        {
        }
        public static new GetSubscribedCatalogInvokeArgs Empty => new GetSubscribedCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscribedCatalogResult
    {
        /// <summary>
        /// Version number from this catalog.
        /// </summary>
        public readonly int CatalogVersion;
        /// <summary>
        /// Date and time of catalog creation.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Description of the catalog. This is inherited from the publishing catalog
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
        /// </summary>
        public readonly ImmutableArray<string> FailedTasks;
        public readonly Outputs.GetSubscribedCatalogFilterResult? Filter;
        /// <summary>
        /// the catalog's Hyper reference.
        /// </summary>
        public readonly string Href;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
        /// </summary>
        public readonly bool IsLocal;
        /// <summary>
        /// Indicates if this catalog is available for subscription. (Always return `false` for this data source)
        /// </summary>
        public readonly bool IsPublished;
        /// <summary>
        /// Indicates if the catalog is shared (`true` or `false`).
        /// </summary>
        public readonly bool IsShared;
        public readonly bool MakeLocalCopy;
        /// <summary>
        /// List of media item names in this catalog, in alphabetical order.
        /// </summary>
        public readonly ImmutableArray<string> MediaItemLists;
        public readonly string Name;
        /// <summary>
        /// Number of media items available in this catalog.
        /// </summary>
        public readonly int NumberOfMedia;
        /// <summary>
        /// Number of vApp templates available in this catalog.
        /// </summary>
        public readonly int NumberOfVappTemplates;
        public readonly string? Org;
        /// <summary>
        /// Owner of the catalog.
        /// </summary>
        public readonly string OwnerName;
        /// <summary>
        /// Shows if the catalog is published, if it is a subscription from another one or none of those. (Always returns `SUBSCRIBED` for this data source)
        /// </summary>
        public readonly string PublishSubscriptionType;
        /// <summary>
        /// List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
        /// </summary>
        public readonly ImmutableArray<string> RunningTasks;
        /// <summary>
        /// Allows to set specific storage profile to be used for catalog.
        /// </summary>
        public readonly string StorageProfileId;
        /// <summary>
        /// The URL to which this catalog is subscribed.
        /// </summary>
        public readonly string SubscriptionUrl;
        /// <summary>
        /// List of vApp template names in this catalog, in alphabetical order.
        /// </summary>
        public readonly ImmutableArray<string> VappTemplateLists;

        [OutputConstructor]
        private GetSubscribedCatalogResult(
            int catalogVersion,

            string created,

            string description,

            ImmutableArray<string> failedTasks,

            Outputs.GetSubscribedCatalogFilterResult? filter,

            string href,

            string id,

            bool isLocal,

            bool isPublished,

            bool isShared,

            bool makeLocalCopy,

            ImmutableArray<string> mediaItemLists,

            string name,

            int numberOfMedia,

            int numberOfVappTemplates,

            string? org,

            string ownerName,

            string publishSubscriptionType,

            ImmutableArray<string> runningTasks,

            string storageProfileId,

            string subscriptionUrl,

            ImmutableArray<string> vappTemplateLists)
        {
            CatalogVersion = catalogVersion;
            Created = created;
            Description = description;
            FailedTasks = failedTasks;
            Filter = filter;
            Href = href;
            Id = id;
            IsLocal = isLocal;
            IsPublished = isPublished;
            IsShared = isShared;
            MakeLocalCopy = makeLocalCopy;
            MediaItemLists = mediaItemLists;
            Name = name;
            NumberOfMedia = numberOfMedia;
            NumberOfVappTemplates = numberOfVappTemplates;
            Org = org;
            OwnerName = ownerName;
            PublishSubscriptionType = publishSubscriptionType;
            RunningTasks = runningTasks;
            StorageProfileId = storageProfileId;
            SubscriptionUrl = subscriptionUrl;
            VappTemplateLists = vappTemplateLists;
        }
    }
}
