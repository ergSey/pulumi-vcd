// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNsxtEdgegatewayDns
    {
        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var dns_service = Vcd.GetNsxtEdgegatewayDns.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNsxtEdgegatewayDnsResult> InvokeAsync(GetNsxtEdgegatewayDnsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNsxtEdgegatewayDnsResult>("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", args ?? new GetNsxtEdgegatewayDnsArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var dns_service = Vcd.GetNsxtEdgegatewayDns.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayDnsResult> Invoke(GetNsxtEdgegatewayDnsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayDnsResult>("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", args ?? new GetNsxtEdgegatewayDnsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
        /// 
        /// Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var existing = Vcd.GetOrgVdc.Invoke(new()
        ///     {
        ///         Name = "existing-vdc",
        ///     });
        /// 
        ///     var testing = Vcd.GetNsxtEdgegateway.Invoke(new()
        ///     {
        ///         OwnerId = existing.Apply(getOrgVdcResult =&gt; getOrgVdcResult.Id),
        ///         Name = "server-testing",
        ///     });
        /// 
        ///     var dns_service = Vcd.GetNsxtEdgegatewayDns.Invoke(new()
        ///     {
        ///         Org = "datacloud",
        ///         EdgeGatewayId = testing.Apply(getNsxtEdgegatewayResult =&gt; getNsxtEdgegatewayResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNsxtEdgegatewayDnsResult> Invoke(GetNsxtEdgegatewayDnsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNsxtEdgegatewayDnsResult>("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", args ?? new GetNsxtEdgegatewayDnsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNsxtEdgegatewayDnsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Edge Gateway (NSX-T only). 
        /// Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public string EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at 
        /// provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        public GetNsxtEdgegatewayDnsArgs()
        {
        }
        public static new GetNsxtEdgegatewayDnsArgs Empty => new GetNsxtEdgegatewayDnsArgs();
    }

    public sealed class GetNsxtEdgegatewayDnsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Edge Gateway (NSX-T only). 
        /// Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
        /// </summary>
        [Input("edgeGatewayId", required: true)]
        public Input<string> EdgeGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at 
        /// provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        public GetNsxtEdgegatewayDnsInvokeArgs()
        {
        }
        public static new GetNsxtEdgegatewayDnsInvokeArgs Empty => new GetNsxtEdgegatewayDnsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNsxtEdgegatewayDnsResult
    {
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewayDnsConditionalForwarderZoneResult> ConditionalForwarderZones;
        public readonly ImmutableArray<Outputs.GetNsxtEdgegatewayDnsDefaultForwarderZoneResult> DefaultForwarderZones;
        public readonly string EdgeGatewayId;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ListenerIp;
        public readonly string? Org;
        public readonly bool SnatRuleEnabled;
        public readonly string SnatRuleIpAddress;

        [OutputConstructor]
        private GetNsxtEdgegatewayDnsResult(
            ImmutableArray<Outputs.GetNsxtEdgegatewayDnsConditionalForwarderZoneResult> conditionalForwarderZones,

            ImmutableArray<Outputs.GetNsxtEdgegatewayDnsDefaultForwarderZoneResult> defaultForwarderZones,

            string edgeGatewayId,

            bool enabled,

            string id,

            string listenerIp,

            string? org,

            bool snatRuleEnabled,

            string snatRuleIpAddress)
        {
            ConditionalForwarderZones = conditionalForwarderZones;
            DefaultForwarderZones = defaultForwarderZones;
            EdgeGatewayId = edgeGatewayId;
            Enabled = enabled;
            Id = id;
            ListenerIp = listenerIp;
            Org = org;
            SnatRuleEnabled = snatRuleEnabled;
            SnatRuleIpAddress = snatRuleIpAddress;
        }
    }
}
