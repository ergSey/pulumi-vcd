// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetNetworkPool
    {
        /// <summary>
        /// Provides a data source for a network pool attached to a VCD.
        /// 
        /// Supported in provider *v3.10+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var np1 = Vcd.GetNetworkPool.Invoke(new()
        ///     {
        ///         Name = "NSX-T Overlay 1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkPoolResult> InvokeAsync(GetNetworkPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkPoolResult>("vcd:index/getNetworkPool:getNetworkPool", args ?? new GetNetworkPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for a network pool attached to a VCD.
        /// 
        /// Supported in provider *v3.10+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var np1 = Vcd.GetNetworkPool.Invoke(new()
        ///     {
        ///         Name = "NSX-T Overlay 1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkPoolResult> Invoke(GetNetworkPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkPoolResult>("vcd:index/getNetworkPool:getNetworkPool", args ?? new GetNetworkPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source for a network pool attached to a VCD.
        /// 
        /// Supported in provider *v3.10+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var np1 = Vcd.GetNetworkPool.Invoke(new()
        ///     {
        ///         Name = "NSX-T Overlay 1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkPoolResult> Invoke(GetNetworkPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkPoolResult>("vcd:index/getNetworkPool:getNetworkPool", args ?? new GetNetworkPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// network pool name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNetworkPoolArgs()
        {
        }
        public static new GetNetworkPoolArgs Empty => new GetNetworkPoolArgs();
    }

    public sealed class GetNetworkPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// network pool name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNetworkPoolInvokeArgs()
        {
        }
        public static new GetNetworkPoolInvokeArgs Empty => new GetNetworkPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkPoolResult
    {
        public readonly ImmutableArray<Outputs.GetNetworkPoolBackingResult> Backings;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NetworkProviderId;
        public readonly string NetworkProviderName;
        public readonly string NetworkProviderType;
        public readonly bool PromiscuousMode;
        public readonly string Status;
        public readonly int TotalBackingsCount;
        public readonly string Type;
        public readonly int UsedBackingsCount;

        [OutputConstructor]
        private GetNetworkPoolResult(
            ImmutableArray<Outputs.GetNetworkPoolBackingResult> backings,

            string description,

            string id,

            string name,

            string networkProviderId,

            string networkProviderName,

            string networkProviderType,

            bool promiscuousMode,

            string status,

            int totalBackingsCount,

            string type,

            int usedBackingsCount)
        {
            Backings = backings;
            Description = description;
            Id = id;
            Name = name;
            NetworkProviderId = networkProviderId;
            NetworkProviderName = networkProviderName;
            NetworkProviderType = networkProviderType;
            PromiscuousMode = promiscuousMode;
            Status = status;
            TotalBackingsCount = totalBackingsCount;
            Type = type;
            UsedBackingsCount = usedBackingsCount;
        }
    }
}
