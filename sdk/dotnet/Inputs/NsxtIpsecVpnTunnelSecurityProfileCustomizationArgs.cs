// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd.Inputs
{

    public sealed class NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value in seconds of dead probe detection interval. Minimum is 3 seconds and the maximum is 60 seconds
        /// </summary>
        [Input("dpdProbeInternal")]
        public Input<int>? DpdProbeInternal { get; set; }

        [Input("ikeDhGroups", required: true)]
        private InputList<string>? _ikeDhGroups;

        /// <summary>
        /// Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
        /// </summary>
        public InputList<string> IkeDhGroups
        {
            get => _ikeDhGroups ?? (_ikeDhGroups = new InputList<string>());
            set => _ikeDhGroups = value;
        }

        [Input("ikeDigestAlgorithms")]
        private InputList<string>? _ikeDigestAlgorithms;

        /// <summary>
        /// Secure hashing algorithms to use during the IKE negotiation. One of SHA1, SHA2_256, SHA2_384, SHA2_512
        /// </summary>
        public InputList<string> IkeDigestAlgorithms
        {
            get => _ikeDigestAlgorithms ?? (_ikeDigestAlgorithms = new InputList<string>());
            set => _ikeDigestAlgorithms = value;
        }

        [Input("ikeEncryptionAlgorithms", required: true)]
        private InputList<string>? _ikeEncryptionAlgorithms;

        /// <summary>
        /// Encryption algorithms. One of SHA1, SHA2_256, SHA2_384, SHA2_512
        /// </summary>
        public InputList<string> IkeEncryptionAlgorithms
        {
            get => _ikeEncryptionAlgorithms ?? (_ikeEncryptionAlgorithms = new InputList<string>());
            set => _ikeEncryptionAlgorithms = value;
        }

        /// <summary>
        /// Security Association life time (in seconds). It is number of seconds before the IPsec tunnel needs to reestablish
        /// </summary>
        [Input("ikeSaLifetime")]
        public Input<int>? IkeSaLifetime { get; set; }

        /// <summary>
        /// IKE version one of IKE_V1, IKE_V2, IKE_FLEX
        /// </summary>
        [Input("ikeVersion", required: true)]
        public Input<string> IkeVersion { get; set; } = null!;

        /// <summary>
        /// Policy for handling defragmentation bit. One of COPY, CLEAR
        /// </summary>
        [Input("tunnelDfPolicy")]
        public Input<string>? TunnelDfPolicy { get; set; }

        [Input("tunnelDhGroups", required: true)]
        private InputList<string>? _tunnelDhGroups;

        /// <summary>
        /// Diffie-Hellman groups to be used is PFS is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
        /// </summary>
        public InputList<string> TunnelDhGroups
        {
            get => _tunnelDhGroups ?? (_tunnelDhGroups = new InputList<string>());
            set => _tunnelDhGroups = value;
        }

        [Input("tunnelDigestAlgorithms")]
        private InputList<string>? _tunnelDigestAlgorithms;

        /// <summary>
        /// Digest algorithms to be used for message digest. One of SHA1, SHA2_256, SHA2_384, SHA2_512
        /// </summary>
        public InputList<string> TunnelDigestAlgorithms
        {
            get => _tunnelDigestAlgorithms ?? (_tunnelDigestAlgorithms = new InputList<string>());
            set => _tunnelDigestAlgorithms = value;
        }

        [Input("tunnelEncryptionAlgorithms", required: true)]
        private InputList<string>? _tunnelEncryptionAlgorithms;

        /// <summary>
        /// Encryption algorithms to use in IPSec tunnel establishment. One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128, NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
        /// </summary>
        public InputList<string> TunnelEncryptionAlgorithms
        {
            get => _tunnelEncryptionAlgorithms ?? (_tunnelEncryptionAlgorithms = new InputList<string>());
            set => _tunnelEncryptionAlgorithms = value;
        }

        /// <summary>
        /// Perfect Forward Secrecy Enabled or Disabled. Default (enabled)
        /// </summary>
        [Input("tunnelPfsEnabled")]
        public Input<bool>? TunnelPfsEnabled { get; set; }

        /// <summary>
        /// Security Association life time (in seconds)
        /// </summary>
        [Input("tunnelSaLifetime")]
        public Input<int>? TunnelSaLifetime { get; set; }

        public NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs()
        {
        }
        public static new NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs Empty => new NsxtIpsecVpnTunnelSecurityProfileCustomizationArgs();
    }
}
