// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetMultisiteOrgAssociation
    {
        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association information.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving an Org association using the associated Org ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociatedOrgId = "urn:vcloud:org:3901d87d-1596-4a5a-a74b-57a7313737cf",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving an Org association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociationDataFile = "remote-org.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Task<GetMultisiteOrgAssociationResult> InvokeAsync(GetMultisiteOrgAssociationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultisiteOrgAssociationResult>("vcd:index/getMultisiteOrgAssociation:getMultisiteOrgAssociation", args ?? new GetMultisiteOrgAssociationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association information.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving an Org association using the associated Org ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociatedOrgId = "urn:vcloud:org:3901d87d-1596-4a5a-a74b-57a7313737cf",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving an Org association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociationDataFile = "remote-org.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteOrgAssociationResult> Invoke(GetMultisiteOrgAssociationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteOrgAssociationResult>("vcd:index/getMultisiteOrgAssociation:getMultisiteOrgAssociation", args ?? new GetMultisiteOrgAssociationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a data source to read a VMware Cloud Director Org association information.
        /// 
        /// Supported in provider *v3.13+*
        /// 
        /// ## Example Usage
        /// 
        /// ### 1
        /// 
        /// Retrieving an Org association using the associated Org ID.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociatedOrgId = "urn:vcloud:org:3901d87d-1596-4a5a-a74b-57a7313737cf",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### 2
        /// 
        /// Retrieving an Org association using the association data file.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_org = Vcd.GetOrg.Invoke(new()
        ///     {
        ///         Name = "my-org",
        ///     });
        /// 
        ///     var org1_org2 = Vcd.GetMultisiteOrgAssociation.Invoke(new()
        ///     {
        ///         OrgId = my_org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         AssociationDataFile = "remote-org.xml",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## More information
        /// 
        /// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
        /// of association workflows.
        /// </summary>
        public static Output<GetMultisiteOrgAssociationResult> Invoke(GetMultisiteOrgAssociationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultisiteOrgAssociationResult>("vcd:index/getMultisiteOrgAssociation:getMultisiteOrgAssociation", args ?? new GetMultisiteOrgAssociationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultisiteOrgAssociationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the remote organization associated with the current one. (Used in alternative to
        /// `associated_data_file`)
        /// </summary>
        [Input("associatedOrgId")]
        public string? AssociatedOrgId { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate this Org to another one.
        /// (Used when `associated_org_id` is not known)
        /// </summary>
        [Input("associationDataFile")]
        public string? AssociationDataFile { get; set; }

        /// <summary>
        /// The ID of the organization for which we need to collect the data.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetMultisiteOrgAssociationArgs()
        {
        }
        public static new GetMultisiteOrgAssociationArgs Empty => new GetMultisiteOrgAssociationArgs();
    }

    public sealed class GetMultisiteOrgAssociationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the remote organization associated with the current one. (Used in alternative to
        /// `associated_data_file`)
        /// </summary>
        [Input("associatedOrgId")]
        public Input<string>? AssociatedOrgId { get; set; }

        /// <summary>
        /// Name of the file containing the data used to associate this Org to another one.
        /// (Used when `associated_org_id` is not known)
        /// </summary>
        [Input("associationDataFile")]
        public Input<string>? AssociationDataFile { get; set; }

        /// <summary>
        /// The ID of the organization for which we need to collect the data.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetMultisiteOrgAssociationInvokeArgs()
        {
        }
        public static new GetMultisiteOrgAssociationInvokeArgs Empty => new GetMultisiteOrgAssociationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultisiteOrgAssociationResult
    {
        public readonly string? AssociatedOrgId;
        /// <summary>
        /// The name of the associated Org.
        /// </summary>
        public readonly string AssociatedOrgName;
        /// <summary>
        /// The ID of the associated site.
        /// </summary>
        public readonly string AssociatedSiteId;
        public readonly string? AssociationDataFile;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrgId;
        /// <summary>
        /// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetMultisiteOrgAssociationResult(
            string? associatedOrgId,

            string associatedOrgName,

            string associatedSiteId,

            string? associationDataFile,

            string id,

            string orgId,

            string status)
        {
            AssociatedOrgId = associatedOrgId;
            AssociatedOrgName = associatedOrgName;
            AssociatedSiteId = associatedSiteId;
            AssociationDataFile = associationDataFile;
            Id = id;
            OrgId = orgId;
            Status = status;
        }
    }
}
