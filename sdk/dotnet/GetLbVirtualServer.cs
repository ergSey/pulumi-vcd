// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    public static class GetLbVirtualServer
    {
        /// <summary>
        /// Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
        /// internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests. 
        /// 
        /// &gt; **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
        /// This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&amp;29=&amp;93=) 
        /// to check supported VMware Cloud Director and NSX for vSphere configurations.
        /// 
        /// &gt; **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere 
        /// API Guide. The API supports NSX 6.2, 6.3, and 6.4.
        /// 
        /// Supported in provider *v2.4+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vs = Vcd.GetLbVirtualServer.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         Name = "not-managed",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLbVirtualServerResult> InvokeAsync(GetLbVirtualServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLbVirtualServerResult>("vcd:index/getLbVirtualServer:getLbVirtualServer", args ?? new GetLbVirtualServerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
        /// internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests. 
        /// 
        /// &gt; **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
        /// This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&amp;29=&amp;93=) 
        /// to check supported VMware Cloud Director and NSX for vSphere configurations.
        /// 
        /// &gt; **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere 
        /// API Guide. The API supports NSX 6.2, 6.3, and 6.4.
        /// 
        /// Supported in provider *v2.4+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vs = Vcd.GetLbVirtualServer.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         Name = "not-managed",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLbVirtualServerResult> Invoke(GetLbVirtualServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLbVirtualServerResult>("vcd:index/getLbVirtualServer:getLbVirtualServer", args ?? new GetLbVirtualServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
        /// internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests. 
        /// 
        /// &gt; **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
        /// This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&amp;29=&amp;93=) 
        /// to check supported VMware Cloud Director and NSX for vSphere configurations.
        /// 
        /// &gt; **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere 
        /// API Guide. The API supports NSX 6.2, 6.3, and 6.4.
        /// 
        /// Supported in provider *v2.4+*
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Vcd = Pulumi.Vcd;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_vs = Vcd.GetLbVirtualServer.Invoke(new()
        ///     {
        ///         Org = "my-org",
        ///         Vdc = "my-org-vdc",
        ///         EdgeGateway = "my-edge-gw",
        ///         Name = "not-managed",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLbVirtualServerResult> Invoke(GetLbVirtualServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLbVirtualServerResult>("vcd:index/getLbVirtualServer:getLbVirtualServer", args ?? new GetLbVirtualServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLbVirtualServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the edge gateway on which the virtual server is defined
        /// </summary>
        [Input("edgeGateway", required: true)]
        public string EdgeGateway { get; set; } = null!;

        /// <summary>
        /// Name for identifying the exact virtual server
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public string? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public string? Vdc { get; set; }

        public GetLbVirtualServerArgs()
        {
        }
        public static new GetLbVirtualServerArgs Empty => new GetLbVirtualServerArgs();
    }

    public sealed class GetLbVirtualServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the edge gateway on which the virtual server is defined
        /// </summary>
        [Input("edgeGateway", required: true)]
        public Input<string> EdgeGateway { get; set; } = null!;

        /// <summary>
        /// Name for identifying the exact virtual server
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The name of VDC to use, optional if defined at provider level
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public GetLbVirtualServerInvokeArgs()
        {
        }
        public static new GetLbVirtualServerInvokeArgs Empty => new GetLbVirtualServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLbVirtualServerResult
    {
        public readonly string AppProfileId;
        public readonly ImmutableArray<string> AppRuleIds;
        public readonly int ConnectionLimit;
        public readonly int ConnectionRateLimit;
        public readonly string Description;
        public readonly string EdgeGateway;
        public readonly bool EnableAcceleration;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddress;
        public readonly string Name;
        public readonly string? Org;
        public readonly int Port;
        public readonly string Protocol;
        public readonly string ServerPoolId;
        public readonly string? Vdc;

        [OutputConstructor]
        private GetLbVirtualServerResult(
            string appProfileId,

            ImmutableArray<string> appRuleIds,

            int connectionLimit,

            int connectionRateLimit,

            string description,

            string edgeGateway,

            bool enableAcceleration,

            bool enabled,

            string id,

            string ipAddress,

            string name,

            string? org,

            int port,

            string protocol,

            string serverPoolId,

            string? vdc)
        {
            AppProfileId = appProfileId;
            AppRuleIds = appRuleIds;
            ConnectionLimit = connectionLimit;
            ConnectionRateLimit = connectionRateLimit;
            Description = description;
            EdgeGateway = edgeGateway;
            EnableAcceleration = enableAcceleration;
            Enabled = enabled;
            Id = id;
            IpAddress = ipAddress;
            Name = name;
            Org = org;
            Port = port;
            Protocol = protocol;
            ServerPoolId = serverPoolId;
            Vdc = vdc;
        }
    }
}
