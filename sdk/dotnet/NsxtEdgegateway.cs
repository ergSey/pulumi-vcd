// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vcd
{
    [VcdResourceType("vcd:index/nsxtEdgegateway:NsxtEdgegateway")]
    public partial class NsxtEdgegateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        /// </summary>
        [Output("dedicateExternalNetwork")]
        public Output<bool?> DedicateExternalNetwork { get; private set; } = null!;

        /// <summary>
        /// `ACTIVE_STANDBY` (default) or
        /// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        /// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        /// nature guarantees high north-south data throughput.
        /// </summary>
        [Output("deploymentMode")]
        public Output<string> DeploymentMode { get; private set; } = null!;

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specific Edge Cluster ID if required
        /// </summary>
        [Output("edgeClusterId")]
        public Output<string> EdgeClusterId { get; private set; } = null!;

        /// <summary>
        /// Total allocated IP count in attached NSX-T Segment backed
        /// external networks
        /// </summary>
        [Output("externalNetworkAllocatedIpCount")]
        public Output<int> ExternalNetworkAllocatedIpCount { get; private set; } = null!;

        /// <summary>
        /// An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        /// can be used to lookup ID by name.
        /// </summary>
        [Output("externalNetworkId")]
        public Output<string> ExternalNetworkId { get; private set; } = null!;

        /// <summary>
        /// attaches NSX-T Segment backed External
        /// Networks with a given configuration block. It *does not
        /// support IP Spaces*.
        /// </summary>
        [Output("externalNetworks")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewayExternalNetwork>> ExternalNetworks { get; private set; } = null!;

        /// <summary>
        /// Sets a limit of IPs to count for
        /// `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        /// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        /// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        /// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        /// specify `0` for *unlimited* value.
        /// 
        /// &lt;a id="ip-allocation-modes"&gt;&lt;/a&gt;
        /// </summary>
        [Output("ipCountReadLimit")]
        public Output<int?> IpCountReadLimit { get; private set; } = null!;

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Non-Distributed routing will allow
        /// tenants the option of connecting Org Vdc networks to the Service
        /// Router. This would
        /// force all VM traffic through the service router for that network. Default `false`.
        /// </summary>
        [Output("nonDistributedRoutingEnabled")]
        public Output<bool> NonDistributedRoutingEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Output("org")]
        public Output<string?> Org { get; private set; } = null!;

        /// <summary>
        /// The ID of VDC or VDC Group. **Note:** Data sources
        /// [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        /// [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        /// name.
        /// 
        /// &gt; Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        /// definition at provider level.
        /// 
        /// &gt; When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        /// (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        /// is to pick egress traffic origin for multi datacenter VDC Groups.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// Primary IP address exposed for an easy access without nesting.
        /// </summary>
        [Output("primaryIp")]
        public Output<string> PrimaryIp { get; private set; } = null!;

        /// <summary>
        /// If `owner_id` is a VDC Group, by default Edge
        /// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        /// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        /// Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        /// </summary>
        [Output("startingVdcId")]
        public Output<string?> StartingVdcId { get; private set; } = null!;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        [Output("subnetWithIpCounts")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewaySubnetWithIpCount>> SubnetWithIpCounts { get; private set; } = null!;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        [Output("subnetWithTotalIpCounts")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewaySubnetWithTotalIpCount>> SubnetWithTotalIpCounts { get; private set; } = null!;

        /// <summary>
        /// One or more subnets defined for Edge Gateway. One of
        /// `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        /// network is backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<Outputs.NsxtEdgegatewaySubnet>> Subnets { get; private set; } = null!;

        /// <summary>
        /// Required with `subnet_with_total_ip_count`. It is
        /// **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        /// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        /// </summary>
        [Output("totalAllocatedIpCount")]
        public Output<int> TotalAllocatedIpCount { get; private set; } = null!;

        /// <summary>
        /// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        /// exposed when using IP Spaces.
        /// </summary>
        [Output("unusedIpCount")]
        public Output<int> UnusedIpCount { get; private set; } = null!;

        /// <summary>
        /// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        /// </summary>
        [Output("useIpSpaces")]
        public Output<bool> UseIpSpaces { get; private set; } = null!;

        /// <summary>
        /// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        /// exposed when using IP Spaces.
        /// </summary>
        [Output("usedIpCount")]
        public Output<int> UsedIpCount { get; private set; } = null!;

        /// <summary>
        /// **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        /// gateway. Can be inherited from `provider` configuration if not defined here.
        /// </summary>
        [Output("vdc")]
        public Output<string> Vdc { get; private set; } = null!;


        /// <summary>
        /// Create a NsxtEdgegateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NsxtEdgegateway(string name, NsxtEdgegatewayArgs args, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, args ?? new NsxtEdgegatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NsxtEdgegateway(string name, Input<string> id, NsxtEdgegatewayState? state = null, CustomResourceOptions? options = null)
            : base("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/vmware/terraform-provider-vcd/releases/download/v3.14.1/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NsxtEdgegateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NsxtEdgegateway Get(string name, Input<string> id, NsxtEdgegatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new NsxtEdgegateway(name, id, state, options);
        }
    }

    public sealed class NsxtEdgegatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        /// </summary>
        [Input("dedicateExternalNetwork")]
        public Input<bool>? DedicateExternalNetwork { get; set; }

        /// <summary>
        /// `ACTIVE_STANDBY` (default) or
        /// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        /// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        /// nature guarantees high north-south data throughput.
        /// </summary>
        [Input("deploymentMode")]
        public Input<string>? DeploymentMode { get; set; }

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specific Edge Cluster ID if required
        /// </summary>
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        /// <summary>
        /// An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        /// can be used to lookup ID by name.
        /// </summary>
        [Input("externalNetworkId", required: true)]
        public Input<string> ExternalNetworkId { get; set; } = null!;

        [Input("externalNetworks")]
        private InputList<Inputs.NsxtEdgegatewayExternalNetworkArgs>? _externalNetworks;

        /// <summary>
        /// attaches NSX-T Segment backed External
        /// Networks with a given configuration block. It *does not
        /// support IP Spaces*.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewayExternalNetworkArgs> ExternalNetworks
        {
            get => _externalNetworks ?? (_externalNetworks = new InputList<Inputs.NsxtEdgegatewayExternalNetworkArgs>());
            set => _externalNetworks = value;
        }

        /// <summary>
        /// Sets a limit of IPs to count for
        /// `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        /// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        /// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        /// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        /// specify `0` for *unlimited* value.
        /// 
        /// &lt;a id="ip-allocation-modes"&gt;&lt;/a&gt;
        /// </summary>
        [Input("ipCountReadLimit")]
        public Input<int>? IpCountReadLimit { get; set; }

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Non-Distributed routing will allow
        /// tenants the option of connecting Org Vdc networks to the Service
        /// Router. This would
        /// force all VM traffic through the service router for that network. Default `false`.
        /// </summary>
        [Input("nonDistributedRoutingEnabled")]
        public Input<bool>? NonDistributedRoutingEnabled { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of VDC or VDC Group. **Note:** Data sources
        /// [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        /// [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        /// name.
        /// 
        /// &gt; Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        /// definition at provider level.
        /// 
        /// &gt; When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        /// (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        /// is to pick egress traffic origin for multi datacenter VDC Groups.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// If `owner_id` is a VDC Group, by default Edge
        /// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        /// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        /// Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        /// </summary>
        [Input("startingVdcId")]
        public Input<string>? StartingVdcId { get; set; }

        [Input("subnetWithIpCounts")]
        private InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountArgs>? _subnetWithIpCounts;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountArgs> SubnetWithIpCounts
        {
            get => _subnetWithIpCounts ?? (_subnetWithIpCounts = new InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountArgs>());
            set => _subnetWithIpCounts = value;
        }

        [Input("subnetWithTotalIpCounts")]
        private InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountArgs>? _subnetWithTotalIpCounts;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountArgs> SubnetWithTotalIpCounts
        {
            get => _subnetWithTotalIpCounts ?? (_subnetWithTotalIpCounts = new InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountArgs>());
            set => _subnetWithTotalIpCounts = value;
        }

        [Input("subnets")]
        private InputList<Inputs.NsxtEdgegatewaySubnetArgs>? _subnets;

        /// <summary>
        /// One or more subnets defined for Edge Gateway. One of
        /// `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        /// network is backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.NsxtEdgegatewaySubnetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// Required with `subnet_with_total_ip_count`. It is
        /// **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        /// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        /// </summary>
        [Input("totalAllocatedIpCount")]
        public Input<int>? TotalAllocatedIpCount { get; set; }

        /// <summary>
        /// **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        /// gateway. Can be inherited from `provider` configuration if not defined here.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtEdgegatewayArgs()
        {
        }
        public static new NsxtEdgegatewayArgs Empty => new NsxtEdgegatewayArgs();
    }

    public sealed class NsxtEdgegatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
        /// </summary>
        [Input("dedicateExternalNetwork")]
        public Input<bool>? DedicateExternalNetwork { get; set; }

        /// <summary>
        /// `ACTIVE_STANDBY` (default) or
        /// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
        /// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
        /// nature guarantees high north-south data throughput.
        /// </summary>
        [Input("deploymentMode")]
        public Input<string>? DeploymentMode { get; set; }

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specific Edge Cluster ID if required
        /// </summary>
        [Input("edgeClusterId")]
        public Input<string>? EdgeClusterId { get; set; }

        /// <summary>
        /// Total allocated IP count in attached NSX-T Segment backed
        /// external networks
        /// </summary>
        [Input("externalNetworkAllocatedIpCount")]
        public Input<int>? ExternalNetworkAllocatedIpCount { get; set; }

        /// <summary>
        /// An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
        /// can be used to lookup ID by name.
        /// </summary>
        [Input("externalNetworkId")]
        public Input<string>? ExternalNetworkId { get; set; }

        [Input("externalNetworks")]
        private InputList<Inputs.NsxtEdgegatewayExternalNetworkGetArgs>? _externalNetworks;

        /// <summary>
        /// attaches NSX-T Segment backed External
        /// Networks with a given configuration block. It *does not
        /// support IP Spaces*.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewayExternalNetworkGetArgs> ExternalNetworks
        {
            get => _externalNetworks ?? (_externalNetworks = new InputList<Inputs.NsxtEdgegatewayExternalNetworkGetArgs>());
            set => _externalNetworks = value;
        }

        /// <summary>
        /// Sets a limit of IPs to count for
        /// `used_ip_count` and `unused_ip_count` attributes to avoid exhausting compute resource while
        /// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
        /// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
        /// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
        /// specify `0` for *unlimited* value.
        /// 
        /// &lt;a id="ip-allocation-modes"&gt;&lt;/a&gt;
        /// </summary>
        [Input("ipCountReadLimit")]
        public Input<int>? IpCountReadLimit { get; set; }

        /// <summary>
        /// A unique name for the edge gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Non-Distributed routing will allow
        /// tenants the option of connecting Org Vdc networks to the Service
        /// Router. This would
        /// force all VM traffic through the service router for that network. Default `false`.
        /// </summary>
        [Input("nonDistributedRoutingEnabled")]
        public Input<bool>? NonDistributedRoutingEnabled { get; set; }

        /// <summary>
        /// The name of organization to which the VDC belongs. Optional if defined at provider level.
        /// </summary>
        [Input("org")]
        public Input<string>? Org { get; set; }

        /// <summary>
        /// The ID of VDC or VDC Group. **Note:** Data sources
        /// [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
        /// [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
        /// name.
        /// 
        /// &gt; Only one of `vdc` or `owner_id` can be specified. `owner_id` takes precedence over `vdc`
        /// definition at provider level.
        /// 
        /// &gt; When a VDC Group ID is specified in `owner_id` field, the Edge Gateway will be created in VDC
        /// (random member of VDC Group or specified in `starting_vdc_id`). Main use case of `starting_vdc_id`
        /// is to pick egress traffic origin for multi datacenter VDC Groups.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// Primary IP address exposed for an easy access without nesting.
        /// </summary>
        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        /// <summary>
        /// If `owner_id` is a VDC Group, by default Edge
        /// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
        /// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
        /// Group) **Note:** It can only be used when `owner_id` is a VDC Group.
        /// </summary>
        [Input("startingVdcId")]
        public Input<string>? StartingVdcId { get; set; }

        [Input("subnetWithIpCounts")]
        private InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountGetArgs>? _subnetWithIpCounts;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountGetArgs> SubnetWithIpCounts
        {
            get => _subnetWithIpCounts ?? (_subnetWithIpCounts = new InputList<Inputs.NsxtEdgegatewaySubnetWithIpCountGetArgs>());
            set => _subnetWithIpCounts = value;
        }

        [Input("subnetWithTotalIpCounts")]
        private InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountGetArgs>? _subnetWithTotalIpCounts;

        /// <summary>
        /// One or more
        /// subnets defined for Edge Gateway. One of `subnet`,
        /// `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent network is
        /// backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountGetArgs> SubnetWithTotalIpCounts
        {
            get => _subnetWithTotalIpCounts ?? (_subnetWithTotalIpCounts = new InputList<Inputs.NsxtEdgegatewaySubnetWithTotalIpCountGetArgs>());
            set => _subnetWithTotalIpCounts = value;
        }

        [Input("subnets")]
        private InputList<Inputs.NsxtEdgegatewaySubnetGetArgs>? _subnets;

        /// <summary>
        /// One or more subnets defined for Edge Gateway. One of
        /// `subnet`, `subnet_with_total_ip_count` or `subnet_with_ip_count` is **required unless** parent
        /// network is backed by *IP Spaces*. Read more in IP allocation modes section.
        /// </summary>
        public InputList<Inputs.NsxtEdgegatewaySubnetGetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.NsxtEdgegatewaySubnetGetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// Required with `subnet_with_total_ip_count`. It is
        /// **read-only** attribute with other other allocation models `subnet` and `subnet_with_ip_count`.
        /// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
        /// </summary>
        [Input("totalAllocatedIpCount")]
        public Input<int>? TotalAllocatedIpCount { get; set; }

        /// <summary>
        /// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        /// exposed when using IP Spaces.
        /// </summary>
        [Input("unusedIpCount")]
        public Input<int>? UnusedIpCount { get; set; }

        /// <summary>
        /// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
        /// </summary>
        [Input("useIpSpaces")]
        public Input<bool>? UseIpSpaces { get; set; }

        /// <summary>
        /// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
        /// exposed when using IP Spaces.
        /// </summary>
        [Input("usedIpCount")]
        public Input<int>? UsedIpCount { get; set; }

        /// <summary>
        /// **Deprecated** in favor of `owner_id`. The name of VDC that owns the edge
        /// gateway. Can be inherited from `provider` configuration if not defined here.
        /// </summary>
        [Input("vdc")]
        public Input<string>? Vdc { get; set; }

        public NsxtEdgegatewayState()
        {
        }
        public static new NsxtEdgegatewayState Empty => new NsxtEdgegatewayState();
    }
}
