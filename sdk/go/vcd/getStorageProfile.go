// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source for VDC storage profile.
//
// Supported in provider *v3.1+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetStorageProfile(ctx, &vcd.GetStorageProfileArgs{
//				Org:  pulumi.StringRef("my-org"),
//				Vdc:  pulumi.StringRef("my-vdc"),
//				Name: "ssd-storage-profile",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## IOPS settings
//
// (Supported from VCD *v10.2*)
//
// * `iopsLimitingEnabled` - True if this storage profile is IOPS-based placement enabled
// * `maximumDiskIops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
// * `defaultDiskIops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
// * `diskIopsPerGbMax` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
// * `iopsLimit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
func GetStorageProfile(ctx *pulumi.Context, args *GetStorageProfileArgs, opts ...pulumi.InvokeOption) (*GetStorageProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStorageProfileResult
	err := ctx.Invoke("vcd:index/getStorageProfile:getStorageProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorageProfile.
type GetStorageProfileArgs struct {
	// Storage profile name.
	Name string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getStorageProfile.
type GetStorageProfileResult struct {
	// True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified
	Default bool `pulumi:"default"`
	// True if this storage profile is enabled for use in the VDC
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Total IOPS currently allocated to this storage profile
	IopsAllocated int `pulumi:"iopsAllocated"`
	// A block providing IOPS settings. See IOPS settings below for details.
	IopsSettings []GetStorageProfileIopsSetting `pulumi:"iopsSettings"`
	// Maximum number of storage bytes (scaled by 'units' field) allocated for this profile. `0` means `maximum possible`
	Limit int `pulumi:"limit"`
	// Deprecated: Use metadataEntry instead
	Metadata        map[string]string                `pulumi:"metadata"`
	MetadataEntries []GetStorageProfileMetadataEntry `pulumi:"metadataEntries"`
	Name            string                           `pulumi:"name"`
	Org             *string                          `pulumi:"org"`
	// Scale used to define Limit
	Units string `pulumi:"units"`
	// Storage used, by the storage profile (in Megabytes)
	UsedStorage int     `pulumi:"usedStorage"`
	Vdc         *string `pulumi:"vdc"`
}

func GetStorageProfileOutput(ctx *pulumi.Context, args GetStorageProfileOutputArgs, opts ...pulumi.InvokeOption) GetStorageProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetStorageProfileResultOutput, error) {
			args := v.(GetStorageProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getStorageProfile:getStorageProfile", args, GetStorageProfileResultOutput{}, options).(GetStorageProfileResultOutput), nil
		}).(GetStorageProfileResultOutput)
}

// A collection of arguments for invoking getStorageProfile.
type GetStorageProfileOutputArgs struct {
	// Storage profile name.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level.
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (GetStorageProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageProfileArgs)(nil)).Elem()
}

// A collection of values returned by getStorageProfile.
type GetStorageProfileResultOutput struct{ *pulumi.OutputState }

func (GetStorageProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorageProfileResult)(nil)).Elem()
}

func (o GetStorageProfileResultOutput) ToGetStorageProfileResultOutput() GetStorageProfileResultOutput {
	return o
}

func (o GetStorageProfileResultOutput) ToGetStorageProfileResultOutputWithContext(ctx context.Context) GetStorageProfileResultOutput {
	return o
}

// True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified
func (o GetStorageProfileResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageProfileResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// True if this storage profile is enabled for use in the VDC
func (o GetStorageProfileResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStorageProfileResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetStorageProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Total IOPS currently allocated to this storage profile
func (o GetStorageProfileResultOutput) IopsAllocated() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageProfileResult) int { return v.IopsAllocated }).(pulumi.IntOutput)
}

// A block providing IOPS settings. See IOPS settings below for details.
func (o GetStorageProfileResultOutput) IopsSettings() GetStorageProfileIopsSettingArrayOutput {
	return o.ApplyT(func(v GetStorageProfileResult) []GetStorageProfileIopsSetting { return v.IopsSettings }).(GetStorageProfileIopsSettingArrayOutput)
}

// Maximum number of storage bytes (scaled by 'units' field) allocated for this profile. `0` means `maximum possible`
func (o GetStorageProfileResultOutput) Limit() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageProfileResult) int { return v.Limit }).(pulumi.IntOutput)
}

// Deprecated: Use metadataEntry instead
func (o GetStorageProfileResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetStorageProfileResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o GetStorageProfileResultOutput) MetadataEntries() GetStorageProfileMetadataEntryArrayOutput {
	return o.ApplyT(func(v GetStorageProfileResult) []GetStorageProfileMetadataEntry { return v.MetadataEntries }).(GetStorageProfileMetadataEntryArrayOutput)
}

func (o GetStorageProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStorageProfileResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStorageProfileResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

// Scale used to define Limit
func (o GetStorageProfileResultOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorageProfileResult) string { return v.Units }).(pulumi.StringOutput)
}

// Storage used, by the storage profile (in Megabytes)
func (o GetStorageProfileResultOutput) UsedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v GetStorageProfileResult) int { return v.UsedStorage }).(pulumi.IntOutput)
}

func (o GetStorageProfileResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStorageProfileResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStorageProfileResultOutput{})
}
