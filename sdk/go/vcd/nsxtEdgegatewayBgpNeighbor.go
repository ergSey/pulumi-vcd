// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtEdgegatewayBgpNeighbor struct {
	pulumi.CustomResourceState

	// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
	AllowAsIn pulumi.BoolOutput `pulumi:"allowAsIn"`
	// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
	BfdDeadMultiple pulumi.IntOutput `pulumi:"bfdDeadMultiple"`
	// Should Bidirectional Forwarding Detection (BFD) be enabled
	BfdEnabled pulumi.BoolOutput `pulumi:"bfdEnabled"`
	// Time interval (in milliseconds) between heartbeat packets
	BfdInterval pulumi.IntOutput `pulumi:"bfdInterval"`
	// The ID of the edge gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` datasource
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// BGP Neighbor Graceful Restart Mode. One of:
	// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
	// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
	// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
	GracefulRestartMode pulumi.StringOutput `pulumi:"gracefulRestartMode"`
	// Time interval (in seconds) before declaring a BGP peer dead
	HoldDownTimer pulumi.IntOutput `pulumi:"holdDownTimer"`
	// The ID of the IP Prefix List to be used for filtering incoming BGP routes
	InFilterIpPrefixListId pulumi.StringOutput `pulumi:"inFilterIpPrefixListId"`
	// BGP Neighbor IP Address (IPv4 or IPv6)
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Time interval (in seconds) between sending keep-alive messages to a BGP peer
	KeepAliveTimer pulumi.IntOutput `pulumi:"keepAliveTimer"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
	OutFilterIpPrefixListId pulumi.StringOutput `pulumi:"outFilterIpPrefixListId"`
	// BGP Neighbor Password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// BGP Neighbor Remote Autonomous System (AS) Number
	RemoteAsNumber pulumi.StringOutput `pulumi:"remoteAsNumber"`
	// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
	RouteFiltering pulumi.StringOutput `pulumi:"routeFiltering"`
}

// NewNsxtEdgegatewayBgpNeighbor registers a new resource with the given unique name, arguments, and options.
func NewNsxtEdgegatewayBgpNeighbor(ctx *pulumi.Context,
	name string, args *NsxtEdgegatewayBgpNeighborArgs, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayBgpNeighbor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.RemoteAsNumber == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAsNumber'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtEdgegatewayBgpNeighbor
	err := ctx.RegisterResource("vcd:index/nsxtEdgegatewayBgpNeighbor:NsxtEdgegatewayBgpNeighbor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtEdgegatewayBgpNeighbor gets an existing NsxtEdgegatewayBgpNeighbor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtEdgegatewayBgpNeighbor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtEdgegatewayBgpNeighborState, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayBgpNeighbor, error) {
	var resource NsxtEdgegatewayBgpNeighbor
	err := ctx.ReadResource("vcd:index/nsxtEdgegatewayBgpNeighbor:NsxtEdgegatewayBgpNeighbor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtEdgegatewayBgpNeighbor resources.
type nsxtEdgegatewayBgpNeighborState struct {
	// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
	AllowAsIn *bool `pulumi:"allowAsIn"`
	// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
	BfdDeadMultiple *int `pulumi:"bfdDeadMultiple"`
	// Should Bidirectional Forwarding Detection (BFD) be enabled
	BfdEnabled *bool `pulumi:"bfdEnabled"`
	// Time interval (in milliseconds) between heartbeat packets
	BfdInterval *int `pulumi:"bfdInterval"`
	// The ID of the edge gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` datasource
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// BGP Neighbor Graceful Restart Mode. One of:
	// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
	// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
	// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
	GracefulRestartMode *string `pulumi:"gracefulRestartMode"`
	// Time interval (in seconds) before declaring a BGP peer dead
	HoldDownTimer *int `pulumi:"holdDownTimer"`
	// The ID of the IP Prefix List to be used for filtering incoming BGP routes
	InFilterIpPrefixListId *string `pulumi:"inFilterIpPrefixListId"`
	// BGP Neighbor IP Address (IPv4 or IPv6)
	IpAddress *string `pulumi:"ipAddress"`
	// Time interval (in seconds) between sending keep-alive messages to a BGP peer
	KeepAliveTimer *int `pulumi:"keepAliveTimer"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
	OutFilterIpPrefixListId *string `pulumi:"outFilterIpPrefixListId"`
	// BGP Neighbor Password
	Password *string `pulumi:"password"`
	// BGP Neighbor Remote Autonomous System (AS) Number
	RemoteAsNumber *string `pulumi:"remoteAsNumber"`
	// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
	RouteFiltering *string `pulumi:"routeFiltering"`
}

type NsxtEdgegatewayBgpNeighborState struct {
	// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
	AllowAsIn pulumi.BoolPtrInput
	// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
	BfdDeadMultiple pulumi.IntPtrInput
	// Should Bidirectional Forwarding Detection (BFD) be enabled
	BfdEnabled pulumi.BoolPtrInput
	// Time interval (in milliseconds) between heartbeat packets
	BfdInterval pulumi.IntPtrInput
	// The ID of the edge gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` datasource
	EdgeGatewayId pulumi.StringPtrInput
	// BGP Neighbor Graceful Restart Mode. One of:
	// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
	// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
	// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
	GracefulRestartMode pulumi.StringPtrInput
	// Time interval (in seconds) before declaring a BGP peer dead
	HoldDownTimer pulumi.IntPtrInput
	// The ID of the IP Prefix List to be used for filtering incoming BGP routes
	InFilterIpPrefixListId pulumi.StringPtrInput
	// BGP Neighbor IP Address (IPv4 or IPv6)
	IpAddress pulumi.StringPtrInput
	// Time interval (in seconds) between sending keep-alive messages to a BGP peer
	KeepAliveTimer pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
	OutFilterIpPrefixListId pulumi.StringPtrInput
	// BGP Neighbor Password
	Password pulumi.StringPtrInput
	// BGP Neighbor Remote Autonomous System (AS) Number
	RemoteAsNumber pulumi.StringPtrInput
	// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
	RouteFiltering pulumi.StringPtrInput
}

func (NsxtEdgegatewayBgpNeighborState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayBgpNeighborState)(nil)).Elem()
}

type nsxtEdgegatewayBgpNeighborArgs struct {
	// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
	AllowAsIn *bool `pulumi:"allowAsIn"`
	// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
	BfdDeadMultiple *int `pulumi:"bfdDeadMultiple"`
	// Should Bidirectional Forwarding Detection (BFD) be enabled
	BfdEnabled *bool `pulumi:"bfdEnabled"`
	// Time interval (in milliseconds) between heartbeat packets
	BfdInterval *int `pulumi:"bfdInterval"`
	// The ID of the edge gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` datasource
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// BGP Neighbor Graceful Restart Mode. One of:
	// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
	// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
	// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
	GracefulRestartMode *string `pulumi:"gracefulRestartMode"`
	// Time interval (in seconds) before declaring a BGP peer dead
	HoldDownTimer *int `pulumi:"holdDownTimer"`
	// The ID of the IP Prefix List to be used for filtering incoming BGP routes
	InFilterIpPrefixListId *string `pulumi:"inFilterIpPrefixListId"`
	// BGP Neighbor IP Address (IPv4 or IPv6)
	IpAddress string `pulumi:"ipAddress"`
	// Time interval (in seconds) between sending keep-alive messages to a BGP peer
	KeepAliveTimer *int `pulumi:"keepAliveTimer"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
	OutFilterIpPrefixListId *string `pulumi:"outFilterIpPrefixListId"`
	// BGP Neighbor Password
	Password *string `pulumi:"password"`
	// BGP Neighbor Remote Autonomous System (AS) Number
	RemoteAsNumber string `pulumi:"remoteAsNumber"`
	// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
	RouteFiltering *string `pulumi:"routeFiltering"`
}

// The set of arguments for constructing a NsxtEdgegatewayBgpNeighbor resource.
type NsxtEdgegatewayBgpNeighborArgs struct {
	// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
	AllowAsIn pulumi.BoolPtrInput
	// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
	BfdDeadMultiple pulumi.IntPtrInput
	// Should Bidirectional Forwarding Detection (BFD) be enabled
	BfdEnabled pulumi.BoolPtrInput
	// Time interval (in milliseconds) between heartbeat packets
	BfdInterval pulumi.IntPtrInput
	// The ID of the edge gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` datasource
	EdgeGatewayId pulumi.StringInput
	// BGP Neighbor Graceful Restart Mode. One of:
	// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
	// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
	// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
	GracefulRestartMode pulumi.StringPtrInput
	// Time interval (in seconds) before declaring a BGP peer dead
	HoldDownTimer pulumi.IntPtrInput
	// The ID of the IP Prefix List to be used for filtering incoming BGP routes
	InFilterIpPrefixListId pulumi.StringPtrInput
	// BGP Neighbor IP Address (IPv4 or IPv6)
	IpAddress pulumi.StringInput
	// Time interval (in seconds) between sending keep-alive messages to a BGP peer
	KeepAliveTimer pulumi.IntPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
	OutFilterIpPrefixListId pulumi.StringPtrInput
	// BGP Neighbor Password
	Password pulumi.StringPtrInput
	// BGP Neighbor Remote Autonomous System (AS) Number
	RemoteAsNumber pulumi.StringInput
	// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
	RouteFiltering pulumi.StringPtrInput
}

func (NsxtEdgegatewayBgpNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayBgpNeighborArgs)(nil)).Elem()
}

type NsxtEdgegatewayBgpNeighborInput interface {
	pulumi.Input

	ToNsxtEdgegatewayBgpNeighborOutput() NsxtEdgegatewayBgpNeighborOutput
	ToNsxtEdgegatewayBgpNeighborOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborOutput
}

func (*NsxtEdgegatewayBgpNeighbor) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (i *NsxtEdgegatewayBgpNeighbor) ToNsxtEdgegatewayBgpNeighborOutput() NsxtEdgegatewayBgpNeighborOutput {
	return i.ToNsxtEdgegatewayBgpNeighborOutputWithContext(context.Background())
}

func (i *NsxtEdgegatewayBgpNeighbor) ToNsxtEdgegatewayBgpNeighborOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayBgpNeighborOutput)
}

// NsxtEdgegatewayBgpNeighborArrayInput is an input type that accepts NsxtEdgegatewayBgpNeighborArray and NsxtEdgegatewayBgpNeighborArrayOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayBgpNeighborArrayInput` via:
//
//	NsxtEdgegatewayBgpNeighborArray{ NsxtEdgegatewayBgpNeighborArgs{...} }
type NsxtEdgegatewayBgpNeighborArrayInput interface {
	pulumi.Input

	ToNsxtEdgegatewayBgpNeighborArrayOutput() NsxtEdgegatewayBgpNeighborArrayOutput
	ToNsxtEdgegatewayBgpNeighborArrayOutputWithContext(context.Context) NsxtEdgegatewayBgpNeighborArrayOutput
}

type NsxtEdgegatewayBgpNeighborArray []NsxtEdgegatewayBgpNeighborInput

func (NsxtEdgegatewayBgpNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (i NsxtEdgegatewayBgpNeighborArray) ToNsxtEdgegatewayBgpNeighborArrayOutput() NsxtEdgegatewayBgpNeighborArrayOutput {
	return i.ToNsxtEdgegatewayBgpNeighborArrayOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayBgpNeighborArray) ToNsxtEdgegatewayBgpNeighborArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayBgpNeighborArrayOutput)
}

// NsxtEdgegatewayBgpNeighborMapInput is an input type that accepts NsxtEdgegatewayBgpNeighborMap and NsxtEdgegatewayBgpNeighborMapOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayBgpNeighborMapInput` via:
//
//	NsxtEdgegatewayBgpNeighborMap{ "key": NsxtEdgegatewayBgpNeighborArgs{...} }
type NsxtEdgegatewayBgpNeighborMapInput interface {
	pulumi.Input

	ToNsxtEdgegatewayBgpNeighborMapOutput() NsxtEdgegatewayBgpNeighborMapOutput
	ToNsxtEdgegatewayBgpNeighborMapOutputWithContext(context.Context) NsxtEdgegatewayBgpNeighborMapOutput
}

type NsxtEdgegatewayBgpNeighborMap map[string]NsxtEdgegatewayBgpNeighborInput

func (NsxtEdgegatewayBgpNeighborMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (i NsxtEdgegatewayBgpNeighborMap) ToNsxtEdgegatewayBgpNeighborMapOutput() NsxtEdgegatewayBgpNeighborMapOutput {
	return i.ToNsxtEdgegatewayBgpNeighborMapOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayBgpNeighborMap) ToNsxtEdgegatewayBgpNeighborMapOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayBgpNeighborMapOutput)
}

type NsxtEdgegatewayBgpNeighborOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayBgpNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (o NsxtEdgegatewayBgpNeighborOutput) ToNsxtEdgegatewayBgpNeighborOutput() NsxtEdgegatewayBgpNeighborOutput {
	return o
}

func (o NsxtEdgegatewayBgpNeighborOutput) ToNsxtEdgegatewayBgpNeighborOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborOutput {
	return o
}

// BGP Allow-as-in feature is used to allow the BGP speaker to accept the BGP updates even if its own BGP AS number is in the AS-Path attribute.
func (o NsxtEdgegatewayBgpNeighborOutput) AllowAsIn() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.BoolOutput { return v.AllowAsIn }).(pulumi.BoolOutput)
}

// Number of times a heartbeat packet is missed before BFD declares that the neighbor is down
func (o NsxtEdgegatewayBgpNeighborOutput) BfdDeadMultiple() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.IntOutput { return v.BfdDeadMultiple }).(pulumi.IntOutput)
}

// Should Bidirectional Forwarding Detection (BFD) be enabled
func (o NsxtEdgegatewayBgpNeighborOutput) BfdEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.BoolOutput { return v.BfdEnabled }).(pulumi.BoolOutput)
}

// Time interval (in milliseconds) between heartbeat packets
func (o NsxtEdgegatewayBgpNeighborOutput) BfdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.IntOutput { return v.BfdInterval }).(pulumi.IntOutput)
}

// The ID of the edge gateway (NSX-T only). Can be looked up using
// `NsxtEdgegateway` datasource
func (o NsxtEdgegatewayBgpNeighborOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// BGP Neighbor Graceful Restart Mode. One of:
// * `DISABLE` - Overrides the global edge gateway settings and disables graceful restart mode for this neighbor.
// * `HELPER_ONLY` - Overrides the global edge gateway settings and configures graceful restart mode as Helper only for this neighbor.
// * `GRACEFUL_AND_HELPER` - Overrides the global edge gateway settings and configures graceful restart mode as Graceful restart and Helper for this neighbor.
func (o NsxtEdgegatewayBgpNeighborOutput) GracefulRestartMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.GracefulRestartMode }).(pulumi.StringOutput)
}

// Time interval (in seconds) before declaring a BGP peer dead
func (o NsxtEdgegatewayBgpNeighborOutput) HoldDownTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.IntOutput { return v.HoldDownTimer }).(pulumi.IntOutput)
}

// The ID of the IP Prefix List to be used for filtering incoming BGP routes
func (o NsxtEdgegatewayBgpNeighborOutput) InFilterIpPrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.InFilterIpPrefixListId }).(pulumi.StringOutput)
}

// BGP Neighbor IP Address (IPv4 or IPv6)
func (o NsxtEdgegatewayBgpNeighborOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Time interval (in seconds) between sending keep-alive messages to a BGP peer
func (o NsxtEdgegatewayBgpNeighborOutput) KeepAliveTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.IntOutput { return v.KeepAliveTimer }).(pulumi.IntOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations
func (o NsxtEdgegatewayBgpNeighborOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The ID of the IP Prefix List to be used for filtering outgoing BGP routes
func (o NsxtEdgegatewayBgpNeighborOutput) OutFilterIpPrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.OutFilterIpPrefixListId }).(pulumi.StringOutput)
}

// BGP Neighbor Password
func (o NsxtEdgegatewayBgpNeighborOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// BGP Neighbor Remote Autonomous System (AS) Number
func (o NsxtEdgegatewayBgpNeighborOutput) RemoteAsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.RemoteAsNumber }).(pulumi.StringOutput)
}

// Route filtering by IP Address family. One of `DISABLED`, `IPV4`, `IPV6`
func (o NsxtEdgegatewayBgpNeighborOutput) RouteFiltering() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayBgpNeighbor) pulumi.StringOutput { return v.RouteFiltering }).(pulumi.StringOutput)
}

type NsxtEdgegatewayBgpNeighborArrayOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayBgpNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (o NsxtEdgegatewayBgpNeighborArrayOutput) ToNsxtEdgegatewayBgpNeighborArrayOutput() NsxtEdgegatewayBgpNeighborArrayOutput {
	return o
}

func (o NsxtEdgegatewayBgpNeighborArrayOutput) ToNsxtEdgegatewayBgpNeighborArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborArrayOutput {
	return o
}

func (o NsxtEdgegatewayBgpNeighborArrayOutput) Index(i pulumi.IntInput) NsxtEdgegatewayBgpNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtEdgegatewayBgpNeighbor {
		return vs[0].([]*NsxtEdgegatewayBgpNeighbor)[vs[1].(int)]
	}).(NsxtEdgegatewayBgpNeighborOutput)
}

type NsxtEdgegatewayBgpNeighborMapOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayBgpNeighborMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayBgpNeighbor)(nil)).Elem()
}

func (o NsxtEdgegatewayBgpNeighborMapOutput) ToNsxtEdgegatewayBgpNeighborMapOutput() NsxtEdgegatewayBgpNeighborMapOutput {
	return o
}

func (o NsxtEdgegatewayBgpNeighborMapOutput) ToNsxtEdgegatewayBgpNeighborMapOutputWithContext(ctx context.Context) NsxtEdgegatewayBgpNeighborMapOutput {
	return o
}

func (o NsxtEdgegatewayBgpNeighborMapOutput) MapIndex(k pulumi.StringInput) NsxtEdgegatewayBgpNeighborOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtEdgegatewayBgpNeighbor {
		return vs[0].(map[string]*NsxtEdgegatewayBgpNeighbor)[vs[1].(string)]
	}).(NsxtEdgegatewayBgpNeighborOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayBgpNeighborInput)(nil)).Elem(), &NsxtEdgegatewayBgpNeighbor{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayBgpNeighborArrayInput)(nil)).Elem(), NsxtEdgegatewayBgpNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayBgpNeighborMapInput)(nil)).Elem(), NsxtEdgegatewayBgpNeighborMap{})
	pulumi.RegisterOutputType(NsxtEdgegatewayBgpNeighborOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayBgpNeighborArrayOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayBgpNeighborMapOutput{})
}
