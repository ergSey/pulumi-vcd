// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source for NSX-T manager.
//
// Supported in provider *v3.0+*
//
// > **Note:** This resource uses new VMware Cloud Director
// [OpenAPI](https://code.vmware.com/docs/11982/getting-started-with-vmware-cloud-director-openapi) and
// requires at least VCD *10.1.1+* and NSX-T *3.0+*.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetNsxtManager(ctx, &vcd.GetNsxtManagerArgs{
//				Name: "nsxt-manager-one",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNsxtManager(ctx *pulumi.Context, args *GetNsxtManagerArgs, opts ...pulumi.InvokeOption) (*GetNsxtManagerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNsxtManagerResult
	err := ctx.Invoke("vcd:index/getNsxtManager:getNsxtManager", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtManager.
type GetNsxtManagerArgs struct {
	// NSX-T manager name
	Name string `pulumi:"name"`
}

// A collection of values returned by getNsxtManager.
type GetNsxtManagerResult struct {
	// Full URL of the manager
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func GetNsxtManagerOutput(ctx *pulumi.Context, args GetNsxtManagerOutputArgs, opts ...pulumi.InvokeOption) GetNsxtManagerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNsxtManagerResultOutput, error) {
			args := v.(GetNsxtManagerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtManager:getNsxtManager", args, GetNsxtManagerResultOutput{}, options).(GetNsxtManagerResultOutput), nil
		}).(GetNsxtManagerResultOutput)
}

// A collection of arguments for invoking getNsxtManager.
type GetNsxtManagerOutputArgs struct {
	// NSX-T manager name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetNsxtManagerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtManagerArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtManager.
type GetNsxtManagerResultOutput struct{ *pulumi.OutputState }

func (GetNsxtManagerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtManagerResult)(nil)).Elem()
}

func (o GetNsxtManagerResultOutput) ToGetNsxtManagerResultOutput() GetNsxtManagerResultOutput {
	return o
}

func (o GetNsxtManagerResultOutput) ToGetNsxtManagerResultOutputWithContext(ctx context.Context) GetNsxtManagerResultOutput {
	return o
}

// Full URL of the manager
func (o GetNsxtManagerResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtManagerResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNsxtManagerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtManagerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNsxtManagerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtManagerResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNsxtManagerResultOutput{})
}
