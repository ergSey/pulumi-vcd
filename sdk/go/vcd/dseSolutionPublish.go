// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DseSolutionPublish struct {
	pulumi.CustomResourceState

	// Required for `Confluent Platform` Data Solution if . One of
	// `confluentLicenseType` is set to `With License`.
	ConfluentLicenseKey pulumi.StringPtrOutput `pulumi:"confluentLicenseKey"`
	// Required for `Confluent Platform` Data Solution. One of
	// `With License`, `No License`.
	ConfluentLicenseType pulumi.StringPtrOutput `pulumi:"confluentLicenseType"`
	// ID of Data Solution
	DataSolutionId pulumi.StringOutput `pulumi:"dataSolutionId"`
	// Data Solution Org Configuration ID (only available for `Confluent Platform`
	// which has additional licensing configuration)
	DsOrgConfigId pulumi.StringOutput `pulumi:"dsOrgConfigId"`
	// Data Solutions Operator ACL ID
	DsoAclId pulumi.StringOutput `pulumi:"dsoAclId"`
	// Organization ID
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// A set of Data Solution Instance Template ACL IDs
	TemplateAclIds pulumi.StringArrayOutput `pulumi:"templateAclIds"`
}

// NewDseSolutionPublish registers a new resource with the given unique name, arguments, and options.
func NewDseSolutionPublish(ctx *pulumi.Context,
	name string, args *DseSolutionPublishArgs, opts ...pulumi.ResourceOption) (*DseSolutionPublish, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSolutionId == nil {
		return nil, errors.New("invalid value for required argument 'DataSolutionId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DseSolutionPublish
	err := ctx.RegisterResource("vcd:index/dseSolutionPublish:DseSolutionPublish", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDseSolutionPublish gets an existing DseSolutionPublish resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDseSolutionPublish(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DseSolutionPublishState, opts ...pulumi.ResourceOption) (*DseSolutionPublish, error) {
	var resource DseSolutionPublish
	err := ctx.ReadResource("vcd:index/dseSolutionPublish:DseSolutionPublish", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DseSolutionPublish resources.
type dseSolutionPublishState struct {
	// Required for `Confluent Platform` Data Solution if . One of
	// `confluentLicenseType` is set to `With License`.
	ConfluentLicenseKey *string `pulumi:"confluentLicenseKey"`
	// Required for `Confluent Platform` Data Solution. One of
	// `With License`, `No License`.
	ConfluentLicenseType *string `pulumi:"confluentLicenseType"`
	// ID of Data Solution
	DataSolutionId *string `pulumi:"dataSolutionId"`
	// Data Solution Org Configuration ID (only available for `Confluent Platform`
	// which has additional licensing configuration)
	DsOrgConfigId *string `pulumi:"dsOrgConfigId"`
	// Data Solutions Operator ACL ID
	DsoAclId *string `pulumi:"dsoAclId"`
	// Organization ID
	OrgId *string `pulumi:"orgId"`
	// A set of Data Solution Instance Template ACL IDs
	TemplateAclIds []string `pulumi:"templateAclIds"`
}

type DseSolutionPublishState struct {
	// Required for `Confluent Platform` Data Solution if . One of
	// `confluentLicenseType` is set to `With License`.
	ConfluentLicenseKey pulumi.StringPtrInput
	// Required for `Confluent Platform` Data Solution. One of
	// `With License`, `No License`.
	ConfluentLicenseType pulumi.StringPtrInput
	// ID of Data Solution
	DataSolutionId pulumi.StringPtrInput
	// Data Solution Org Configuration ID (only available for `Confluent Platform`
	// which has additional licensing configuration)
	DsOrgConfigId pulumi.StringPtrInput
	// Data Solutions Operator ACL ID
	DsoAclId pulumi.StringPtrInput
	// Organization ID
	OrgId pulumi.StringPtrInput
	// A set of Data Solution Instance Template ACL IDs
	TemplateAclIds pulumi.StringArrayInput
}

func (DseSolutionPublishState) ElementType() reflect.Type {
	return reflect.TypeOf((*dseSolutionPublishState)(nil)).Elem()
}

type dseSolutionPublishArgs struct {
	// Required for `Confluent Platform` Data Solution if . One of
	// `confluentLicenseType` is set to `With License`.
	ConfluentLicenseKey *string `pulumi:"confluentLicenseKey"`
	// Required for `Confluent Platform` Data Solution. One of
	// `With License`, `No License`.
	ConfluentLicenseType *string `pulumi:"confluentLicenseType"`
	// ID of Data Solution
	DataSolutionId string `pulumi:"dataSolutionId"`
	// Organization ID
	OrgId string `pulumi:"orgId"`
}

// The set of arguments for constructing a DseSolutionPublish resource.
type DseSolutionPublishArgs struct {
	// Required for `Confluent Platform` Data Solution if . One of
	// `confluentLicenseType` is set to `With License`.
	ConfluentLicenseKey pulumi.StringPtrInput
	// Required for `Confluent Platform` Data Solution. One of
	// `With License`, `No License`.
	ConfluentLicenseType pulumi.StringPtrInput
	// ID of Data Solution
	DataSolutionId pulumi.StringInput
	// Organization ID
	OrgId pulumi.StringInput
}

func (DseSolutionPublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dseSolutionPublishArgs)(nil)).Elem()
}

type DseSolutionPublishInput interface {
	pulumi.Input

	ToDseSolutionPublishOutput() DseSolutionPublishOutput
	ToDseSolutionPublishOutputWithContext(ctx context.Context) DseSolutionPublishOutput
}

func (*DseSolutionPublish) ElementType() reflect.Type {
	return reflect.TypeOf((**DseSolutionPublish)(nil)).Elem()
}

func (i *DseSolutionPublish) ToDseSolutionPublishOutput() DseSolutionPublishOutput {
	return i.ToDseSolutionPublishOutputWithContext(context.Background())
}

func (i *DseSolutionPublish) ToDseSolutionPublishOutputWithContext(ctx context.Context) DseSolutionPublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseSolutionPublishOutput)
}

// DseSolutionPublishArrayInput is an input type that accepts DseSolutionPublishArray and DseSolutionPublishArrayOutput values.
// You can construct a concrete instance of `DseSolutionPublishArrayInput` via:
//
//	DseSolutionPublishArray{ DseSolutionPublishArgs{...} }
type DseSolutionPublishArrayInput interface {
	pulumi.Input

	ToDseSolutionPublishArrayOutput() DseSolutionPublishArrayOutput
	ToDseSolutionPublishArrayOutputWithContext(context.Context) DseSolutionPublishArrayOutput
}

type DseSolutionPublishArray []DseSolutionPublishInput

func (DseSolutionPublishArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DseSolutionPublish)(nil)).Elem()
}

func (i DseSolutionPublishArray) ToDseSolutionPublishArrayOutput() DseSolutionPublishArrayOutput {
	return i.ToDseSolutionPublishArrayOutputWithContext(context.Background())
}

func (i DseSolutionPublishArray) ToDseSolutionPublishArrayOutputWithContext(ctx context.Context) DseSolutionPublishArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseSolutionPublishArrayOutput)
}

// DseSolutionPublishMapInput is an input type that accepts DseSolutionPublishMap and DseSolutionPublishMapOutput values.
// You can construct a concrete instance of `DseSolutionPublishMapInput` via:
//
//	DseSolutionPublishMap{ "key": DseSolutionPublishArgs{...} }
type DseSolutionPublishMapInput interface {
	pulumi.Input

	ToDseSolutionPublishMapOutput() DseSolutionPublishMapOutput
	ToDseSolutionPublishMapOutputWithContext(context.Context) DseSolutionPublishMapOutput
}

type DseSolutionPublishMap map[string]DseSolutionPublishInput

func (DseSolutionPublishMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DseSolutionPublish)(nil)).Elem()
}

func (i DseSolutionPublishMap) ToDseSolutionPublishMapOutput() DseSolutionPublishMapOutput {
	return i.ToDseSolutionPublishMapOutputWithContext(context.Background())
}

func (i DseSolutionPublishMap) ToDseSolutionPublishMapOutputWithContext(ctx context.Context) DseSolutionPublishMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseSolutionPublishMapOutput)
}

type DseSolutionPublishOutput struct{ *pulumi.OutputState }

func (DseSolutionPublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DseSolutionPublish)(nil)).Elem()
}

func (o DseSolutionPublishOutput) ToDseSolutionPublishOutput() DseSolutionPublishOutput {
	return o
}

func (o DseSolutionPublishOutput) ToDseSolutionPublishOutputWithContext(ctx context.Context) DseSolutionPublishOutput {
	return o
}

// Required for `Confluent Platform` Data Solution if . One of
// `confluentLicenseType` is set to `With License`.
func (o DseSolutionPublishOutput) ConfluentLicenseKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringPtrOutput { return v.ConfluentLicenseKey }).(pulumi.StringPtrOutput)
}

// Required for `Confluent Platform` Data Solution. One of
// `With License`, `No License`.
func (o DseSolutionPublishOutput) ConfluentLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringPtrOutput { return v.ConfluentLicenseType }).(pulumi.StringPtrOutput)
}

// ID of Data Solution
func (o DseSolutionPublishOutput) DataSolutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringOutput { return v.DataSolutionId }).(pulumi.StringOutput)
}

// Data Solution Org Configuration ID (only available for `Confluent Platform`
// which has additional licensing configuration)
func (o DseSolutionPublishOutput) DsOrgConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringOutput { return v.DsOrgConfigId }).(pulumi.StringOutput)
}

// Data Solutions Operator ACL ID
func (o DseSolutionPublishOutput) DsoAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringOutput { return v.DsoAclId }).(pulumi.StringOutput)
}

// Organization ID
func (o DseSolutionPublishOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// A set of Data Solution Instance Template ACL IDs
func (o DseSolutionPublishOutput) TemplateAclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DseSolutionPublish) pulumi.StringArrayOutput { return v.TemplateAclIds }).(pulumi.StringArrayOutput)
}

type DseSolutionPublishArrayOutput struct{ *pulumi.OutputState }

func (DseSolutionPublishArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DseSolutionPublish)(nil)).Elem()
}

func (o DseSolutionPublishArrayOutput) ToDseSolutionPublishArrayOutput() DseSolutionPublishArrayOutput {
	return o
}

func (o DseSolutionPublishArrayOutput) ToDseSolutionPublishArrayOutputWithContext(ctx context.Context) DseSolutionPublishArrayOutput {
	return o
}

func (o DseSolutionPublishArrayOutput) Index(i pulumi.IntInput) DseSolutionPublishOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DseSolutionPublish {
		return vs[0].([]*DseSolutionPublish)[vs[1].(int)]
	}).(DseSolutionPublishOutput)
}

type DseSolutionPublishMapOutput struct{ *pulumi.OutputState }

func (DseSolutionPublishMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DseSolutionPublish)(nil)).Elem()
}

func (o DseSolutionPublishMapOutput) ToDseSolutionPublishMapOutput() DseSolutionPublishMapOutput {
	return o
}

func (o DseSolutionPublishMapOutput) ToDseSolutionPublishMapOutputWithContext(ctx context.Context) DseSolutionPublishMapOutput {
	return o
}

func (o DseSolutionPublishMapOutput) MapIndex(k pulumi.StringInput) DseSolutionPublishOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DseSolutionPublish {
		return vs[0].(map[string]*DseSolutionPublish)[vs[1].(string)]
	}).(DseSolutionPublishOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DseSolutionPublishInput)(nil)).Elem(), &DseSolutionPublish{})
	pulumi.RegisterInputType(reflect.TypeOf((*DseSolutionPublishArrayInput)(nil)).Elem(), DseSolutionPublishArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DseSolutionPublishMapInput)(nil)).Elem(), DseSolutionPublishMap{})
	pulumi.RegisterOutputType(DseSolutionPublishOutput{})
	pulumi.RegisterOutputType(DseSolutionPublishArrayOutput{})
	pulumi.RegisterOutputType(DseSolutionPublishMapOutput{})
}
