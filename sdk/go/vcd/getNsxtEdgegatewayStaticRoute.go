// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
//
// Provides a data source to read NSX-T Edge Gateway Static Routes.
//
// ## Example Usage
//
// ### By Name Only)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupNsxtEdgegatewayStaticRoute(ctx, &vcd.LookupNsxtEdgegatewayStaticRouteArgs{
//				EdgeGatewayId: existing.Id,
//				Name:          "existing-static-route",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name And Network CIDR )
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupNsxtEdgegatewayStaticRoute(ctx, &vcd.LookupNsxtEdgegatewayStaticRouteArgs{
//				EdgeGatewayId: existing.Id,
//				Name:          "duplicate-name-sr",
//				NetworkCidr:   pulumi.StringRef("10.10.11.0/24"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNsxtEdgegatewayStaticRoute(ctx *pulumi.Context, args *LookupNsxtEdgegatewayStaticRouteArgs, opts ...pulumi.InvokeOption) (*LookupNsxtEdgegatewayStaticRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNsxtEdgegatewayStaticRouteResult
	err := ctx.Invoke("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtEdgegatewayStaticRoute.
type LookupNsxtEdgegatewayStaticRouteArgs struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Name of Static Route. **Note** names *can be duplicate* and one can use
	// `networkCidr` to make filtering more precise
	Name string `pulumi:"name"`
	// Network CIDR for Static Route
	//
	// > It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
	// data source will return an error as it expects to find only one entity. If this happens, one can
	// make the filtering more precise by supplying `networkCidr` in addition to `name`.
	NetworkCidr *string `pulumi:"networkCidr"`
	Org         *string `pulumi:"org"`
}

// A collection of values returned by getNsxtEdgegatewayStaticRoute.
type LookupNsxtEdgegatewayStaticRouteResult struct {
	Description   string `pulumi:"description"`
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id          string                                 `pulumi:"id"`
	Name        string                                 `pulumi:"name"`
	NetworkCidr string                                 `pulumi:"networkCidr"`
	NextHops    []GetNsxtEdgegatewayStaticRouteNextHop `pulumi:"nextHops"`
	Org         *string                                `pulumi:"org"`
}

func LookupNsxtEdgegatewayStaticRouteOutput(ctx *pulumi.Context, args LookupNsxtEdgegatewayStaticRouteOutputArgs, opts ...pulumi.InvokeOption) LookupNsxtEdgegatewayStaticRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNsxtEdgegatewayStaticRouteResultOutput, error) {
			args := v.(LookupNsxtEdgegatewayStaticRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", args, LookupNsxtEdgegatewayStaticRouteResultOutput{}, options).(LookupNsxtEdgegatewayStaticRouteResultOutput), nil
		}).(LookupNsxtEdgegatewayStaticRouteResultOutput)
}

// A collection of arguments for invoking getNsxtEdgegatewayStaticRoute.
type LookupNsxtEdgegatewayStaticRouteOutputArgs struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId pulumi.StringInput `pulumi:"edgeGatewayId"`
	// Name of Static Route. **Note** names *can be duplicate* and one can use
	// `networkCidr` to make filtering more precise
	Name pulumi.StringInput `pulumi:"name"`
	// Network CIDR for Static Route
	//
	// > It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
	// data source will return an error as it expects to find only one entity. If this happens, one can
	// make the filtering more precise by supplying `networkCidr` in addition to `name`.
	NetworkCidr pulumi.StringPtrInput `pulumi:"networkCidr"`
	Org         pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupNsxtEdgegatewayStaticRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayStaticRouteArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtEdgegatewayStaticRoute.
type LookupNsxtEdgegatewayStaticRouteResultOutput struct{ *pulumi.OutputState }

func (LookupNsxtEdgegatewayStaticRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayStaticRouteResult)(nil)).Elem()
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) ToLookupNsxtEdgegatewayStaticRouteResultOutput() LookupNsxtEdgegatewayStaticRouteResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) ToLookupNsxtEdgegatewayStaticRouteResultOutputWithContext(ctx context.Context) LookupNsxtEdgegatewayStaticRouteResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) string { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNsxtEdgegatewayStaticRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) NetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) string { return v.NetworkCidr }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) NextHops() GetNsxtEdgegatewayStaticRouteNextHopArrayOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) []GetNsxtEdgegatewayStaticRouteNextHop {
		return v.NextHops
	}).(GetNsxtEdgegatewayStaticRouteNextHopArrayOutput)
}

func (o LookupNsxtEdgegatewayStaticRouteResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayStaticRouteResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNsxtEdgegatewayStaticRouteResultOutput{})
}
