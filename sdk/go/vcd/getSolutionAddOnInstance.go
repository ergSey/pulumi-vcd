// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.13+* and VCD 10.4.1+.
//
// Provides a data source to read Solution Add-On Instances in Cloud Director. A Solution Add-On
// Instance is created from an existing Solution Add-On by supplying configuration values of that
// particular instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupSolutionAddOnInstance(ctx, &vcd.LookupSolutionAddOnInstanceArgs{
//				Name: "MyDseInstance",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSolutionAddOnInstance(ctx *pulumi.Context, args *LookupSolutionAddOnInstanceArgs, opts ...pulumi.InvokeOption) (*LookupSolutionAddOnInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSolutionAddOnInstanceResult
	err := ctx.Invoke("vcd:index/getSolutionAddOnInstance:getSolutionAddOnInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSolutionAddOnInstance.
type LookupSolutionAddOnInstanceArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getSolutionAddOnInstance.
type LookupSolutionAddOnInstanceResult struct {
	AddOnId string `pulumi:"addOnId"`
	// The provider-assigned unique ID for this managed resource.
	Id       string            `pulumi:"id"`
	Input    map[string]string `pulumi:"input"`
	Name     string            `pulumi:"name"`
	RdeState string            `pulumi:"rdeState"`
}

func LookupSolutionAddOnInstanceOutput(ctx *pulumi.Context, args LookupSolutionAddOnInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupSolutionAddOnInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSolutionAddOnInstanceResultOutput, error) {
			args := v.(LookupSolutionAddOnInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getSolutionAddOnInstance:getSolutionAddOnInstance", args, LookupSolutionAddOnInstanceResultOutput{}, options).(LookupSolutionAddOnInstanceResultOutput), nil
		}).(LookupSolutionAddOnInstanceResultOutput)
}

// A collection of arguments for invoking getSolutionAddOnInstance.
type LookupSolutionAddOnInstanceOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSolutionAddOnInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionAddOnInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getSolutionAddOnInstance.
type LookupSolutionAddOnInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupSolutionAddOnInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionAddOnInstanceResult)(nil)).Elem()
}

func (o LookupSolutionAddOnInstanceResultOutput) ToLookupSolutionAddOnInstanceResultOutput() LookupSolutionAddOnInstanceResultOutput {
	return o
}

func (o LookupSolutionAddOnInstanceResultOutput) ToLookupSolutionAddOnInstanceResultOutputWithContext(ctx context.Context) LookupSolutionAddOnInstanceResultOutput {
	return o
}

func (o LookupSolutionAddOnInstanceResultOutput) AddOnId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstanceResult) string { return v.AddOnId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSolutionAddOnInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSolutionAddOnInstanceResultOutput) Input() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstanceResult) map[string]string { return v.Input }).(pulumi.StringMapOutput)
}

func (o LookupSolutionAddOnInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSolutionAddOnInstanceResultOutput) RdeState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstanceResult) string { return v.RdeState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSolutionAddOnInstanceResultOutput{})
}
