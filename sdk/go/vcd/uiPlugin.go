// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UiPlugin struct {
	pulumi.CustomResourceState

	// The description of the UI Plugin
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the UI Plugin will be enabled (`true`) or not (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The license of the UI Plugin
	License pulumi.StringOutput `pulumi:"license"`
	// The website or custom URL of the UI Plugin
	Link pulumi.StringOutput `pulumi:"link"`
	// The name of the UI Plugin
	Name pulumi.StringOutput `pulumi:"name"`
	// Path to a .zip file that contains the bundled UI Plugin
	PluginPath pulumi.StringPtrOutput `pulumi:"pluginPath"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	ProviderScoped pulumi.BoolOutput `pulumi:"providerScoped"`
	// The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
	Status pulumi.StringOutput `pulumi:"status"`
	// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	TenantIds pulumi.StringArrayOutput `pulumi:"tenantIds"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	TenantScoped pulumi.BoolOutput `pulumi:"tenantScoped"`
	// The vendor of the UI Plugin
	Vendor pulumi.StringOutput `pulumi:"vendor"`
	// The version of the UI Plugin
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewUiPlugin registers a new resource with the given unique name, arguments, and options.
func NewUiPlugin(ctx *pulumi.Context,
	name string, args *UiPluginArgs, opts ...pulumi.ResourceOption) (*UiPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UiPlugin
	err := ctx.RegisterResource("vcd:index/uiPlugin:UiPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUiPlugin gets an existing UiPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUiPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UiPluginState, opts ...pulumi.ResourceOption) (*UiPlugin, error) {
	var resource UiPlugin
	err := ctx.ReadResource("vcd:index/uiPlugin:UiPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UiPlugin resources.
type uiPluginState struct {
	// The description of the UI Plugin
	Description *string `pulumi:"description"`
	// Whether the UI Plugin will be enabled (`true`) or not (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The license of the UI Plugin
	License *string `pulumi:"license"`
	// The website or custom URL of the UI Plugin
	Link *string `pulumi:"link"`
	// The name of the UI Plugin
	Name *string `pulumi:"name"`
	// Path to a .zip file that contains the bundled UI Plugin
	PluginPath *string `pulumi:"pluginPath"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	ProviderScoped *bool `pulumi:"providerScoped"`
	// The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
	Status *string `pulumi:"status"`
	// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	TenantIds []string `pulumi:"tenantIds"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	TenantScoped *bool `pulumi:"tenantScoped"`
	// The vendor of the UI Plugin
	Vendor *string `pulumi:"vendor"`
	// The version of the UI Plugin
	Version *string `pulumi:"version"`
}

type UiPluginState struct {
	// The description of the UI Plugin
	Description pulumi.StringPtrInput
	// Whether the UI Plugin will be enabled (`true`) or not (`false`)
	Enabled pulumi.BoolPtrInput
	// The license of the UI Plugin
	License pulumi.StringPtrInput
	// The website or custom URL of the UI Plugin
	Link pulumi.StringPtrInput
	// The name of the UI Plugin
	Name pulumi.StringPtrInput
	// Path to a .zip file that contains the bundled UI Plugin
	PluginPath pulumi.StringPtrInput
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	ProviderScoped pulumi.BoolPtrInput
	// The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
	Status pulumi.StringPtrInput
	// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	TenantIds pulumi.StringArrayInput
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	TenantScoped pulumi.BoolPtrInput
	// The vendor of the UI Plugin
	Vendor pulumi.StringPtrInput
	// The version of the UI Plugin
	Version pulumi.StringPtrInput
}

func (UiPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*uiPluginState)(nil)).Elem()
}

type uiPluginArgs struct {
	// Whether the UI Plugin will be enabled (`true`) or not (`false`)
	Enabled bool `pulumi:"enabled"`
	// Path to a .zip file that contains the bundled UI Plugin
	PluginPath *string `pulumi:"pluginPath"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	ProviderScoped *bool `pulumi:"providerScoped"`
	// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	TenantIds []string `pulumi:"tenantIds"`
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	TenantScoped *bool `pulumi:"tenantScoped"`
}

// The set of arguments for constructing a UiPlugin resource.
type UiPluginArgs struct {
	// Whether the UI Plugin will be enabled (`true`) or not (`false`)
	Enabled pulumi.BoolInput
	// Path to a .zip file that contains the bundled UI Plugin
	PluginPath pulumi.StringPtrInput
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
	// unwanted updates-in-place.
	ProviderScoped pulumi.BoolPtrInput
	// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
	// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
	TenantIds pulumi.StringArrayInput
	// **Can only be set on updates**, the initial value is taken from the JSON manifest.
	// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
	// unwanted updates-in-place.
	TenantScoped pulumi.BoolPtrInput
}

func (UiPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uiPluginArgs)(nil)).Elem()
}

type UiPluginInput interface {
	pulumi.Input

	ToUiPluginOutput() UiPluginOutput
	ToUiPluginOutputWithContext(ctx context.Context) UiPluginOutput
}

func (*UiPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**UiPlugin)(nil)).Elem()
}

func (i *UiPlugin) ToUiPluginOutput() UiPluginOutput {
	return i.ToUiPluginOutputWithContext(context.Background())
}

func (i *UiPlugin) ToUiPluginOutputWithContext(ctx context.Context) UiPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPluginOutput)
}

// UiPluginArrayInput is an input type that accepts UiPluginArray and UiPluginArrayOutput values.
// You can construct a concrete instance of `UiPluginArrayInput` via:
//
//	UiPluginArray{ UiPluginArgs{...} }
type UiPluginArrayInput interface {
	pulumi.Input

	ToUiPluginArrayOutput() UiPluginArrayOutput
	ToUiPluginArrayOutputWithContext(context.Context) UiPluginArrayOutput
}

type UiPluginArray []UiPluginInput

func (UiPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UiPlugin)(nil)).Elem()
}

func (i UiPluginArray) ToUiPluginArrayOutput() UiPluginArrayOutput {
	return i.ToUiPluginArrayOutputWithContext(context.Background())
}

func (i UiPluginArray) ToUiPluginArrayOutputWithContext(ctx context.Context) UiPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPluginArrayOutput)
}

// UiPluginMapInput is an input type that accepts UiPluginMap and UiPluginMapOutput values.
// You can construct a concrete instance of `UiPluginMapInput` via:
//
//	UiPluginMap{ "key": UiPluginArgs{...} }
type UiPluginMapInput interface {
	pulumi.Input

	ToUiPluginMapOutput() UiPluginMapOutput
	ToUiPluginMapOutputWithContext(context.Context) UiPluginMapOutput
}

type UiPluginMap map[string]UiPluginInput

func (UiPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UiPlugin)(nil)).Elem()
}

func (i UiPluginMap) ToUiPluginMapOutput() UiPluginMapOutput {
	return i.ToUiPluginMapOutputWithContext(context.Background())
}

func (i UiPluginMap) ToUiPluginMapOutputWithContext(ctx context.Context) UiPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPluginMapOutput)
}

type UiPluginOutput struct{ *pulumi.OutputState }

func (UiPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UiPlugin)(nil)).Elem()
}

func (o UiPluginOutput) ToUiPluginOutput() UiPluginOutput {
	return o
}

func (o UiPluginOutput) ToUiPluginOutputWithContext(ctx context.Context) UiPluginOutput {
	return o
}

// The description of the UI Plugin
func (o UiPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the UI Plugin will be enabled (`true`) or not (`false`)
func (o UiPluginOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The license of the UI Plugin
func (o UiPluginOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

// The website or custom URL of the UI Plugin
func (o UiPluginOutput) Link() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Link }).(pulumi.StringOutput)
}

// The name of the UI Plugin
func (o UiPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Path to a .zip file that contains the bundled UI Plugin
func (o UiPluginOutput) PluginPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringPtrOutput { return v.PluginPath }).(pulumi.StringPtrOutput)
}

// **Can only be set on updates**, the initial value is taken from the JSON manifest.
// Changes the scope of the UI Plugin for System providers. It should be set to `true` when the UI Plugin is published to the System organization, to prevent
// unwanted updates-in-place.
func (o UiPluginOutput) ProviderScoped() pulumi.BoolOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.BoolOutput { return v.ProviderScoped }).(pulumi.BoolOutput)
}

// The status of the UI Plugin (for example, `ready`, `unavailable`, etc)
func (o UiPluginOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The identifiers of the [Organizations](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org)
// that will be able to use the UI Plugin if enabled. If not set, it doesn't publish to any Organization.
func (o UiPluginOutput) TenantIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringArrayOutput { return v.TenantIds }).(pulumi.StringArrayOutput)
}

// **Can only be set on updates**, the initial value is taken from the JSON manifest.
// Changes the scope of the UI Plugin for Organization users. It should be set to `true` when the UI Plugin is published to any organization, to prevent
// unwanted updates-in-place.
func (o UiPluginOutput) TenantScoped() pulumi.BoolOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.BoolOutput { return v.TenantScoped }).(pulumi.BoolOutput)
}

// The vendor of the UI Plugin
func (o UiPluginOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Vendor }).(pulumi.StringOutput)
}

// The version of the UI Plugin
func (o UiPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPlugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type UiPluginArrayOutput struct{ *pulumi.OutputState }

func (UiPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UiPlugin)(nil)).Elem()
}

func (o UiPluginArrayOutput) ToUiPluginArrayOutput() UiPluginArrayOutput {
	return o
}

func (o UiPluginArrayOutput) ToUiPluginArrayOutputWithContext(ctx context.Context) UiPluginArrayOutput {
	return o
}

func (o UiPluginArrayOutput) Index(i pulumi.IntInput) UiPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UiPlugin {
		return vs[0].([]*UiPlugin)[vs[1].(int)]
	}).(UiPluginOutput)
}

type UiPluginMapOutput struct{ *pulumi.OutputState }

func (UiPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UiPlugin)(nil)).Elem()
}

func (o UiPluginMapOutput) ToUiPluginMapOutput() UiPluginMapOutput {
	return o
}

func (o UiPluginMapOutput) ToUiPluginMapOutputWithContext(ctx context.Context) UiPluginMapOutput {
	return o
}

func (o UiPluginMapOutput) MapIndex(k pulumi.StringInput) UiPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UiPlugin {
		return vs[0].(map[string]*UiPlugin)[vs[1].(string)]
	}).(UiPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UiPluginInput)(nil)).Elem(), &UiPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*UiPluginArrayInput)(nil)).Elem(), UiPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UiPluginMapInput)(nil)).Elem(), UiPluginMap{})
	pulumi.RegisterOutputType(UiPluginOutput{})
	pulumi.RegisterOutputType(UiPluginArrayOutput{})
	pulumi.RegisterOutputType(UiPluginMapOutput{})
}
