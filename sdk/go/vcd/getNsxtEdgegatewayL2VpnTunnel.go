// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
//
// Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
//
// ## Example Usage
//
// ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			existing, err := vcd.LookupOrgVdc(ctx, &vcd.LookupOrgVdcArgs{
//				Name: "existing-vdc",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			server_testing, err := vcd.LookupNsxtEdgegateway(ctx, &vcd.LookupNsxtEdgegatewayArgs{
//				OwnerId: pulumi.StringRef(existing.Id),
//				Name:    "server-testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			client_testing, err := vcd.LookupNsxtEdgegateway(ctx, &vcd.LookupNsxtEdgegatewayArgs{
//				OwnerId: pulumi.StringRef(existing.Id),
//				Name:    "client-testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			server_session, err := vcd.LookupNsxtEdgegatewayL2VpnTunnel(ctx, &vcd.LookupNsxtEdgegatewayL2VpnTunnelArgs{
//				Org:           pulumi.StringRef("datacloud"),
//				EdgeGatewayId: server_testing.Id,
//				Name:          "server-session",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.NewNsxtEdgegatewayL2VpnTunnel(ctx, "client-session", &vcd.NsxtEdgegatewayL2VpnTunnelArgs{
//				Org:              pulumi.String("datacloud"),
//				EdgeGatewayId:    pulumi.String(client_testing.Id),
//				SessionMode:      pulumi.String("CLIENT"),
//				Enabled:          pulumi.Bool(true),
//				LocalEndpointIp:  pulumi.String("101.22.30.3"),
//				RemoteEndpointIp: pulumi.String("1.2.2.3"),
//				PeerCode:         pulumi.String(server_session.PeerCode),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNsxtEdgegatewayL2VpnTunnel(ctx *pulumi.Context, args *LookupNsxtEdgegatewayL2VpnTunnelArgs, opts ...pulumi.InvokeOption) (*LookupNsxtEdgegatewayL2VpnTunnelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNsxtEdgegatewayL2VpnTunnelResult
	err := ctx.Invoke("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtEdgegatewayL2VpnTunnel.
type LookupNsxtEdgegatewayL2VpnTunnelArgs struct {
	// The ID of the Edge Gateway (NSX-T only).
	// Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// The name of the tunnel.
	Name string `pulumi:"name"`
	// The name of organization to use, optional if defined at
	// provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
}

// A collection of values returned by getNsxtEdgegatewayL2VpnTunnel.
type LookupNsxtEdgegatewayL2VpnTunnelResult struct {
	ConnectorInitiationMode string `pulumi:"connectorInitiationMode"`
	Description             string `pulumi:"description"`
	EdgeGatewayId           string `pulumi:"edgeGatewayId"`
	Enabled                 bool   `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id                string                                          `pulumi:"id"`
	LocalEndpointIp   string                                          `pulumi:"localEndpointIp"`
	Name              string                                          `pulumi:"name"`
	Org               *string                                         `pulumi:"org"`
	PeerCode          string                                          `pulumi:"peerCode"`
	PreSharedKey      string                                          `pulumi:"preSharedKey"`
	RemoteEndpointIp  string                                          `pulumi:"remoteEndpointIp"`
	SessionMode       string                                          `pulumi:"sessionMode"`
	StretchedNetworks []GetNsxtEdgegatewayL2VpnTunnelStretchedNetwork `pulumi:"stretchedNetworks"`
	TunnelInterface   string                                          `pulumi:"tunnelInterface"`
}

func LookupNsxtEdgegatewayL2VpnTunnelOutput(ctx *pulumi.Context, args LookupNsxtEdgegatewayL2VpnTunnelOutputArgs, opts ...pulumi.InvokeOption) LookupNsxtEdgegatewayL2VpnTunnelResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNsxtEdgegatewayL2VpnTunnelResultOutput, error) {
			args := v.(LookupNsxtEdgegatewayL2VpnTunnelArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", args, LookupNsxtEdgegatewayL2VpnTunnelResultOutput{}, options).(LookupNsxtEdgegatewayL2VpnTunnelResultOutput), nil
		}).(LookupNsxtEdgegatewayL2VpnTunnelResultOutput)
}

// A collection of arguments for invoking getNsxtEdgegatewayL2VpnTunnel.
type LookupNsxtEdgegatewayL2VpnTunnelOutputArgs struct {
	// The ID of the Edge Gateway (NSX-T only).
	// Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId pulumi.StringInput `pulumi:"edgeGatewayId"`
	// The name of the tunnel.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of organization to use, optional if defined at
	// provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupNsxtEdgegatewayL2VpnTunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayL2VpnTunnelArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtEdgegatewayL2VpnTunnel.
type LookupNsxtEdgegatewayL2VpnTunnelResultOutput struct{ *pulumi.OutputState }

func (LookupNsxtEdgegatewayL2VpnTunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayL2VpnTunnelResult)(nil)).Elem()
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) ToLookupNsxtEdgegatewayL2VpnTunnelResultOutput() LookupNsxtEdgegatewayL2VpnTunnelResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) ToLookupNsxtEdgegatewayL2VpnTunnelResultOutputWithContext(ctx context.Context) LookupNsxtEdgegatewayL2VpnTunnelResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) ConnectorInitiationMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.ConnectorInitiationMode }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) LocalEndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.LocalEndpointIp }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) PeerCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.PeerCode }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) PreSharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.PreSharedKey }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) RemoteEndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.RemoteEndpointIp }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) SessionMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.SessionMode }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) StretchedNetworks() GetNsxtEdgegatewayL2VpnTunnelStretchedNetworkArrayOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) []GetNsxtEdgegatewayL2VpnTunnelStretchedNetwork {
		return v.StretchedNetworks
	}).(GetNsxtEdgegatewayL2VpnTunnelStretchedNetworkArrayOutput)
}

func (o LookupNsxtEdgegatewayL2VpnTunnelResultOutput) TunnelInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayL2VpnTunnelResult) string { return v.TunnelInterface }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNsxtEdgegatewayL2VpnTunnelResultOutput{})
}
