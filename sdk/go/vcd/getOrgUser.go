// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director Org User data source. This can be used to read organization users, including org administrators.
//
// Supported in provider *v3.0+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_org_admin, err := vcd.LookupOrgUser(ctx, &vcd.LookupOrgUserArgs{
//				Org:  pulumi.StringRef("my-org"),
//				Name: pulumi.StringRef("my-org-admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			my_vapp_creator, err := vcd.LookupOrgUser(ctx, &vcd.LookupOrgUserArgs{
//				Org:    pulumi.StringRef("my-org"),
//				UserId: pulumi.StringRef("urn:vcloud:user:c311eb35-6984-4d26-3ee9-0000deadbeef"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("adminUser", my_org_admin)
//			ctx.Export("vappCreatorUser", my_vapp_creator)
//			return nil
//		})
//	}
//
// ```
func LookupOrgUser(ctx *pulumi.Context, args *LookupOrgUserArgs, opts ...pulumi.InvokeOption) (*LookupOrgUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrgUserResult
	err := ctx.Invoke("vcd:index/getOrgUser:getOrgUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOrgUser.
type LookupOrgUserArgs struct {
	// The name of the user. Required if `userId` is not set.
	Name *string `pulumi:"name"`
	// The name of organization to which the user belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// The ID of the user. Required if `name` is not set.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getOrgUser.
type LookupOrgUserResult struct {
	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVmQuota int `pulumi:"deployedVmQuota"`
	// An optional description of the user.
	Description string `pulumi:"description"`
	// The Org User email address.
	EmailAddress string `pulumi:"emailAddress"`
	// True if the user is enabled and can log in.
	Enabled bool `pulumi:"enabled"`
	// The full name of the user.
	FullName string `pulumi:"fullName"`
	// The set of group names to which this user belongs. It's only populated if the users
	// are created after the group (with this user having a `dependsOn` of the given group).
	GroupNames []string `pulumi:"groupNames"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Org User instant messaging.
	InstantMessaging string `pulumi:"instantMessaging"`
	// If the user account was imported from an external resource, like an LDAP.
	IsExternal bool `pulumi:"isExternal"`
	// True if this user has a group role.
	IsGroupRole bool `pulumi:"isGroupRole"`
	// If the user account has been locked due to too many invalid login attempts, the value will be true.
	IsLocked bool    `pulumi:"isLocked"`
	Name     *string `pulumi:"name"`
	Org      *string `pulumi:"org"`
	// Identity provider type for this user.
	ProviderType string `pulumi:"providerType"`
	// The role of the user.
	Role string `pulumi:"role"`
	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVmQuota int `pulumi:"storedVmQuota"`
	// The Org User telephone number.
	Telephone string  `pulumi:"telephone"`
	UserId    *string `pulumi:"userId"`
}

func LookupOrgUserOutput(ctx *pulumi.Context, args LookupOrgUserOutputArgs, opts ...pulumi.InvokeOption) LookupOrgUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOrgUserResultOutput, error) {
			args := v.(LookupOrgUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getOrgUser:getOrgUser", args, LookupOrgUserResultOutput{}, options).(LookupOrgUserResultOutput), nil
		}).(LookupOrgUserResultOutput)
}

// A collection of arguments for invoking getOrgUser.
type LookupOrgUserOutputArgs struct {
	// The name of the user. Required if `userId` is not set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of organization to which the user belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput `pulumi:"org"`
	// The ID of the user. Required if `name` is not set.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (LookupOrgUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrgUserArgs)(nil)).Elem()
}

// A collection of values returned by getOrgUser.
type LookupOrgUserResultOutput struct{ *pulumi.OutputState }

func (LookupOrgUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrgUserResult)(nil)).Elem()
}

func (o LookupOrgUserResultOutput) ToLookupOrgUserResultOutput() LookupOrgUserResultOutput {
	return o
}

func (o LookupOrgUserResultOutput) ToLookupOrgUserResultOutputWithContext(ctx context.Context) LookupOrgUserResultOutput {
	return o
}

// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
func (o LookupOrgUserResultOutput) DeployedVmQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOrgUserResult) int { return v.DeployedVmQuota }).(pulumi.IntOutput)
}

// An optional description of the user.
func (o LookupOrgUserResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.Description }).(pulumi.StringOutput)
}

// The Org User email address.
func (o LookupOrgUserResultOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// True if the user is enabled and can log in.
func (o LookupOrgUserResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOrgUserResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The full name of the user.
func (o LookupOrgUserResultOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.FullName }).(pulumi.StringOutput)
}

// The set of group names to which this user belongs. It's only populated if the users
// are created after the group (with this user having a `dependsOn` of the given group).
func (o LookupOrgUserResultOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOrgUserResult) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOrgUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Org User instant messaging.
func (o LookupOrgUserResultOutput) InstantMessaging() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.InstantMessaging }).(pulumi.StringOutput)
}

// If the user account was imported from an external resource, like an LDAP.
func (o LookupOrgUserResultOutput) IsExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOrgUserResult) bool { return v.IsExternal }).(pulumi.BoolOutput)
}

// True if this user has a group role.
func (o LookupOrgUserResultOutput) IsGroupRole() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOrgUserResult) bool { return v.IsGroupRole }).(pulumi.BoolOutput)
}

// If the user account has been locked due to too many invalid login attempts, the value will be true.
func (o LookupOrgUserResultOutput) IsLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOrgUserResult) bool { return v.IsLocked }).(pulumi.BoolOutput)
}

func (o LookupOrgUserResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrgUserResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupOrgUserResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrgUserResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

// Identity provider type for this user.
func (o LookupOrgUserResultOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.ProviderType }).(pulumi.StringOutput)
}

// The role of the user.
func (o LookupOrgUserResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.Role }).(pulumi.StringOutput)
}

// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
func (o LookupOrgUserResultOutput) StoredVmQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOrgUserResult) int { return v.StoredVmQuota }).(pulumi.IntOutput)
}

// The Org User telephone number.
func (o LookupOrgUserResultOutput) Telephone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgUserResult) string { return v.Telephone }).(pulumi.StringOutput)
}

func (o LookupOrgUserResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrgUserResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrgUserResultOutput{})
}
