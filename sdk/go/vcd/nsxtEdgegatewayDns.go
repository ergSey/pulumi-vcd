// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtEdgegatewayDns struct {
	pulumi.CustomResourceState

	// A set (up to 5) of conditional forwarder zones that allows to define
	// specific forwarding routes based on the domain. See `conditionalForwarderZone`
	ConditionalForwarderZones NsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput `pulumi:"conditionalForwarderZones"`
	// The default forwarder zone to use if
	// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
	DefaultForwarderZone NsxtEdgegatewayDnsDefaultForwarderZoneOutput `pulumi:"defaultForwarderZone"`
	// NSX-T Edge Gateway ID.
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Status of the DNS forwarding service. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The IP on which the DNS forwarder listens. If the Edge Gateway
	// has a dedicated external network, this can be changed.
	ListenerIp pulumi.StringOutput `pulumi:"listenerIp"`
	// Org in which the NSX-T Edge Gateway is located, required
	// if not set in the provider section.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Is `true` if there exists a SNAT rule for the DNS forwarder.
	// If the Edge Gateway is connected to a dedicated provider gateway and `listenerIp`
	// is modified manually, this field will be set to `false`, otherwise `true`.
	SnatRuleEnabled pulumi.BoolOutput `pulumi:"snatRuleEnabled"`
	// This argument only applies if the Edge Gateway
	// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
	// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
	// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
	// If not specified, the IP address will be computed and chosen by VCD.
	SnatRuleIpAddress pulumi.StringOutput `pulumi:"snatRuleIpAddress"`
}

// NewNsxtEdgegatewayDns registers a new resource with the given unique name, arguments, and options.
func NewNsxtEdgegatewayDns(ctx *pulumi.Context,
	name string, args *NsxtEdgegatewayDnsArgs, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayDns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultForwarderZone == nil {
		return nil, errors.New("invalid value for required argument 'DefaultForwarderZone'")
	}
	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtEdgegatewayDns
	err := ctx.RegisterResource("vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtEdgegatewayDns gets an existing NsxtEdgegatewayDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtEdgegatewayDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtEdgegatewayDnsState, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayDns, error) {
	var resource NsxtEdgegatewayDns
	err := ctx.ReadResource("vcd:index/nsxtEdgegatewayDns:NsxtEdgegatewayDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtEdgegatewayDns resources.
type nsxtEdgegatewayDnsState struct {
	// A set (up to 5) of conditional forwarder zones that allows to define
	// specific forwarding routes based on the domain. See `conditionalForwarderZone`
	ConditionalForwarderZones []NsxtEdgegatewayDnsConditionalForwarderZone `pulumi:"conditionalForwarderZones"`
	// The default forwarder zone to use if
	// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
	DefaultForwarderZone *NsxtEdgegatewayDnsDefaultForwarderZone `pulumi:"defaultForwarderZone"`
	// NSX-T Edge Gateway ID.
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Status of the DNS forwarding service. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The IP on which the DNS forwarder listens. If the Edge Gateway
	// has a dedicated external network, this can be changed.
	ListenerIp *string `pulumi:"listenerIp"`
	// Org in which the NSX-T Edge Gateway is located, required
	// if not set in the provider section.
	Org *string `pulumi:"org"`
	// Is `true` if there exists a SNAT rule for the DNS forwarder.
	// If the Edge Gateway is connected to a dedicated provider gateway and `listenerIp`
	// is modified manually, this field will be set to `false`, otherwise `true`.
	SnatRuleEnabled *bool `pulumi:"snatRuleEnabled"`
	// This argument only applies if the Edge Gateway
	// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
	// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
	// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
	// If not specified, the IP address will be computed and chosen by VCD.
	SnatRuleIpAddress *string `pulumi:"snatRuleIpAddress"`
}

type NsxtEdgegatewayDnsState struct {
	// A set (up to 5) of conditional forwarder zones that allows to define
	// specific forwarding routes based on the domain. See `conditionalForwarderZone`
	ConditionalForwarderZones NsxtEdgegatewayDnsConditionalForwarderZoneArrayInput
	// The default forwarder zone to use if
	// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
	DefaultForwarderZone NsxtEdgegatewayDnsDefaultForwarderZonePtrInput
	// NSX-T Edge Gateway ID.
	EdgeGatewayId pulumi.StringPtrInput
	// Status of the DNS forwarding service. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The IP on which the DNS forwarder listens. If the Edge Gateway
	// has a dedicated external network, this can be changed.
	ListenerIp pulumi.StringPtrInput
	// Org in which the NSX-T Edge Gateway is located, required
	// if not set in the provider section.
	Org pulumi.StringPtrInput
	// Is `true` if there exists a SNAT rule for the DNS forwarder.
	// If the Edge Gateway is connected to a dedicated provider gateway and `listenerIp`
	// is modified manually, this field will be set to `false`, otherwise `true`.
	SnatRuleEnabled pulumi.BoolPtrInput
	// This argument only applies if the Edge Gateway
	// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
	// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
	// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
	// If not specified, the IP address will be computed and chosen by VCD.
	SnatRuleIpAddress pulumi.StringPtrInput
}

func (NsxtEdgegatewayDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayDnsState)(nil)).Elem()
}

type nsxtEdgegatewayDnsArgs struct {
	// A set (up to 5) of conditional forwarder zones that allows to define
	// specific forwarding routes based on the domain. See `conditionalForwarderZone`
	ConditionalForwarderZones []NsxtEdgegatewayDnsConditionalForwarderZone `pulumi:"conditionalForwarderZones"`
	// The default forwarder zone to use if
	// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
	DefaultForwarderZone NsxtEdgegatewayDnsDefaultForwarderZone `pulumi:"defaultForwarderZone"`
	// NSX-T Edge Gateway ID.
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Status of the DNS forwarding service. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The IP on which the DNS forwarder listens. If the Edge Gateway
	// has a dedicated external network, this can be changed.
	ListenerIp *string `pulumi:"listenerIp"`
	// Org in which the NSX-T Edge Gateway is located, required
	// if not set in the provider section.
	Org *string `pulumi:"org"`
	// This argument only applies if the Edge Gateway
	// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
	// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
	// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
	// If not specified, the IP address will be computed and chosen by VCD.
	SnatRuleIpAddress *string `pulumi:"snatRuleIpAddress"`
}

// The set of arguments for constructing a NsxtEdgegatewayDns resource.
type NsxtEdgegatewayDnsArgs struct {
	// A set (up to 5) of conditional forwarder zones that allows to define
	// specific forwarding routes based on the domain. See `conditionalForwarderZone`
	ConditionalForwarderZones NsxtEdgegatewayDnsConditionalForwarderZoneArrayInput
	// The default forwarder zone to use if
	// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
	DefaultForwarderZone NsxtEdgegatewayDnsDefaultForwarderZoneInput
	// NSX-T Edge Gateway ID.
	EdgeGatewayId pulumi.StringInput
	// Status of the DNS forwarding service. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The IP on which the DNS forwarder listens. If the Edge Gateway
	// has a dedicated external network, this can be changed.
	ListenerIp pulumi.StringPtrInput
	// Org in which the NSX-T Edge Gateway is located, required
	// if not set in the provider section.
	Org pulumi.StringPtrInput
	// This argument only applies if the Edge Gateway
	// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
	// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
	// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
	// If not specified, the IP address will be computed and chosen by VCD.
	SnatRuleIpAddress pulumi.StringPtrInput
}

func (NsxtEdgegatewayDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayDnsArgs)(nil)).Elem()
}

type NsxtEdgegatewayDnsInput interface {
	pulumi.Input

	ToNsxtEdgegatewayDnsOutput() NsxtEdgegatewayDnsOutput
	ToNsxtEdgegatewayDnsOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsOutput
}

func (*NsxtEdgegatewayDns) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayDns)(nil)).Elem()
}

func (i *NsxtEdgegatewayDns) ToNsxtEdgegatewayDnsOutput() NsxtEdgegatewayDnsOutput {
	return i.ToNsxtEdgegatewayDnsOutputWithContext(context.Background())
}

func (i *NsxtEdgegatewayDns) ToNsxtEdgegatewayDnsOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayDnsOutput)
}

// NsxtEdgegatewayDnsArrayInput is an input type that accepts NsxtEdgegatewayDnsArray and NsxtEdgegatewayDnsArrayOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayDnsArrayInput` via:
//
//	NsxtEdgegatewayDnsArray{ NsxtEdgegatewayDnsArgs{...} }
type NsxtEdgegatewayDnsArrayInput interface {
	pulumi.Input

	ToNsxtEdgegatewayDnsArrayOutput() NsxtEdgegatewayDnsArrayOutput
	ToNsxtEdgegatewayDnsArrayOutputWithContext(context.Context) NsxtEdgegatewayDnsArrayOutput
}

type NsxtEdgegatewayDnsArray []NsxtEdgegatewayDnsInput

func (NsxtEdgegatewayDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayDns)(nil)).Elem()
}

func (i NsxtEdgegatewayDnsArray) ToNsxtEdgegatewayDnsArrayOutput() NsxtEdgegatewayDnsArrayOutput {
	return i.ToNsxtEdgegatewayDnsArrayOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayDnsArray) ToNsxtEdgegatewayDnsArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayDnsArrayOutput)
}

// NsxtEdgegatewayDnsMapInput is an input type that accepts NsxtEdgegatewayDnsMap and NsxtEdgegatewayDnsMapOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayDnsMapInput` via:
//
//	NsxtEdgegatewayDnsMap{ "key": NsxtEdgegatewayDnsArgs{...} }
type NsxtEdgegatewayDnsMapInput interface {
	pulumi.Input

	ToNsxtEdgegatewayDnsMapOutput() NsxtEdgegatewayDnsMapOutput
	ToNsxtEdgegatewayDnsMapOutputWithContext(context.Context) NsxtEdgegatewayDnsMapOutput
}

type NsxtEdgegatewayDnsMap map[string]NsxtEdgegatewayDnsInput

func (NsxtEdgegatewayDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayDns)(nil)).Elem()
}

func (i NsxtEdgegatewayDnsMap) ToNsxtEdgegatewayDnsMapOutput() NsxtEdgegatewayDnsMapOutput {
	return i.ToNsxtEdgegatewayDnsMapOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayDnsMap) ToNsxtEdgegatewayDnsMapOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayDnsMapOutput)
}

type NsxtEdgegatewayDnsOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayDns)(nil)).Elem()
}

func (o NsxtEdgegatewayDnsOutput) ToNsxtEdgegatewayDnsOutput() NsxtEdgegatewayDnsOutput {
	return o
}

func (o NsxtEdgegatewayDnsOutput) ToNsxtEdgegatewayDnsOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsOutput {
	return o
}

// A set (up to 5) of conditional forwarder zones that allows to define
// specific forwarding routes based on the domain. See `conditionalForwarderZone`
func (o NsxtEdgegatewayDnsOutput) ConditionalForwarderZones() NsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) NsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput {
		return v.ConditionalForwarderZones
	}).(NsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput)
}

// The default forwarder zone to use if
// there’s no matching domain in the conditional forwarder zones. See `defaultForwarderZone`
func (o NsxtEdgegatewayDnsOutput) DefaultForwarderZone() NsxtEdgegatewayDnsDefaultForwarderZoneOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) NsxtEdgegatewayDnsDefaultForwarderZoneOutput {
		return v.DefaultForwarderZone
	}).(NsxtEdgegatewayDnsDefaultForwarderZoneOutput)
}

// NSX-T Edge Gateway ID.
func (o NsxtEdgegatewayDnsOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Status of the DNS forwarding service. Defaults to `true`.
func (o NsxtEdgegatewayDnsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The IP on which the DNS forwarder listens. If the Edge Gateway
// has a dedicated external network, this can be changed.
func (o NsxtEdgegatewayDnsOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.StringOutput { return v.ListenerIp }).(pulumi.StringOutput)
}

// Org in which the NSX-T Edge Gateway is located, required
// if not set in the provider section.
func (o NsxtEdgegatewayDnsOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Is `true` if there exists a SNAT rule for the DNS forwarder.
// If the Edge Gateway is connected to a dedicated provider gateway and `listenerIp`
// is modified manually, this field will be set to `false`, otherwise `true`.
func (o NsxtEdgegatewayDnsOutput) SnatRuleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.BoolOutput { return v.SnatRuleEnabled }).(pulumi.BoolOutput)
}

// This argument only applies if the Edge Gateway
// is connected to a Provider Gateway using IP Spaces. If specified, VCD will
// conveniently manage the SNAT rule with the specified IP address for the DNS forwarder.
// The specified IP can be allocated using [`IpSpaceIpAllocation`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/ip_space_ip_allocation)
// If not specified, the IP address will be computed and chosen by VCD.
func (o NsxtEdgegatewayDnsOutput) SnatRuleIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayDns) pulumi.StringOutput { return v.SnatRuleIpAddress }).(pulumi.StringOutput)
}

type NsxtEdgegatewayDnsArrayOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayDns)(nil)).Elem()
}

func (o NsxtEdgegatewayDnsArrayOutput) ToNsxtEdgegatewayDnsArrayOutput() NsxtEdgegatewayDnsArrayOutput {
	return o
}

func (o NsxtEdgegatewayDnsArrayOutput) ToNsxtEdgegatewayDnsArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsArrayOutput {
	return o
}

func (o NsxtEdgegatewayDnsArrayOutput) Index(i pulumi.IntInput) NsxtEdgegatewayDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtEdgegatewayDns {
		return vs[0].([]*NsxtEdgegatewayDns)[vs[1].(int)]
	}).(NsxtEdgegatewayDnsOutput)
}

type NsxtEdgegatewayDnsMapOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayDns)(nil)).Elem()
}

func (o NsxtEdgegatewayDnsMapOutput) ToNsxtEdgegatewayDnsMapOutput() NsxtEdgegatewayDnsMapOutput {
	return o
}

func (o NsxtEdgegatewayDnsMapOutput) ToNsxtEdgegatewayDnsMapOutputWithContext(ctx context.Context) NsxtEdgegatewayDnsMapOutput {
	return o
}

func (o NsxtEdgegatewayDnsMapOutput) MapIndex(k pulumi.StringInput) NsxtEdgegatewayDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtEdgegatewayDns {
		return vs[0].(map[string]*NsxtEdgegatewayDns)[vs[1].(string)]
	}).(NsxtEdgegatewayDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayDnsInput)(nil)).Elem(), &NsxtEdgegatewayDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayDnsArrayInput)(nil)).Elem(), NsxtEdgegatewayDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayDnsMapInput)(nil)).Elem(), NsxtEdgegatewayDnsMap{})
	pulumi.RegisterOutputType(NsxtEdgegatewayDnsOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayDnsArrayOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayDnsMapOutput{})
}
