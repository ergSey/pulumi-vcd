// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtNatRule struct {
	pulumi.CustomResourceState

	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
	// data source or created using `NsxtAppPortProfile` resource
	AppPortProfileId pulumi.StringPtrOutput `pulumi:"appPortProfileId"`
	// An optional description of the NAT rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// For `DNAT` only. This represents the external port number or port range when doing
	// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	DnatExternalPort pulumi.StringPtrOutput `pulumi:"dnatExternalPort"`
	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` data source
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Enables or disables NAT rule (default `true`)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
	ExternalAddress pulumi.StringPtrOutput `pulumi:"externalAddress"`
	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
	// `BYPASS`
	// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
	// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
	// * `BYPASS` - skip applying firewall rules to NAT rule
	FirewallMatch pulumi.StringOutput `pulumi:"firewallMatch"`
	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
	// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	InternalAddress pulumi.StringPtrOutput `pulumi:"internalAddress"`
	// Enable to have the address translation performed by this rule logged
	// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
	// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
	// return error and it is not possible to validate it. `pulumi preview` might show difference on
	// every update.
	Logging pulumi.BoolPtrOutput `pulumi:"logging"`
	// A name for NAT rule
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
	// * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
	// * `NO_DNAT` prevents external IP translation
	// * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
	// * `NO_SNAT` prevents internal IP translation
	// * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
	//   versa. The number of internal addresses should be exactly the same as that of external addresses.
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
	// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	SnatDestinationAddress pulumi.StringPtrOutput `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtNatRule registers a new resource with the given unique name, arguments, and options.
func NewNsxtNatRule(ctx *pulumi.Context,
	name string, args *NsxtNatRuleArgs, opts ...pulumi.ResourceOption) (*NsxtNatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtNatRule
	err := ctx.RegisterResource("vcd:index/nsxtNatRule:NsxtNatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtNatRule gets an existing NsxtNatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtNatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtNatRuleState, opts ...pulumi.ResourceOption) (*NsxtNatRule, error) {
	var resource NsxtNatRule
	err := ctx.ReadResource("vcd:index/nsxtNatRule:NsxtNatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtNatRule resources.
type nsxtNatRuleState struct {
	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
	// data source or created using `NsxtAppPortProfile` resource
	AppPortProfileId *string `pulumi:"appPortProfileId"`
	// An optional description of the NAT rule
	Description *string `pulumi:"description"`
	// For `DNAT` only. This represents the external port number or port range when doing
	// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	DnatExternalPort *string `pulumi:"dnatExternalPort"`
	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` data source
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Enables or disables NAT rule (default `true`)
	Enabled *bool `pulumi:"enabled"`
	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
	ExternalAddress *string `pulumi:"externalAddress"`
	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
	// `BYPASS`
	// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
	// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
	// * `BYPASS` - skip applying firewall rules to NAT rule
	FirewallMatch *string `pulumi:"firewallMatch"`
	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
	// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	InternalAddress *string `pulumi:"internalAddress"`
	// Enable to have the address translation performed by this rule logged
	// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
	// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
	// return error and it is not possible to validate it. `pulumi preview` might show difference on
	// every update.
	Logging *bool `pulumi:"logging"`
	// A name for NAT rule
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	Priority *int `pulumi:"priority"`
	// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
	// * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
	// * `NO_DNAT` prevents external IP translation
	// * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
	// * `NO_SNAT` prevents internal IP translation
	// * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
	//   versa. The number of internal addresses should be exactly the same as that of external addresses.
	RuleType *string `pulumi:"ruleType"`
	// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	SnatDestinationAddress *string `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

type NsxtNatRuleState struct {
	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
	// data source or created using `NsxtAppPortProfile` resource
	AppPortProfileId pulumi.StringPtrInput
	// An optional description of the NAT rule
	Description pulumi.StringPtrInput
	// For `DNAT` only. This represents the external port number or port range when doing
	// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	DnatExternalPort pulumi.StringPtrInput
	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` data source
	EdgeGatewayId pulumi.StringPtrInput
	// Enables or disables NAT rule (default `true`)
	Enabled pulumi.BoolPtrInput
	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
	ExternalAddress pulumi.StringPtrInput
	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
	// `BYPASS`
	// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
	// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
	// * `BYPASS` - skip applying firewall rules to NAT rule
	FirewallMatch pulumi.StringPtrInput
	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
	// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	InternalAddress pulumi.StringPtrInput
	// Enable to have the address translation performed by this rule logged
	// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
	// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
	// return error and it is not possible to validate it. `pulumi preview` might show difference on
	// every update.
	Logging pulumi.BoolPtrInput
	// A name for NAT rule
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	Priority pulumi.IntPtrInput
	// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
	// * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
	// * `NO_DNAT` prevents external IP translation
	// * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
	// * `NO_SNAT` prevents internal IP translation
	// * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
	//   versa. The number of internal addresses should be exactly the same as that of external addresses.
	RuleType pulumi.StringPtrInput
	// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	SnatDestinationAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNatRuleState)(nil)).Elem()
}

type nsxtNatRuleArgs struct {
	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
	// data source or created using `NsxtAppPortProfile` resource
	AppPortProfileId *string `pulumi:"appPortProfileId"`
	// An optional description of the NAT rule
	Description *string `pulumi:"description"`
	// For `DNAT` only. This represents the external port number or port range when doing
	// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	DnatExternalPort *string `pulumi:"dnatExternalPort"`
	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` data source
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Enables or disables NAT rule (default `true`)
	Enabled *bool `pulumi:"enabled"`
	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
	ExternalAddress *string `pulumi:"externalAddress"`
	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
	// `BYPASS`
	// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
	// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
	// * `BYPASS` - skip applying firewall rules to NAT rule
	FirewallMatch *string `pulumi:"firewallMatch"`
	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
	// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	InternalAddress *string `pulumi:"internalAddress"`
	// Enable to have the address translation performed by this rule logged
	// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
	// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
	// return error and it is not possible to validate it. `pulumi preview` might show difference on
	// every update.
	Logging *bool `pulumi:"logging"`
	// A name for NAT rule
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	Priority *int `pulumi:"priority"`
	// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
	// * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
	// * `NO_DNAT` prevents external IP translation
	// * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
	// * `NO_SNAT` prevents internal IP translation
	// * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
	//   versa. The number of internal addresses should be exactly the same as that of external addresses.
	RuleType string `pulumi:"ruleType"`
	// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	SnatDestinationAddress *string `pulumi:"snatDestinationAddress"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtNatRule resource.
type NsxtNatRuleArgs struct {
	// Application Port Profile to which to apply the rule. The
	// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
	// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
	// data source or created using `NsxtAppPortProfile` resource
	AppPortProfileId pulumi.StringPtrInput
	// An optional description of the NAT rule
	Description pulumi.StringPtrInput
	// For `DNAT` only. This represents the external port number or port range when doing
	// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
	// for the given IPs selected will be translated.
	DnatExternalPort pulumi.StringPtrInput
	// The ID of the Edge Gateway (NSX-T only). Can be looked up using
	// `NsxtEdgegateway` data source
	EdgeGatewayId pulumi.StringInput
	// Enables or disables NAT rule (default `true`)
	Enabled pulumi.BoolPtrInput
	// The external address for the NAT Rule. This must be supplied as a single IP or Network
	// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
	// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
	// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
	ExternalAddress pulumi.StringPtrInput
	// You can set a firewall match rule to determine how
	// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
	// `BYPASS`
	// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
	// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
	// * `BYPASS` - skip applying firewall rules to NAT rule
	FirewallMatch pulumi.StringPtrInput
	// The internal address for the NAT Rule. This must be supplied as a single IP or
	// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
	// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
	// These IPs are typically the Private IPs that are allocated to workloads.
	InternalAddress pulumi.StringPtrInput
	// Enable to have the address translation performed by this rule logged
	// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
	// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
	// return error and it is not possible to validate it. `pulumi preview` might show difference on
	// every update.
	Logging pulumi.BoolPtrInput
	// A name for NAT rule
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// if an address has multiple NAT rules, you can assign these
	// rules different priorities to determine the order in which they are applied. A lower value means a
	// higher priority for this rule.
	Priority pulumi.IntPtrInput
	// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
	// * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
	// * `NO_DNAT` prevents external IP translation
	// * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
	// * `NO_SNAT` prevents internal IP translation
	// * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
	//   versa. The number of internal addresses should be exactly the same as that of external addresses.
	RuleType pulumi.StringInput
	// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
	// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
	// destination network.
	SnatDestinationAddress pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
}

func (NsxtNatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNatRuleArgs)(nil)).Elem()
}

type NsxtNatRuleInput interface {
	pulumi.Input

	ToNsxtNatRuleOutput() NsxtNatRuleOutput
	ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput
}

func (*NsxtNatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNatRule)(nil)).Elem()
}

func (i *NsxtNatRule) ToNsxtNatRuleOutput() NsxtNatRuleOutput {
	return i.ToNsxtNatRuleOutputWithContext(context.Background())
}

func (i *NsxtNatRule) ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleOutput)
}

// NsxtNatRuleArrayInput is an input type that accepts NsxtNatRuleArray and NsxtNatRuleArrayOutput values.
// You can construct a concrete instance of `NsxtNatRuleArrayInput` via:
//
//	NsxtNatRuleArray{ NsxtNatRuleArgs{...} }
type NsxtNatRuleArrayInput interface {
	pulumi.Input

	ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput
	ToNsxtNatRuleArrayOutputWithContext(context.Context) NsxtNatRuleArrayOutput
}

type NsxtNatRuleArray []NsxtNatRuleInput

func (NsxtNatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNatRule)(nil)).Elem()
}

func (i NsxtNatRuleArray) ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput {
	return i.ToNsxtNatRuleArrayOutputWithContext(context.Background())
}

func (i NsxtNatRuleArray) ToNsxtNatRuleArrayOutputWithContext(ctx context.Context) NsxtNatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleArrayOutput)
}

// NsxtNatRuleMapInput is an input type that accepts NsxtNatRuleMap and NsxtNatRuleMapOutput values.
// You can construct a concrete instance of `NsxtNatRuleMapInput` via:
//
//	NsxtNatRuleMap{ "key": NsxtNatRuleArgs{...} }
type NsxtNatRuleMapInput interface {
	pulumi.Input

	ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput
	ToNsxtNatRuleMapOutputWithContext(context.Context) NsxtNatRuleMapOutput
}

type NsxtNatRuleMap map[string]NsxtNatRuleInput

func (NsxtNatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNatRule)(nil)).Elem()
}

func (i NsxtNatRuleMap) ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput {
	return i.ToNsxtNatRuleMapOutputWithContext(context.Background())
}

func (i NsxtNatRuleMap) ToNsxtNatRuleMapOutputWithContext(ctx context.Context) NsxtNatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNatRuleMapOutput)
}

type NsxtNatRuleOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleOutput) ToNsxtNatRuleOutput() NsxtNatRuleOutput {
	return o
}

func (o NsxtNatRuleOutput) ToNsxtNatRuleOutputWithContext(ctx context.Context) NsxtNatRuleOutput {
	return o
}

// Application Port Profile to which to apply the rule. The
// Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
// gateway to connect to the internal network.  Can be looked up using `NsxtAppPortProfile`
// data source or created using `NsxtAppPortProfile` resource
func (o NsxtNatRuleOutput) AppPortProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.AppPortProfileId }).(pulumi.StringPtrOutput)
}

// An optional description of the NAT rule
func (o NsxtNatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// For `DNAT` only. This represents the external port number or port range when doing
// `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
// for the given IPs selected will be translated.
func (o NsxtNatRuleOutput) DnatExternalPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.DnatExternalPort }).(pulumi.StringPtrOutput)
}

// The ID of the Edge Gateway (NSX-T only). Can be looked up using
// `NsxtEdgegateway` data source
func (o NsxtNatRuleOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Enables or disables NAT rule (default `true`)
func (o NsxtNatRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The external address for the NAT Rule. This must be supplied as a single IP or Network
// CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
// external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
// Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
func (o NsxtNatRuleOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.ExternalAddress }).(pulumi.StringPtrOutput)
}

// You can set a firewall match rule to determine how
// firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
// `BYPASS`
// * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
// * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
// * `BYPASS` - skip applying firewall rules to NAT rule
func (o NsxtNatRuleOutput) FirewallMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.FirewallMatch }).(pulumi.StringOutput)
}

// The internal address for the NAT Rule. This must be supplied as a single IP or
// Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
// internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
// These IPs are typically the Private IPs that are allocated to workloads.
func (o NsxtNatRuleOutput) InternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.InternalAddress }).(pulumi.StringPtrOutput)
}

// Enable to have the address translation performed by this rule logged
// (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
// is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
// return error and it is not possible to validate it. `pulumi preview` might show difference on
// every update.
func (o NsxtNatRuleOutput) Logging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.BoolPtrOutput { return v.Logging }).(pulumi.BoolPtrOutput)
}

// A name for NAT rule
func (o NsxtNatRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o NsxtNatRuleOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// if an address has multiple NAT rules, you can assign these
// rules different priorities to determine the order in which they are applied. A lower value means a
// higher priority for this rule.
func (o NsxtNatRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
//   - `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
//   - `NO_DNAT` prevents external IP translation
//   - `SNAT` translates an internal IP to an external IP and is used for outbound traffic
//   - `NO_SNAT` prevents internal IP translation
//   - `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
//     versa. The number of internal addresses should be exactly the same as that of external addresses.
func (o NsxtNatRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

// For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This
// must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
// destination network.
func (o NsxtNatRuleOutput) SnatDestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringPtrOutput { return v.SnatDestinationAddress }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
func (o NsxtNatRuleOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNatRule) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtNatRuleArrayOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleArrayOutput) ToNsxtNatRuleArrayOutput() NsxtNatRuleArrayOutput {
	return o
}

func (o NsxtNatRuleArrayOutput) ToNsxtNatRuleArrayOutputWithContext(ctx context.Context) NsxtNatRuleArrayOutput {
	return o
}

func (o NsxtNatRuleArrayOutput) Index(i pulumi.IntInput) NsxtNatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtNatRule {
		return vs[0].([]*NsxtNatRule)[vs[1].(int)]
	}).(NsxtNatRuleOutput)
}

type NsxtNatRuleMapOutput struct{ *pulumi.OutputState }

func (NsxtNatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNatRule)(nil)).Elem()
}

func (o NsxtNatRuleMapOutput) ToNsxtNatRuleMapOutput() NsxtNatRuleMapOutput {
	return o
}

func (o NsxtNatRuleMapOutput) ToNsxtNatRuleMapOutputWithContext(ctx context.Context) NsxtNatRuleMapOutput {
	return o
}

func (o NsxtNatRuleMapOutput) MapIndex(k pulumi.StringInput) NsxtNatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtNatRule {
		return vs[0].(map[string]*NsxtNatRule)[vs[1].(string)]
	}).(NsxtNatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleInput)(nil)).Elem(), &NsxtNatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleArrayInput)(nil)).Elem(), NsxtNatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNatRuleMapInput)(nil)).Elem(), NsxtNatRuleMap{})
	pulumi.RegisterOutputType(NsxtNatRuleOutput{})
	pulumi.RegisterOutputType(NsxtNatRuleArrayOutput{})
	pulumi.RegisterOutputType(NsxtNatRuleMapOutput{})
}
