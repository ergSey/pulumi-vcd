// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

var _ = internal.GetEnvOrDefault

// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
func GetAllowApiTokenFile(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "vcd:allowApiTokenFile")
}

// Set this to true if you understand the security risks of using Service Account token files and would like to suppress
// the warnings
func GetAllowServiceAccountTokenFile(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "vcd:allowServiceAccountTokenFile")
}

// If set, VCDClient will permit unverifiable SSL certificates.
func GetAllowUnverifiedSsl(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "vcd:allowUnverifiedSsl")
}

// The API token used instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
func GetApiToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:apiToken")
}

// The API token file instead of username/password for VCD API operations. (Requires VCD 10.3.1+)
func GetApiTokenFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:apiTokenFile")
}

// 'integrated', 'saml_adfs', 'token', 'api_token', 'api_token_file' and 'service_account_token_file' are supported.
// 'integrated' is default.
func GetAuthType(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:authType")
}

// Defines a set of `metadataEntry` that need to be ignored by this provider. All filters on this attribute are computed
// with a logical AND
func GetIgnoreMetadataChanges(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:ignoreMetadataChanges")
}
func GetImportSeparator(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:importSeparator")
}

// If set, it will enable logging of API requests and responses
func GetLogging(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "vcd:logging")
}

// Defines the full name of the logging file for API calls (requires 'logging')
func GetLoggingFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:loggingFile")
}

// Max num seconds to wait for successful response when operating on resources within vCloud (defaults to 60)
func GetMaxRetryTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "vcd:maxRetryTimeout")
}

// The VCD Org for API operations
func GetOrg(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:org")
}

// The user password for VCD API operations.
func GetPassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:password")
}

// Allows to specify custom cookie for ADFS server lookup. '{{.Org}}' is replaced by real Org - e.g. 'sso-preferred=yes;
// sso_redirect_org={{.Org}}'
func GetSamlAdfsCookie(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:samlAdfsCookie")
}

// Allows to specify custom Relaying Party Trust Identifier for auth_type=saml_adfs
func GetSamlAdfsRptId(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:samlAdfsRptId")
}

// The Service Account API token file instead of username/password for VCD API operations. (Requires VCD 10.4.0+)
func GetServiceAccountTokenFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:serviceAccountTokenFile")
}

// The VCD Org for user authentication
func GetSysorg(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:sysorg")
}

// The token used instead of username/password for VCD API operations.
func GetToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:token")
}

// The VCD url for VCD API operations.
func GetUrl(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:url")
}

// The user name for VCD API operations.
func GetUser(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:user")
}

// The VDC for API operations
func GetVdc(ctx *pulumi.Context) string {
	return config.Get(ctx, "vcd:vdc")
}
