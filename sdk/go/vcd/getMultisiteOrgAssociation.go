// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read a VMware Cloud Director Org association information.
//
// Supported in provider *v3.13+*
//
// ## Example Usage
//
// ### 1
//
// Retrieving an Org association using the associated Org ID.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_org, err := vcd.LookupOrg(ctx, &vcd.LookupOrgArgs{
//				Name: "my-org",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.LookupMultisiteOrgAssociation(ctx, &vcd.LookupMultisiteOrgAssociationArgs{
//				OrgId:           my_org.Id,
//				AssociatedOrgId: pulumi.StringRef("urn:vcloud:org:3901d87d-1596-4a5a-a74b-57a7313737cf"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### 2
//
// Retrieving an Org association using the association data file.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_org, err := vcd.LookupOrg(ctx, &vcd.LookupOrgArgs{
//				Name: "my-org",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.LookupMultisiteOrgAssociation(ctx, &vcd.LookupMultisiteOrgAssociationArgs{
//				OrgId:               my_org.Id,
//				AssociationDataFile: pulumi.StringRef("remote-org.xml"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## More information
//
// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
// of association workflows.
func LookupMultisiteOrgAssociation(ctx *pulumi.Context, args *LookupMultisiteOrgAssociationArgs, opts ...pulumi.InvokeOption) (*LookupMultisiteOrgAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMultisiteOrgAssociationResult
	err := ctx.Invoke("vcd:index/getMultisiteOrgAssociation:getMultisiteOrgAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMultisiteOrgAssociation.
type LookupMultisiteOrgAssociationArgs struct {
	// ID of the remote organization associated with the current one. (Used in alternative to
	// `associatedDataFile`)
	AssociatedOrgId *string `pulumi:"associatedOrgId"`
	// Name of the file containing the data used to associate this Org to another one.
	// (Used when `associatedOrgId` is not known)
	AssociationDataFile *string `pulumi:"associationDataFile"`
	// The ID of the organization for which we need to collect the data.
	OrgId string `pulumi:"orgId"`
}

// A collection of values returned by getMultisiteOrgAssociation.
type LookupMultisiteOrgAssociationResult struct {
	AssociatedOrgId *string `pulumi:"associatedOrgId"`
	// The name of the associated Org.
	AssociatedOrgName string `pulumi:"associatedOrgName"`
	// The ID of the associated site.
	AssociatedSiteId    string  `pulumi:"associatedSiteId"`
	AssociationDataFile *string `pulumi:"associationDataFile"`
	// The provider-assigned unique ID for this managed resource.
	Id    string `pulumi:"id"`
	OrgId string `pulumi:"orgId"`
	// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
	Status string `pulumi:"status"`
}

func LookupMultisiteOrgAssociationOutput(ctx *pulumi.Context, args LookupMultisiteOrgAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupMultisiteOrgAssociationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMultisiteOrgAssociationResultOutput, error) {
			args := v.(LookupMultisiteOrgAssociationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getMultisiteOrgAssociation:getMultisiteOrgAssociation", args, LookupMultisiteOrgAssociationResultOutput{}, options).(LookupMultisiteOrgAssociationResultOutput), nil
		}).(LookupMultisiteOrgAssociationResultOutput)
}

// A collection of arguments for invoking getMultisiteOrgAssociation.
type LookupMultisiteOrgAssociationOutputArgs struct {
	// ID of the remote organization associated with the current one. (Used in alternative to
	// `associatedDataFile`)
	AssociatedOrgId pulumi.StringPtrInput `pulumi:"associatedOrgId"`
	// Name of the file containing the data used to associate this Org to another one.
	// (Used when `associatedOrgId` is not known)
	AssociationDataFile pulumi.StringPtrInput `pulumi:"associationDataFile"`
	// The ID of the organization for which we need to collect the data.
	OrgId pulumi.StringInput `pulumi:"orgId"`
}

func (LookupMultisiteOrgAssociationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultisiteOrgAssociationArgs)(nil)).Elem()
}

// A collection of values returned by getMultisiteOrgAssociation.
type LookupMultisiteOrgAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupMultisiteOrgAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultisiteOrgAssociationResult)(nil)).Elem()
}

func (o LookupMultisiteOrgAssociationResultOutput) ToLookupMultisiteOrgAssociationResultOutput() LookupMultisiteOrgAssociationResultOutput {
	return o
}

func (o LookupMultisiteOrgAssociationResultOutput) ToLookupMultisiteOrgAssociationResultOutputWithContext(ctx context.Context) LookupMultisiteOrgAssociationResultOutput {
	return o
}

func (o LookupMultisiteOrgAssociationResultOutput) AssociatedOrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) *string { return v.AssociatedOrgId }).(pulumi.StringPtrOutput)
}

// The name of the associated Org.
func (o LookupMultisiteOrgAssociationResultOutput) AssociatedOrgName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) string { return v.AssociatedOrgName }).(pulumi.StringOutput)
}

// The ID of the associated site.
func (o LookupMultisiteOrgAssociationResultOutput) AssociatedSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) string { return v.AssociatedSiteId }).(pulumi.StringOutput)
}

func (o LookupMultisiteOrgAssociationResultOutput) AssociationDataFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) *string { return v.AssociationDataFile }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMultisiteOrgAssociationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMultisiteOrgAssociationResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
func (o LookupMultisiteOrgAssociationResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteOrgAssociationResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMultisiteOrgAssociationResultOutput{})
}
