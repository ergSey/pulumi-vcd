// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
//
// A `SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
// like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
// may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
//
// Supported in provider *v3.8+*
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupSubscribedCatalog(ctx, &vcd.LookupSubscribedCatalogArgs{
//				Org:  pulumi.StringRef("my-org"),
//				Name: "subscriber",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Filter arguments
//
//   - `nameRegex` (Optional) matches the name using a regular expression.
//   - `date` (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
//     optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
//     The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
//     is recommended.
//     Comparison with equality operator (`==`) need to define the date to the microseconds.
//   - `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
//     are set, it retrieves the newest item.
//   - `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
//     are set, it retrieves the oldest item.
//   - `metadata` (Optional) One or more parameters that will match metadata contents.
//
// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
func LookupSubscribedCatalog(ctx *pulumi.Context, args *LookupSubscribedCatalogArgs, opts ...pulumi.InvokeOption) (*LookupSubscribedCatalogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscribedCatalogResult
	err := ctx.Invoke("vcd:index/getSubscribedCatalog:getSubscribedCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscribedCatalog.
type LookupSubscribedCatalogArgs struct {
	// Retrieves the data source using one or more filter parameters
	Filter *GetSubscribedCatalogFilter `pulumi:"filter"`
	// Catalog name. Required if `filter` is not set.
	Name string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
}

// A collection of values returned by getSubscribedCatalog.
type LookupSubscribedCatalogResult struct {
	// Version number from this catalog.
	CatalogVersion int `pulumi:"catalogVersion"`
	// Date and time of catalog creation.
	Created string `pulumi:"created"`
	// Description of the catalog. This is inherited from the publishing catalog
	Description string `pulumi:"description"`
	// List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
	FailedTasks []string                    `pulumi:"failedTasks"`
	Filter      *GetSubscribedCatalogFilter `pulumi:"filter"`
	// the catalog's Hyper reference.
	Href string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
	IsLocal bool `pulumi:"isLocal"`
	// Indicates if this catalog is available for subscription. (Always return `false` for this data source)
	IsPublished bool `pulumi:"isPublished"`
	// Indicates if the catalog is shared (`true` or `false`).
	IsShared      bool `pulumi:"isShared"`
	MakeLocalCopy bool `pulumi:"makeLocalCopy"`
	// List of media item names in this catalog, in alphabetical order.
	MediaItemLists []string `pulumi:"mediaItemLists"`
	Name           string   `pulumi:"name"`
	// Number of media items available in this catalog.
	NumberOfMedia int `pulumi:"numberOfMedia"`
	// Number of vApp templates available in this catalog.
	NumberOfVappTemplates int     `pulumi:"numberOfVappTemplates"`
	Org                   *string `pulumi:"org"`
	// Owner of the catalog.
	OwnerName string `pulumi:"ownerName"`
	// Shows if the catalog is published, if it is a subscription from another one or none of those. (Always returns `SUBSCRIBED` for this data source)
	PublishSubscriptionType string `pulumi:"publishSubscriptionType"`
	// List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
	RunningTasks []string `pulumi:"runningTasks"`
	// Allows to set specific storage profile to be used for catalog.
	StorageProfileId string `pulumi:"storageProfileId"`
	// The URL to which this catalog is subscribed.
	SubscriptionUrl string `pulumi:"subscriptionUrl"`
	// List of vApp template names in this catalog, in alphabetical order.
	VappTemplateLists []string `pulumi:"vappTemplateLists"`
}

func LookupSubscribedCatalogOutput(ctx *pulumi.Context, args LookupSubscribedCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupSubscribedCatalogResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubscribedCatalogResultOutput, error) {
			args := v.(LookupSubscribedCatalogArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getSubscribedCatalog:getSubscribedCatalog", args, LookupSubscribedCatalogResultOutput{}, options).(LookupSubscribedCatalogResultOutput), nil
		}).(LookupSubscribedCatalogResultOutput)
}

// A collection of arguments for invoking getSubscribedCatalog.
type LookupSubscribedCatalogOutputArgs struct {
	// Retrieves the data source using one or more filter parameters
	Filter GetSubscribedCatalogFilterPtrInput `pulumi:"filter"`
	// Catalog name. Required if `filter` is not set.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupSubscribedCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscribedCatalogArgs)(nil)).Elem()
}

// A collection of values returned by getSubscribedCatalog.
type LookupSubscribedCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupSubscribedCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscribedCatalogResult)(nil)).Elem()
}

func (o LookupSubscribedCatalogResultOutput) ToLookupSubscribedCatalogResultOutput() LookupSubscribedCatalogResultOutput {
	return o
}

func (o LookupSubscribedCatalogResultOutput) ToLookupSubscribedCatalogResultOutputWithContext(ctx context.Context) LookupSubscribedCatalogResultOutput {
	return o
}

// Version number from this catalog.
func (o LookupSubscribedCatalogResultOutput) CatalogVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) int { return v.CatalogVersion }).(pulumi.IntOutput)
}

// Date and time of catalog creation.
func (o LookupSubscribedCatalogResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.Created }).(pulumi.StringOutput)
}

// Description of the catalog. This is inherited from the publishing catalog
func (o LookupSubscribedCatalogResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
func (o LookupSubscribedCatalogResultOutput) FailedTasks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) []string { return v.FailedTasks }).(pulumi.StringArrayOutput)
}

func (o LookupSubscribedCatalogResultOutput) Filter() GetSubscribedCatalogFilterPtrOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) *GetSubscribedCatalogFilter { return v.Filter }).(GetSubscribedCatalogFilterPtrOutput)
}

// the catalog's Hyper reference.
func (o LookupSubscribedCatalogResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubscribedCatalogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.Id }).(pulumi.StringOutput)
}

// (*v3.8.1+*) Indicates if this catalog was created in the current organization.
func (o LookupSubscribedCatalogResultOutput) IsLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) bool { return v.IsLocal }).(pulumi.BoolOutput)
}

// Indicates if this catalog is available for subscription. (Always return `false` for this data source)
func (o LookupSubscribedCatalogResultOutput) IsPublished() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) bool { return v.IsPublished }).(pulumi.BoolOutput)
}

// Indicates if the catalog is shared (`true` or `false`).
func (o LookupSubscribedCatalogResultOutput) IsShared() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) bool { return v.IsShared }).(pulumi.BoolOutput)
}

func (o LookupSubscribedCatalogResultOutput) MakeLocalCopy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) bool { return v.MakeLocalCopy }).(pulumi.BoolOutput)
}

// List of media item names in this catalog, in alphabetical order.
func (o LookupSubscribedCatalogResultOutput) MediaItemLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) []string { return v.MediaItemLists }).(pulumi.StringArrayOutput)
}

func (o LookupSubscribedCatalogResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.Name }).(pulumi.StringOutput)
}

// Number of media items available in this catalog.
func (o LookupSubscribedCatalogResultOutput) NumberOfMedia() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) int { return v.NumberOfMedia }).(pulumi.IntOutput)
}

// Number of vApp templates available in this catalog.
func (o LookupSubscribedCatalogResultOutput) NumberOfVappTemplates() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) int { return v.NumberOfVappTemplates }).(pulumi.IntOutput)
}

func (o LookupSubscribedCatalogResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

// Owner of the catalog.
func (o LookupSubscribedCatalogResultOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.OwnerName }).(pulumi.StringOutput)
}

// Shows if the catalog is published, if it is a subscription from another one or none of those. (Always returns `SUBSCRIBED` for this data source)
func (o LookupSubscribedCatalogResultOutput) PublishSubscriptionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.PublishSubscriptionType }).(pulumi.StringOutput)
}

// List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
func (o LookupSubscribedCatalogResultOutput) RunningTasks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) []string { return v.RunningTasks }).(pulumi.StringArrayOutput)
}

// Allows to set specific storage profile to be used for catalog.
func (o LookupSubscribedCatalogResultOutput) StorageProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.StorageProfileId }).(pulumi.StringOutput)
}

// The URL to which this catalog is subscribed.
func (o LookupSubscribedCatalogResultOutput) SubscriptionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) string { return v.SubscriptionUrl }).(pulumi.StringOutput)
}

// List of vApp template names in this catalog, in alphabetical order.
func (o LookupSubscribedCatalogResultOutput) VappTemplateLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubscribedCatalogResult) []string { return v.VappTemplateLists }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscribedCatalogResultOutput{})
}
