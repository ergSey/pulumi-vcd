// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxvDnat struct {
	pulumi.CustomResourceState

	// Free text description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the edge gateway on which to apply the DNAT rule.
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// Defines if the rule is enabaled. Default `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Only when `protocol` is set to `icmp`. One of `any`,
	// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
	// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
	// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	IcmpType pulumi.StringPtrOutput `pulumi:"icmpType"`
	// Defines if the logging for this rule is enabaled. Default `false`.
	LoggingEnabled pulumi.BoolPtrOutput `pulumi:"loggingEnabled"`
	// The name of the network on which to apply the DNAT rule.
	NetworkName pulumi.StringOutput `pulumi:"networkName"`
	// Type of the network on which to apply the DNAT rule. Possible values
	// `org` or `ext`.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	OriginalAddress pulumi.StringOutput `pulumi:"originalAddress"`
	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
	OriginalPort pulumi.StringPtrOutput `pulumi:"originalPort"`
	// Select the protocol to which the rule applies. One of `tcp`, `udp`,
	// `icmp`, `any`. Default `any`
	// protocols, select Any.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	RuleTag pulumi.IntOutput `pulumi:"ruleTag"`
	// Possible values - `user`, `internalHigh`.
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	TranslatedAddress pulumi.StringPtrOutput `pulumi:"translatedAddress"`
	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	TranslatedPort pulumi.StringPtrOutput `pulumi:"translatedPort"`
	// The name of VDC to use, optional if defined at provider level.
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewNsxvDnat registers a new resource with the given unique name, arguments, and options.
func NewNsxvDnat(ctx *pulumi.Context,
	name string, args *NsxvDnatArgs, opts ...pulumi.ResourceOption) (*NsxvDnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.NetworkName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkName'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	if args.OriginalAddress == nil {
		return nil, errors.New("invalid value for required argument 'OriginalAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxvDnat
	err := ctx.RegisterResource("vcd:index/nsxvDnat:NsxvDnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxvDnat gets an existing NsxvDnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxvDnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxvDnatState, opts ...pulumi.ResourceOption) (*NsxvDnat, error) {
	var resource NsxvDnat
	err := ctx.ReadResource("vcd:index/nsxvDnat:NsxvDnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxvDnat resources.
type nsxvDnatState struct {
	// Free text description.
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which to apply the DNAT rule.
	EdgeGateway *string `pulumi:"edgeGateway"`
	// Defines if the rule is enabaled. Default `true`.
	Enabled *bool `pulumi:"enabled"`
	// Only when `protocol` is set to `icmp`. One of `any`,
	// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
	// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
	// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	IcmpType *string `pulumi:"icmpType"`
	// Defines if the logging for this rule is enabaled. Default `false`.
	LoggingEnabled *bool `pulumi:"loggingEnabled"`
	// The name of the network on which to apply the DNAT rule.
	NetworkName *string `pulumi:"networkName"`
	// Type of the network on which to apply the DNAT rule. Possible values
	// `org` or `ext`.
	NetworkType *string `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	OriginalAddress *string `pulumi:"originalAddress"`
	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
	OriginalPort *string `pulumi:"originalPort"`
	// Select the protocol to which the rule applies. One of `tcp`, `udp`,
	// `icmp`, `any`. Default `any`
	// protocols, select Any.
	Protocol *string `pulumi:"protocol"`
	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	RuleTag *int `pulumi:"ruleTag"`
	// Possible values - `user`, `internalHigh`.
	RuleType *string `pulumi:"ruleType"`
	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	TranslatedAddress *string `pulumi:"translatedAddress"`
	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	TranslatedPort *string `pulumi:"translatedPort"`
	// The name of VDC to use, optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

type NsxvDnatState struct {
	// Free text description.
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which to apply the DNAT rule.
	EdgeGateway pulumi.StringPtrInput
	// Defines if the rule is enabaled. Default `true`.
	Enabled pulumi.BoolPtrInput
	// Only when `protocol` is set to `icmp`. One of `any`,
	// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
	// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
	// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	IcmpType pulumi.StringPtrInput
	// Defines if the logging for this rule is enabaled. Default `false`.
	LoggingEnabled pulumi.BoolPtrInput
	// The name of the network on which to apply the DNAT rule.
	NetworkName pulumi.StringPtrInput
	// Type of the network on which to apply the DNAT rule. Possible values
	// `org` or `ext`.
	NetworkType pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	OriginalAddress pulumi.StringPtrInput
	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
	OriginalPort pulumi.StringPtrInput
	// Select the protocol to which the rule applies. One of `tcp`, `udp`,
	// `icmp`, `any`. Default `any`
	// protocols, select Any.
	Protocol pulumi.StringPtrInput
	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	RuleTag pulumi.IntPtrInput
	// Possible values - `user`, `internalHigh`.
	RuleType pulumi.StringPtrInput
	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	TranslatedAddress pulumi.StringPtrInput
	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	TranslatedPort pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (NsxvDnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDnatState)(nil)).Elem()
}

type nsxvDnatArgs struct {
	// Free text description.
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which to apply the DNAT rule.
	EdgeGateway string `pulumi:"edgeGateway"`
	// Defines if the rule is enabaled. Default `true`.
	Enabled *bool `pulumi:"enabled"`
	// Only when `protocol` is set to `icmp`. One of `any`,
	// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
	// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
	// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	IcmpType *string `pulumi:"icmpType"`
	// Defines if the logging for this rule is enabaled. Default `false`.
	LoggingEnabled *bool `pulumi:"loggingEnabled"`
	// The name of the network on which to apply the DNAT rule.
	NetworkName string `pulumi:"networkName"`
	// Type of the network on which to apply the DNAT rule. Possible values
	// `org` or `ext`.
	NetworkType string `pulumi:"networkType"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	OriginalAddress string `pulumi:"originalAddress"`
	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
	OriginalPort *string `pulumi:"originalPort"`
	// Select the protocol to which the rule applies. One of `tcp`, `udp`,
	// `icmp`, `any`. Default `any`
	// protocols, select Any.
	Protocol *string `pulumi:"protocol"`
	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	RuleTag *int `pulumi:"ruleTag"`
	// Possible values - `user`, `internalHigh`.
	RuleType *string `pulumi:"ruleType"`
	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	TranslatedAddress *string `pulumi:"translatedAddress"`
	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	TranslatedPort *string `pulumi:"translatedPort"`
	// The name of VDC to use, optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxvDnat resource.
type NsxvDnatArgs struct {
	// Free text description.
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which to apply the DNAT rule.
	EdgeGateway pulumi.StringInput
	// Defines if the rule is enabaled. Default `true`.
	Enabled pulumi.BoolPtrInput
	// Only when `protocol` is set to `icmp`. One of `any`,
	// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
	// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
	// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
	IcmpType pulumi.StringPtrInput
	// Defines if the logging for this rule is enabaled. Default `false`.
	LoggingEnabled pulumi.BoolPtrInput
	// The name of the network on which to apply the DNAT rule.
	NetworkName pulumi.StringInput
	// Type of the network on which to apply the DNAT rule. Possible values
	// `org` or `ext`.
	NetworkType pulumi.StringInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// IP address, range or subnet. This address must be the public IP
	// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
	// inspected, this IP address or range would be those that appear as the destination IP address of the
	// packet. These packet destination addresses are the ones translated by this DNAT rule.
	OriginalAddress pulumi.StringInput
	// Select the port or port range that the incoming traffic uses on the
	// edge gateway to connect to the internal network on which the virtual machines are connected. This
	// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
	OriginalPort pulumi.StringPtrInput
	// Select the protocol to which the rule applies. One of `tcp`, `udp`,
	// `icmp`, `any`. Default `any`
	// protocols, select Any.
	Protocol pulumi.StringPtrInput
	// This can be used to specify user-controlled rule tag. If not specified,
	// it will report rule ID after creation. Must be between 65537-131072.
	RuleTag pulumi.IntPtrInput
	// Possible values - `user`, `internalHigh`.
	RuleType pulumi.StringPtrInput
	// IP address, range or subnet. IP addresses to which destination
	// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
	// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
	// external network.
	TranslatedAddress pulumi.StringPtrInput
	// Select the port or port range that inbound traffic is connecting
	// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
	// rule is translating for the packets inbound to the virtual machines.
	TranslatedPort pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (NsxvDnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDnatArgs)(nil)).Elem()
}

type NsxvDnatInput interface {
	pulumi.Input

	ToNsxvDnatOutput() NsxvDnatOutput
	ToNsxvDnatOutputWithContext(ctx context.Context) NsxvDnatOutput
}

func (*NsxvDnat) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDnat)(nil)).Elem()
}

func (i *NsxvDnat) ToNsxvDnatOutput() NsxvDnatOutput {
	return i.ToNsxvDnatOutputWithContext(context.Background())
}

func (i *NsxvDnat) ToNsxvDnatOutputWithContext(ctx context.Context) NsxvDnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDnatOutput)
}

// NsxvDnatArrayInput is an input type that accepts NsxvDnatArray and NsxvDnatArrayOutput values.
// You can construct a concrete instance of `NsxvDnatArrayInput` via:
//
//	NsxvDnatArray{ NsxvDnatArgs{...} }
type NsxvDnatArrayInput interface {
	pulumi.Input

	ToNsxvDnatArrayOutput() NsxvDnatArrayOutput
	ToNsxvDnatArrayOutputWithContext(context.Context) NsxvDnatArrayOutput
}

type NsxvDnatArray []NsxvDnatInput

func (NsxvDnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDnat)(nil)).Elem()
}

func (i NsxvDnatArray) ToNsxvDnatArrayOutput() NsxvDnatArrayOutput {
	return i.ToNsxvDnatArrayOutputWithContext(context.Background())
}

func (i NsxvDnatArray) ToNsxvDnatArrayOutputWithContext(ctx context.Context) NsxvDnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDnatArrayOutput)
}

// NsxvDnatMapInput is an input type that accepts NsxvDnatMap and NsxvDnatMapOutput values.
// You can construct a concrete instance of `NsxvDnatMapInput` via:
//
//	NsxvDnatMap{ "key": NsxvDnatArgs{...} }
type NsxvDnatMapInput interface {
	pulumi.Input

	ToNsxvDnatMapOutput() NsxvDnatMapOutput
	ToNsxvDnatMapOutputWithContext(context.Context) NsxvDnatMapOutput
}

type NsxvDnatMap map[string]NsxvDnatInput

func (NsxvDnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDnat)(nil)).Elem()
}

func (i NsxvDnatMap) ToNsxvDnatMapOutput() NsxvDnatMapOutput {
	return i.ToNsxvDnatMapOutputWithContext(context.Background())
}

func (i NsxvDnatMap) ToNsxvDnatMapOutputWithContext(ctx context.Context) NsxvDnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDnatMapOutput)
}

type NsxvDnatOutput struct{ *pulumi.OutputState }

func (NsxvDnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDnat)(nil)).Elem()
}

func (o NsxvDnatOutput) ToNsxvDnatOutput() NsxvDnatOutput {
	return o
}

func (o NsxvDnatOutput) ToNsxvDnatOutputWithContext(ctx context.Context) NsxvDnatOutput {
	return o
}

// Free text description.
func (o NsxvDnatOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the edge gateway on which to apply the DNAT rule.
func (o NsxvDnatOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// Defines if the rule is enabaled. Default `true`.
func (o NsxvDnatOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Only when `protocol` is set to `icmp`. One of `any`,
// `address-mask-request`, `address-mask-reply`, `destination-unreachable`, `echo-request`,
// `echo-reply`, `parameter-problem`, `redirect`, `router-advertisement`, `router-solicitation`,
// `source-quench`, `time-exceeded`, `timestamp-request`, `timestamp-reply`. Default `any`
func (o NsxvDnatOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.IcmpType }).(pulumi.StringPtrOutput)
}

// Defines if the logging for this rule is enabaled. Default `false`.
func (o NsxvDnatOutput) LoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.BoolPtrOutput { return v.LoggingEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the network on which to apply the DNAT rule.
func (o NsxvDnatOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringOutput { return v.NetworkName }).(pulumi.StringOutput)
}

// Type of the network on which to apply the DNAT rule. Possible values
// `org` or `ext`.
func (o NsxvDnatOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o NsxvDnatOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// IP address, range or subnet. This address must be the public IP
// address of the edge gateway for which you are configuring the DNAT rule. In the packet being
// inspected, this IP address or range would be those that appear as the destination IP address of the
// packet. These packet destination addresses are the ones translated by this DNAT rule.
func (o NsxvDnatOutput) OriginalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringOutput { return v.OriginalAddress }).(pulumi.StringOutput)
}

// Select the port or port range that the incoming traffic uses on the
// edge gateway to connect to the internal network on which the virtual machines are connected. This
// selection is not available when the Protocol is set to `icmp` or `any`. Default `any`.
func (o NsxvDnatOutput) OriginalPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.OriginalPort }).(pulumi.StringPtrOutput)
}

// Select the protocol to which the rule applies. One of `tcp`, `udp`,
// `icmp`, `any`. Default `any`
// protocols, select Any.
func (o NsxvDnatOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// This can be used to specify user-controlled rule tag. If not specified,
// it will report rule ID after creation. Must be between 65537-131072.
func (o NsxvDnatOutput) RuleTag() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.IntOutput { return v.RuleTag }).(pulumi.IntOutput)
}

// Possible values - `user`, `internalHigh`.
func (o NsxvDnatOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

// IP address, range or subnet. IP addresses to which destination
// addresses on inbound packets will be translated. These addresses are the IP addresses of the one or
// more virtual machines for which you are configuring DNAT so that they can receive traffic from the
// external network.
func (o NsxvDnatOutput) TranslatedAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.TranslatedAddress }).(pulumi.StringPtrOutput)
}

// Select the port or port range that inbound traffic is connecting
// to on the virtual machines on the internal network. These ports are the ones into which the DNAT
// rule is translating for the packets inbound to the virtual machines.
func (o NsxvDnatOutput) TranslatedPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.TranslatedPort }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level.
func (o NsxvDnatOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxvDnat) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type NsxvDnatArrayOutput struct{ *pulumi.OutputState }

func (NsxvDnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDnat)(nil)).Elem()
}

func (o NsxvDnatArrayOutput) ToNsxvDnatArrayOutput() NsxvDnatArrayOutput {
	return o
}

func (o NsxvDnatArrayOutput) ToNsxvDnatArrayOutputWithContext(ctx context.Context) NsxvDnatArrayOutput {
	return o
}

func (o NsxvDnatArrayOutput) Index(i pulumi.IntInput) NsxvDnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxvDnat {
		return vs[0].([]*NsxvDnat)[vs[1].(int)]
	}).(NsxvDnatOutput)
}

type NsxvDnatMapOutput struct{ *pulumi.OutputState }

func (NsxvDnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDnat)(nil)).Elem()
}

func (o NsxvDnatMapOutput) ToNsxvDnatMapOutput() NsxvDnatMapOutput {
	return o
}

func (o NsxvDnatMapOutput) ToNsxvDnatMapOutputWithContext(ctx context.Context) NsxvDnatMapOutput {
	return o
}

func (o NsxvDnatMapOutput) MapIndex(k pulumi.StringInput) NsxvDnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxvDnat {
		return vs[0].(map[string]*NsxvDnat)[vs[1].(string)]
	}).(NsxvDnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDnatInput)(nil)).Elem(), &NsxvDnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDnatArrayInput)(nil)).Elem(), NsxvDnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDnatMapInput)(nil)).Elem(), NsxvDnatMap{})
	pulumi.RegisterOutputType(NsxvDnatOutput{})
	pulumi.RegisterOutputType(NsxvDnatArrayOutput{})
	pulumi.RegisterOutputType(NsxvDnatMapOutput{})
}
