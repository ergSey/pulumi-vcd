// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MultisiteOrgAssociation struct {
	pulumi.CustomResourceState

	// ID of the remote org associated with the current one.
	AssociatedOrgId pulumi.StringOutput `pulumi:"associatedOrgId"`
	// The name of the associated org.
	AssociatedOrgName pulumi.StringOutput `pulumi:"associatedOrgName"`
	// ID of the remote site to which the associated org belongs.
	AssociatedSiteId pulumi.StringOutput `pulumi:"associatedSiteId"`
	// Data produced from another org, needed to associate to this org from another one.
	// (Used instead of `associatedDataFile`)
	AssociationData pulumi.StringPtrOutput `pulumi:"associationData"`
	// Name of the file containing the data used to associate to this org from another one.
	// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
	AssociationDataFile pulumi.StringPtrOutput `pulumi:"associationDataFile"`
	// How many minutes to keep checking for connection (0=no check)
	ConnectionTimeoutMins pulumi.IntPtrOutput `pulumi:"connectionTimeoutMins"`
	// The ID of the current organization where we start the association with a remote one.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewMultisiteOrgAssociation registers a new resource with the given unique name, arguments, and options.
func NewMultisiteOrgAssociation(ctx *pulumi.Context,
	name string, args *MultisiteOrgAssociationArgs, opts ...pulumi.ResourceOption) (*MultisiteOrgAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MultisiteOrgAssociation
	err := ctx.RegisterResource("vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultisiteOrgAssociation gets an existing MultisiteOrgAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultisiteOrgAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultisiteOrgAssociationState, opts ...pulumi.ResourceOption) (*MultisiteOrgAssociation, error) {
	var resource MultisiteOrgAssociation
	err := ctx.ReadResource("vcd:index/multisiteOrgAssociation:MultisiteOrgAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultisiteOrgAssociation resources.
type multisiteOrgAssociationState struct {
	// ID of the remote org associated with the current one.
	AssociatedOrgId *string `pulumi:"associatedOrgId"`
	// The name of the associated org.
	AssociatedOrgName *string `pulumi:"associatedOrgName"`
	// ID of the remote site to which the associated org belongs.
	AssociatedSiteId *string `pulumi:"associatedSiteId"`
	// Data produced from another org, needed to associate to this org from another one.
	// (Used instead of `associatedDataFile`)
	AssociationData *string `pulumi:"associationData"`
	// Name of the file containing the data used to associate to this org from another one.
	// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
	AssociationDataFile *string `pulumi:"associationDataFile"`
	// How many minutes to keep checking for connection (0=no check)
	ConnectionTimeoutMins *int `pulumi:"connectionTimeoutMins"`
	// The ID of the current organization where we start the association with a remote one.
	OrgId *string `pulumi:"orgId"`
	// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
	Status *string `pulumi:"status"`
}

type MultisiteOrgAssociationState struct {
	// ID of the remote org associated with the current one.
	AssociatedOrgId pulumi.StringPtrInput
	// The name of the associated org.
	AssociatedOrgName pulumi.StringPtrInput
	// ID of the remote site to which the associated org belongs.
	AssociatedSiteId pulumi.StringPtrInput
	// Data produced from another org, needed to associate to this org from another one.
	// (Used instead of `associatedDataFile`)
	AssociationData pulumi.StringPtrInput
	// Name of the file containing the data used to associate to this org from another one.
	// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
	AssociationDataFile pulumi.StringPtrInput
	// How many minutes to keep checking for connection (0=no check)
	ConnectionTimeoutMins pulumi.IntPtrInput
	// The ID of the current organization where we start the association with a remote one.
	OrgId pulumi.StringPtrInput
	// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
	Status pulumi.StringPtrInput
}

func (MultisiteOrgAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*multisiteOrgAssociationState)(nil)).Elem()
}

type multisiteOrgAssociationArgs struct {
	// ID of the remote org associated with the current one.
	AssociatedOrgId *string `pulumi:"associatedOrgId"`
	// Data produced from another org, needed to associate to this org from another one.
	// (Used instead of `associatedDataFile`)
	AssociationData *string `pulumi:"associationData"`
	// Name of the file containing the data used to associate to this org from another one.
	// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
	AssociationDataFile *string `pulumi:"associationDataFile"`
	// How many minutes to keep checking for connection (0=no check)
	ConnectionTimeoutMins *int `pulumi:"connectionTimeoutMins"`
	// The ID of the current organization where we start the association with a remote one.
	OrgId string `pulumi:"orgId"`
}

// The set of arguments for constructing a MultisiteOrgAssociation resource.
type MultisiteOrgAssociationArgs struct {
	// ID of the remote org associated with the current one.
	AssociatedOrgId pulumi.StringPtrInput
	// Data produced from another org, needed to associate to this org from another one.
	// (Used instead of `associatedDataFile`)
	AssociationData pulumi.StringPtrInput
	// Name of the file containing the data used to associate to this org from another one.
	// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
	AssociationDataFile pulumi.StringPtrInput
	// How many minutes to keep checking for connection (0=no check)
	ConnectionTimeoutMins pulumi.IntPtrInput
	// The ID of the current organization where we start the association with a remote one.
	OrgId pulumi.StringInput
}

func (MultisiteOrgAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multisiteOrgAssociationArgs)(nil)).Elem()
}

type MultisiteOrgAssociationInput interface {
	pulumi.Input

	ToMultisiteOrgAssociationOutput() MultisiteOrgAssociationOutput
	ToMultisiteOrgAssociationOutputWithContext(ctx context.Context) MultisiteOrgAssociationOutput
}

func (*MultisiteOrgAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**MultisiteOrgAssociation)(nil)).Elem()
}

func (i *MultisiteOrgAssociation) ToMultisiteOrgAssociationOutput() MultisiteOrgAssociationOutput {
	return i.ToMultisiteOrgAssociationOutputWithContext(context.Background())
}

func (i *MultisiteOrgAssociation) ToMultisiteOrgAssociationOutputWithContext(ctx context.Context) MultisiteOrgAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultisiteOrgAssociationOutput)
}

// MultisiteOrgAssociationArrayInput is an input type that accepts MultisiteOrgAssociationArray and MultisiteOrgAssociationArrayOutput values.
// You can construct a concrete instance of `MultisiteOrgAssociationArrayInput` via:
//
//	MultisiteOrgAssociationArray{ MultisiteOrgAssociationArgs{...} }
type MultisiteOrgAssociationArrayInput interface {
	pulumi.Input

	ToMultisiteOrgAssociationArrayOutput() MultisiteOrgAssociationArrayOutput
	ToMultisiteOrgAssociationArrayOutputWithContext(context.Context) MultisiteOrgAssociationArrayOutput
}

type MultisiteOrgAssociationArray []MultisiteOrgAssociationInput

func (MultisiteOrgAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultisiteOrgAssociation)(nil)).Elem()
}

func (i MultisiteOrgAssociationArray) ToMultisiteOrgAssociationArrayOutput() MultisiteOrgAssociationArrayOutput {
	return i.ToMultisiteOrgAssociationArrayOutputWithContext(context.Background())
}

func (i MultisiteOrgAssociationArray) ToMultisiteOrgAssociationArrayOutputWithContext(ctx context.Context) MultisiteOrgAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultisiteOrgAssociationArrayOutput)
}

// MultisiteOrgAssociationMapInput is an input type that accepts MultisiteOrgAssociationMap and MultisiteOrgAssociationMapOutput values.
// You can construct a concrete instance of `MultisiteOrgAssociationMapInput` via:
//
//	MultisiteOrgAssociationMap{ "key": MultisiteOrgAssociationArgs{...} }
type MultisiteOrgAssociationMapInput interface {
	pulumi.Input

	ToMultisiteOrgAssociationMapOutput() MultisiteOrgAssociationMapOutput
	ToMultisiteOrgAssociationMapOutputWithContext(context.Context) MultisiteOrgAssociationMapOutput
}

type MultisiteOrgAssociationMap map[string]MultisiteOrgAssociationInput

func (MultisiteOrgAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultisiteOrgAssociation)(nil)).Elem()
}

func (i MultisiteOrgAssociationMap) ToMultisiteOrgAssociationMapOutput() MultisiteOrgAssociationMapOutput {
	return i.ToMultisiteOrgAssociationMapOutputWithContext(context.Background())
}

func (i MultisiteOrgAssociationMap) ToMultisiteOrgAssociationMapOutputWithContext(ctx context.Context) MultisiteOrgAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultisiteOrgAssociationMapOutput)
}

type MultisiteOrgAssociationOutput struct{ *pulumi.OutputState }

func (MultisiteOrgAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultisiteOrgAssociation)(nil)).Elem()
}

func (o MultisiteOrgAssociationOutput) ToMultisiteOrgAssociationOutput() MultisiteOrgAssociationOutput {
	return o
}

func (o MultisiteOrgAssociationOutput) ToMultisiteOrgAssociationOutputWithContext(ctx context.Context) MultisiteOrgAssociationOutput {
	return o
}

// ID of the remote org associated with the current one.
func (o MultisiteOrgAssociationOutput) AssociatedOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringOutput { return v.AssociatedOrgId }).(pulumi.StringOutput)
}

// The name of the associated org.
func (o MultisiteOrgAssociationOutput) AssociatedOrgName() pulumi.StringOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringOutput { return v.AssociatedOrgName }).(pulumi.StringOutput)
}

// ID of the remote site to which the associated org belongs.
func (o MultisiteOrgAssociationOutput) AssociatedSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringOutput { return v.AssociatedSiteId }).(pulumi.StringOutput)
}

// Data produced from another org, needed to associate to this org from another one.
// (Used instead of `associatedDataFile`)
func (o MultisiteOrgAssociationOutput) AssociationData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringPtrOutput { return v.AssociationData }).(pulumi.StringPtrOutput)
}

// Name of the file containing the data used to associate to this org from another one.
// (Used instead of `associatedData`). This file can be created (by the other org administrator) using the data source `getMultisiteOrgData`.
func (o MultisiteOrgAssociationOutput) AssociationDataFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringPtrOutput { return v.AssociationDataFile }).(pulumi.StringPtrOutput)
}

// How many minutes to keep checking for connection (0=no check)
func (o MultisiteOrgAssociationOutput) ConnectionTimeoutMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.IntPtrOutput { return v.ConnectionTimeoutMins }).(pulumi.IntPtrOutput)
}

// The ID of the current organization where we start the association with a remote one.
func (o MultisiteOrgAssociationOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
func (o MultisiteOrgAssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MultisiteOrgAssociation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type MultisiteOrgAssociationArrayOutput struct{ *pulumi.OutputState }

func (MultisiteOrgAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MultisiteOrgAssociation)(nil)).Elem()
}

func (o MultisiteOrgAssociationArrayOutput) ToMultisiteOrgAssociationArrayOutput() MultisiteOrgAssociationArrayOutput {
	return o
}

func (o MultisiteOrgAssociationArrayOutput) ToMultisiteOrgAssociationArrayOutputWithContext(ctx context.Context) MultisiteOrgAssociationArrayOutput {
	return o
}

func (o MultisiteOrgAssociationArrayOutput) Index(i pulumi.IntInput) MultisiteOrgAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MultisiteOrgAssociation {
		return vs[0].([]*MultisiteOrgAssociation)[vs[1].(int)]
	}).(MultisiteOrgAssociationOutput)
}

type MultisiteOrgAssociationMapOutput struct{ *pulumi.OutputState }

func (MultisiteOrgAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MultisiteOrgAssociation)(nil)).Elem()
}

func (o MultisiteOrgAssociationMapOutput) ToMultisiteOrgAssociationMapOutput() MultisiteOrgAssociationMapOutput {
	return o
}

func (o MultisiteOrgAssociationMapOutput) ToMultisiteOrgAssociationMapOutputWithContext(ctx context.Context) MultisiteOrgAssociationMapOutput {
	return o
}

func (o MultisiteOrgAssociationMapOutput) MapIndex(k pulumi.StringInput) MultisiteOrgAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MultisiteOrgAssociation {
		return vs[0].(map[string]*MultisiteOrgAssociation)[vs[1].(string)]
	}).(MultisiteOrgAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MultisiteOrgAssociationInput)(nil)).Elem(), &MultisiteOrgAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultisiteOrgAssociationArrayInput)(nil)).Elem(), MultisiteOrgAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultisiteOrgAssociationMapInput)(nil)).Elem(), MultisiteOrgAssociationMap{})
	pulumi.RegisterOutputType(MultisiteOrgAssociationOutput{})
	pulumi.RegisterOutputType(MultisiteOrgAssociationArrayOutput{})
	pulumi.RegisterOutputType(MultisiteOrgAssociationMapOutput{})
}
