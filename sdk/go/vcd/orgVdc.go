// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgVdc struct {
	pulumi.CustomResourceState

	// The allocation model used by this VDC; must be one of
	// * AllocationVApp ("Pay as you go")
	// * AllocationPool ("Allocation pool")
	// * ReservationPool ("Reservation pool")
	// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
	AllocationModel pulumi.StringOutput `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolOutput `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	ComputeCapacity OrgVdcComputeCapacityOutput `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	CpuGuaranteed pulumi.Float64Output `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	CpuSpeed pulumi.IntOutput `pulumi:"cpuSpeed"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	DefaultComputePolicyId pulumi.StringOutput `pulumi:"defaultComputePolicyId"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
	//
	// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringOutput `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
	DeleteForce pulumi.BoolPtrOutput `pulumi:"deleteForce"`
	// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
	DeleteRecursive pulumi.BoolPtrOutput `pulumi:"deleteRecursive"`
	// VDC friendly description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An ID of NSX-T Edge Cluster which
	// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
	// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
	//
	// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
	EdgeClusterId pulumi.StringOutput `pulumi:"edgeClusterId"`
	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	Elasticity pulumi.BoolOutput `pulumi:"elasticity"`
	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrOutput `pulumi:"enableFastProvisioning"`
	// Enables or disables the NSX-V distributed firewall.
	//
	// <a id="storageprofile"></a>
	EnableNsxvDistributedFirewall pulumi.BoolOutput `pulumi:"enableNsxvDistributedFirewall"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrOutput `pulumi:"enableThinProvisioning"`
	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrOutput `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
	IncludeVmMemoryOverhead pulumi.BoolOutput `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	MemoryGuaranteed pulumi.Float64Output `pulumi:"memoryGuaranteed"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries OrgVdcMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// VDC name
	Name pulumi.StringOutput `pulumi:"name"`
	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrOutput `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	NetworkQuota pulumi.IntPtrOutput `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrOutput `pulumi:"nicQuota"`
	// Organization to create the VDC in, optional if defined at provider level
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Name of the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringOutput `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	StorageProfiles OrgVdcStorageProfileArrayOutput `pulumi:"storageProfiles"`
	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmPlacementPolicyIds pulumi.StringArrayOutput `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrOutput `pulumi:"vmQuota"`
	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmSizingPolicyIds pulumi.StringArrayOutput `pulumi:"vmSizingPolicyIds"`
	// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmVgpuPolicyIds pulumi.StringArrayOutput `pulumi:"vmVgpuPolicyIds"`
}

// NewOrgVdc registers a new resource with the given unique name, arguments, and options.
func NewOrgVdc(ctx *pulumi.Context,
	name string, args *OrgVdcArgs, opts ...pulumi.ResourceOption) (*OrgVdc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationModel == nil {
		return nil, errors.New("invalid value for required argument 'AllocationModel'")
	}
	if args.ComputeCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ComputeCapacity'")
	}
	if args.ProviderVdcName == nil {
		return nil, errors.New("invalid value for required argument 'ProviderVdcName'")
	}
	if args.StorageProfiles == nil {
		return nil, errors.New("invalid value for required argument 'StorageProfiles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgVdc
	err := ctx.RegisterResource("vcd:index/orgVdc:OrgVdc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgVdc gets an existing OrgVdc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgVdc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgVdcState, opts ...pulumi.ResourceOption) (*OrgVdc, error) {
	var resource OrgVdc
	err := ctx.ReadResource("vcd:index/orgVdc:OrgVdc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgVdc resources.
type orgVdcState struct {
	// The allocation model used by this VDC; must be one of
	// * AllocationVApp ("Pay as you go")
	// * AllocationPool ("Allocation pool")
	// * ReservationPool ("Reservation pool")
	// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
	AllocationModel *string `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit *bool `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	ComputeCapacity *OrgVdcComputeCapacity `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	CpuGuaranteed *float64 `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	CpuSpeed *int `pulumi:"cpuSpeed"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	DefaultComputePolicyId *string `pulumi:"defaultComputePolicyId"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
	//
	// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId *string `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
	DeleteForce *bool `pulumi:"deleteForce"`
	// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
	DeleteRecursive *bool `pulumi:"deleteRecursive"`
	// VDC friendly description
	Description *string `pulumi:"description"`
	// An ID of NSX-T Edge Cluster which
	// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
	// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
	//
	// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	Elasticity *bool `pulumi:"elasticity"`
	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning *bool `pulumi:"enableFastProvisioning"`
	// Enables or disables the NSX-V distributed firewall.
	//
	// <a id="storageprofile"></a>
	EnableNsxvDistributedFirewall *bool `pulumi:"enableNsxvDistributedFirewall"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning *bool `pulumi:"enableThinProvisioning"`
	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery *bool `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled *bool `pulumi:"enabled"`
	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
	IncludeVmMemoryOverhead *bool `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	MemoryGuaranteed *float64 `pulumi:"memoryGuaranteed"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []OrgVdcMetadataEntry `pulumi:"metadataEntries"`
	// VDC name
	Name *string `pulumi:"name"`
	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName *string `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	NetworkQuota *int `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota *int `pulumi:"nicQuota"`
	// Organization to create the VDC in, optional if defined at provider level
	Org *string `pulumi:"org"`
	// Name of the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName *string `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	StorageProfiles []OrgVdcStorageProfile `pulumi:"storageProfiles"`
	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmPlacementPolicyIds []string `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	VmQuota *int `pulumi:"vmQuota"`
	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmSizingPolicyIds []string `pulumi:"vmSizingPolicyIds"`
	// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmVgpuPolicyIds []string `pulumi:"vmVgpuPolicyIds"`
}

type OrgVdcState struct {
	// The allocation model used by this VDC; must be one of
	// * AllocationVApp ("Pay as you go")
	// * AllocationPool ("Allocation pool")
	// * ReservationPool ("Reservation pool")
	// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
	AllocationModel pulumi.StringPtrInput
	// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolPtrInput
	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	ComputeCapacity OrgVdcComputeCapacityPtrInput
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	CpuGuaranteed pulumi.Float64PtrInput
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	CpuSpeed pulumi.IntPtrInput
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	DefaultComputePolicyId pulumi.StringPtrInput
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
	//
	// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringPtrInput
	// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
	DeleteForce pulumi.BoolPtrInput
	// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
	DeleteRecursive pulumi.BoolPtrInput
	// VDC friendly description
	Description pulumi.StringPtrInput
	// An ID of NSX-T Edge Cluster which
	// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
	// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
	//
	// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
	EdgeClusterId pulumi.StringPtrInput
	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	Elasticity pulumi.BoolPtrInput
	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrInput
	// Enables or disables the NSX-V distributed firewall.
	//
	// <a id="storageprofile"></a>
	EnableNsxvDistributedFirewall pulumi.BoolPtrInput
	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrInput
	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrInput
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrInput
	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
	IncludeVmMemoryOverhead pulumi.BoolPtrInput
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	MemoryGuaranteed pulumi.Float64PtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries OrgVdcMetadataEntryArrayInput
	// VDC name
	Name pulumi.StringPtrInput
	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrInput
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	NetworkQuota pulumi.IntPtrInput
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrInput
	// Organization to create the VDC in, optional if defined at provider level
	Org pulumi.StringPtrInput
	// Name of the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringPtrInput
	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	StorageProfiles OrgVdcStorageProfileArrayInput
	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmPlacementPolicyIds pulumi.StringArrayInput
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrInput
	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmSizingPolicyIds pulumi.StringArrayInput
	// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmVgpuPolicyIds pulumi.StringArrayInput
}

func (OrgVdcState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcState)(nil)).Elem()
}

type orgVdcArgs struct {
	// The allocation model used by this VDC; must be one of
	// * AllocationVApp ("Pay as you go")
	// * AllocationPool ("Allocation pool")
	// * ReservationPool ("Reservation pool")
	// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
	AllocationModel string `pulumi:"allocationModel"`
	// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit *bool `pulumi:"allowOverCommit"`
	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	ComputeCapacity OrgVdcComputeCapacity `pulumi:"computeCapacity"`
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	CpuGuaranteed *float64 `pulumi:"cpuGuaranteed"`
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	CpuSpeed *int `pulumi:"cpuSpeed"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	DefaultComputePolicyId *string `pulumi:"defaultComputePolicyId"`
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
	//
	// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId *string `pulumi:"defaultVmSizingPolicyId"`
	// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
	DeleteForce *bool `pulumi:"deleteForce"`
	// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
	DeleteRecursive *bool `pulumi:"deleteRecursive"`
	// VDC friendly description
	Description *string `pulumi:"description"`
	// An ID of NSX-T Edge Cluster which
	// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
	// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
	//
	// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	Elasticity *bool `pulumi:"elasticity"`
	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning *bool `pulumi:"enableFastProvisioning"`
	// Enables or disables the NSX-V distributed firewall.
	//
	// <a id="storageprofile"></a>
	EnableNsxvDistributedFirewall *bool `pulumi:"enableNsxvDistributedFirewall"`
	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning *bool `pulumi:"enableThinProvisioning"`
	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery *bool `pulumi:"enableVmDiscovery"`
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled *bool `pulumi:"enabled"`
	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
	IncludeVmMemoryOverhead *bool `pulumi:"includeVmMemoryOverhead"`
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	MemoryGuaranteed *float64 `pulumi:"memoryGuaranteed"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []OrgVdcMetadataEntry `pulumi:"metadataEntries"`
	// VDC name
	Name *string `pulumi:"name"`
	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName *string `pulumi:"networkPoolName"`
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	NetworkQuota *int `pulumi:"networkQuota"`
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota *int `pulumi:"nicQuota"`
	// Organization to create the VDC in, optional if defined at provider level
	Org *string `pulumi:"org"`
	// Name of the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName string `pulumi:"providerVdcName"`
	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	StorageProfiles []OrgVdcStorageProfile `pulumi:"storageProfiles"`
	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmPlacementPolicyIds []string `pulumi:"vmPlacementPolicyIds"`
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	VmQuota *int `pulumi:"vmQuota"`
	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmSizingPolicyIds []string `pulumi:"vmSizingPolicyIds"`
	// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmVgpuPolicyIds []string `pulumi:"vmVgpuPolicyIds"`
}

// The set of arguments for constructing a OrgVdc resource.
type OrgVdcArgs struct {
	// The allocation model used by this VDC; must be one of
	// * AllocationVApp ("Pay as you go")
	// * AllocationPool ("Allocation pool")
	// * ReservationPool ("Reservation pool")
	// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
	AllocationModel pulumi.StringInput
	// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
	AllowOverCommit pulumi.BoolPtrInput
	// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
	ComputeCapacity OrgVdcComputeCapacityInput
	// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
	CpuGuaranteed pulumi.Float64PtrInput
	// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
	CpuSpeed pulumi.IntPtrInput
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
	DefaultComputePolicyId pulumi.StringPtrInput
	// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
	//
	// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
	DefaultVmSizingPolicyId pulumi.StringPtrInput
	// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
	DeleteForce pulumi.BoolPtrInput
	// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
	DeleteRecursive pulumi.BoolPtrInput
	// VDC friendly description
	Description pulumi.StringPtrInput
	// An ID of NSX-T Edge Cluster which
	// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
	// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
	// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
	//
	// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
	EdgeClusterId pulumi.StringPtrInput
	// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
	Elasticity pulumi.BoolPtrInput
	// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
	EnableFastProvisioning pulumi.BoolPtrInput
	// Enables or disables the NSX-V distributed firewall.
	//
	// <a id="storageprofile"></a>
	EnableNsxvDistributedFirewall pulumi.BoolPtrInput
	// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
	EnableThinProvisioning pulumi.BoolPtrInput
	// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
	EnableVmDiscovery pulumi.BoolPtrInput
	// True if this VDC is enabled for use by the organization VDCs. Default is true.
	Enabled pulumi.BoolPtrInput
	// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
	IncludeVmMemoryOverhead pulumi.BoolPtrInput
	// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
	MemoryGuaranteed pulumi.Float64PtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries OrgVdcMetadataEntryArrayInput
	// VDC name
	Name pulumi.StringPtrInput
	// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
	NetworkPoolName pulumi.StringPtrInput
	// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
	NetworkQuota pulumi.IntPtrInput
	// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
	NicQuota pulumi.IntPtrInput
	// Organization to create the VDC in, optional if defined at provider level
	Org pulumi.StringPtrInput
	// Name of the Provider VDC from which this organization VDC is provisioned.
	ProviderVdcName pulumi.StringInput
	// Storage profiles supported by this VDC.  See Storage Profile below for details.
	StorageProfiles OrgVdcStorageProfileArrayInput
	// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmPlacementPolicyIds pulumi.StringArrayInput
	// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
	VmQuota pulumi.IntPtrInput
	// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmSizingPolicyIds pulumi.StringArrayInput
	// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
	VmVgpuPolicyIds pulumi.StringArrayInput
}

func (OrgVdcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgVdcArgs)(nil)).Elem()
}

type OrgVdcInput interface {
	pulumi.Input

	ToOrgVdcOutput() OrgVdcOutput
	ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput
}

func (*OrgVdc) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdc)(nil)).Elem()
}

func (i *OrgVdc) ToOrgVdcOutput() OrgVdcOutput {
	return i.ToOrgVdcOutputWithContext(context.Background())
}

func (i *OrgVdc) ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcOutput)
}

// OrgVdcArrayInput is an input type that accepts OrgVdcArray and OrgVdcArrayOutput values.
// You can construct a concrete instance of `OrgVdcArrayInput` via:
//
//	OrgVdcArray{ OrgVdcArgs{...} }
type OrgVdcArrayInput interface {
	pulumi.Input

	ToOrgVdcArrayOutput() OrgVdcArrayOutput
	ToOrgVdcArrayOutputWithContext(context.Context) OrgVdcArrayOutput
}

type OrgVdcArray []OrgVdcInput

func (OrgVdcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdc)(nil)).Elem()
}

func (i OrgVdcArray) ToOrgVdcArrayOutput() OrgVdcArrayOutput {
	return i.ToOrgVdcArrayOutputWithContext(context.Background())
}

func (i OrgVdcArray) ToOrgVdcArrayOutputWithContext(ctx context.Context) OrgVdcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcArrayOutput)
}

// OrgVdcMapInput is an input type that accepts OrgVdcMap and OrgVdcMapOutput values.
// You can construct a concrete instance of `OrgVdcMapInput` via:
//
//	OrgVdcMap{ "key": OrgVdcArgs{...} }
type OrgVdcMapInput interface {
	pulumi.Input

	ToOrgVdcMapOutput() OrgVdcMapOutput
	ToOrgVdcMapOutputWithContext(context.Context) OrgVdcMapOutput
}

type OrgVdcMap map[string]OrgVdcInput

func (OrgVdcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdc)(nil)).Elem()
}

func (i OrgVdcMap) ToOrgVdcMapOutput() OrgVdcMapOutput {
	return i.ToOrgVdcMapOutputWithContext(context.Background())
}

func (i OrgVdcMap) ToOrgVdcMapOutputWithContext(ctx context.Context) OrgVdcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgVdcMapOutput)
}

type OrgVdcOutput struct{ *pulumi.OutputState }

func (OrgVdcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgVdc)(nil)).Elem()
}

func (o OrgVdcOutput) ToOrgVdcOutput() OrgVdcOutput {
	return o
}

func (o OrgVdcOutput) ToOrgVdcOutputWithContext(ctx context.Context) OrgVdcOutput {
	return o
}

// The allocation model used by this VDC; must be one of
// * AllocationVApp ("Pay as you go")
// * AllocationPool ("Allocation pool")
// * ReservationPool ("Reservation pool")
// * Flex ("Flex") (*v2.7+*, *VCD 9.7+*)
func (o OrgVdcOutput) AllocationModel() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.AllocationModel }).(pulumi.StringOutput)
}

// Set to false to disallow creation of the VDC if the `allocationModel` is AllocationPool or ReservationPool and the ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
func (o OrgVdcOutput) AllowOverCommit() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.AllowOverCommit }).(pulumi.BoolOutput)
}

// The compute capacity allocated to this VDC.  See Compute Capacity below for details.
func (o OrgVdcOutput) ComputeCapacity() OrgVdcComputeCapacityOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcComputeCapacityOutput { return v.ComputeCapacity }).(OrgVdcComputeCapacityOutput)
}

// Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. If left empty, VCD sets a value.
func (o OrgVdcOutput) CpuGuaranteed() pulumi.Float64Output {
	return o.ApplyT(func(v *OrgVdc) pulumi.Float64Output { return v.CpuGuaranteed }).(pulumi.Float64Output)
}

// Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will consume twice as much of this value. Ignored for ReservationPool. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex, and may not be less than 256 MHz. Defaults to 1000 MHz if value isn't provided.
func (o OrgVdcOutput) CpuSpeed() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntOutput { return v.CpuSpeed }).(pulumi.IntOutput)
}

// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy.
func (o OrgVdcOutput) DefaultComputePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.DefaultComputePolicyId }).(pulumi.StringOutput)
}

// ID of the default Compute Policy for this VDC. It can be a VM Sizing Policy, a VM Placement Policy or a vGPU Policy. Deprecated in favor of `defaultComputePolicyId`.
//
// Deprecated: Use `defaultComputePolicyId` attribute instead, which can support VM Sizing Policies, VM Placement Policies and vGPU Policies
func (o OrgVdcOutput) DefaultVmSizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.DefaultVmSizingPolicyId }).(pulumi.StringOutput)
}

// When destroying use `delete_force=true` to remove a VDC and any objects it contains, regardless of their state. Default is `false`
func (o OrgVdcOutput) DeleteForce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.DeleteForce }).(pulumi.BoolPtrOutput)
}

// When destroying use `delete_recursive=true` to remove the VDC and any objects it contains that are in a state that normally allows removal. Default is `false`
func (o OrgVdcOutput) DeleteRecursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.DeleteRecursive }).(pulumi.BoolPtrOutput)
}

// VDC friendly description
func (o OrgVdcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An ID of NSX-T Edge Cluster which
// should provide vApp Networking Services or DHCP for isolated networks. Can be looked up using
// `getNsxtEdgeCluster` data source. This field is **deprecated** in favor of
// [`OrgVdcNsxtNetworkProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc_nsxt_network_profile).
//
// Deprecated: Please use 'vcd_org_vdc_nsxt_network_profile' resource to manage Edge Cluster and Segment Profile Templates
func (o OrgVdcOutput) EdgeClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.EdgeClusterId }).(pulumi.StringOutput)
}

// Indicates if the Flex VDC should be elastic. Required with the Flex allocation model.
func (o OrgVdcOutput) Elasticity() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.Elasticity }).(pulumi.BoolOutput)
}

// Request fast provisioning. Request will be honored only if the underlying datastore supports it. Fast provisioning can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast provisioning, all provisioning operations will result in full clones.
func (o OrgVdcOutput) EnableFastProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableFastProvisioning }).(pulumi.BoolPtrOutput)
}

// Enables or disables the NSX-V distributed firewall.
//
// <a id="storageprofile"></a>
func (o OrgVdcOutput) EnableNsxvDistributedFirewall() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.EnableNsxvDistributedFirewall }).(pulumi.BoolOutput)
}

// Boolean to request thin provisioning. Request will be honored only if the underlying data store supports it. Thin provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
func (o OrgVdcOutput) EnableThinProvisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableThinProvisioning }).(pulumi.BoolPtrOutput)
}

// If true, discovery of vCenter VMs is enabled for resource pools backing this VDC. If false, discovery is disabled. If left unspecified, the actual behaviour depends on enablement at the organization level and at the system level.
func (o OrgVdcOutput) EnableVmDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.EnableVmDiscovery }).(pulumi.BoolPtrOutput)
}

// True if this VDC is enabled for use by the organization VDCs. Default is true.
func (o OrgVdcOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates if the Flex VDC should include memory overhead into its accounting for admission control. Required with the Flex allocation model. `memoryGuaranteed` must also be specified together with this parameter.
func (o OrgVdcOutput) IncludeVmMemoryOverhead() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.BoolOutput { return v.IncludeVmMemoryOverhead }).(pulumi.BoolOutput)
}

// Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then 75% of allocated resources are guaranteed. Required when `allocationModel` is AllocationVApp, AllocationPool or Flex. When Allocation model is AllocationPool minimum value is 0.2. If left empty, VCD sets a value.
func (o OrgVdcOutput) MemoryGuaranteed() pulumi.Float64Output {
	return o.ApplyT(func(v *OrgVdc) pulumi.Float64Output { return v.MemoryGuaranteed }).(pulumi.Float64Output)
}

// Use `metadataEntry` instead. Key value map of metadata to assign to this VDC
//
// Deprecated: Use metadataEntry instead
func (o OrgVdcOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
func (o OrgVdcOutput) MetadataEntries() OrgVdcMetadataEntryArrayOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcMetadataEntryArrayOutput { return v.MetadataEntries }).(OrgVdcMetadataEntryArrayOutput)
}

// VDC name
func (o OrgVdcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Reference to a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
func (o OrgVdcOutput) NetworkPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.NetworkPoolName }).(pulumi.StringPtrOutput)
}

// Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be deployed.
func (o OrgVdcOutput) NetworkQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.NetworkQuota }).(pulumi.IntPtrOutput)
}

// Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
func (o OrgVdcOutput) NicQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.NicQuota }).(pulumi.IntPtrOutput)
}

// Organization to create the VDC in, optional if defined at provider level
func (o OrgVdcOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Name of the Provider VDC from which this organization VDC is provisioned.
func (o OrgVdcOutput) ProviderVdcName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringOutput { return v.ProviderVdcName }).(pulumi.StringOutput)
}

// Storage profiles supported by this VDC.  See Storage Profile below for details.
func (o OrgVdcOutput) StorageProfiles() OrgVdcStorageProfileArrayOutput {
	return o.ApplyT(func(v *OrgVdc) OrgVdcStorageProfileArrayOutput { return v.StorageProfiles }).(OrgVdcStorageProfileArrayOutput)
}

// Set of IDs of VM Placement policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
func (o OrgVdcOutput) VmPlacementPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringArrayOutput { return v.VmPlacementPolicyIds }).(pulumi.StringArrayOutput)
}

// The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp templates. Defaults to 0, which specifies an unlimited number.
func (o OrgVdcOutput) VmQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.IntPtrOutput { return v.VmQuota }).(pulumi.IntPtrOutput)
}

// Set of IDs of VM Sizing policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
func (o OrgVdcOutput) VmSizingPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringArrayOutput { return v.VmSizingPolicyIds }).(pulumi.StringArrayOutput)
}

// Set of IDs of VM vGPU policies that are assigned to this VDC. This field requires `defaultComputePolicyId` to be configured together.
func (o OrgVdcOutput) VmVgpuPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgVdc) pulumi.StringArrayOutput { return v.VmVgpuPolicyIds }).(pulumi.StringArrayOutput)
}

type OrgVdcArrayOutput struct{ *pulumi.OutputState }

func (OrgVdcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgVdc)(nil)).Elem()
}

func (o OrgVdcArrayOutput) ToOrgVdcArrayOutput() OrgVdcArrayOutput {
	return o
}

func (o OrgVdcArrayOutput) ToOrgVdcArrayOutputWithContext(ctx context.Context) OrgVdcArrayOutput {
	return o
}

func (o OrgVdcArrayOutput) Index(i pulumi.IntInput) OrgVdcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgVdc {
		return vs[0].([]*OrgVdc)[vs[1].(int)]
	}).(OrgVdcOutput)
}

type OrgVdcMapOutput struct{ *pulumi.OutputState }

func (OrgVdcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgVdc)(nil)).Elem()
}

func (o OrgVdcMapOutput) ToOrgVdcMapOutput() OrgVdcMapOutput {
	return o
}

func (o OrgVdcMapOutput) ToOrgVdcMapOutputWithContext(ctx context.Context) OrgVdcMapOutput {
	return o
}

func (o OrgVdcMapOutput) MapIndex(k pulumi.StringInput) OrgVdcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgVdc {
		return vs[0].(map[string]*OrgVdc)[vs[1].(string)]
	}).(OrgVdcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcInput)(nil)).Elem(), &OrgVdc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcArrayInput)(nil)).Elem(), OrgVdcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgVdcMapInput)(nil)).Elem(), OrgVdcMap{})
	pulumi.RegisterOutputType(OrgVdcOutput{})
	pulumi.RegisterOutputType(OrgVdcArrayOutput{})
	pulumi.RegisterOutputType(OrgVdcMapOutput{})
}
