// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgOidc struct {
	pulumi.CustomResourceState

	// The endpoint to use for access tokens.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	AccessTokenEndpoint pulumi.StringOutput `pulumi:"accessTokenEndpoint"`
	// A single configuration block that specifies the claim mappings to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the claims given by `wellknownEndpoint`. The supported claims are:
	ClaimsMapping OrgOidcClaimsMappingOutput `pulumi:"claimsMapping"`
	// Client ID to use with the OIDC provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client Secret to use with the OIDC provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The issuer ID for the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	IssuerId pulumi.StringOutput `pulumi:"issuerId"`
	// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
	// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
	// Maximum value is `24`
	KeyExpireDurationHours pulumi.IntPtrOutput `pulumi:"keyExpireDurationHours"`
	// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
	// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
	KeyRefreshEndpoint pulumi.StringOutput `pulumi:"keyRefreshEndpoint"`
	// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
	KeyRefreshPeriodHours pulumi.IntPtrOutput `pulumi:"keyRefreshPeriodHours"`
	// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
	// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
	KeyRefreshStrategy pulumi.StringPtrOutput `pulumi:"keyRefreshStrategy"`
	// One or more configuration blocks that specify the keys to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the keys given by `wellknownEndpoint`. Each key requires the following:
	Keys OrgOidcKeyArrayOutput `pulumi:"keys"`
	// The maximum clock skew is the maximum allowable time difference between the client and server.
	// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
	MaxClockSkewSeconds pulumi.IntPtrOutput `pulumi:"maxClockSkewSeconds"`
	// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
	// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
	// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
	// VMware Cloud Director can fetch and consume claims from both sources
	PreferIdToken pulumi.BoolPtrOutput `pulumi:"preferIdToken"`
	// The client configuration redirect URI used to create a client application registration with an identity provider
	// that complies with the OpenID Connect standard
	RedirectUri pulumi.StringOutput `pulumi:"redirectUri"`
	// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
	// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
	// overrides the obtained scopes
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Customizes the label of the UI button of the login screen
	UiButtonLabel pulumi.StringPtrOutput `pulumi:"uiButtonLabel"`
	// The endpoint to use for authorization.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserAuthorizationEndpoint pulumi.StringOutput `pulumi:"userAuthorizationEndpoint"`
	// The endpoint to use for User Info.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserinfoEndpoint pulumi.StringOutput `pulumi:"userinfoEndpoint"`
	// This endpoint retrieves the OIDC provider configuration and automatically sets
	// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
	// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
	// can be overridden by setting them explicitly in HCL code
	WellknownEndpoint pulumi.StringPtrOutput `pulumi:"wellknownEndpoint"`
}

// NewOrgOidc registers a new resource with the given unique name, arguments, and options.
func NewOrgOidc(ctx *pulumi.Context,
	name string, args *OrgOidcArgs, opts ...pulumi.ResourceOption) (*OrgOidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgOidc
	err := ctx.RegisterResource("vcd:index/orgOidc:OrgOidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgOidc gets an existing OrgOidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgOidcState, opts ...pulumi.ResourceOption) (*OrgOidc, error) {
	var resource OrgOidc
	err := ctx.ReadResource("vcd:index/orgOidc:OrgOidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgOidc resources.
type orgOidcState struct {
	// The endpoint to use for access tokens.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	AccessTokenEndpoint *string `pulumi:"accessTokenEndpoint"`
	// A single configuration block that specifies the claim mappings to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the claims given by `wellknownEndpoint`. The supported claims are:
	ClaimsMapping *OrgOidcClaimsMapping `pulumi:"claimsMapping"`
	// Client ID to use with the OIDC provider
	ClientId *string `pulumi:"clientId"`
	// Client Secret to use with the OIDC provider
	ClientSecret *string `pulumi:"clientSecret"`
	// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
	Enabled *bool `pulumi:"enabled"`
	// The issuer ID for the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	IssuerId *string `pulumi:"issuerId"`
	// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
	// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
	// Maximum value is `24`
	KeyExpireDurationHours *int `pulumi:"keyExpireDurationHours"`
	// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
	// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
	KeyRefreshEndpoint *string `pulumi:"keyRefreshEndpoint"`
	// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
	KeyRefreshPeriodHours *int `pulumi:"keyRefreshPeriodHours"`
	// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
	// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
	KeyRefreshStrategy *string `pulumi:"keyRefreshStrategy"`
	// One or more configuration blocks that specify the keys to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the keys given by `wellknownEndpoint`. Each key requires the following:
	Keys []OrgOidcKey `pulumi:"keys"`
	// The maximum clock skew is the maximum allowable time difference between the client and server.
	// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
	MaxClockSkewSeconds *int `pulumi:"maxClockSkewSeconds"`
	// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
	// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
	OrgId *string `pulumi:"orgId"`
	// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
	// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
	// VMware Cloud Director can fetch and consume claims from both sources
	PreferIdToken *bool `pulumi:"preferIdToken"`
	// The client configuration redirect URI used to create a client application registration with an identity provider
	// that complies with the OpenID Connect standard
	RedirectUri *string `pulumi:"redirectUri"`
	// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
	// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
	// overrides the obtained scopes
	Scopes []string `pulumi:"scopes"`
	// Customizes the label of the UI button of the login screen
	UiButtonLabel *string `pulumi:"uiButtonLabel"`
	// The endpoint to use for authorization.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserAuthorizationEndpoint *string `pulumi:"userAuthorizationEndpoint"`
	// The endpoint to use for User Info.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserinfoEndpoint *string `pulumi:"userinfoEndpoint"`
	// This endpoint retrieves the OIDC provider configuration and automatically sets
	// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
	// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
	// can be overridden by setting them explicitly in HCL code
	WellknownEndpoint *string `pulumi:"wellknownEndpoint"`
}

type OrgOidcState struct {
	// The endpoint to use for access tokens.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	AccessTokenEndpoint pulumi.StringPtrInput
	// A single configuration block that specifies the claim mappings to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the claims given by `wellknownEndpoint`. The supported claims are:
	ClaimsMapping OrgOidcClaimsMappingPtrInput
	// Client ID to use with the OIDC provider
	ClientId pulumi.StringPtrInput
	// Client Secret to use with the OIDC provider
	ClientSecret pulumi.StringPtrInput
	// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
	Enabled pulumi.BoolPtrInput
	// The issuer ID for the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	IssuerId pulumi.StringPtrInput
	// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
	// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
	// Maximum value is `24`
	KeyExpireDurationHours pulumi.IntPtrInput
	// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
	// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
	KeyRefreshEndpoint pulumi.StringPtrInput
	// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
	KeyRefreshPeriodHours pulumi.IntPtrInput
	// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
	// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
	KeyRefreshStrategy pulumi.StringPtrInput
	// One or more configuration blocks that specify the keys to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the keys given by `wellknownEndpoint`. Each key requires the following:
	Keys OrgOidcKeyArrayInput
	// The maximum clock skew is the maximum allowable time difference between the client and server.
	// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
	MaxClockSkewSeconds pulumi.IntPtrInput
	// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
	// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
	OrgId pulumi.StringPtrInput
	// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
	// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
	// VMware Cloud Director can fetch and consume claims from both sources
	PreferIdToken pulumi.BoolPtrInput
	// The client configuration redirect URI used to create a client application registration with an identity provider
	// that complies with the OpenID Connect standard
	RedirectUri pulumi.StringPtrInput
	// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
	// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
	// overrides the obtained scopes
	Scopes pulumi.StringArrayInput
	// Customizes the label of the UI button of the login screen
	UiButtonLabel pulumi.StringPtrInput
	// The endpoint to use for authorization.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserAuthorizationEndpoint pulumi.StringPtrInput
	// The endpoint to use for User Info.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserinfoEndpoint pulumi.StringPtrInput
	// This endpoint retrieves the OIDC provider configuration and automatically sets
	// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
	// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
	// can be overridden by setting them explicitly in HCL code
	WellknownEndpoint pulumi.StringPtrInput
}

func (OrgOidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgOidcState)(nil)).Elem()
}

type orgOidcArgs struct {
	// The endpoint to use for access tokens.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	AccessTokenEndpoint *string `pulumi:"accessTokenEndpoint"`
	// A single configuration block that specifies the claim mappings to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the claims given by `wellknownEndpoint`. The supported claims are:
	ClaimsMapping *OrgOidcClaimsMapping `pulumi:"claimsMapping"`
	// Client ID to use with the OIDC provider
	ClientId string `pulumi:"clientId"`
	// Client Secret to use with the OIDC provider
	ClientSecret string `pulumi:"clientSecret"`
	// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
	Enabled bool `pulumi:"enabled"`
	// The issuer ID for the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	IssuerId *string `pulumi:"issuerId"`
	// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
	// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
	// Maximum value is `24`
	KeyExpireDurationHours *int `pulumi:"keyExpireDurationHours"`
	// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
	// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
	KeyRefreshEndpoint *string `pulumi:"keyRefreshEndpoint"`
	// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
	KeyRefreshPeriodHours *int `pulumi:"keyRefreshPeriodHours"`
	// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
	// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
	KeyRefreshStrategy *string `pulumi:"keyRefreshStrategy"`
	// One or more configuration blocks that specify the keys to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the keys given by `wellknownEndpoint`. Each key requires the following:
	Keys []OrgOidcKey `pulumi:"keys"`
	// The maximum clock skew is the maximum allowable time difference between the client and server.
	// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
	MaxClockSkewSeconds *int `pulumi:"maxClockSkewSeconds"`
	// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
	// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
	OrgId string `pulumi:"orgId"`
	// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
	// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
	// VMware Cloud Director can fetch and consume claims from both sources
	PreferIdToken *bool `pulumi:"preferIdToken"`
	// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
	// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
	// overrides the obtained scopes
	Scopes []string `pulumi:"scopes"`
	// Customizes the label of the UI button of the login screen
	UiButtonLabel *string `pulumi:"uiButtonLabel"`
	// The endpoint to use for authorization.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserAuthorizationEndpoint *string `pulumi:"userAuthorizationEndpoint"`
	// The endpoint to use for User Info.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserinfoEndpoint *string `pulumi:"userinfoEndpoint"`
	// This endpoint retrieves the OIDC provider configuration and automatically sets
	// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
	// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
	// can be overridden by setting them explicitly in HCL code
	WellknownEndpoint *string `pulumi:"wellknownEndpoint"`
}

// The set of arguments for constructing a OrgOidc resource.
type OrgOidcArgs struct {
	// The endpoint to use for access tokens.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	AccessTokenEndpoint pulumi.StringPtrInput
	// A single configuration block that specifies the claim mappings to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the claims given by `wellknownEndpoint`. The supported claims are:
	ClaimsMapping OrgOidcClaimsMappingPtrInput
	// Client ID to use with the OIDC provider
	ClientId pulumi.StringInput
	// Client Secret to use with the OIDC provider
	ClientSecret pulumi.StringInput
	// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
	Enabled pulumi.BoolInput
	// The issuer ID for the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	IssuerId pulumi.StringPtrInput
	// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
	// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
	// Maximum value is `24`
	KeyExpireDurationHours pulumi.IntPtrInput
	// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
	// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
	KeyRefreshEndpoint pulumi.StringPtrInput
	// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
	KeyRefreshPeriodHours pulumi.IntPtrInput
	// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
	// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
	KeyRefreshStrategy pulumi.StringPtrInput
	// One or more configuration blocks that specify the keys to use with the OIDC provider.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
	// to override the keys given by `wellknownEndpoint`. Each key requires the following:
	Keys OrgOidcKeyArrayInput
	// The maximum clock skew is the maximum allowable time difference between the client and server.
	// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
	MaxClockSkewSeconds pulumi.IntPtrInput
	// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
	// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
	OrgId pulumi.StringInput
	// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
	// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
	// VMware Cloud Director can fetch and consume claims from both sources
	PreferIdToken pulumi.BoolPtrInput
	// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
	// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
	// overrides the obtained scopes
	Scopes pulumi.StringArrayInput
	// Customizes the label of the UI button of the login screen
	UiButtonLabel pulumi.StringPtrInput
	// The endpoint to use for authorization.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserAuthorizationEndpoint pulumi.StringPtrInput
	// The endpoint to use for User Info.
	// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
	// This allows users to override the configuration given by `wellknownEndpoint`
	UserinfoEndpoint pulumi.StringPtrInput
	// This endpoint retrieves the OIDC provider configuration and automatically sets
	// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
	// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
	// can be overridden by setting them explicitly in HCL code
	WellknownEndpoint pulumi.StringPtrInput
}

func (OrgOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgOidcArgs)(nil)).Elem()
}

type OrgOidcInput interface {
	pulumi.Input

	ToOrgOidcOutput() OrgOidcOutput
	ToOrgOidcOutputWithContext(ctx context.Context) OrgOidcOutput
}

func (*OrgOidc) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgOidc)(nil)).Elem()
}

func (i *OrgOidc) ToOrgOidcOutput() OrgOidcOutput {
	return i.ToOrgOidcOutputWithContext(context.Background())
}

func (i *OrgOidc) ToOrgOidcOutputWithContext(ctx context.Context) OrgOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgOidcOutput)
}

// OrgOidcArrayInput is an input type that accepts OrgOidcArray and OrgOidcArrayOutput values.
// You can construct a concrete instance of `OrgOidcArrayInput` via:
//
//	OrgOidcArray{ OrgOidcArgs{...} }
type OrgOidcArrayInput interface {
	pulumi.Input

	ToOrgOidcArrayOutput() OrgOidcArrayOutput
	ToOrgOidcArrayOutputWithContext(context.Context) OrgOidcArrayOutput
}

type OrgOidcArray []OrgOidcInput

func (OrgOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgOidc)(nil)).Elem()
}

func (i OrgOidcArray) ToOrgOidcArrayOutput() OrgOidcArrayOutput {
	return i.ToOrgOidcArrayOutputWithContext(context.Background())
}

func (i OrgOidcArray) ToOrgOidcArrayOutputWithContext(ctx context.Context) OrgOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgOidcArrayOutput)
}

// OrgOidcMapInput is an input type that accepts OrgOidcMap and OrgOidcMapOutput values.
// You can construct a concrete instance of `OrgOidcMapInput` via:
//
//	OrgOidcMap{ "key": OrgOidcArgs{...} }
type OrgOidcMapInput interface {
	pulumi.Input

	ToOrgOidcMapOutput() OrgOidcMapOutput
	ToOrgOidcMapOutputWithContext(context.Context) OrgOidcMapOutput
}

type OrgOidcMap map[string]OrgOidcInput

func (OrgOidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgOidc)(nil)).Elem()
}

func (i OrgOidcMap) ToOrgOidcMapOutput() OrgOidcMapOutput {
	return i.ToOrgOidcMapOutputWithContext(context.Background())
}

func (i OrgOidcMap) ToOrgOidcMapOutputWithContext(ctx context.Context) OrgOidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgOidcMapOutput)
}

type OrgOidcOutput struct{ *pulumi.OutputState }

func (OrgOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgOidc)(nil)).Elem()
}

func (o OrgOidcOutput) ToOrgOidcOutput() OrgOidcOutput {
	return o
}

func (o OrgOidcOutput) ToOrgOidcOutputWithContext(ctx context.Context) OrgOidcOutput {
	return o
}

// The endpoint to use for access tokens.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
// This allows users to override the configuration given by `wellknownEndpoint`
func (o OrgOidcOutput) AccessTokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.AccessTokenEndpoint }).(pulumi.StringOutput)
}

// A single configuration block that specifies the claim mappings to use with the OIDC provider.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
// to override the claims given by `wellknownEndpoint`. The supported claims are:
func (o OrgOidcOutput) ClaimsMapping() OrgOidcClaimsMappingOutput {
	return o.ApplyT(func(v *OrgOidc) OrgOidcClaimsMappingOutput { return v.ClaimsMapping }).(OrgOidcClaimsMappingOutput)
}

// Client ID to use with the OIDC provider
func (o OrgOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client Secret to use with the OIDC provider
func (o OrgOidcOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
func (o OrgOidcOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The issuer ID for the OIDC provider.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
// This allows users to override the configuration given by `wellknownEndpoint`
func (o OrgOidcOutput) IssuerId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.IssuerId }).(pulumi.StringOutput)
}

// Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
// You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
// Maximum value is `24`
func (o OrgOidcOutput) KeyExpireDurationHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.IntPtrOutput { return v.KeyExpireDurationHours }).(pulumi.IntPtrOutput)
}

// Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
// If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
func (o OrgOidcOutput) KeyRefreshEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.KeyRefreshEndpoint }).(pulumi.StringOutput)
}

// Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
func (o OrgOidcOutput) KeyRefreshPeriodHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.IntPtrOutput { return v.KeyRefreshPeriodHours }).(pulumi.IntPtrOutput)
}

// Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
// The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
func (o OrgOidcOutput) KeyRefreshStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringPtrOutput { return v.KeyRefreshStrategy }).(pulumi.StringPtrOutput)
}

// One or more configuration blocks that specify the keys to use with the OIDC provider.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
// to override the keys given by `wellknownEndpoint`. Each key requires the following:
func (o OrgOidcOutput) Keys() OrgOidcKeyArrayOutput {
	return o.ApplyT(func(v *OrgOidc) OrgOidcKeyArrayOutput { return v.Keys }).(OrgOidcKeyArrayOutput)
}

// The maximum clock skew is the maximum allowable time difference between the client and server.
// This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
func (o OrgOidcOutput) MaxClockSkewSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.IntPtrOutput { return v.MaxClockSkewSeconds }).(pulumi.IntPtrOutput)
}

// ID of the Organization that will have the OpenID Connect settings configured. There must be only one
// resource `OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
func (o OrgOidcOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
// The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
// VMware Cloud Director can fetch and consume claims from both sources
func (o OrgOidcOutput) PreferIdToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.BoolPtrOutput { return v.PreferIdToken }).(pulumi.BoolPtrOutput)
}

// The client configuration redirect URI used to create a client application registration with an identity provider
// that complies with the OpenID Connect standard
func (o OrgOidcOutput) RedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.RedirectUri }).(pulumi.StringOutput)
}

// A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
// the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
// overrides the obtained scopes
func (o OrgOidcOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Customizes the label of the UI button of the login screen
func (o OrgOidcOutput) UiButtonLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringPtrOutput { return v.UiButtonLabel }).(pulumi.StringPtrOutput)
}

// The endpoint to use for authorization.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
// This allows users to override the configuration given by `wellknownEndpoint`
func (o OrgOidcOutput) UserAuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.UserAuthorizationEndpoint }).(pulumi.StringOutput)
}

// The endpoint to use for User Info.
// If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
// This allows users to override the configuration given by `wellknownEndpoint`
func (o OrgOidcOutput) UserinfoEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringOutput { return v.UserinfoEndpoint }).(pulumi.StringOutput)
}

// This endpoint retrieves the OIDC provider configuration and automatically sets
// the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
// `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
// can be overridden by setting them explicitly in HCL code
func (o OrgOidcOutput) WellknownEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgOidc) pulumi.StringPtrOutput { return v.WellknownEndpoint }).(pulumi.StringPtrOutput)
}

type OrgOidcArrayOutput struct{ *pulumi.OutputState }

func (OrgOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgOidc)(nil)).Elem()
}

func (o OrgOidcArrayOutput) ToOrgOidcArrayOutput() OrgOidcArrayOutput {
	return o
}

func (o OrgOidcArrayOutput) ToOrgOidcArrayOutputWithContext(ctx context.Context) OrgOidcArrayOutput {
	return o
}

func (o OrgOidcArrayOutput) Index(i pulumi.IntInput) OrgOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgOidc {
		return vs[0].([]*OrgOidc)[vs[1].(int)]
	}).(OrgOidcOutput)
}

type OrgOidcMapOutput struct{ *pulumi.OutputState }

func (OrgOidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgOidc)(nil)).Elem()
}

func (o OrgOidcMapOutput) ToOrgOidcMapOutput() OrgOidcMapOutput {
	return o
}

func (o OrgOidcMapOutput) ToOrgOidcMapOutputWithContext(ctx context.Context) OrgOidcMapOutput {
	return o
}

func (o OrgOidcMapOutput) MapIndex(k pulumi.StringInput) OrgOidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgOidc {
		return vs[0].(map[string]*OrgOidc)[vs[1].(string)]
	}).(OrgOidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgOidcInput)(nil)).Elem(), &OrgOidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgOidcArrayInput)(nil)).Elem(), OrgOidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgOidcMapInput)(nil)).Elem(), OrgOidcMap{})
	pulumi.RegisterOutputType(OrgOidcOutput{})
	pulumi.RegisterOutputType(OrgOidcArrayOutput{})
	pulumi.RegisterOutputType(OrgOidcMapOutput{})
}
