// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkRouted struct {
	pulumi.CustomResourceState

	// An optional description of the network
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	DhcpPools NetworkRoutedDhcpPoolArrayOutput `pulumi:"dhcpPools"`
	// First DNS server to use.
	Dns1 pulumi.StringPtrOutput `pulumi:"dns1"`
	// Second DNS server to use.
	Dns2 pulumi.StringPtrOutput `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrOutput `pulumi:"dnsSuffix"`
	// The name of the edge gateway
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// The gateway for this network
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// Network Hypertext Reference
	Href pulumi.StringOutput `pulumi:"href"`
	// An interface for the network. One of `internal` (default), `subinterface`,
	// `distributed` (requires the edge gateway to support distributed networks)
	InterfaceType pulumi.StringPtrOutput `pulumi:"interfaceType"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	//
	// <a id="ip-pools"></a>
	MetadataEntries NetworkRoutedMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// A unique name for the network
	Name pulumi.StringOutput `pulumi:"name"`
	// The netmask for the new network. Defaults to `255.255.255.0`
	Netmask pulumi.StringPtrOutput `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to `false`.
	Shared pulumi.BoolPtrOutput `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	StaticIpPools NetworkRoutedStaticIpPoolArrayOutput `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewNetworkRouted registers a new resource with the given unique name, arguments, and options.
func NewNetworkRouted(ctx *pulumi.Context,
	name string, args *NetworkRoutedArgs, opts ...pulumi.ResourceOption) (*NetworkRouted, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkRouted
	err := ctx.RegisterResource("vcd:index/networkRouted:NetworkRouted", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkRouted gets an existing NetworkRouted resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkRouted(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkRoutedState, opts ...pulumi.ResourceOption) (*NetworkRouted, error) {
	var resource NetworkRouted
	err := ctx.ReadResource("vcd:index/networkRouted:NetworkRouted", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkRouted resources.
type networkRoutedState struct {
	// An optional description of the network
	Description *string `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	DhcpPools []NetworkRoutedDhcpPool `pulumi:"dhcpPools"`
	// First DNS server to use.
	Dns1 *string `pulumi:"dns1"`
	// Second DNS server to use.
	Dns2 *string `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The name of the edge gateway
	EdgeGateway *string `pulumi:"edgeGateway"`
	// The gateway for this network
	Gateway *string `pulumi:"gateway"`
	// Network Hypertext Reference
	Href *string `pulumi:"href"`
	// An interface for the network. One of `internal` (default), `subinterface`,
	// `distributed` (requires the edge gateway to support distributed networks)
	InterfaceType *string `pulumi:"interfaceType"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	//
	// <a id="ip-pools"></a>
	MetadataEntries []NetworkRoutedMetadataEntry `pulumi:"metadataEntries"`
	// A unique name for the network
	Name *string `pulumi:"name"`
	// The netmask for the new network. Defaults to `255.255.255.0`
	Netmask *string `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to `false`.
	Shared *bool `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	StaticIpPools []NetworkRoutedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type NetworkRoutedState struct {
	// An optional description of the network
	Description pulumi.StringPtrInput
	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	DhcpPools NetworkRoutedDhcpPoolArrayInput
	// First DNS server to use.
	Dns1 pulumi.StringPtrInput
	// Second DNS server to use.
	Dns2 pulumi.StringPtrInput
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrInput
	// The name of the edge gateway
	EdgeGateway pulumi.StringPtrInput
	// The gateway for this network
	Gateway pulumi.StringPtrInput
	// Network Hypertext Reference
	Href pulumi.StringPtrInput
	// An interface for the network. One of `internal` (default), `subinterface`,
	// `distributed` (requires the edge gateway to support distributed networks)
	InterfaceType pulumi.StringPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	//
	// <a id="ip-pools"></a>
	MetadataEntries NetworkRoutedMetadataEntryArrayInput
	// A unique name for the network
	Name pulumi.StringPtrInput
	// The netmask for the new network. Defaults to `255.255.255.0`
	Netmask pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to `false`.
	Shared pulumi.BoolPtrInput
	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	StaticIpPools NetworkRoutedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NetworkRoutedState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRoutedState)(nil)).Elem()
}

type networkRoutedArgs struct {
	// An optional description of the network
	Description *string `pulumi:"description"`
	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	DhcpPools []NetworkRoutedDhcpPool `pulumi:"dhcpPools"`
	// First DNS server to use.
	Dns1 *string `pulumi:"dns1"`
	// Second DNS server to use.
	Dns2 *string `pulumi:"dns2"`
	// A FQDN for the virtual machines on this network
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The name of the edge gateway
	EdgeGateway string `pulumi:"edgeGateway"`
	// The gateway for this network
	Gateway *string `pulumi:"gateway"`
	// An interface for the network. One of `internal` (default), `subinterface`,
	// `distributed` (requires the edge gateway to support distributed networks)
	InterfaceType *string `pulumi:"interfaceType"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	//
	// <a id="ip-pools"></a>
	MetadataEntries []NetworkRoutedMetadataEntry `pulumi:"metadataEntries"`
	// A unique name for the network
	Name *string `pulumi:"name"`
	// The netmask for the new network. Defaults to `255.255.255.0`
	Netmask *string `pulumi:"netmask"`
	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to `false`.
	Shared *bool `pulumi:"shared"`
	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	StaticIpPools []NetworkRoutedStaticIpPool `pulumi:"staticIpPools"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NetworkRouted resource.
type NetworkRoutedArgs struct {
	// An optional description of the network
	Description pulumi.StringPtrInput
	// A range of IPs to issue to virtual machines that don't
	// have a static IP; see IP Pools below for details.
	DhcpPools NetworkRoutedDhcpPoolArrayInput
	// First DNS server to use.
	Dns1 pulumi.StringPtrInput
	// Second DNS server to use.
	Dns2 pulumi.StringPtrInput
	// A FQDN for the virtual machines on this network
	DnsSuffix pulumi.StringPtrInput
	// The name of the edge gateway
	EdgeGateway pulumi.StringInput
	// The gateway for this network
	Gateway pulumi.StringPtrInput
	// An interface for the network. One of `internal` (default), `subinterface`,
	// `distributed` (requires the edge gateway to support distributed networks)
	InterfaceType pulumi.StringPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	//
	// <a id="ip-pools"></a>
	MetadataEntries NetworkRoutedMetadataEntryArrayInput
	// A unique name for the network
	Name pulumi.StringPtrInput
	// The netmask for the new network. Defaults to `255.255.255.0`
	Netmask pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when
	// connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Defines if this network is shared between multiple VDCs
	// in the Org.  Defaults to `false`.
	Shared pulumi.BoolPtrInput
	// A range of IPs permitted to be used as static IPs for
	// virtual machines; see IP Pools below for details.
	StaticIpPools NetworkRoutedStaticIpPoolArrayInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (NetworkRoutedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRoutedArgs)(nil)).Elem()
}

type NetworkRoutedInput interface {
	pulumi.Input

	ToNetworkRoutedOutput() NetworkRoutedOutput
	ToNetworkRoutedOutputWithContext(ctx context.Context) NetworkRoutedOutput
}

func (*NetworkRouted) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRouted)(nil)).Elem()
}

func (i *NetworkRouted) ToNetworkRoutedOutput() NetworkRoutedOutput {
	return i.ToNetworkRoutedOutputWithContext(context.Background())
}

func (i *NetworkRouted) ToNetworkRoutedOutputWithContext(ctx context.Context) NetworkRoutedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutedOutput)
}

// NetworkRoutedArrayInput is an input type that accepts NetworkRoutedArray and NetworkRoutedArrayOutput values.
// You can construct a concrete instance of `NetworkRoutedArrayInput` via:
//
//	NetworkRoutedArray{ NetworkRoutedArgs{...} }
type NetworkRoutedArrayInput interface {
	pulumi.Input

	ToNetworkRoutedArrayOutput() NetworkRoutedArrayOutput
	ToNetworkRoutedArrayOutputWithContext(context.Context) NetworkRoutedArrayOutput
}

type NetworkRoutedArray []NetworkRoutedInput

func (NetworkRoutedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRouted)(nil)).Elem()
}

func (i NetworkRoutedArray) ToNetworkRoutedArrayOutput() NetworkRoutedArrayOutput {
	return i.ToNetworkRoutedArrayOutputWithContext(context.Background())
}

func (i NetworkRoutedArray) ToNetworkRoutedArrayOutputWithContext(ctx context.Context) NetworkRoutedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutedArrayOutput)
}

// NetworkRoutedMapInput is an input type that accepts NetworkRoutedMap and NetworkRoutedMapOutput values.
// You can construct a concrete instance of `NetworkRoutedMapInput` via:
//
//	NetworkRoutedMap{ "key": NetworkRoutedArgs{...} }
type NetworkRoutedMapInput interface {
	pulumi.Input

	ToNetworkRoutedMapOutput() NetworkRoutedMapOutput
	ToNetworkRoutedMapOutputWithContext(context.Context) NetworkRoutedMapOutput
}

type NetworkRoutedMap map[string]NetworkRoutedInput

func (NetworkRoutedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRouted)(nil)).Elem()
}

func (i NetworkRoutedMap) ToNetworkRoutedMapOutput() NetworkRoutedMapOutput {
	return i.ToNetworkRoutedMapOutputWithContext(context.Background())
}

func (i NetworkRoutedMap) ToNetworkRoutedMapOutputWithContext(ctx context.Context) NetworkRoutedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutedMapOutput)
}

type NetworkRoutedOutput struct{ *pulumi.OutputState }

func (NetworkRoutedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRouted)(nil)).Elem()
}

func (o NetworkRoutedOutput) ToNetworkRoutedOutput() NetworkRoutedOutput {
	return o
}

func (o NetworkRoutedOutput) ToNetworkRoutedOutputWithContext(ctx context.Context) NetworkRoutedOutput {
	return o
}

// An optional description of the network
func (o NetworkRoutedOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A range of IPs to issue to virtual machines that don't
// have a static IP; see IP Pools below for details.
func (o NetworkRoutedOutput) DhcpPools() NetworkRoutedDhcpPoolArrayOutput {
	return o.ApplyT(func(v *NetworkRouted) NetworkRoutedDhcpPoolArrayOutput { return v.DhcpPools }).(NetworkRoutedDhcpPoolArrayOutput)
}

// First DNS server to use.
func (o NetworkRoutedOutput) Dns1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Dns1 }).(pulumi.StringPtrOutput)
}

// Second DNS server to use.
func (o NetworkRoutedOutput) Dns2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Dns2 }).(pulumi.StringPtrOutput)
}

// A FQDN for the virtual machines on this network
func (o NetworkRoutedOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

// The name of the edge gateway
func (o NetworkRoutedOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// The gateway for this network
func (o NetworkRoutedOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// Network Hypertext Reference
func (o NetworkRoutedOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// An interface for the network. One of `internal` (default), `subinterface`,
// `distributed` (requires the edge gateway to support distributed networks)
func (o NetworkRoutedOutput) InterfaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.InterfaceType }).(pulumi.StringPtrOutput)
}

// Use `metadataEntry` instead. Key value map of metadata to assign to this network.
//
// Deprecated: Use metadataEntry instead
func (o NetworkRoutedOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
//
// <a id="ip-pools"></a>
func (o NetworkRoutedOutput) MetadataEntries() NetworkRoutedMetadataEntryArrayOutput {
	return o.ApplyT(func(v *NetworkRouted) NetworkRoutedMetadataEntryArrayOutput { return v.MetadataEntries }).(NetworkRoutedMetadataEntryArrayOutput)
}

// A unique name for the network
func (o NetworkRoutedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The netmask for the new network. Defaults to `255.255.255.0`
func (o NetworkRoutedOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Netmask }).(pulumi.StringPtrOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when
// connected as sysadmin working across different organisations
func (o NetworkRoutedOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Defines if this network is shared between multiple VDCs
// in the Org.  Defaults to `false`.
func (o NetworkRoutedOutput) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.BoolPtrOutput { return v.Shared }).(pulumi.BoolPtrOutput)
}

// A range of IPs permitted to be used as static IPs for
// virtual machines; see IP Pools below for details.
func (o NetworkRoutedOutput) StaticIpPools() NetworkRoutedStaticIpPoolArrayOutput {
	return o.ApplyT(func(v *NetworkRouted) NetworkRoutedStaticIpPoolArrayOutput { return v.StaticIpPools }).(NetworkRoutedStaticIpPoolArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o NetworkRoutedOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRouted) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type NetworkRoutedArrayOutput struct{ *pulumi.OutputState }

func (NetworkRoutedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRouted)(nil)).Elem()
}

func (o NetworkRoutedArrayOutput) ToNetworkRoutedArrayOutput() NetworkRoutedArrayOutput {
	return o
}

func (o NetworkRoutedArrayOutput) ToNetworkRoutedArrayOutputWithContext(ctx context.Context) NetworkRoutedArrayOutput {
	return o
}

func (o NetworkRoutedArrayOutput) Index(i pulumi.IntInput) NetworkRoutedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkRouted {
		return vs[0].([]*NetworkRouted)[vs[1].(int)]
	}).(NetworkRoutedOutput)
}

type NetworkRoutedMapOutput struct{ *pulumi.OutputState }

func (NetworkRoutedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRouted)(nil)).Elem()
}

func (o NetworkRoutedMapOutput) ToNetworkRoutedMapOutput() NetworkRoutedMapOutput {
	return o
}

func (o NetworkRoutedMapOutput) ToNetworkRoutedMapOutputWithContext(ctx context.Context) NetworkRoutedMapOutput {
	return o
}

func (o NetworkRoutedMapOutput) MapIndex(k pulumi.StringInput) NetworkRoutedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkRouted {
		return vs[0].(map[string]*NetworkRouted)[vs[1].(string)]
	}).(NetworkRoutedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRoutedInput)(nil)).Elem(), &NetworkRouted{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRoutedArrayInput)(nil)).Elem(), NetworkRoutedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRoutedMapInput)(nil)).Elem(), NetworkRoutedMap{})
	pulumi.RegisterOutputType(NetworkRoutedOutput{})
	pulumi.RegisterOutputType(NetworkRoutedArrayOutput{})
	pulumi.RegisterOutputType(NetworkRoutedMapOutput{})
}
