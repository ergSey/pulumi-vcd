// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.9+* and VCD 10.3.2+ with NSX-T.
//
// Provides a data source to read NSX-T Edge Gateway QoS profiles, which can be used to modify NSX-T
// Edge Gateway Rate Limiting (QoS) configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetNsxtManager(ctx, &vcd.GetNsxtManagerArgs{
//				Name: "nsxt-manager-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.GetNsxtEdgegatewayQosProfile(ctx, &vcd.GetNsxtEdgegatewayQosProfileArgs{
//				NsxtManagerId: firstNsxtManagerId.Id,
//				Name:          "qos-profile-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNsxtEdgegatewayQosProfile(ctx *pulumi.Context, args *GetNsxtEdgegatewayQosProfileArgs, opts ...pulumi.InvokeOption) (*GetNsxtEdgegatewayQosProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNsxtEdgegatewayQosProfileResult
	err := ctx.Invoke("vcd:index/getNsxtEdgegatewayQosProfile:getNsxtEdgegatewayQosProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtEdgegatewayQosProfile.
type GetNsxtEdgegatewayQosProfileArgs struct {
	// QoS Profile Name
	Name string `pulumi:"name"`
	// NSX-T Manager where the QoS profile is defined in (can be looked up
	// using `getNsxtManager` data source)
	NsxtManagerId string `pulumi:"nsxtManagerId"`
}

// A collection of values returned by getNsxtEdgegatewayQosProfile.
type GetNsxtEdgegatewayQosProfileResult struct {
	// Burst size defined in bytes
	BurstSize int `pulumi:"burstSize"`
	// Committed bandwith specificd in Mb/s
	CommittedBandwidth int `pulumi:"committedBandwidth"`
	// Description of QoS Profile
	Description string `pulumi:"description"`
	// Excess action defines action on traffic exceeding bandwidth
	ExcessAction string `pulumi:"excessAction"`
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	NsxtManagerId string `pulumi:"nsxtManagerId"`
}

func GetNsxtEdgegatewayQosProfileOutput(ctx *pulumi.Context, args GetNsxtEdgegatewayQosProfileOutputArgs, opts ...pulumi.InvokeOption) GetNsxtEdgegatewayQosProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNsxtEdgegatewayQosProfileResultOutput, error) {
			args := v.(GetNsxtEdgegatewayQosProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtEdgegatewayQosProfile:getNsxtEdgegatewayQosProfile", args, GetNsxtEdgegatewayQosProfileResultOutput{}, options).(GetNsxtEdgegatewayQosProfileResultOutput), nil
		}).(GetNsxtEdgegatewayQosProfileResultOutput)
}

// A collection of arguments for invoking getNsxtEdgegatewayQosProfile.
type GetNsxtEdgegatewayQosProfileOutputArgs struct {
	// QoS Profile Name
	Name pulumi.StringInput `pulumi:"name"`
	// NSX-T Manager where the QoS profile is defined in (can be looked up
	// using `getNsxtManager` data source)
	NsxtManagerId pulumi.StringInput `pulumi:"nsxtManagerId"`
}

func (GetNsxtEdgegatewayQosProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtEdgegatewayQosProfileArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtEdgegatewayQosProfile.
type GetNsxtEdgegatewayQosProfileResultOutput struct{ *pulumi.OutputState }

func (GetNsxtEdgegatewayQosProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtEdgegatewayQosProfileResult)(nil)).Elem()
}

func (o GetNsxtEdgegatewayQosProfileResultOutput) ToGetNsxtEdgegatewayQosProfileResultOutput() GetNsxtEdgegatewayQosProfileResultOutput {
	return o
}

func (o GetNsxtEdgegatewayQosProfileResultOutput) ToGetNsxtEdgegatewayQosProfileResultOutputWithContext(ctx context.Context) GetNsxtEdgegatewayQosProfileResultOutput {
	return o
}

// Burst size defined in bytes
func (o GetNsxtEdgegatewayQosProfileResultOutput) BurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) int { return v.BurstSize }).(pulumi.IntOutput)
}

// Committed bandwith specificd in Mb/s
func (o GetNsxtEdgegatewayQosProfileResultOutput) CommittedBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) int { return v.CommittedBandwidth }).(pulumi.IntOutput)
}

// Description of QoS Profile
func (o GetNsxtEdgegatewayQosProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// Excess action defines action on traffic exceeding bandwidth
func (o GetNsxtEdgegatewayQosProfileResultOutput) ExcessAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) string { return v.ExcessAction }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNsxtEdgegatewayQosProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNsxtEdgegatewayQosProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNsxtEdgegatewayQosProfileResultOutput) NsxtManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtEdgegatewayQosProfileResult) string { return v.NsxtManagerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNsxtEdgegatewayQosProfileResultOutput{})
}
