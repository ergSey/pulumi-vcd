// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Rde struct {
	pulumi.CustomResourceState

	// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
	ComputedEntity pulumi.StringOutput `pulumi:"computedEntity"`
	// It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
	// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
	EntityInSync pulumi.BoolOutput `pulumi:"entityInSync"`
	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
	InputEntity pulumi.StringPtrOutput `pulumi:"inputEntity"`
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
	// contents
	InputEntityUrl pulumi.StringPtrOutput `pulumi:"inputEntityUrl"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries RdeMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// The name of the Runtime Defined Entity. It can be non-unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
	OwnerUserId pulumi.StringOutput `pulumi:"ownerUserId"`
	// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
	// updating to a **newer/lower** `version` of the **same** RDE Type.
	RdeTypeId pulumi.StringOutput `pulumi:"rdeTypeId"`
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
	Resolve pulumi.BoolOutput `pulumi:"resolve"`
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
	ResolveOnRemoval pulumi.BoolPtrOutput `pulumi:"resolveOnRemoval"`
	// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
	// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
	// otherwise it will be `RESOLUTION_ERROR`.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRde registers a new resource with the given unique name, arguments, and options.
func NewRde(ctx *pulumi.Context,
	name string, args *RdeArgs, opts ...pulumi.ResourceOption) (*Rde, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RdeTypeId == nil {
		return nil, errors.New("invalid value for required argument 'RdeTypeId'")
	}
	if args.Resolve == nil {
		return nil, errors.New("invalid value for required argument 'Resolve'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rde
	err := ctx.RegisterResource("vcd:index/rde:Rde", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRde gets an existing Rde resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRde(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdeState, opts ...pulumi.ResourceOption) (*Rde, error) {
	var resource Rde
	err := ctx.ReadResource("vcd:index/rde:Rde", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rde resources.
type rdeState struct {
	// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
	ComputedEntity *string `pulumi:"computedEntity"`
	// It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
	// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
	EntityInSync *bool `pulumi:"entityInSync"`
	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	ExternalId *string `pulumi:"externalId"`
	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
	InputEntity *string `pulumi:"inputEntity"`
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
	// contents
	InputEntityUrl *string `pulumi:"inputEntityUrl"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []RdeMetadataEntry `pulumi:"metadataEntries"`
	// The name of the Runtime Defined Entity. It can be non-unique.
	Name *string `pulumi:"name"`
	// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
	Org *string `pulumi:"org"`
	// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
	OrgId *string `pulumi:"orgId"`
	// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
	OwnerUserId *string `pulumi:"ownerUserId"`
	// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
	// updating to a **newer/lower** `version` of the **same** RDE Type.
	RdeTypeId *string `pulumi:"rdeTypeId"`
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
	Resolve *bool `pulumi:"resolve"`
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
	ResolveOnRemoval *bool `pulumi:"resolveOnRemoval"`
	// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
	// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
	// otherwise it will be `RESOLUTION_ERROR`.
	State *string `pulumi:"state"`
}

type RdeState struct {
	// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
	ComputedEntity pulumi.StringPtrInput
	// It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
	// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
	EntityInSync pulumi.BoolPtrInput
	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	ExternalId pulumi.StringPtrInput
	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
	InputEntity pulumi.StringPtrInput
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
	// contents
	InputEntityUrl pulumi.StringPtrInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries RdeMetadataEntryArrayInput
	// The name of the Runtime Defined Entity. It can be non-unique.
	Name pulumi.StringPtrInput
	// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
	Org pulumi.StringPtrInput
	// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
	OrgId pulumi.StringPtrInput
	// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
	OwnerUserId pulumi.StringPtrInput
	// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
	// updating to a **newer/lower** `version` of the **same** RDE Type.
	RdeTypeId pulumi.StringPtrInput
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
	Resolve pulumi.BoolPtrInput
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
	ResolveOnRemoval pulumi.BoolPtrInput
	// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
	// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
	// otherwise it will be `RESOLUTION_ERROR`.
	State pulumi.StringPtrInput
}

func (RdeState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdeState)(nil)).Elem()
}

type rdeArgs struct {
	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	ExternalId *string `pulumi:"externalId"`
	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
	InputEntity *string `pulumi:"inputEntity"`
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
	// contents
	InputEntityUrl *string `pulumi:"inputEntityUrl"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []RdeMetadataEntry `pulumi:"metadataEntries"`
	// The name of the Runtime Defined Entity. It can be non-unique.
	Name *string `pulumi:"name"`
	// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
	Org *string `pulumi:"org"`
	// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
	// updating to a **newer/lower** `version` of the **same** RDE Type.
	RdeTypeId string `pulumi:"rdeTypeId"`
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
	Resolve bool `pulumi:"resolve"`
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
	ResolveOnRemoval *bool `pulumi:"resolveOnRemoval"`
}

// The set of arguments for constructing a Rde resource.
type RdeArgs struct {
	// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
	ExternalId pulumi.StringPtrInput
	// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
	InputEntity pulumi.StringPtrInput
	// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
	// contents
	InputEntityUrl pulumi.StringPtrInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries RdeMetadataEntryArrayInput
	// The name of the Runtime Defined Entity. It can be non-unique.
	Name pulumi.StringPtrInput
	// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
	Org pulumi.StringPtrInput
	// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
	// updating to a **newer/lower** `version` of the **same** RDE Type.
	RdeTypeId pulumi.StringInput
	// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
	// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
	// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
	Resolve pulumi.BoolInput
	// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
	ResolveOnRemoval pulumi.BoolPtrInput
}

func (RdeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdeArgs)(nil)).Elem()
}

type RdeInput interface {
	pulumi.Input

	ToRdeOutput() RdeOutput
	ToRdeOutputWithContext(ctx context.Context) RdeOutput
}

func (*Rde) ElementType() reflect.Type {
	return reflect.TypeOf((**Rde)(nil)).Elem()
}

func (i *Rde) ToRdeOutput() RdeOutput {
	return i.ToRdeOutputWithContext(context.Background())
}

func (i *Rde) ToRdeOutputWithContext(ctx context.Context) RdeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeOutput)
}

// RdeArrayInput is an input type that accepts RdeArray and RdeArrayOutput values.
// You can construct a concrete instance of `RdeArrayInput` via:
//
//	RdeArray{ RdeArgs{...} }
type RdeArrayInput interface {
	pulumi.Input

	ToRdeArrayOutput() RdeArrayOutput
	ToRdeArrayOutputWithContext(context.Context) RdeArrayOutput
}

type RdeArray []RdeInput

func (RdeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rde)(nil)).Elem()
}

func (i RdeArray) ToRdeArrayOutput() RdeArrayOutput {
	return i.ToRdeArrayOutputWithContext(context.Background())
}

func (i RdeArray) ToRdeArrayOutputWithContext(ctx context.Context) RdeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeArrayOutput)
}

// RdeMapInput is an input type that accepts RdeMap and RdeMapOutput values.
// You can construct a concrete instance of `RdeMapInput` via:
//
//	RdeMap{ "key": RdeArgs{...} }
type RdeMapInput interface {
	pulumi.Input

	ToRdeMapOutput() RdeMapOutput
	ToRdeMapOutputWithContext(context.Context) RdeMapOutput
}

type RdeMap map[string]RdeInput

func (RdeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rde)(nil)).Elem()
}

func (i RdeMap) ToRdeMapOutput() RdeMapOutput {
	return i.ToRdeMapOutputWithContext(context.Background())
}

func (i RdeMap) ToRdeMapOutputWithContext(ctx context.Context) RdeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeMapOutput)
}

type RdeOutput struct{ *pulumi.OutputState }

func (RdeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rde)(nil)).Elem()
}

func (o RdeOutput) ToRdeOutput() RdeOutput {
	return o
}

func (o RdeOutput) ToRdeOutputWithContext(ctx context.Context) RdeOutput {
	return o
}

// The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
func (o RdeOutput) ComputedEntity() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.ComputedEntity }).(pulumi.StringOutput)
}

// It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
// meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
func (o RdeOutput) EntityInSync() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rde) pulumi.BoolOutput { return v.EntityInSync }).(pulumi.BoolOutput)
}

// An external input_entity's ID that this Runtime Defined Entity may have a relation to.
func (o RdeOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
func (o RdeOutput) InputEntity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringPtrOutput { return v.InputEntity }).(pulumi.StringPtrOutput)
}

// URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
// contents
func (o RdeOutput) InputEntityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringPtrOutput { return v.InputEntityUrl }).(pulumi.StringPtrOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
func (o RdeOutput) MetadataEntries() RdeMetadataEntryArrayOutput {
	return o.ApplyT(func(v *Rde) RdeMetadataEntryArrayOutput { return v.MetadataEntries }).(RdeMetadataEntryArrayOutput)
}

// The name of the Runtime Defined Entity. It can be non-unique.
func (o RdeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
func (o RdeOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
func (o RdeOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
func (o RdeOutput) OwnerUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.OwnerUserId }).(pulumi.StringOutput)
}

// The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
// updating to a **newer/lower** `version` of the **same** RDE Type.
func (o RdeOutput) RdeTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.RdeTypeId }).(pulumi.StringOutput)
}

// If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
// resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
// deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
func (o RdeOutput) Resolve() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rde) pulumi.BoolOutput { return v.Resolve }).(pulumi.BoolOutput)
}

// If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
func (o RdeOutput) ResolveOnRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Rde) pulumi.BoolPtrOutput { return v.ResolveOnRemoval }).(pulumi.BoolPtrOutput)
}

// Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
// If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
// otherwise it will be `RESOLUTION_ERROR`.
func (o RdeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Rde) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RdeArrayOutput struct{ *pulumi.OutputState }

func (RdeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rde)(nil)).Elem()
}

func (o RdeArrayOutput) ToRdeArrayOutput() RdeArrayOutput {
	return o
}

func (o RdeArrayOutput) ToRdeArrayOutputWithContext(ctx context.Context) RdeArrayOutput {
	return o
}

func (o RdeArrayOutput) Index(i pulumi.IntInput) RdeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rde {
		return vs[0].([]*Rde)[vs[1].(int)]
	}).(RdeOutput)
}

type RdeMapOutput struct{ *pulumi.OutputState }

func (RdeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rde)(nil)).Elem()
}

func (o RdeMapOutput) ToRdeMapOutput() RdeMapOutput {
	return o
}

func (o RdeMapOutput) ToRdeMapOutputWithContext(ctx context.Context) RdeMapOutput {
	return o
}

func (o RdeMapOutput) MapIndex(k pulumi.StringInput) RdeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rde {
		return vs[0].(map[string]*Rde)[vs[1].(string)]
	}).(RdeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdeInput)(nil)).Elem(), &Rde{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdeArrayInput)(nil)).Elem(), RdeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdeMapInput)(nil)).Elem(), RdeMap{})
	pulumi.RegisterOutputType(RdeOutput{})
	pulumi.RegisterOutputType(RdeArrayOutput{})
	pulumi.RegisterOutputType(RdeMapOutput{})
}
