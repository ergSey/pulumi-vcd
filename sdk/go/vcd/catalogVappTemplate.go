// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CatalogVappTemplate struct {
	pulumi.CustomResourceState

	// A configuration block to create template from existing
	// vApp (Standalone VM or vApp)
	CaptureVapp CatalogVappTemplateCaptureVappPtrOutput `pulumi:"captureVapp"`
	// ID of the Catalog where to upload the OVA file
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Catalog Item ID
	CatalogItemId pulumi.StringOutput `pulumi:"catalogItemId"`
	// Timestamp of when the vApp Template was created
	Created pulumi.StringOutput `pulumi:"created"`
	// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
	Description pulumi.StringOutput `pulumi:"description"`
	// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
	InheritedMetadata pulumi.StringMapOutput `pulumi:"inheritedMetadata"`
	// The information about the vApp Template lease. It includes the field below. When this section is
	// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
	Lease CatalogVappTemplateLeaseOutput `pulumi:"lease"`
	// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogVappTemplateMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// vApp Template name in Catalog
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrOutput `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrOutput `pulumi:"ovfUrl"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	UploadPieceSize pulumi.IntPtrOutput `pulumi:"uploadPieceSize"`
	// The VDC ID to which this vApp Template belongs
	VdcId pulumi.StringOutput `pulumi:"vdcId"`
	// Set of VM names within the vApp template
	VmNames pulumi.StringArrayOutput `pulumi:"vmNames"`
}

// NewCatalogVappTemplate registers a new resource with the given unique name, arguments, and options.
func NewCatalogVappTemplate(ctx *pulumi.Context,
	name string, args *CatalogVappTemplateArgs, opts ...pulumi.ResourceOption) (*CatalogVappTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogVappTemplate
	err := ctx.RegisterResource("vcd:index/catalogVappTemplate:CatalogVappTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogVappTemplate gets an existing CatalogVappTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogVappTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogVappTemplateState, opts ...pulumi.ResourceOption) (*CatalogVappTemplate, error) {
	var resource CatalogVappTemplate
	err := ctx.ReadResource("vcd:index/catalogVappTemplate:CatalogVappTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogVappTemplate resources.
type catalogVappTemplateState struct {
	// A configuration block to create template from existing
	// vApp (Standalone VM or vApp)
	CaptureVapp *CatalogVappTemplateCaptureVapp `pulumi:"captureVapp"`
	// ID of the Catalog where to upload the OVA file
	CatalogId *string `pulumi:"catalogId"`
	// Catalog Item ID
	CatalogItemId *string `pulumi:"catalogItemId"`
	// Timestamp of when the vApp Template was created
	Created *string `pulumi:"created"`
	// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
	Description *string `pulumi:"description"`
	// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
	InheritedMetadata map[string]string `pulumi:"inheritedMetadata"`
	// The information about the vApp Template lease. It includes the field below. When this section is
	// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
	Lease *CatalogVappTemplateLease `pulumi:"lease"`
	// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []CatalogVappTemplateMetadataEntry `pulumi:"metadataEntries"`
	// vApp Template name in Catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath *string `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl *string `pulumi:"ovfUrl"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
	// The VDC ID to which this vApp Template belongs
	VdcId *string `pulumi:"vdcId"`
	// Set of VM names within the vApp template
	VmNames []string `pulumi:"vmNames"`
}

type CatalogVappTemplateState struct {
	// A configuration block to create template from existing
	// vApp (Standalone VM or vApp)
	CaptureVapp CatalogVappTemplateCaptureVappPtrInput
	// ID of the Catalog where to upload the OVA file
	CatalogId pulumi.StringPtrInput
	// Catalog Item ID
	CatalogItemId pulumi.StringPtrInput
	// Timestamp of when the vApp Template was created
	Created pulumi.StringPtrInput
	// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
	Description pulumi.StringPtrInput
	// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
	InheritedMetadata pulumi.StringMapInput
	// The information about the vApp Template lease. It includes the field below. When this section is
	// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
	Lease CatalogVappTemplateLeasePtrInput
	// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogVappTemplateMetadataEntryArrayInput
	// vApp Template name in Catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrInput
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrInput
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	UploadPieceSize pulumi.IntPtrInput
	// The VDC ID to which this vApp Template belongs
	VdcId pulumi.StringPtrInput
	// Set of VM names within the vApp template
	VmNames pulumi.StringArrayInput
}

func (CatalogVappTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogVappTemplateState)(nil)).Elem()
}

type catalogVappTemplateArgs struct {
	// A configuration block to create template from existing
	// vApp (Standalone VM or vApp)
	CaptureVapp *CatalogVappTemplateCaptureVapp `pulumi:"captureVapp"`
	// ID of the Catalog where to upload the OVA file
	CatalogId string `pulumi:"catalogId"`
	// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
	Description *string `pulumi:"description"`
	// The information about the vApp Template lease. It includes the field below. When this section is
	// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
	Lease *CatalogVappTemplateLease `pulumi:"lease"`
	// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []CatalogVappTemplateMetadataEntry `pulumi:"metadataEntries"`
	// vApp Template name in Catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath *string `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl *string `pulumi:"ovfUrl"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
}

// The set of arguments for constructing a CatalogVappTemplate resource.
type CatalogVappTemplateArgs struct {
	// A configuration block to create template from existing
	// vApp (Standalone VM or vApp)
	CaptureVapp CatalogVappTemplateCaptureVappPtrInput
	// ID of the Catalog where to upload the OVA file
	CatalogId pulumi.StringInput
	// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
	Description pulumi.StringPtrInput
	// The information about the vApp Template lease. It includes the field below. When this section is
	// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
	Lease CatalogVappTemplateLeasePtrInput
	// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogVappTemplateMetadataEntryArrayInput
	// vApp Template name in Catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrInput
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrInput
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
	UploadPieceSize pulumi.IntPtrInput
}

func (CatalogVappTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogVappTemplateArgs)(nil)).Elem()
}

type CatalogVappTemplateInput interface {
	pulumi.Input

	ToCatalogVappTemplateOutput() CatalogVappTemplateOutput
	ToCatalogVappTemplateOutputWithContext(ctx context.Context) CatalogVappTemplateOutput
}

func (*CatalogVappTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogVappTemplate)(nil)).Elem()
}

func (i *CatalogVappTemplate) ToCatalogVappTemplateOutput() CatalogVappTemplateOutput {
	return i.ToCatalogVappTemplateOutputWithContext(context.Background())
}

func (i *CatalogVappTemplate) ToCatalogVappTemplateOutputWithContext(ctx context.Context) CatalogVappTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogVappTemplateOutput)
}

// CatalogVappTemplateArrayInput is an input type that accepts CatalogVappTemplateArray and CatalogVappTemplateArrayOutput values.
// You can construct a concrete instance of `CatalogVappTemplateArrayInput` via:
//
//	CatalogVappTemplateArray{ CatalogVappTemplateArgs{...} }
type CatalogVappTemplateArrayInput interface {
	pulumi.Input

	ToCatalogVappTemplateArrayOutput() CatalogVappTemplateArrayOutput
	ToCatalogVappTemplateArrayOutputWithContext(context.Context) CatalogVappTemplateArrayOutput
}

type CatalogVappTemplateArray []CatalogVappTemplateInput

func (CatalogVappTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogVappTemplate)(nil)).Elem()
}

func (i CatalogVappTemplateArray) ToCatalogVappTemplateArrayOutput() CatalogVappTemplateArrayOutput {
	return i.ToCatalogVappTemplateArrayOutputWithContext(context.Background())
}

func (i CatalogVappTemplateArray) ToCatalogVappTemplateArrayOutputWithContext(ctx context.Context) CatalogVappTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogVappTemplateArrayOutput)
}

// CatalogVappTemplateMapInput is an input type that accepts CatalogVappTemplateMap and CatalogVappTemplateMapOutput values.
// You can construct a concrete instance of `CatalogVappTemplateMapInput` via:
//
//	CatalogVappTemplateMap{ "key": CatalogVappTemplateArgs{...} }
type CatalogVappTemplateMapInput interface {
	pulumi.Input

	ToCatalogVappTemplateMapOutput() CatalogVappTemplateMapOutput
	ToCatalogVappTemplateMapOutputWithContext(context.Context) CatalogVappTemplateMapOutput
}

type CatalogVappTemplateMap map[string]CatalogVappTemplateInput

func (CatalogVappTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogVappTemplate)(nil)).Elem()
}

func (i CatalogVappTemplateMap) ToCatalogVappTemplateMapOutput() CatalogVappTemplateMapOutput {
	return i.ToCatalogVappTemplateMapOutputWithContext(context.Background())
}

func (i CatalogVappTemplateMap) ToCatalogVappTemplateMapOutputWithContext(ctx context.Context) CatalogVappTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogVappTemplateMapOutput)
}

type CatalogVappTemplateOutput struct{ *pulumi.OutputState }

func (CatalogVappTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogVappTemplate)(nil)).Elem()
}

func (o CatalogVappTemplateOutput) ToCatalogVappTemplateOutput() CatalogVappTemplateOutput {
	return o
}

func (o CatalogVappTemplateOutput) ToCatalogVappTemplateOutputWithContext(ctx context.Context) CatalogVappTemplateOutput {
	return o
}

// A configuration block to create template from existing
// vApp (Standalone VM or vApp)
func (o CatalogVappTemplateOutput) CaptureVapp() CatalogVappTemplateCaptureVappPtrOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) CatalogVappTemplateCaptureVappPtrOutput { return v.CaptureVapp }).(CatalogVappTemplateCaptureVappPtrOutput)
}

// ID of the Catalog where to upload the OVA file
func (o CatalogVappTemplateOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Catalog Item ID
func (o CatalogVappTemplateOutput) CatalogItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.CatalogItemId }).(pulumi.StringOutput)
}

// Timestamp of when the vApp Template was created
func (o CatalogVappTemplateOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Description of the vApp Template. Not to be used with `ovfUrl` when target OVA has a description
func (o CatalogVappTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
func (o CatalogVappTemplateOutput) InheritedMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringMapOutput { return v.InheritedMetadata }).(pulumi.StringMapOutput)
}

// The information about the vApp Template lease. It includes the field below. When this section is
// included, the field is mandatory. If lease value is higher than the one allowed for the whole Org, we get an error
func (o CatalogVappTemplateOutput) Lease() CatalogVappTemplateLeaseOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) CatalogVappTemplateLeaseOutput { return v.Lease }).(CatalogVappTemplateLeaseOutput)
}

// Use `metadataEntry` instead. Key/value map of metadata to assign to the associated vApp Template
//
// Deprecated: Use metadataEntry instead
func (o CatalogVappTemplateOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
func (o CatalogVappTemplateOutput) MetadataEntries() CatalogVappTemplateMetadataEntryArrayOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) CatalogVappTemplateMetadataEntryArrayOutput { return v.MetadataEntries }).(CatalogVappTemplateMetadataEntryArrayOutput)
}

// vApp Template name in Catalog
func (o CatalogVappTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o CatalogVappTemplateOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Absolute or relative path to file to upload
func (o CatalogVappTemplateOutput) OvaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringPtrOutput { return v.OvaPath }).(pulumi.StringPtrOutput)
}

// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
func (o CatalogVappTemplateOutput) OvfUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringPtrOutput { return v.OvfUrl }).(pulumi.StringPtrOutput)
}

// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB
func (o CatalogVappTemplateOutput) UploadPieceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.IntPtrOutput { return v.UploadPieceSize }).(pulumi.IntPtrOutput)
}

// The VDC ID to which this vApp Template belongs
func (o CatalogVappTemplateOutput) VdcId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringOutput { return v.VdcId }).(pulumi.StringOutput)
}

// Set of VM names within the vApp template
func (o CatalogVappTemplateOutput) VmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CatalogVappTemplate) pulumi.StringArrayOutput { return v.VmNames }).(pulumi.StringArrayOutput)
}

type CatalogVappTemplateArrayOutput struct{ *pulumi.OutputState }

func (CatalogVappTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogVappTemplate)(nil)).Elem()
}

func (o CatalogVappTemplateArrayOutput) ToCatalogVappTemplateArrayOutput() CatalogVappTemplateArrayOutput {
	return o
}

func (o CatalogVappTemplateArrayOutput) ToCatalogVappTemplateArrayOutputWithContext(ctx context.Context) CatalogVappTemplateArrayOutput {
	return o
}

func (o CatalogVappTemplateArrayOutput) Index(i pulumi.IntInput) CatalogVappTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogVappTemplate {
		return vs[0].([]*CatalogVappTemplate)[vs[1].(int)]
	}).(CatalogVappTemplateOutput)
}

type CatalogVappTemplateMapOutput struct{ *pulumi.OutputState }

func (CatalogVappTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogVappTemplate)(nil)).Elem()
}

func (o CatalogVappTemplateMapOutput) ToCatalogVappTemplateMapOutput() CatalogVappTemplateMapOutput {
	return o
}

func (o CatalogVappTemplateMapOutput) ToCatalogVappTemplateMapOutputWithContext(ctx context.Context) CatalogVappTemplateMapOutput {
	return o
}

func (o CatalogVappTemplateMapOutput) MapIndex(k pulumi.StringInput) CatalogVappTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogVappTemplate {
		return vs[0].(map[string]*CatalogVappTemplate)[vs[1].(string)]
	}).(CatalogVappTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogVappTemplateInput)(nil)).Elem(), &CatalogVappTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogVappTemplateArrayInput)(nil)).Elem(), CatalogVappTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogVappTemplateMapInput)(nil)).Elem(), CatalogVappTemplateMap{})
	pulumi.RegisterOutputType(CatalogVappTemplateOutput{})
	pulumi.RegisterOutputType(CatalogVappTemplateArrayOutput{})
	pulumi.RegisterOutputType(CatalogVappTemplateMapOutput{})
}
