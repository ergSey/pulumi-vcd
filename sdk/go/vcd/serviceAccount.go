// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAccount struct {
	pulumi.CustomResourceState

	// Status of the Service Account. Can be set to `false` and back to `true` if
	// the access token was lost to get a new one.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	AllowTokenFile pulumi.BoolPtrOutput `pulumi:"allowTokenFile"`
	// Required only when `active` is set to `true`. Contains the access token
	// that can be used for authenticating to VCD.
	FileName pulumi.StringPtrOutput `pulumi:"fileName"`
	// A unique name for the Service Account in an organisation.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Role ID of service account
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// UUID of the Service Account.
	SoftwareId pulumi.StringOutput `pulumi:"softwareId"`
	// Version of the service using the Service Account
	SoftwareVersion pulumi.StringPtrOutput `pulumi:"softwareVersion"`
	// URI of the service using the Service Account
	Uri pulumi.StringPtrOutput `pulumi:"uri"`
}

// NewServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewServiceAccount(ctx *pulumi.Context,
	name string, args *ServiceAccountArgs, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.SoftwareId == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccount
	err := ctx.RegisterResource("vcd:index/serviceAccount:ServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccount gets an existing ServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountState, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	var resource ServiceAccount
	err := ctx.ReadResource("vcd:index/serviceAccount:ServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccount resources.
type serviceAccountState struct {
	// Status of the Service Account. Can be set to `false` and back to `true` if
	// the access token was lost to get a new one.
	Active *bool `pulumi:"active"`
	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	AllowTokenFile *bool `pulumi:"allowTokenFile"`
	// Required only when `active` is set to `true`. Contains the access token
	// that can be used for authenticating to VCD.
	FileName *string `pulumi:"fileName"`
	// A unique name for the Service Account in an organisation.
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// Role ID of service account
	RoleId *string `pulumi:"roleId"`
	// UUID of the Service Account.
	SoftwareId *string `pulumi:"softwareId"`
	// Version of the service using the Service Account
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// URI of the service using the Service Account
	Uri *string `pulumi:"uri"`
}

type ServiceAccountState struct {
	// Status of the Service Account. Can be set to `false` and back to `true` if
	// the access token was lost to get a new one.
	Active pulumi.BoolPtrInput
	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	AllowTokenFile pulumi.BoolPtrInput
	// Required only when `active` is set to `true`. Contains the access token
	// that can be used for authenticating to VCD.
	FileName pulumi.StringPtrInput
	// A unique name for the Service Account in an organisation.
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// Role ID of service account
	RoleId pulumi.StringPtrInput
	// UUID of the Service Account.
	SoftwareId pulumi.StringPtrInput
	// Version of the service using the Service Account
	SoftwareVersion pulumi.StringPtrInput
	// URI of the service using the Service Account
	Uri pulumi.StringPtrInput
}

func (ServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountState)(nil)).Elem()
}

type serviceAccountArgs struct {
	// Status of the Service Account. Can be set to `false` and back to `true` if
	// the access token was lost to get a new one.
	Active *bool `pulumi:"active"`
	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	AllowTokenFile *bool `pulumi:"allowTokenFile"`
	// Required only when `active` is set to `true`. Contains the access token
	// that can be used for authenticating to VCD.
	FileName *string `pulumi:"fileName"`
	// A unique name for the Service Account in an organisation.
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// Role ID of service account
	RoleId string `pulumi:"roleId"`
	// UUID of the Service Account.
	SoftwareId string `pulumi:"softwareId"`
	// Version of the service using the Service Account
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// URI of the service using the Service Account
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a ServiceAccount resource.
type ServiceAccountArgs struct {
	// Status of the Service Account. Can be set to `false` and back to `true` if
	// the access token was lost to get a new one.
	Active pulumi.BoolPtrInput
	// If set to false, will output a warning about the service account file
	// containing sensitive information.
	AllowTokenFile pulumi.BoolPtrInput
	// Required only when `active` is set to `true`. Contains the access token
	// that can be used for authenticating to VCD.
	FileName pulumi.StringPtrInput
	// A unique name for the Service Account in an organisation.
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// Role ID of service account
	RoleId pulumi.StringInput
	// UUID of the Service Account.
	SoftwareId pulumi.StringInput
	// Version of the service using the Service Account
	SoftwareVersion pulumi.StringPtrInput
	// URI of the service using the Service Account
	Uri pulumi.StringPtrInput
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountArgs)(nil)).Elem()
}

type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput
}

func (*ServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (i *ServiceAccount) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i *ServiceAccount) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

// ServiceAccountArrayInput is an input type that accepts ServiceAccountArray and ServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountArrayInput` via:
//
//	ServiceAccountArray{ ServiceAccountArgs{...} }
type ServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountArrayOutput() ServiceAccountArrayOutput
	ToServiceAccountArrayOutputWithContext(context.Context) ServiceAccountArrayOutput
}

type ServiceAccountArray []ServiceAccountInput

func (ServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArray) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return i.ToServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountArray) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountArrayOutput)
}

// ServiceAccountMapInput is an input type that accepts ServiceAccountMap and ServiceAccountMapOutput values.
// You can construct a concrete instance of `ServiceAccountMapInput` via:
//
//	ServiceAccountMap{ "key": ServiceAccountArgs{...} }
type ServiceAccountMapInput interface {
	pulumi.Input

	ToServiceAccountMapOutput() ServiceAccountMapOutput
	ToServiceAccountMapOutputWithContext(context.Context) ServiceAccountMapOutput
}

type ServiceAccountMap map[string]ServiceAccountInput

func (ServiceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountMap) ToServiceAccountMapOutput() ServiceAccountMapOutput {
	return i.ToServiceAccountMapOutputWithContext(context.Background())
}

func (i ServiceAccountMap) ToServiceAccountMapOutputWithContext(ctx context.Context) ServiceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountMapOutput)
}

type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

// Status of the Service Account. Can be set to `false` and back to `true` if
// the access token was lost to get a new one.
func (o ServiceAccountOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// If set to false, will output a warning about the service account file
// containing sensitive information.
func (o ServiceAccountOutput) AllowTokenFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.BoolPtrOutput { return v.AllowTokenFile }).(pulumi.BoolPtrOutput)
}

// Required only when `active` is set to `true`. Contains the access token
// that can be used for authenticating to VCD.
func (o ServiceAccountOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.FileName }).(pulumi.StringPtrOutput)
}

// A unique name for the Service Account in an organisation.
func (o ServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o ServiceAccountOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Role ID of service account
func (o ServiceAccountOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// UUID of the Service Account.
func (o ServiceAccountOutput) SoftwareId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringOutput { return v.SoftwareId }).(pulumi.StringOutput)
}

// Version of the service using the Service Account
func (o ServiceAccountOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.SoftwareVersion }).(pulumi.StringPtrOutput)
}

// URI of the service using the Service Account
func (o ServiceAccountOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

type ServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAccount {
		return vs[0].([]*ServiceAccount)[vs[1].(int)]
	}).(ServiceAccountOutput)
}

type ServiceAccountMapOutput struct{ *pulumi.OutputState }

func (ServiceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountMapOutput) ToServiceAccountMapOutput() ServiceAccountMapOutput {
	return o
}

func (o ServiceAccountMapOutput) ToServiceAccountMapOutputWithContext(ctx context.Context) ServiceAccountMapOutput {
	return o
}

func (o ServiceAccountMapOutput) MapIndex(k pulumi.StringInput) ServiceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAccount {
		return vs[0].(map[string]*ServiceAccount)[vs[1].(string)]
	}).(ServiceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), &ServiceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountArrayInput)(nil)).Elem(), ServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountMapInput)(nil)).Elem(), ServiceAccountMap{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountMapOutput{})
}
