// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtEdgegateway struct {
	pulumi.CustomResourceState

	// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
	DedicateExternalNetwork pulumi.BoolPtrOutput `pulumi:"dedicateExternalNetwork"`
	// `ACTIVE_STANDBY` (default) or
	// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
	// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
	// nature guarantees high north-south data throughput.
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`
	// A unique name for the edge gateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specific Edge Cluster ID if required
	EdgeClusterId pulumi.StringOutput `pulumi:"edgeClusterId"`
	// Total allocated IP count in attached NSX-T Segment backed
	// external networks
	ExternalNetworkAllocatedIpCount pulumi.IntOutput `pulumi:"externalNetworkAllocatedIpCount"`
	// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
	// can be used to lookup ID by name.
	ExternalNetworkId pulumi.StringOutput `pulumi:"externalNetworkId"`
	// attaches NSX-T Segment backed External
	// Networks with a given configuration block. It *does not
	// support IP Spaces*.
	ExternalNetworks NsxtEdgegatewayExternalNetworkArrayOutput `pulumi:"externalNetworks"`
	// Sets a limit of IPs to count for
	// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
	// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
	// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
	// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
	// specify `0` for *unlimited* value.
	//
	// <a id="ip-allocation-modes"></a>
	IpCountReadLimit pulumi.IntPtrOutput `pulumi:"ipCountReadLimit"`
	// A unique name for the edge gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// Non-Distributed routing will allow
	// tenants the option of connecting Org Vdc networks to the Service
	// Router. This would
	// force all VM traffic through the service router for that network. Default `false`.
	NonDistributedRoutingEnabled pulumi.BoolOutput `pulumi:"nonDistributedRoutingEnabled"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The ID of VDC or VDC Group. **Note:** Data sources
	// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
	// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
	// name.
	//
	// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
	// definition at provider level.
	//
	// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
	// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
	// is to pick egress traffic origin for multi datacenter VDC Groups.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// Primary IP address exposed for an easy access without nesting.
	PrimaryIp pulumi.StringOutput `pulumi:"primaryIp"`
	// If `ownerId` is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
	StartingVdcId pulumi.StringPtrOutput `pulumi:"startingVdcId"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithIpCounts NsxtEdgegatewaySubnetWithIpCountArrayOutput `pulumi:"subnetWithIpCounts"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithTotalIpCounts NsxtEdgegatewaySubnetWithTotalIpCountArrayOutput `pulumi:"subnetWithTotalIpCounts"`
	// One or more subnets defined for Edge Gateway. One of
	// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
	// network is backed by *IP Spaces*. Read more in IP allocation modes section.
	Subnets NsxtEdgegatewaySubnetArrayOutput `pulumi:"subnets"`
	// Required with `subnetWithTotalIpCount`. It is
	// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
	// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
	TotalAllocatedIpCount pulumi.IntOutput `pulumi:"totalAllocatedIpCount"`
	// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UnusedIpCount pulumi.IntOutput `pulumi:"unusedIpCount"`
	// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
	UseIpSpaces pulumi.BoolOutput `pulumi:"useIpSpaces"`
	// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UsedIpCount pulumi.IntOutput `pulumi:"usedIpCount"`
	// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
	// gateway. Can be inherited from `provider` configuration if not defined here.
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtEdgegateway registers a new resource with the given unique name, arguments, and options.
func NewNsxtEdgegateway(ctx *pulumi.Context,
	name string, args *NsxtEdgegatewayArgs, opts ...pulumi.ResourceOption) (*NsxtEdgegateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtEdgegateway
	err := ctx.RegisterResource("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtEdgegateway gets an existing NsxtEdgegateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtEdgegateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtEdgegatewayState, opts ...pulumi.ResourceOption) (*NsxtEdgegateway, error) {
	var resource NsxtEdgegateway
	err := ctx.ReadResource("vcd:index/nsxtEdgegateway:NsxtEdgegateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtEdgegateway resources.
type nsxtEdgegatewayState struct {
	// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
	DedicateExternalNetwork *bool `pulumi:"dedicateExternalNetwork"`
	// `ACTIVE_STANDBY` (default) or
	// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
	// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
	// nature guarantees high north-south data throughput.
	DeploymentMode *string `pulumi:"deploymentMode"`
	// A unique name for the edge gateway.
	Description *string `pulumi:"description"`
	// Specific Edge Cluster ID if required
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// Total allocated IP count in attached NSX-T Segment backed
	// external networks
	ExternalNetworkAllocatedIpCount *int `pulumi:"externalNetworkAllocatedIpCount"`
	// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
	// can be used to lookup ID by name.
	ExternalNetworkId *string `pulumi:"externalNetworkId"`
	// attaches NSX-T Segment backed External
	// Networks with a given configuration block. It *does not
	// support IP Spaces*.
	ExternalNetworks []NsxtEdgegatewayExternalNetwork `pulumi:"externalNetworks"`
	// Sets a limit of IPs to count for
	// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
	// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
	// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
	// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
	// specify `0` for *unlimited* value.
	//
	// <a id="ip-allocation-modes"></a>
	IpCountReadLimit *int `pulumi:"ipCountReadLimit"`
	// A unique name for the edge gateway.
	Name *string `pulumi:"name"`
	// Non-Distributed routing will allow
	// tenants the option of connecting Org Vdc networks to the Service
	// Router. This would
	// force all VM traffic through the service router for that network. Default `false`.
	NonDistributedRoutingEnabled *bool `pulumi:"nonDistributedRoutingEnabled"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// The ID of VDC or VDC Group. **Note:** Data sources
	// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
	// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
	// name.
	//
	// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
	// definition at provider level.
	//
	// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
	// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
	// is to pick egress traffic origin for multi datacenter VDC Groups.
	OwnerId *string `pulumi:"ownerId"`
	// Primary IP address exposed for an easy access without nesting.
	PrimaryIp *string `pulumi:"primaryIp"`
	// If `ownerId` is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
	StartingVdcId *string `pulumi:"startingVdcId"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithIpCounts []NsxtEdgegatewaySubnetWithIpCount `pulumi:"subnetWithIpCounts"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithTotalIpCounts []NsxtEdgegatewaySubnetWithTotalIpCount `pulumi:"subnetWithTotalIpCounts"`
	// One or more subnets defined for Edge Gateway. One of
	// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
	// network is backed by *IP Spaces*. Read more in IP allocation modes section.
	Subnets []NsxtEdgegatewaySubnet `pulumi:"subnets"`
	// Required with `subnetWithTotalIpCount`. It is
	// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
	// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
	TotalAllocatedIpCount *int `pulumi:"totalAllocatedIpCount"`
	// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UnusedIpCount *int `pulumi:"unusedIpCount"`
	// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
	UseIpSpaces *bool `pulumi:"useIpSpaces"`
	// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UsedIpCount *int `pulumi:"usedIpCount"`
	// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
	// gateway. Can be inherited from `provider` configuration if not defined here.
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc *string `pulumi:"vdc"`
}

type NsxtEdgegatewayState struct {
	// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
	DedicateExternalNetwork pulumi.BoolPtrInput
	// `ACTIVE_STANDBY` (default) or
	// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
	// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
	// nature guarantees high north-south data throughput.
	DeploymentMode pulumi.StringPtrInput
	// A unique name for the edge gateway.
	Description pulumi.StringPtrInput
	// Specific Edge Cluster ID if required
	EdgeClusterId pulumi.StringPtrInput
	// Total allocated IP count in attached NSX-T Segment backed
	// external networks
	ExternalNetworkAllocatedIpCount pulumi.IntPtrInput
	// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
	// can be used to lookup ID by name.
	ExternalNetworkId pulumi.StringPtrInput
	// attaches NSX-T Segment backed External
	// Networks with a given configuration block. It *does not
	// support IP Spaces*.
	ExternalNetworks NsxtEdgegatewayExternalNetworkArrayInput
	// Sets a limit of IPs to count for
	// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
	// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
	// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
	// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
	// specify `0` for *unlimited* value.
	//
	// <a id="ip-allocation-modes"></a>
	IpCountReadLimit pulumi.IntPtrInput
	// A unique name for the edge gateway.
	Name pulumi.StringPtrInput
	// Non-Distributed routing will allow
	// tenants the option of connecting Org Vdc networks to the Service
	// Router. This would
	// force all VM traffic through the service router for that network. Default `false`.
	NonDistributedRoutingEnabled pulumi.BoolPtrInput
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// The ID of VDC or VDC Group. **Note:** Data sources
	// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
	// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
	// name.
	//
	// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
	// definition at provider level.
	//
	// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
	// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
	// is to pick egress traffic origin for multi datacenter VDC Groups.
	OwnerId pulumi.StringPtrInput
	// Primary IP address exposed for an easy access without nesting.
	PrimaryIp pulumi.StringPtrInput
	// If `ownerId` is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
	StartingVdcId pulumi.StringPtrInput
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithIpCounts NsxtEdgegatewaySubnetWithIpCountArrayInput
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithTotalIpCounts NsxtEdgegatewaySubnetWithTotalIpCountArrayInput
	// One or more subnets defined for Edge Gateway. One of
	// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
	// network is backed by *IP Spaces*. Read more in IP allocation modes section.
	Subnets NsxtEdgegatewaySubnetArrayInput
	// Required with `subnetWithTotalIpCount`. It is
	// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
	// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
	TotalAllocatedIpCount pulumi.IntPtrInput
	// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UnusedIpCount pulumi.IntPtrInput
	// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
	UseIpSpaces pulumi.BoolPtrInput
	// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
	// exposed when using IP Spaces.
	UsedIpCount pulumi.IntPtrInput
	// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
	// gateway. Can be inherited from `provider` configuration if not defined here.
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringPtrInput
}

func (NsxtEdgegatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayState)(nil)).Elem()
}

type nsxtEdgegatewayArgs struct {
	// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
	DedicateExternalNetwork *bool `pulumi:"dedicateExternalNetwork"`
	// `ACTIVE_STANDBY` (default) or
	// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
	// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
	// nature guarantees high north-south data throughput.
	DeploymentMode *string `pulumi:"deploymentMode"`
	// A unique name for the edge gateway.
	Description *string `pulumi:"description"`
	// Specific Edge Cluster ID if required
	EdgeClusterId *string `pulumi:"edgeClusterId"`
	// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
	// can be used to lookup ID by name.
	ExternalNetworkId string `pulumi:"externalNetworkId"`
	// attaches NSX-T Segment backed External
	// Networks with a given configuration block. It *does not
	// support IP Spaces*.
	ExternalNetworks []NsxtEdgegatewayExternalNetwork `pulumi:"externalNetworks"`
	// Sets a limit of IPs to count for
	// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
	// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
	// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
	// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
	// specify `0` for *unlimited* value.
	//
	// <a id="ip-allocation-modes"></a>
	IpCountReadLimit *int `pulumi:"ipCountReadLimit"`
	// A unique name for the edge gateway.
	Name *string `pulumi:"name"`
	// Non-Distributed routing will allow
	// tenants the option of connecting Org Vdc networks to the Service
	// Router. This would
	// force all VM traffic through the service router for that network. Default `false`.
	NonDistributedRoutingEnabled *bool `pulumi:"nonDistributedRoutingEnabled"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// The ID of VDC or VDC Group. **Note:** Data sources
	// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
	// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
	// name.
	//
	// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
	// definition at provider level.
	//
	// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
	// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
	// is to pick egress traffic origin for multi datacenter VDC Groups.
	OwnerId *string `pulumi:"ownerId"`
	// If `ownerId` is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
	StartingVdcId *string `pulumi:"startingVdcId"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithIpCounts []NsxtEdgegatewaySubnetWithIpCount `pulumi:"subnetWithIpCounts"`
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithTotalIpCounts []NsxtEdgegatewaySubnetWithTotalIpCount `pulumi:"subnetWithTotalIpCounts"`
	// One or more subnets defined for Edge Gateway. One of
	// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
	// network is backed by *IP Spaces*. Read more in IP allocation modes section.
	Subnets []NsxtEdgegatewaySubnet `pulumi:"subnets"`
	// Required with `subnetWithTotalIpCount`. It is
	// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
	// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
	TotalAllocatedIpCount *int `pulumi:"totalAllocatedIpCount"`
	// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
	// gateway. Can be inherited from `provider` configuration if not defined here.
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtEdgegateway resource.
type NsxtEdgegatewayArgs struct {
	// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
	DedicateExternalNetwork pulumi.BoolPtrInput
	// `ACTIVE_STANDBY` (default) or
	// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
	// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
	// nature guarantees high north-south data throughput.
	DeploymentMode pulumi.StringPtrInput
	// A unique name for the edge gateway.
	Description pulumi.StringPtrInput
	// Specific Edge Cluster ID if required
	EdgeClusterId pulumi.StringPtrInput
	// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
	// can be used to lookup ID by name.
	ExternalNetworkId pulumi.StringInput
	// attaches NSX-T Segment backed External
	// Networks with a given configuration block. It *does not
	// support IP Spaces*.
	ExternalNetworks NsxtEdgegatewayExternalNetworkArrayInput
	// Sets a limit of IPs to count for
	// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
	// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
	// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
	// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
	// specify `0` for *unlimited* value.
	//
	// <a id="ip-allocation-modes"></a>
	IpCountReadLimit pulumi.IntPtrInput
	// A unique name for the edge gateway.
	Name pulumi.StringPtrInput
	// Non-Distributed routing will allow
	// tenants the option of connecting Org Vdc networks to the Service
	// Router. This would
	// force all VM traffic through the service router for that network. Default `false`.
	NonDistributedRoutingEnabled pulumi.BoolPtrInput
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// The ID of VDC or VDC Group. **Note:** Data sources
	// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
	// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
	// name.
	//
	// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
	// definition at provider level.
	//
	// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
	// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
	// is to pick egress traffic origin for multi datacenter VDC Groups.
	OwnerId pulumi.StringPtrInput
	// If `ownerId` is a VDC Group, by default Edge
	// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
	// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
	// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
	StartingVdcId pulumi.StringPtrInput
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithIpCounts NsxtEdgegatewaySubnetWithIpCountArrayInput
	// One or more
	// subnets defined for Edge Gateway. One of `subnet`,
	// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
	// backed by *IP Spaces*. Read more in IP allocation modes section.
	SubnetWithTotalIpCounts NsxtEdgegatewaySubnetWithTotalIpCountArrayInput
	// One or more subnets defined for Edge Gateway. One of
	// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
	// network is backed by *IP Spaces*. Read more in IP allocation modes section.
	Subnets NsxtEdgegatewaySubnetArrayInput
	// Required with `subnetWithTotalIpCount`. It is
	// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
	// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
	TotalAllocatedIpCount pulumi.IntPtrInput
	// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
	// gateway. Can be inherited from `provider` configuration if not defined here.
	//
	// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
	Vdc pulumi.StringPtrInput
}

func (NsxtEdgegatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayArgs)(nil)).Elem()
}

type NsxtEdgegatewayInput interface {
	pulumi.Input

	ToNsxtEdgegatewayOutput() NsxtEdgegatewayOutput
	ToNsxtEdgegatewayOutputWithContext(ctx context.Context) NsxtEdgegatewayOutput
}

func (*NsxtEdgegateway) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegateway)(nil)).Elem()
}

func (i *NsxtEdgegateway) ToNsxtEdgegatewayOutput() NsxtEdgegatewayOutput {
	return i.ToNsxtEdgegatewayOutputWithContext(context.Background())
}

func (i *NsxtEdgegateway) ToNsxtEdgegatewayOutputWithContext(ctx context.Context) NsxtEdgegatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayOutput)
}

// NsxtEdgegatewayArrayInput is an input type that accepts NsxtEdgegatewayArray and NsxtEdgegatewayArrayOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayArrayInput` via:
//
//	NsxtEdgegatewayArray{ NsxtEdgegatewayArgs{...} }
type NsxtEdgegatewayArrayInput interface {
	pulumi.Input

	ToNsxtEdgegatewayArrayOutput() NsxtEdgegatewayArrayOutput
	ToNsxtEdgegatewayArrayOutputWithContext(context.Context) NsxtEdgegatewayArrayOutput
}

type NsxtEdgegatewayArray []NsxtEdgegatewayInput

func (NsxtEdgegatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegateway)(nil)).Elem()
}

func (i NsxtEdgegatewayArray) ToNsxtEdgegatewayArrayOutput() NsxtEdgegatewayArrayOutput {
	return i.ToNsxtEdgegatewayArrayOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayArray) ToNsxtEdgegatewayArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayArrayOutput)
}

// NsxtEdgegatewayMapInput is an input type that accepts NsxtEdgegatewayMap and NsxtEdgegatewayMapOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayMapInput` via:
//
//	NsxtEdgegatewayMap{ "key": NsxtEdgegatewayArgs{...} }
type NsxtEdgegatewayMapInput interface {
	pulumi.Input

	ToNsxtEdgegatewayMapOutput() NsxtEdgegatewayMapOutput
	ToNsxtEdgegatewayMapOutputWithContext(context.Context) NsxtEdgegatewayMapOutput
}

type NsxtEdgegatewayMap map[string]NsxtEdgegatewayInput

func (NsxtEdgegatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegateway)(nil)).Elem()
}

func (i NsxtEdgegatewayMap) ToNsxtEdgegatewayMapOutput() NsxtEdgegatewayMapOutput {
	return i.ToNsxtEdgegatewayMapOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayMap) ToNsxtEdgegatewayMapOutputWithContext(ctx context.Context) NsxtEdgegatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayMapOutput)
}

type NsxtEdgegatewayOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegateway)(nil)).Elem()
}

func (o NsxtEdgegatewayOutput) ToNsxtEdgegatewayOutput() NsxtEdgegatewayOutput {
	return o
}

func (o NsxtEdgegatewayOutput) ToNsxtEdgegatewayOutputWithContext(ctx context.Context) NsxtEdgegatewayOutput {
	return o
}

// Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
func (o NsxtEdgegatewayOutput) DedicateExternalNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.BoolPtrOutput { return v.DedicateExternalNetwork }).(pulumi.BoolPtrOutput)
}

// `ACTIVE_STANDBY` (default) or
// `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
// router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
// nature guarantees high north-south data throughput.
func (o NsxtEdgegatewayOutput) DeploymentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.DeploymentMode }).(pulumi.StringOutput)
}

// A unique name for the edge gateway.
func (o NsxtEdgegatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specific Edge Cluster ID if required
func (o NsxtEdgegatewayOutput) EdgeClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.EdgeClusterId }).(pulumi.StringOutput)
}

// Total allocated IP count in attached NSX-T Segment backed
// external networks
func (o NsxtEdgegatewayOutput) ExternalNetworkAllocatedIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.IntOutput { return v.ExternalNetworkAllocatedIpCount }).(pulumi.IntOutput)
}

// An external network ID. **Note:** Data source [ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
// can be used to lookup ID by name.
func (o NsxtEdgegatewayOutput) ExternalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.ExternalNetworkId }).(pulumi.StringOutput)
}

// attaches NSX-T Segment backed External
// Networks with a given configuration block. It *does not
// support IP Spaces*.
func (o NsxtEdgegatewayOutput) ExternalNetworks() NsxtEdgegatewayExternalNetworkArrayOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) NsxtEdgegatewayExternalNetworkArrayOutput { return v.ExternalNetworks }).(NsxtEdgegatewayExternalNetworkArrayOutput)
}

// Sets a limit of IPs to count for
// `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
// counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
// only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
// data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
// specify `0` for *unlimited* value.
//
// <a id="ip-allocation-modes"></a>
func (o NsxtEdgegatewayOutput) IpCountReadLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.IntPtrOutput { return v.IpCountReadLimit }).(pulumi.IntPtrOutput)
}

// A unique name for the edge gateway.
func (o NsxtEdgegatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Non-Distributed routing will allow
// tenants the option of connecting Org Vdc networks to the Service
// Router. This would
// force all VM traffic through the service router for that network. Default `false`.
func (o NsxtEdgegatewayOutput) NonDistributedRoutingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.BoolOutput { return v.NonDistributedRoutingEnabled }).(pulumi.BoolOutput)
}

// The name of organization to which the VDC belongs. Optional if defined at provider level.
func (o NsxtEdgegatewayOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The ID of VDC or VDC Group. **Note:** Data sources
// [VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
// [OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
// name.
//
// > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
// definition at provider level.
//
// > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
// (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
// is to pick egress traffic origin for multi datacenter VDC Groups.
func (o NsxtEdgegatewayOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// Primary IP address exposed for an easy access without nesting.
func (o NsxtEdgegatewayOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

// If `ownerId` is a VDC Group, by default Edge
// Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
// to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
// Group) **Note:** It can only be used when `ownerId` is a VDC Group.
func (o NsxtEdgegatewayOutput) StartingVdcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringPtrOutput { return v.StartingVdcId }).(pulumi.StringPtrOutput)
}

// One or more
// subnets defined for Edge Gateway. One of `subnet`,
// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
// backed by *IP Spaces*. Read more in IP allocation modes section.
func (o NsxtEdgegatewayOutput) SubnetWithIpCounts() NsxtEdgegatewaySubnetWithIpCountArrayOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) NsxtEdgegatewaySubnetWithIpCountArrayOutput { return v.SubnetWithIpCounts }).(NsxtEdgegatewaySubnetWithIpCountArrayOutput)
}

// One or more
// subnets defined for Edge Gateway. One of `subnet`,
// `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
// backed by *IP Spaces*. Read more in IP allocation modes section.
func (o NsxtEdgegatewayOutput) SubnetWithTotalIpCounts() NsxtEdgegatewaySubnetWithTotalIpCountArrayOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) NsxtEdgegatewaySubnetWithTotalIpCountArrayOutput {
		return v.SubnetWithTotalIpCounts
	}).(NsxtEdgegatewaySubnetWithTotalIpCountArrayOutput)
}

// One or more subnets defined for Edge Gateway. One of
// `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
// network is backed by *IP Spaces*. Read more in IP allocation modes section.
func (o NsxtEdgegatewayOutput) Subnets() NsxtEdgegatewaySubnetArrayOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) NsxtEdgegatewaySubnetArrayOutput { return v.Subnets }).(NsxtEdgegatewaySubnetArrayOutput)
}

// Required with `subnetWithTotalIpCount`. It is
// **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
// **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
func (o NsxtEdgegatewayOutput) TotalAllocatedIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.IntOutput { return v.TotalAllocatedIpCount }).(pulumi.IntOutput)
}

// Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
// exposed when using IP Spaces.
func (o NsxtEdgegatewayOutput) UnusedIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.IntOutput { return v.UnusedIpCount }).(pulumi.IntOutput)
}

// Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
func (o NsxtEdgegatewayOutput) UseIpSpaces() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.BoolOutput { return v.UseIpSpaces }).(pulumi.BoolOutput)
}

// Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
// exposed when using IP Spaces.
func (o NsxtEdgegatewayOutput) UsedIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.IntOutput { return v.UsedIpCount }).(pulumi.IntOutput)
}

// **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
// gateway. Can be inherited from `provider` configuration if not defined here.
//
// Deprecated: This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
func (o NsxtEdgegatewayOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegateway) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtEdgegatewayArrayOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegateway)(nil)).Elem()
}

func (o NsxtEdgegatewayArrayOutput) ToNsxtEdgegatewayArrayOutput() NsxtEdgegatewayArrayOutput {
	return o
}

func (o NsxtEdgegatewayArrayOutput) ToNsxtEdgegatewayArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayArrayOutput {
	return o
}

func (o NsxtEdgegatewayArrayOutput) Index(i pulumi.IntInput) NsxtEdgegatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtEdgegateway {
		return vs[0].([]*NsxtEdgegateway)[vs[1].(int)]
	}).(NsxtEdgegatewayOutput)
}

type NsxtEdgegatewayMapOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegateway)(nil)).Elem()
}

func (o NsxtEdgegatewayMapOutput) ToNsxtEdgegatewayMapOutput() NsxtEdgegatewayMapOutput {
	return o
}

func (o NsxtEdgegatewayMapOutput) ToNsxtEdgegatewayMapOutputWithContext(ctx context.Context) NsxtEdgegatewayMapOutput {
	return o
}

func (o NsxtEdgegatewayMapOutput) MapIndex(k pulumi.StringInput) NsxtEdgegatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtEdgegateway {
		return vs[0].(map[string]*NsxtEdgegateway)[vs[1].(string)]
	}).(NsxtEdgegatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayInput)(nil)).Elem(), &NsxtEdgegateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayArrayInput)(nil)).Elem(), NsxtEdgegatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayMapInput)(nil)).Elem(), NsxtEdgegatewayMap{})
	pulumi.RegisterOutputType(NsxtEdgegatewayOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayArrayOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayMapOutput{})
}
