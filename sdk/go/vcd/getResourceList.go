// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetResourceList(ctx *pulumi.Context, args *GetResourceListArgs, opts ...pulumi.InvokeOption) (*GetResourceListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetResourceListResult
	err := ctx.Invoke("vcd:index/getResourceList:getResourceList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourceList.
type GetResourceListArgs struct {
	// Name of the file containing the import block. (Requires `listMode = "import"`).
	// See [Importing resources][import-resources] for more information on importing.
	ImportFileName *string `pulumi:"importFileName"`
	// How the list should be built. One of:
	ListMode *string `pulumi:"listMode"`
	// An unique name to identify the data source
	Name string `pulumi:"name"`
	// A string separating name and ID in the list. Default is "  " (two spaces)
	NameIdSeparator *string `pulumi:"nameIdSeparator"`
	// If set, will restrict the list of resources to the ones whose name matches the given regular expression.
	NameRegex *string `pulumi:"nameRegex"`
	// The name of organization to use, optional if defined at provider level
	Org *string `pulumi:"org"`
	// The resource parent, such as vApp, catalog, or edge gateway name, when needed.
	Parent *string `pulumi:"parent"`
	// Which resource we want to list. Supported keywords are:
	ResourceType string `pulumi:"resourceType"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getResourceList.
type GetResourceListResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id             string  `pulumi:"id"`
	ImportFileName *string `pulumi:"importFileName"`
	ListMode       *string `pulumi:"listMode"`
	// (Computed) The list of requested resources in the chosen format.
	Lists           []string `pulumi:"lists"`
	Name            string   `pulumi:"name"`
	NameIdSeparator *string  `pulumi:"nameIdSeparator"`
	NameRegex       *string  `pulumi:"nameRegex"`
	Org             *string  `pulumi:"org"`
	Parent          *string  `pulumi:"parent"`
	ResourceType    string   `pulumi:"resourceType"`
	Vdc             *string  `pulumi:"vdc"`
}

func GetResourceListOutput(ctx *pulumi.Context, args GetResourceListOutputArgs, opts ...pulumi.InvokeOption) GetResourceListResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetResourceListResultOutput, error) {
			args := v.(GetResourceListArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getResourceList:getResourceList", args, GetResourceListResultOutput{}, options).(GetResourceListResultOutput), nil
		}).(GetResourceListResultOutput)
}

// A collection of arguments for invoking getResourceList.
type GetResourceListOutputArgs struct {
	// Name of the file containing the import block. (Requires `listMode = "import"`).
	// See [Importing resources][import-resources] for more information on importing.
	ImportFileName pulumi.StringPtrInput `pulumi:"importFileName"`
	// How the list should be built. One of:
	ListMode pulumi.StringPtrInput `pulumi:"listMode"`
	// An unique name to identify the data source
	Name pulumi.StringInput `pulumi:"name"`
	// A string separating name and ID in the list. Default is "  " (two spaces)
	NameIdSeparator pulumi.StringPtrInput `pulumi:"nameIdSeparator"`
	// If set, will restrict the list of resources to the ones whose name matches the given regular expression.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The name of organization to use, optional if defined at provider level
	Org pulumi.StringPtrInput `pulumi:"org"`
	// The resource parent, such as vApp, catalog, or edge gateway name, when needed.
	Parent pulumi.StringPtrInput `pulumi:"parent"`
	// Which resource we want to list. Supported keywords are:
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (GetResourceListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceListArgs)(nil)).Elem()
}

// A collection of values returned by getResourceList.
type GetResourceListResultOutput struct{ *pulumi.OutputState }

func (GetResourceListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceListResult)(nil)).Elem()
}

func (o GetResourceListResultOutput) ToGetResourceListResultOutput() GetResourceListResultOutput {
	return o
}

func (o GetResourceListResultOutput) ToGetResourceListResultOutputWithContext(ctx context.Context) GetResourceListResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetResourceListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceListResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetResourceListResultOutput) ImportFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.ImportFileName }).(pulumi.StringPtrOutput)
}

func (o GetResourceListResultOutput) ListMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.ListMode }).(pulumi.StringPtrOutput)
}

// (Computed) The list of requested resources in the chosen format.
func (o GetResourceListResultOutput) Lists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResourceListResult) []string { return v.Lists }).(pulumi.StringArrayOutput)
}

func (o GetResourceListResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceListResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResourceListResultOutput) NameIdSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.NameIdSeparator }).(pulumi.StringPtrOutput)
}

func (o GetResourceListResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetResourceListResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o GetResourceListResultOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.Parent }).(pulumi.StringPtrOutput)
}

func (o GetResourceListResultOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceListResult) string { return v.ResourceType }).(pulumi.StringOutput)
}

func (o GetResourceListResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceListResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetResourceListResultOutput{})
}
