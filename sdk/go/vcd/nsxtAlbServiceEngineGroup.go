// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtAlbServiceEngineGroup struct {
	pulumi.CustomResourceState

	// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
	// source
	AlbCloudId pulumi.StringOutput `pulumi:"albCloudId"`
	// Number of deployed virtual services
	DeployedVirtualServices pulumi.IntOutput `pulumi:"deployedVirtualServices"`
	// An optional description ALB Service Engine Group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// defines High Availability Mode for Service Engine Group. One off:
	// * ELASTIC_N_PLUS_M_BUFFER - Service Engines will scale out to N active nodes with M nodes as buffer.
	// * ELASTIC_ACTIVE_ACTIVE - Active-Active with scale out.
	// * LEGACY_ACTIVE_STANDBY - Traditional single Active-Standby configuration
	HaMode pulumi.StringOutput `pulumi:"haMode"`
	// Name of available Service Engine Group in ALB
	ImportableServiceEngineGroupName pulumi.StringOutput `pulumi:"importableServiceEngineGroupName"`
	// Maximum number of virtual services this ALB Service Engine Group can run
	MaxVirtualServices pulumi.IntOutput `pulumi:"maxVirtualServices"`
	// A name for ALB Service Engine Group
	Name pulumi.StringOutput `pulumi:"name"`
	// Boolean value stating if there are more deployed virtual services than allocated ones
	Overallocated pulumi.BoolPtrOutput `pulumi:"overallocated"`
	// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
	ReservationModel pulumi.StringOutput `pulumi:"reservationModel"`
	// Number of reserved virtual services
	ReservedVirtualServices pulumi.IntOutput `pulumi:"reservedVirtualServices"`
	// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
	//
	// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
	SupportedFeatureSet pulumi.StringOutput `pulumi:"supportedFeatureSet"`
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh pulumi.BoolPtrOutput `pulumi:"syncOnRefresh"`
}

// NewNsxtAlbServiceEngineGroup registers a new resource with the given unique name, arguments, and options.
func NewNsxtAlbServiceEngineGroup(ctx *pulumi.Context,
	name string, args *NsxtAlbServiceEngineGroupArgs, opts ...pulumi.ResourceOption) (*NsxtAlbServiceEngineGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlbCloudId == nil {
		return nil, errors.New("invalid value for required argument 'AlbCloudId'")
	}
	if args.ImportableServiceEngineGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ImportableServiceEngineGroupName'")
	}
	if args.ReservationModel == nil {
		return nil, errors.New("invalid value for required argument 'ReservationModel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtAlbServiceEngineGroup
	err := ctx.RegisterResource("vcd:index/nsxtAlbServiceEngineGroup:NsxtAlbServiceEngineGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtAlbServiceEngineGroup gets an existing NsxtAlbServiceEngineGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtAlbServiceEngineGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtAlbServiceEngineGroupState, opts ...pulumi.ResourceOption) (*NsxtAlbServiceEngineGroup, error) {
	var resource NsxtAlbServiceEngineGroup
	err := ctx.ReadResource("vcd:index/nsxtAlbServiceEngineGroup:NsxtAlbServiceEngineGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtAlbServiceEngineGroup resources.
type nsxtAlbServiceEngineGroupState struct {
	// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
	// source
	AlbCloudId *string `pulumi:"albCloudId"`
	// Number of deployed virtual services
	DeployedVirtualServices *int `pulumi:"deployedVirtualServices"`
	// An optional description ALB Service Engine Group
	Description *string `pulumi:"description"`
	// defines High Availability Mode for Service Engine Group. One off:
	// * ELASTIC_N_PLUS_M_BUFFER - Service Engines will scale out to N active nodes with M nodes as buffer.
	// * ELASTIC_ACTIVE_ACTIVE - Active-Active with scale out.
	// * LEGACY_ACTIVE_STANDBY - Traditional single Active-Standby configuration
	HaMode *string `pulumi:"haMode"`
	// Name of available Service Engine Group in ALB
	ImportableServiceEngineGroupName *string `pulumi:"importableServiceEngineGroupName"`
	// Maximum number of virtual services this ALB Service Engine Group can run
	MaxVirtualServices *int `pulumi:"maxVirtualServices"`
	// A name for ALB Service Engine Group
	Name *string `pulumi:"name"`
	// Boolean value stating if there are more deployed virtual services than allocated ones
	Overallocated *bool `pulumi:"overallocated"`
	// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
	ReservationModel *string `pulumi:"reservationModel"`
	// Number of reserved virtual services
	ReservedVirtualServices *int `pulumi:"reservedVirtualServices"`
	// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
	//
	// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
	SupportedFeatureSet *string `pulumi:"supportedFeatureSet"`
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh *bool `pulumi:"syncOnRefresh"`
}

type NsxtAlbServiceEngineGroupState struct {
	// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
	// source
	AlbCloudId pulumi.StringPtrInput
	// Number of deployed virtual services
	DeployedVirtualServices pulumi.IntPtrInput
	// An optional description ALB Service Engine Group
	Description pulumi.StringPtrInput
	// defines High Availability Mode for Service Engine Group. One off:
	// * ELASTIC_N_PLUS_M_BUFFER - Service Engines will scale out to N active nodes with M nodes as buffer.
	// * ELASTIC_ACTIVE_ACTIVE - Active-Active with scale out.
	// * LEGACY_ACTIVE_STANDBY - Traditional single Active-Standby configuration
	HaMode pulumi.StringPtrInput
	// Name of available Service Engine Group in ALB
	ImportableServiceEngineGroupName pulumi.StringPtrInput
	// Maximum number of virtual services this ALB Service Engine Group can run
	MaxVirtualServices pulumi.IntPtrInput
	// A name for ALB Service Engine Group
	Name pulumi.StringPtrInput
	// Boolean value stating if there are more deployed virtual services than allocated ones
	Overallocated pulumi.BoolPtrInput
	// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
	ReservationModel pulumi.StringPtrInput
	// Number of reserved virtual services
	ReservedVirtualServices pulumi.IntPtrInput
	// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
	//
	// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
	SupportedFeatureSet pulumi.StringPtrInput
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh pulumi.BoolPtrInput
}

func (NsxtAlbServiceEngineGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbServiceEngineGroupState)(nil)).Elem()
}

type nsxtAlbServiceEngineGroupArgs struct {
	// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
	// source
	AlbCloudId string `pulumi:"albCloudId"`
	// An optional description ALB Service Engine Group
	Description *string `pulumi:"description"`
	// Name of available Service Engine Group in ALB
	ImportableServiceEngineGroupName string `pulumi:"importableServiceEngineGroupName"`
	// A name for ALB Service Engine Group
	Name *string `pulumi:"name"`
	// Boolean value stating if there are more deployed virtual services than allocated ones
	Overallocated *bool `pulumi:"overallocated"`
	// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
	ReservationModel string `pulumi:"reservationModel"`
	// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
	//
	// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
	SupportedFeatureSet *string `pulumi:"supportedFeatureSet"`
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh *bool `pulumi:"syncOnRefresh"`
}

// The set of arguments for constructing a NsxtAlbServiceEngineGroup resource.
type NsxtAlbServiceEngineGroupArgs struct {
	// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
	// source
	AlbCloudId pulumi.StringInput
	// An optional description ALB Service Engine Group
	Description pulumi.StringPtrInput
	// Name of available Service Engine Group in ALB
	ImportableServiceEngineGroupName pulumi.StringInput
	// A name for ALB Service Engine Group
	Name pulumi.StringPtrInput
	// Boolean value stating if there are more deployed virtual services than allocated ones
	Overallocated pulumi.BoolPtrInput
	// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
	ReservationModel pulumi.StringInput
	// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
	//
	// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
	SupportedFeatureSet pulumi.StringPtrInput
	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh pulumi.BoolPtrInput
}

func (NsxtAlbServiceEngineGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbServiceEngineGroupArgs)(nil)).Elem()
}

type NsxtAlbServiceEngineGroupInput interface {
	pulumi.Input

	ToNsxtAlbServiceEngineGroupOutput() NsxtAlbServiceEngineGroupOutput
	ToNsxtAlbServiceEngineGroupOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupOutput
}

func (*NsxtAlbServiceEngineGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (i *NsxtAlbServiceEngineGroup) ToNsxtAlbServiceEngineGroupOutput() NsxtAlbServiceEngineGroupOutput {
	return i.ToNsxtAlbServiceEngineGroupOutputWithContext(context.Background())
}

func (i *NsxtAlbServiceEngineGroup) ToNsxtAlbServiceEngineGroupOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbServiceEngineGroupOutput)
}

// NsxtAlbServiceEngineGroupArrayInput is an input type that accepts NsxtAlbServiceEngineGroupArray and NsxtAlbServiceEngineGroupArrayOutput values.
// You can construct a concrete instance of `NsxtAlbServiceEngineGroupArrayInput` via:
//
//	NsxtAlbServiceEngineGroupArray{ NsxtAlbServiceEngineGroupArgs{...} }
type NsxtAlbServiceEngineGroupArrayInput interface {
	pulumi.Input

	ToNsxtAlbServiceEngineGroupArrayOutput() NsxtAlbServiceEngineGroupArrayOutput
	ToNsxtAlbServiceEngineGroupArrayOutputWithContext(context.Context) NsxtAlbServiceEngineGroupArrayOutput
}

type NsxtAlbServiceEngineGroupArray []NsxtAlbServiceEngineGroupInput

func (NsxtAlbServiceEngineGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (i NsxtAlbServiceEngineGroupArray) ToNsxtAlbServiceEngineGroupArrayOutput() NsxtAlbServiceEngineGroupArrayOutput {
	return i.ToNsxtAlbServiceEngineGroupArrayOutputWithContext(context.Background())
}

func (i NsxtAlbServiceEngineGroupArray) ToNsxtAlbServiceEngineGroupArrayOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbServiceEngineGroupArrayOutput)
}

// NsxtAlbServiceEngineGroupMapInput is an input type that accepts NsxtAlbServiceEngineGroupMap and NsxtAlbServiceEngineGroupMapOutput values.
// You can construct a concrete instance of `NsxtAlbServiceEngineGroupMapInput` via:
//
//	NsxtAlbServiceEngineGroupMap{ "key": NsxtAlbServiceEngineGroupArgs{...} }
type NsxtAlbServiceEngineGroupMapInput interface {
	pulumi.Input

	ToNsxtAlbServiceEngineGroupMapOutput() NsxtAlbServiceEngineGroupMapOutput
	ToNsxtAlbServiceEngineGroupMapOutputWithContext(context.Context) NsxtAlbServiceEngineGroupMapOutput
}

type NsxtAlbServiceEngineGroupMap map[string]NsxtAlbServiceEngineGroupInput

func (NsxtAlbServiceEngineGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (i NsxtAlbServiceEngineGroupMap) ToNsxtAlbServiceEngineGroupMapOutput() NsxtAlbServiceEngineGroupMapOutput {
	return i.ToNsxtAlbServiceEngineGroupMapOutputWithContext(context.Background())
}

func (i NsxtAlbServiceEngineGroupMap) ToNsxtAlbServiceEngineGroupMapOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbServiceEngineGroupMapOutput)
}

type NsxtAlbServiceEngineGroupOutput struct{ *pulumi.OutputState }

func (NsxtAlbServiceEngineGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (o NsxtAlbServiceEngineGroupOutput) ToNsxtAlbServiceEngineGroupOutput() NsxtAlbServiceEngineGroupOutput {
	return o
}

func (o NsxtAlbServiceEngineGroupOutput) ToNsxtAlbServiceEngineGroupOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupOutput {
	return o
}

// A reference ALB Cloud. Can be looked up using `NsxtAlbCloud` resource or data
// source
func (o NsxtAlbServiceEngineGroupOutput) AlbCloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.AlbCloudId }).(pulumi.StringOutput)
}

// Number of deployed virtual services
func (o NsxtAlbServiceEngineGroupOutput) DeployedVirtualServices() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.IntOutput { return v.DeployedVirtualServices }).(pulumi.IntOutput)
}

// An optional description ALB Service Engine Group
func (o NsxtAlbServiceEngineGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// defines High Availability Mode for Service Engine Group. One off:
// * ELASTIC_N_PLUS_M_BUFFER - Service Engines will scale out to N active nodes with M nodes as buffer.
// * ELASTIC_ACTIVE_ACTIVE - Active-Active with scale out.
// * LEGACY_ACTIVE_STANDBY - Traditional single Active-Standby configuration
func (o NsxtAlbServiceEngineGroupOutput) HaMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.HaMode }).(pulumi.StringOutput)
}

// Name of available Service Engine Group in ALB
func (o NsxtAlbServiceEngineGroupOutput) ImportableServiceEngineGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.ImportableServiceEngineGroupName }).(pulumi.StringOutput)
}

// Maximum number of virtual services this ALB Service Engine Group can run
func (o NsxtAlbServiceEngineGroupOutput) MaxVirtualServices() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.IntOutput { return v.MaxVirtualServices }).(pulumi.IntOutput)
}

// A name for ALB Service Engine Group
func (o NsxtAlbServiceEngineGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Boolean value stating if there are more deployed virtual services than allocated ones
func (o NsxtAlbServiceEngineGroupOutput) Overallocated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.BoolPtrOutput { return v.Overallocated }).(pulumi.BoolPtrOutput)
}

// Definition if the Service Engine Group is `DEDICATED` or `SHARED`
func (o NsxtAlbServiceEngineGroupOutput) ReservationModel() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.ReservationModel }).(pulumi.StringOutput)
}

// Number of reserved virtual services
func (o NsxtAlbServiceEngineGroupOutput) ReservedVirtualServices() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.IntOutput { return v.ReservedVirtualServices }).(pulumi.IntOutput)
}

// Feature set of this ALB Service Engine Group (`STANDARD` or `PREMIUM`)
//
// > The attribute `supportedFeatureSet` must not be used in VCD versions lower than 10.4. Starting with 10.4, it replaces `licenseType` field in [nsxtAlbController](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_alb_controller).
func (o NsxtAlbServiceEngineGroupOutput) SupportedFeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.StringOutput { return v.SupportedFeatureSet }).(pulumi.StringOutput)
}

// Boolean value that shows if sync should be performed on every refresh
func (o NsxtAlbServiceEngineGroupOutput) SyncOnRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbServiceEngineGroup) pulumi.BoolPtrOutput { return v.SyncOnRefresh }).(pulumi.BoolPtrOutput)
}

type NsxtAlbServiceEngineGroupArrayOutput struct{ *pulumi.OutputState }

func (NsxtAlbServiceEngineGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (o NsxtAlbServiceEngineGroupArrayOutput) ToNsxtAlbServiceEngineGroupArrayOutput() NsxtAlbServiceEngineGroupArrayOutput {
	return o
}

func (o NsxtAlbServiceEngineGroupArrayOutput) ToNsxtAlbServiceEngineGroupArrayOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupArrayOutput {
	return o
}

func (o NsxtAlbServiceEngineGroupArrayOutput) Index(i pulumi.IntInput) NsxtAlbServiceEngineGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtAlbServiceEngineGroup {
		return vs[0].([]*NsxtAlbServiceEngineGroup)[vs[1].(int)]
	}).(NsxtAlbServiceEngineGroupOutput)
}

type NsxtAlbServiceEngineGroupMapOutput struct{ *pulumi.OutputState }

func (NsxtAlbServiceEngineGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbServiceEngineGroup)(nil)).Elem()
}

func (o NsxtAlbServiceEngineGroupMapOutput) ToNsxtAlbServiceEngineGroupMapOutput() NsxtAlbServiceEngineGroupMapOutput {
	return o
}

func (o NsxtAlbServiceEngineGroupMapOutput) ToNsxtAlbServiceEngineGroupMapOutputWithContext(ctx context.Context) NsxtAlbServiceEngineGroupMapOutput {
	return o
}

func (o NsxtAlbServiceEngineGroupMapOutput) MapIndex(k pulumi.StringInput) NsxtAlbServiceEngineGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtAlbServiceEngineGroup {
		return vs[0].(map[string]*NsxtAlbServiceEngineGroup)[vs[1].(string)]
	}).(NsxtAlbServiceEngineGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbServiceEngineGroupInput)(nil)).Elem(), &NsxtAlbServiceEngineGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbServiceEngineGroupArrayInput)(nil)).Elem(), NsxtAlbServiceEngineGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbServiceEngineGroupMapInput)(nil)).Elem(), NsxtAlbServiceEngineGroupMap{})
	pulumi.RegisterOutputType(NsxtAlbServiceEngineGroupOutput{})
	pulumi.RegisterOutputType(NsxtAlbServiceEngineGroupArrayOutput{})
	pulumi.RegisterOutputType(NsxtAlbServiceEngineGroupMapOutput{})
}
