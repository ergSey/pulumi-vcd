// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdeInterfaceBehavior struct {
	pulumi.CustomResourceState

	// Useful to update execution properties marked with `_secure_` and `_internal_`
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties pulumi.BoolPtrOutput `pulumi:"alwaysUpdateSecureExecutionProperties"`
	// A description specifying the contract of the Behavior
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
	// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
	Execution pulumi.StringMapOutput `pulumi:"execution"`
	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
	// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
	// One of `executionJson` or `execution` must be set.
	ExecutionJson pulumi.StringOutput `pulumi:"executionJson"`
	// Name of the Behavior
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceId pulumi.StringOutput `pulumi:"rdeInterfaceId"`
	// The Behavior invocation reference to be used for polymorphic behavior invocations
	Ref pulumi.StringOutput `pulumi:"ref"`
}

// NewRdeInterfaceBehavior registers a new resource with the given unique name, arguments, and options.
func NewRdeInterfaceBehavior(ctx *pulumi.Context,
	name string, args *RdeInterfaceBehaviorArgs, opts ...pulumi.ResourceOption) (*RdeInterfaceBehavior, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RdeInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'RdeInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdeInterfaceBehavior
	err := ctx.RegisterResource("vcd:index/rdeInterfaceBehavior:RdeInterfaceBehavior", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdeInterfaceBehavior gets an existing RdeInterfaceBehavior resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdeInterfaceBehavior(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdeInterfaceBehaviorState, opts ...pulumi.ResourceOption) (*RdeInterfaceBehavior, error) {
	var resource RdeInterfaceBehavior
	err := ctx.ReadResource("vcd:index/rdeInterfaceBehavior:RdeInterfaceBehavior", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdeInterfaceBehavior resources.
type rdeInterfaceBehaviorState struct {
	// Useful to update execution properties marked with `_secure_` and `_internal_`
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties *bool `pulumi:"alwaysUpdateSecureExecutionProperties"`
	// A description specifying the contract of the Behavior
	Description *string `pulumi:"description"`
	// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
	// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
	Execution map[string]string `pulumi:"execution"`
	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
	// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
	// One of `executionJson` or `execution` must be set.
	ExecutionJson *string `pulumi:"executionJson"`
	// Name of the Behavior
	Name *string `pulumi:"name"`
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceId *string `pulumi:"rdeInterfaceId"`
	// The Behavior invocation reference to be used for polymorphic behavior invocations
	Ref *string `pulumi:"ref"`
}

type RdeInterfaceBehaviorState struct {
	// Useful to update execution properties marked with `_secure_` and `_internal_`
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties pulumi.BoolPtrInput
	// A description specifying the contract of the Behavior
	Description pulumi.StringPtrInput
	// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
	// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
	Execution pulumi.StringMapInput
	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
	// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
	// One of `executionJson` or `execution` must be set.
	ExecutionJson pulumi.StringPtrInput
	// Name of the Behavior
	Name pulumi.StringPtrInput
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceId pulumi.StringPtrInput
	// The Behavior invocation reference to be used for polymorphic behavior invocations
	Ref pulumi.StringPtrInput
}

func (RdeInterfaceBehaviorState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdeInterfaceBehaviorState)(nil)).Elem()
}

type rdeInterfaceBehaviorArgs struct {
	// Useful to update execution properties marked with `_secure_` and `_internal_`
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties *bool `pulumi:"alwaysUpdateSecureExecutionProperties"`
	// A description specifying the contract of the Behavior
	Description *string `pulumi:"description"`
	// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
	// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
	Execution map[string]string `pulumi:"execution"`
	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
	// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
	// One of `executionJson` or `execution` must be set.
	ExecutionJson *string `pulumi:"executionJson"`
	// Name of the Behavior
	Name *string `pulumi:"name"`
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceId string `pulumi:"rdeInterfaceId"`
}

// The set of arguments for constructing a RdeInterfaceBehavior resource.
type RdeInterfaceBehaviorArgs struct {
	// Useful to update execution properties marked with `_secure_` and `_internal_`
	// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
	// to ask for updates whenever there is a secure property in the execution of the Behavior
	AlwaysUpdateSecureExecutionProperties pulumi.BoolPtrInput
	// A description specifying the contract of the Behavior
	Description pulumi.StringPtrInput
	// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
	// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
	Execution pulumi.StringMapInput
	// A string representing a valid JSON that specifies the Behavior execution mechanism.
	// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
	// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
	// One of `executionJson` or `execution` must be set.
	ExecutionJson pulumi.StringPtrInput
	// Name of the Behavior
	Name pulumi.StringPtrInput
	// The ID of the RDE Interface that owns the Behavior
	RdeInterfaceId pulumi.StringInput
}

func (RdeInterfaceBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdeInterfaceBehaviorArgs)(nil)).Elem()
}

type RdeInterfaceBehaviorInput interface {
	pulumi.Input

	ToRdeInterfaceBehaviorOutput() RdeInterfaceBehaviorOutput
	ToRdeInterfaceBehaviorOutputWithContext(ctx context.Context) RdeInterfaceBehaviorOutput
}

func (*RdeInterfaceBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((**RdeInterfaceBehavior)(nil)).Elem()
}

func (i *RdeInterfaceBehavior) ToRdeInterfaceBehaviorOutput() RdeInterfaceBehaviorOutput {
	return i.ToRdeInterfaceBehaviorOutputWithContext(context.Background())
}

func (i *RdeInterfaceBehavior) ToRdeInterfaceBehaviorOutputWithContext(ctx context.Context) RdeInterfaceBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeInterfaceBehaviorOutput)
}

// RdeInterfaceBehaviorArrayInput is an input type that accepts RdeInterfaceBehaviorArray and RdeInterfaceBehaviorArrayOutput values.
// You can construct a concrete instance of `RdeInterfaceBehaviorArrayInput` via:
//
//	RdeInterfaceBehaviorArray{ RdeInterfaceBehaviorArgs{...} }
type RdeInterfaceBehaviorArrayInput interface {
	pulumi.Input

	ToRdeInterfaceBehaviorArrayOutput() RdeInterfaceBehaviorArrayOutput
	ToRdeInterfaceBehaviorArrayOutputWithContext(context.Context) RdeInterfaceBehaviorArrayOutput
}

type RdeInterfaceBehaviorArray []RdeInterfaceBehaviorInput

func (RdeInterfaceBehaviorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdeInterfaceBehavior)(nil)).Elem()
}

func (i RdeInterfaceBehaviorArray) ToRdeInterfaceBehaviorArrayOutput() RdeInterfaceBehaviorArrayOutput {
	return i.ToRdeInterfaceBehaviorArrayOutputWithContext(context.Background())
}

func (i RdeInterfaceBehaviorArray) ToRdeInterfaceBehaviorArrayOutputWithContext(ctx context.Context) RdeInterfaceBehaviorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeInterfaceBehaviorArrayOutput)
}

// RdeInterfaceBehaviorMapInput is an input type that accepts RdeInterfaceBehaviorMap and RdeInterfaceBehaviorMapOutput values.
// You can construct a concrete instance of `RdeInterfaceBehaviorMapInput` via:
//
//	RdeInterfaceBehaviorMap{ "key": RdeInterfaceBehaviorArgs{...} }
type RdeInterfaceBehaviorMapInput interface {
	pulumi.Input

	ToRdeInterfaceBehaviorMapOutput() RdeInterfaceBehaviorMapOutput
	ToRdeInterfaceBehaviorMapOutputWithContext(context.Context) RdeInterfaceBehaviorMapOutput
}

type RdeInterfaceBehaviorMap map[string]RdeInterfaceBehaviorInput

func (RdeInterfaceBehaviorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdeInterfaceBehavior)(nil)).Elem()
}

func (i RdeInterfaceBehaviorMap) ToRdeInterfaceBehaviorMapOutput() RdeInterfaceBehaviorMapOutput {
	return i.ToRdeInterfaceBehaviorMapOutputWithContext(context.Background())
}

func (i RdeInterfaceBehaviorMap) ToRdeInterfaceBehaviorMapOutputWithContext(ctx context.Context) RdeInterfaceBehaviorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdeInterfaceBehaviorMapOutput)
}

type RdeInterfaceBehaviorOutput struct{ *pulumi.OutputState }

func (RdeInterfaceBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdeInterfaceBehavior)(nil)).Elem()
}

func (o RdeInterfaceBehaviorOutput) ToRdeInterfaceBehaviorOutput() RdeInterfaceBehaviorOutput {
	return o
}

func (o RdeInterfaceBehaviorOutput) ToRdeInterfaceBehaviorOutputWithContext(ctx context.Context) RdeInterfaceBehaviorOutput {
	return o
}

// Useful to update execution properties marked with `_secure_` and `_internal_`
// as these are not retrievable from VCD, so they are not saved in state. Setting this to `true` will make the provider
// to ask for updates whenever there is a secure property in the execution of the Behavior
func (o RdeInterfaceBehaviorOutput) AlwaysUpdateSecureExecutionProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.BoolPtrOutput { return v.AlwaysUpdateSecureExecutionProperties }).(pulumi.BoolPtrOutput)
}

// A description specifying the contract of the Behavior
func (o RdeInterfaceBehaviorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A map that specifies the Behavior execution mechanism, this is just a simplification of `executionJson` that
// can make the configuration more readable for simpler Behaviors. One of `executionJson` or `execution` must be set.
func (o RdeInterfaceBehaviorOutput) Execution() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringMapOutput { return v.Execution }).(pulumi.StringMapOutput)
}

// A string representing a valid JSON that specifies the Behavior execution mechanism.
// You can find more information about the different execution types, like `WebHook`, `noop`, `Activity`, `MQTT`, `VRO`, `AWSLambdaFaaS`
// and others [in the Extensibility SDK documentation](https://vmware.github.io/vcd-ext-sdk/docs/defined_entities_api/behaviors).
// One of `executionJson` or `execution` must be set.
func (o RdeInterfaceBehaviorOutput) ExecutionJson() pulumi.StringOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringOutput { return v.ExecutionJson }).(pulumi.StringOutput)
}

// Name of the Behavior
func (o RdeInterfaceBehaviorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the RDE Interface that owns the Behavior
func (o RdeInterfaceBehaviorOutput) RdeInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringOutput { return v.RdeInterfaceId }).(pulumi.StringOutput)
}

// The Behavior invocation reference to be used for polymorphic behavior invocations
func (o RdeInterfaceBehaviorOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v *RdeInterfaceBehavior) pulumi.StringOutput { return v.Ref }).(pulumi.StringOutput)
}

type RdeInterfaceBehaviorArrayOutput struct{ *pulumi.OutputState }

func (RdeInterfaceBehaviorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdeInterfaceBehavior)(nil)).Elem()
}

func (o RdeInterfaceBehaviorArrayOutput) ToRdeInterfaceBehaviorArrayOutput() RdeInterfaceBehaviorArrayOutput {
	return o
}

func (o RdeInterfaceBehaviorArrayOutput) ToRdeInterfaceBehaviorArrayOutputWithContext(ctx context.Context) RdeInterfaceBehaviorArrayOutput {
	return o
}

func (o RdeInterfaceBehaviorArrayOutput) Index(i pulumi.IntInput) RdeInterfaceBehaviorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdeInterfaceBehavior {
		return vs[0].([]*RdeInterfaceBehavior)[vs[1].(int)]
	}).(RdeInterfaceBehaviorOutput)
}

type RdeInterfaceBehaviorMapOutput struct{ *pulumi.OutputState }

func (RdeInterfaceBehaviorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdeInterfaceBehavior)(nil)).Elem()
}

func (o RdeInterfaceBehaviorMapOutput) ToRdeInterfaceBehaviorMapOutput() RdeInterfaceBehaviorMapOutput {
	return o
}

func (o RdeInterfaceBehaviorMapOutput) ToRdeInterfaceBehaviorMapOutputWithContext(ctx context.Context) RdeInterfaceBehaviorMapOutput {
	return o
}

func (o RdeInterfaceBehaviorMapOutput) MapIndex(k pulumi.StringInput) RdeInterfaceBehaviorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdeInterfaceBehavior {
		return vs[0].(map[string]*RdeInterfaceBehavior)[vs[1].(string)]
	}).(RdeInterfaceBehaviorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdeInterfaceBehaviorInput)(nil)).Elem(), &RdeInterfaceBehavior{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdeInterfaceBehaviorArrayInput)(nil)).Elem(), RdeInterfaceBehaviorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdeInterfaceBehaviorMapInput)(nil)).Elem(), RdeInterfaceBehaviorMap{})
	pulumi.RegisterOutputType(RdeInterfaceBehaviorOutput{})
	pulumi.RegisterOutputType(RdeInterfaceBehaviorArrayOutput{})
	pulumi.RegisterOutputType(RdeInterfaceBehaviorMapOutput{})
}
