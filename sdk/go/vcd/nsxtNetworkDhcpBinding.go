// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtNetworkDhcpBinding struct {
	pulumi.CustomResourceState

	// One of `IPV4` or `IPV6`
	BindingType pulumi.StringOutput `pulumi:"bindingType"`
	// Description of DHCP binding
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Additional configuration for IPv4 specific options. See IPv4 block
	DhcpV4Config NsxtNetworkDhcpBindingDhcpV4ConfigPtrOutput `pulumi:"dhcpV4Config"`
	// Additional configuration for IPv6 specific options. See IPv6 block
	//
	// <a id="ipv4-block"></a>
	DhcpV6Config NsxtNetworkDhcpBindingDhcpV6ConfigPtrOutput `pulumi:"dhcpV6Config"`
	// A list of DNS servers. Maximum 2 can be specified
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// IP address used for binding
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Lease time in seconds. Minimum `3600` seconds
	LeaseTime pulumi.IntOutput `pulumi:"leaseTime"`
	// MAC address used for binding
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// Name of DHCP binding
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization. Optional if defined at provider level
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The ID of an Org VDC network. **Note**  (`.id` field) of
	// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
	// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
	// that DHCP is enabled before configuring pools
	OrgNetworkId pulumi.StringOutput `pulumi:"orgNetworkId"`
}

// NewNsxtNetworkDhcpBinding registers a new resource with the given unique name, arguments, and options.
func NewNsxtNetworkDhcpBinding(ctx *pulumi.Context,
	name string, args *NsxtNetworkDhcpBindingArgs, opts ...pulumi.ResourceOption) (*NsxtNetworkDhcpBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BindingType == nil {
		return nil, errors.New("invalid value for required argument 'BindingType'")
	}
	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.LeaseTime == nil {
		return nil, errors.New("invalid value for required argument 'LeaseTime'")
	}
	if args.MacAddress == nil {
		return nil, errors.New("invalid value for required argument 'MacAddress'")
	}
	if args.OrgNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'OrgNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtNetworkDhcpBinding
	err := ctx.RegisterResource("vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtNetworkDhcpBinding gets an existing NsxtNetworkDhcpBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtNetworkDhcpBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtNetworkDhcpBindingState, opts ...pulumi.ResourceOption) (*NsxtNetworkDhcpBinding, error) {
	var resource NsxtNetworkDhcpBinding
	err := ctx.ReadResource("vcd:index/nsxtNetworkDhcpBinding:NsxtNetworkDhcpBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtNetworkDhcpBinding resources.
type nsxtNetworkDhcpBindingState struct {
	// One of `IPV4` or `IPV6`
	BindingType *string `pulumi:"bindingType"`
	// Description of DHCP binding
	Description *string `pulumi:"description"`
	// Additional configuration for IPv4 specific options. See IPv4 block
	DhcpV4Config *NsxtNetworkDhcpBindingDhcpV4Config `pulumi:"dhcpV4Config"`
	// Additional configuration for IPv6 specific options. See IPv6 block
	//
	// <a id="ipv4-block"></a>
	DhcpV6Config *NsxtNetworkDhcpBindingDhcpV6Config `pulumi:"dhcpV6Config"`
	// A list of DNS servers. Maximum 2 can be specified
	DnsServers []string `pulumi:"dnsServers"`
	// IP address used for binding
	IpAddress *string `pulumi:"ipAddress"`
	// Lease time in seconds. Minimum `3600` seconds
	LeaseTime *int `pulumi:"leaseTime"`
	// MAC address used for binding
	MacAddress *string `pulumi:"macAddress"`
	// Name of DHCP binding
	Name *string `pulumi:"name"`
	// The name of organization. Optional if defined at provider level
	Org *string `pulumi:"org"`
	// The ID of an Org VDC network. **Note**  (`.id` field) of
	// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
	// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
	// that DHCP is enabled before configuring pools
	OrgNetworkId *string `pulumi:"orgNetworkId"`
}

type NsxtNetworkDhcpBindingState struct {
	// One of `IPV4` or `IPV6`
	BindingType pulumi.StringPtrInput
	// Description of DHCP binding
	Description pulumi.StringPtrInput
	// Additional configuration for IPv4 specific options. See IPv4 block
	DhcpV4Config NsxtNetworkDhcpBindingDhcpV4ConfigPtrInput
	// Additional configuration for IPv6 specific options. See IPv6 block
	//
	// <a id="ipv4-block"></a>
	DhcpV6Config NsxtNetworkDhcpBindingDhcpV6ConfigPtrInput
	// A list of DNS servers. Maximum 2 can be specified
	DnsServers pulumi.StringArrayInput
	// IP address used for binding
	IpAddress pulumi.StringPtrInput
	// Lease time in seconds. Minimum `3600` seconds
	LeaseTime pulumi.IntPtrInput
	// MAC address used for binding
	MacAddress pulumi.StringPtrInput
	// Name of DHCP binding
	Name pulumi.StringPtrInput
	// The name of organization. Optional if defined at provider level
	Org pulumi.StringPtrInput
	// The ID of an Org VDC network. **Note**  (`.id` field) of
	// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
	// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
	// that DHCP is enabled before configuring pools
	OrgNetworkId pulumi.StringPtrInput
}

func (NsxtNetworkDhcpBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkDhcpBindingState)(nil)).Elem()
}

type nsxtNetworkDhcpBindingArgs struct {
	// One of `IPV4` or `IPV6`
	BindingType string `pulumi:"bindingType"`
	// Description of DHCP binding
	Description *string `pulumi:"description"`
	// Additional configuration for IPv4 specific options. See IPv4 block
	DhcpV4Config *NsxtNetworkDhcpBindingDhcpV4Config `pulumi:"dhcpV4Config"`
	// Additional configuration for IPv6 specific options. See IPv6 block
	//
	// <a id="ipv4-block"></a>
	DhcpV6Config *NsxtNetworkDhcpBindingDhcpV6Config `pulumi:"dhcpV6Config"`
	// A list of DNS servers. Maximum 2 can be specified
	DnsServers []string `pulumi:"dnsServers"`
	// IP address used for binding
	IpAddress string `pulumi:"ipAddress"`
	// Lease time in seconds. Minimum `3600` seconds
	LeaseTime int `pulumi:"leaseTime"`
	// MAC address used for binding
	MacAddress string `pulumi:"macAddress"`
	// Name of DHCP binding
	Name *string `pulumi:"name"`
	// The name of organization. Optional if defined at provider level
	Org *string `pulumi:"org"`
	// The ID of an Org VDC network. **Note**  (`.id` field) of
	// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
	// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
	// that DHCP is enabled before configuring pools
	OrgNetworkId string `pulumi:"orgNetworkId"`
}

// The set of arguments for constructing a NsxtNetworkDhcpBinding resource.
type NsxtNetworkDhcpBindingArgs struct {
	// One of `IPV4` or `IPV6`
	BindingType pulumi.StringInput
	// Description of DHCP binding
	Description pulumi.StringPtrInput
	// Additional configuration for IPv4 specific options. See IPv4 block
	DhcpV4Config NsxtNetworkDhcpBindingDhcpV4ConfigPtrInput
	// Additional configuration for IPv6 specific options. See IPv6 block
	//
	// <a id="ipv4-block"></a>
	DhcpV6Config NsxtNetworkDhcpBindingDhcpV6ConfigPtrInput
	// A list of DNS servers. Maximum 2 can be specified
	DnsServers pulumi.StringArrayInput
	// IP address used for binding
	IpAddress pulumi.StringInput
	// Lease time in seconds. Minimum `3600` seconds
	LeaseTime pulumi.IntInput
	// MAC address used for binding
	MacAddress pulumi.StringInput
	// Name of DHCP binding
	Name pulumi.StringPtrInput
	// The name of organization. Optional if defined at provider level
	Org pulumi.StringPtrInput
	// The ID of an Org VDC network. **Note**  (`.id` field) of
	// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
	// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
	// that DHCP is enabled before configuring pools
	OrgNetworkId pulumi.StringInput
}

func (NsxtNetworkDhcpBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtNetworkDhcpBindingArgs)(nil)).Elem()
}

type NsxtNetworkDhcpBindingInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpBindingOutput() NsxtNetworkDhcpBindingOutput
	ToNsxtNetworkDhcpBindingOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingOutput
}

func (*NsxtNetworkDhcpBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (i *NsxtNetworkDhcpBinding) ToNsxtNetworkDhcpBindingOutput() NsxtNetworkDhcpBindingOutput {
	return i.ToNsxtNetworkDhcpBindingOutputWithContext(context.Background())
}

func (i *NsxtNetworkDhcpBinding) ToNsxtNetworkDhcpBindingOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpBindingOutput)
}

// NsxtNetworkDhcpBindingArrayInput is an input type that accepts NsxtNetworkDhcpBindingArray and NsxtNetworkDhcpBindingArrayOutput values.
// You can construct a concrete instance of `NsxtNetworkDhcpBindingArrayInput` via:
//
//	NsxtNetworkDhcpBindingArray{ NsxtNetworkDhcpBindingArgs{...} }
type NsxtNetworkDhcpBindingArrayInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpBindingArrayOutput() NsxtNetworkDhcpBindingArrayOutput
	ToNsxtNetworkDhcpBindingArrayOutputWithContext(context.Context) NsxtNetworkDhcpBindingArrayOutput
}

type NsxtNetworkDhcpBindingArray []NsxtNetworkDhcpBindingInput

func (NsxtNetworkDhcpBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (i NsxtNetworkDhcpBindingArray) ToNsxtNetworkDhcpBindingArrayOutput() NsxtNetworkDhcpBindingArrayOutput {
	return i.ToNsxtNetworkDhcpBindingArrayOutputWithContext(context.Background())
}

func (i NsxtNetworkDhcpBindingArray) ToNsxtNetworkDhcpBindingArrayOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpBindingArrayOutput)
}

// NsxtNetworkDhcpBindingMapInput is an input type that accepts NsxtNetworkDhcpBindingMap and NsxtNetworkDhcpBindingMapOutput values.
// You can construct a concrete instance of `NsxtNetworkDhcpBindingMapInput` via:
//
//	NsxtNetworkDhcpBindingMap{ "key": NsxtNetworkDhcpBindingArgs{...} }
type NsxtNetworkDhcpBindingMapInput interface {
	pulumi.Input

	ToNsxtNetworkDhcpBindingMapOutput() NsxtNetworkDhcpBindingMapOutput
	ToNsxtNetworkDhcpBindingMapOutputWithContext(context.Context) NsxtNetworkDhcpBindingMapOutput
}

type NsxtNetworkDhcpBindingMap map[string]NsxtNetworkDhcpBindingInput

func (NsxtNetworkDhcpBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (i NsxtNetworkDhcpBindingMap) ToNsxtNetworkDhcpBindingMapOutput() NsxtNetworkDhcpBindingMapOutput {
	return i.ToNsxtNetworkDhcpBindingMapOutputWithContext(context.Background())
}

func (i NsxtNetworkDhcpBindingMap) ToNsxtNetworkDhcpBindingMapOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtNetworkDhcpBindingMapOutput)
}

type NsxtNetworkDhcpBindingOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (o NsxtNetworkDhcpBindingOutput) ToNsxtNetworkDhcpBindingOutput() NsxtNetworkDhcpBindingOutput {
	return o
}

func (o NsxtNetworkDhcpBindingOutput) ToNsxtNetworkDhcpBindingOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingOutput {
	return o
}

// One of `IPV4` or `IPV6`
func (o NsxtNetworkDhcpBindingOutput) BindingType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringOutput { return v.BindingType }).(pulumi.StringOutput)
}

// Description of DHCP binding
func (o NsxtNetworkDhcpBindingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Additional configuration for IPv4 specific options. See IPv4 block
func (o NsxtNetworkDhcpBindingOutput) DhcpV4Config() NsxtNetworkDhcpBindingDhcpV4ConfigPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) NsxtNetworkDhcpBindingDhcpV4ConfigPtrOutput { return v.DhcpV4Config }).(NsxtNetworkDhcpBindingDhcpV4ConfigPtrOutput)
}

// Additional configuration for IPv6 specific options. See IPv6 block
//
// <a id="ipv4-block"></a>
func (o NsxtNetworkDhcpBindingOutput) DhcpV6Config() NsxtNetworkDhcpBindingDhcpV6ConfigPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) NsxtNetworkDhcpBindingDhcpV6ConfigPtrOutput { return v.DhcpV6Config }).(NsxtNetworkDhcpBindingDhcpV6ConfigPtrOutput)
}

// A list of DNS servers. Maximum 2 can be specified
func (o NsxtNetworkDhcpBindingOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// IP address used for binding
func (o NsxtNetworkDhcpBindingOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Lease time in seconds. Minimum `3600` seconds
func (o NsxtNetworkDhcpBindingOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.IntOutput { return v.LeaseTime }).(pulumi.IntOutput)
}

// MAC address used for binding
func (o NsxtNetworkDhcpBindingOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Name of DHCP binding
func (o NsxtNetworkDhcpBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization. Optional if defined at provider level
func (o NsxtNetworkDhcpBindingOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The ID of an Org VDC network. **Note**  (`.id` field) of
// `NetworkIsolatedV2`, `NetworkRoutedV2` or `NsxtNetworkDhcp` can be referenced
// here. It is more convenient to use reference to `NsxtNetworkDhcp` ID because it makes sure
// that DHCP is enabled before configuring pools
func (o NsxtNetworkDhcpBindingOutput) OrgNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtNetworkDhcpBinding) pulumi.StringOutput { return v.OrgNetworkId }).(pulumi.StringOutput)
}

type NsxtNetworkDhcpBindingArrayOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (o NsxtNetworkDhcpBindingArrayOutput) ToNsxtNetworkDhcpBindingArrayOutput() NsxtNetworkDhcpBindingArrayOutput {
	return o
}

func (o NsxtNetworkDhcpBindingArrayOutput) ToNsxtNetworkDhcpBindingArrayOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingArrayOutput {
	return o
}

func (o NsxtNetworkDhcpBindingArrayOutput) Index(i pulumi.IntInput) NsxtNetworkDhcpBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtNetworkDhcpBinding {
		return vs[0].([]*NsxtNetworkDhcpBinding)[vs[1].(int)]
	}).(NsxtNetworkDhcpBindingOutput)
}

type NsxtNetworkDhcpBindingMapOutput struct{ *pulumi.OutputState }

func (NsxtNetworkDhcpBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtNetworkDhcpBinding)(nil)).Elem()
}

func (o NsxtNetworkDhcpBindingMapOutput) ToNsxtNetworkDhcpBindingMapOutput() NsxtNetworkDhcpBindingMapOutput {
	return o
}

func (o NsxtNetworkDhcpBindingMapOutput) ToNsxtNetworkDhcpBindingMapOutputWithContext(ctx context.Context) NsxtNetworkDhcpBindingMapOutput {
	return o
}

func (o NsxtNetworkDhcpBindingMapOutput) MapIndex(k pulumi.StringInput) NsxtNetworkDhcpBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtNetworkDhcpBinding {
		return vs[0].(map[string]*NsxtNetworkDhcpBinding)[vs[1].(string)]
	}).(NsxtNetworkDhcpBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpBindingInput)(nil)).Elem(), &NsxtNetworkDhcpBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpBindingArrayInput)(nil)).Elem(), NsxtNetworkDhcpBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtNetworkDhcpBindingMapInput)(nil)).Elem(), NsxtNetworkDhcpBindingMap{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpBindingOutput{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpBindingArrayOutput{})
	pulumi.RegisterOutputType(NsxtNetworkDhcpBindingMapOutput{})
}
