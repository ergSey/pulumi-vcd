// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CatalogMedia struct {
	pulumi.CustomResourceState

	// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
	//
	// Deprecated: Use catalogId instead
	Catalog pulumi.StringOutput `pulumi:"catalog"`
	// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// Catalog Item ID of this media item
	CatalogItemId pulumi.StringOutput `pulumi:"catalogItemId"`
	// (Computed) returns creation date
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// Description of media file
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Computed) returns True if this media file is ISO
	IsIso pulumi.BoolOutput `pulumi:"isIso"`
	// (Computed) returns True if this media file is in a published catalog
	IsPublished pulumi.BoolOutput `pulumi:"isPublished"`
	// Absolute or relative path to file to upload
	MediaPath pulumi.StringPtrOutput `pulumi:"mediaPath"`
	// Use `metadataEntry` instead. Key value map of metadata to assign
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogMediaMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// Media file name in catalog
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringOutput `pulumi:"org"`
	// (Computed) returns owner name
	OwnerName pulumi.StringOutput `pulumi:"ownerName"`
	// Default false. Allows to see upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrOutput `pulumi:"showUploadProgress"`
	// (Computed) returns media storage in Bytes
	Size pulumi.IntOutput `pulumi:"size"`
	// (Computed) returns media status
	Status pulumi.StringOutput `pulumi:"status"`
	// (Computed) returns storage profile name
	StorageProfileName pulumi.StringOutput `pulumi:"storageProfileName"`
	// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
	UploadAnyFile pulumi.BoolPtrOutput `pulumi:"uploadAnyFile"`
	// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrOutput `pulumi:"uploadPieceSize"`
}

// NewCatalogMedia registers a new resource with the given unique name, arguments, and options.
func NewCatalogMedia(ctx *pulumi.Context,
	name string, args *CatalogMediaArgs, opts ...pulumi.ResourceOption) (*CatalogMedia, error) {
	if args == nil {
		args = &CatalogMediaArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogMedia
	err := ctx.RegisterResource("vcd:index/catalogMedia:CatalogMedia", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogMedia gets an existing CatalogMedia resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogMedia(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogMediaState, opts ...pulumi.ResourceOption) (*CatalogMedia, error) {
	var resource CatalogMedia
	err := ctx.ReadResource("vcd:index/catalogMedia:CatalogMedia", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogMedia resources.
type catalogMediaState struct {
	// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
	//
	// Deprecated: Use catalogId instead
	Catalog *string `pulumi:"catalog"`
	// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
	CatalogId *string `pulumi:"catalogId"`
	// Catalog Item ID of this media item
	CatalogItemId *string `pulumi:"catalogItemId"`
	// (Computed) returns creation date
	CreationDate *string `pulumi:"creationDate"`
	// Description of media file
	Description *string `pulumi:"description"`
	// (Computed) returns True if this media file is ISO
	IsIso *bool `pulumi:"isIso"`
	// (Computed) returns True if this media file is in a published catalog
	IsPublished *bool `pulumi:"isPublished"`
	// Absolute or relative path to file to upload
	MediaPath *string `pulumi:"mediaPath"`
	// Use `metadataEntry` instead. Key value map of metadata to assign
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []CatalogMediaMetadataEntry `pulumi:"metadataEntries"`
	// Media file name in catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// (Computed) returns owner name
	OwnerName *string `pulumi:"ownerName"`
	// Default false. Allows to see upload progress. (See note below)
	ShowUploadProgress *bool `pulumi:"showUploadProgress"`
	// (Computed) returns media storage in Bytes
	Size *int `pulumi:"size"`
	// (Computed) returns media status
	Status *string `pulumi:"status"`
	// (Computed) returns storage profile name
	StorageProfileName *string `pulumi:"storageProfileName"`
	// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
	UploadAnyFile *bool `pulumi:"uploadAnyFile"`
	// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
}

type CatalogMediaState struct {
	// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
	//
	// Deprecated: Use catalogId instead
	Catalog pulumi.StringPtrInput
	// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
	CatalogId pulumi.StringPtrInput
	// Catalog Item ID of this media item
	CatalogItemId pulumi.StringPtrInput
	// (Computed) returns creation date
	CreationDate pulumi.StringPtrInput
	// Description of media file
	Description pulumi.StringPtrInput
	// (Computed) returns True if this media file is ISO
	IsIso pulumi.BoolPtrInput
	// (Computed) returns True if this media file is in a published catalog
	IsPublished pulumi.BoolPtrInput
	// Absolute or relative path to file to upload
	MediaPath pulumi.StringPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogMediaMetadataEntryArrayInput
	// Media file name in catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// (Computed) returns owner name
	OwnerName pulumi.StringPtrInput
	// Default false. Allows to see upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrInput
	// (Computed) returns media storage in Bytes
	Size pulumi.IntPtrInput
	// (Computed) returns media status
	Status pulumi.StringPtrInput
	// (Computed) returns storage profile name
	StorageProfileName pulumi.StringPtrInput
	// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
	UploadAnyFile pulumi.BoolPtrInput
	// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrInput
}

func (CatalogMediaState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogMediaState)(nil)).Elem()
}

type catalogMediaArgs struct {
	// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
	//
	// Deprecated: Use catalogId instead
	Catalog *string `pulumi:"catalog"`
	// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
	CatalogId *string `pulumi:"catalogId"`
	// Description of media file
	Description *string `pulumi:"description"`
	// Absolute or relative path to file to upload
	MediaPath *string `pulumi:"mediaPath"`
	// Use `metadataEntry` instead. Key value map of metadata to assign
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []CatalogMediaMetadataEntry `pulumi:"metadataEntries"`
	// Media file name in catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Default false. Allows to see upload progress. (See note below)
	ShowUploadProgress *bool `pulumi:"showUploadProgress"`
	// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
	UploadAnyFile *bool `pulumi:"uploadAnyFile"`
	// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
}

// The set of arguments for constructing a CatalogMedia resource.
type CatalogMediaArgs struct {
	// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
	//
	// Deprecated: Use catalogId instead
	Catalog pulumi.StringPtrInput
	// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
	CatalogId pulumi.StringPtrInput
	// Description of media file
	Description pulumi.StringPtrInput
	// Absolute or relative path to file to upload
	MediaPath pulumi.StringPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries CatalogMediaMetadataEntryArrayInput
	// Media file name in catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Default false. Allows to see upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrInput
	// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
	UploadAnyFile pulumi.BoolPtrInput
	// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrInput
}

func (CatalogMediaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogMediaArgs)(nil)).Elem()
}

type CatalogMediaInput interface {
	pulumi.Input

	ToCatalogMediaOutput() CatalogMediaOutput
	ToCatalogMediaOutputWithContext(ctx context.Context) CatalogMediaOutput
}

func (*CatalogMedia) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogMedia)(nil)).Elem()
}

func (i *CatalogMedia) ToCatalogMediaOutput() CatalogMediaOutput {
	return i.ToCatalogMediaOutputWithContext(context.Background())
}

func (i *CatalogMedia) ToCatalogMediaOutputWithContext(ctx context.Context) CatalogMediaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMediaOutput)
}

// CatalogMediaArrayInput is an input type that accepts CatalogMediaArray and CatalogMediaArrayOutput values.
// You can construct a concrete instance of `CatalogMediaArrayInput` via:
//
//	CatalogMediaArray{ CatalogMediaArgs{...} }
type CatalogMediaArrayInput interface {
	pulumi.Input

	ToCatalogMediaArrayOutput() CatalogMediaArrayOutput
	ToCatalogMediaArrayOutputWithContext(context.Context) CatalogMediaArrayOutput
}

type CatalogMediaArray []CatalogMediaInput

func (CatalogMediaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogMedia)(nil)).Elem()
}

func (i CatalogMediaArray) ToCatalogMediaArrayOutput() CatalogMediaArrayOutput {
	return i.ToCatalogMediaArrayOutputWithContext(context.Background())
}

func (i CatalogMediaArray) ToCatalogMediaArrayOutputWithContext(ctx context.Context) CatalogMediaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMediaArrayOutput)
}

// CatalogMediaMapInput is an input type that accepts CatalogMediaMap and CatalogMediaMapOutput values.
// You can construct a concrete instance of `CatalogMediaMapInput` via:
//
//	CatalogMediaMap{ "key": CatalogMediaArgs{...} }
type CatalogMediaMapInput interface {
	pulumi.Input

	ToCatalogMediaMapOutput() CatalogMediaMapOutput
	ToCatalogMediaMapOutputWithContext(context.Context) CatalogMediaMapOutput
}

type CatalogMediaMap map[string]CatalogMediaInput

func (CatalogMediaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogMedia)(nil)).Elem()
}

func (i CatalogMediaMap) ToCatalogMediaMapOutput() CatalogMediaMapOutput {
	return i.ToCatalogMediaMapOutputWithContext(context.Background())
}

func (i CatalogMediaMap) ToCatalogMediaMapOutputWithContext(ctx context.Context) CatalogMediaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogMediaMapOutput)
}

type CatalogMediaOutput struct{ *pulumi.OutputState }

func (CatalogMediaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogMedia)(nil)).Elem()
}

func (o CatalogMediaOutput) ToCatalogMediaOutput() CatalogMediaOutput {
	return o
}

func (o CatalogMediaOutput) ToCatalogMediaOutputWithContext(ctx context.Context) CatalogMediaOutput {
	return o
}

// The name of the catalog where to upload media file. It's mandatory if `catalogId` is not used.
//
// Deprecated: Use catalogId instead
func (o CatalogMediaOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.Catalog }).(pulumi.StringOutput)
}

// The ID of the catalog where to upload media file. It's mandatory if `catalog` field is not used.
func (o CatalogMediaOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// Catalog Item ID of this media item
func (o CatalogMediaOutput) CatalogItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.CatalogItemId }).(pulumi.StringOutput)
}

// (Computed) returns creation date
func (o CatalogMediaOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// Description of media file
func (o CatalogMediaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Computed) returns True if this media file is ISO
func (o CatalogMediaOutput) IsIso() pulumi.BoolOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.BoolOutput { return v.IsIso }).(pulumi.BoolOutput)
}

// (Computed) returns True if this media file is in a published catalog
func (o CatalogMediaOutput) IsPublished() pulumi.BoolOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.BoolOutput { return v.IsPublished }).(pulumi.BoolOutput)
}

// Absolute or relative path to file to upload
func (o CatalogMediaOutput) MediaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringPtrOutput { return v.MediaPath }).(pulumi.StringPtrOutput)
}

// Use `metadataEntry` instead. Key value map of metadata to assign
//
// Deprecated: Use metadataEntry instead
func (o CatalogMediaOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
func (o CatalogMediaOutput) MetadataEntries() CatalogMediaMetadataEntryArrayOutput {
	return o.ApplyT(func(v *CatalogMedia) CatalogMediaMetadataEntryArrayOutput { return v.MetadataEntries }).(CatalogMediaMetadataEntryArrayOutput)
}

// Media file name in catalog
func (o CatalogMediaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o CatalogMediaOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// (Computed) returns owner name
func (o CatalogMediaOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.OwnerName }).(pulumi.StringOutput)
}

// Default false. Allows to see upload progress. (See note below)
func (o CatalogMediaOutput) ShowUploadProgress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.BoolPtrOutput { return v.ShowUploadProgress }).(pulumi.BoolPtrOutput)
}

// (Computed) returns media storage in Bytes
func (o CatalogMediaOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// (Computed) returns media status
func (o CatalogMediaOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// (Computed) returns storage profile name
func (o CatalogMediaOutput) StorageProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.StringOutput { return v.StorageProfileName }).(pulumi.StringOutput)
}

// If `true`, allows uploading any file type. With the default `false`, we can only upload `.ISO` files.
func (o CatalogMediaOutput) UploadAnyFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.BoolPtrOutput { return v.UploadAnyFile }).(pulumi.BoolPtrOutput)
}

// size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
func (o CatalogMediaOutput) UploadPieceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CatalogMedia) pulumi.IntPtrOutput { return v.UploadPieceSize }).(pulumi.IntPtrOutput)
}

type CatalogMediaArrayOutput struct{ *pulumi.OutputState }

func (CatalogMediaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogMedia)(nil)).Elem()
}

func (o CatalogMediaArrayOutput) ToCatalogMediaArrayOutput() CatalogMediaArrayOutput {
	return o
}

func (o CatalogMediaArrayOutput) ToCatalogMediaArrayOutputWithContext(ctx context.Context) CatalogMediaArrayOutput {
	return o
}

func (o CatalogMediaArrayOutput) Index(i pulumi.IntInput) CatalogMediaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogMedia {
		return vs[0].([]*CatalogMedia)[vs[1].(int)]
	}).(CatalogMediaOutput)
}

type CatalogMediaMapOutput struct{ *pulumi.OutputState }

func (CatalogMediaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogMedia)(nil)).Elem()
}

func (o CatalogMediaMapOutput) ToCatalogMediaMapOutput() CatalogMediaMapOutput {
	return o
}

func (o CatalogMediaMapOutput) ToCatalogMediaMapOutputWithContext(ctx context.Context) CatalogMediaMapOutput {
	return o
}

func (o CatalogMediaMapOutput) MapIndex(k pulumi.StringInput) CatalogMediaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogMedia {
		return vs[0].(map[string]*CatalogMedia)[vs[1].(string)]
	}).(CatalogMediaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMediaInput)(nil)).Elem(), &CatalogMedia{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMediaArrayInput)(nil)).Elem(), CatalogMediaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogMediaMapInput)(nil)).Elem(), CatalogMediaMap{})
	pulumi.RegisterOutputType(CatalogMediaOutput{})
	pulumi.RegisterOutputType(CatalogMediaArrayOutput{})
	pulumi.RegisterOutputType(CatalogMediaMapOutput{})
}
