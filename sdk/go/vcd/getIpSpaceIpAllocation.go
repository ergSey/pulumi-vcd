// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
// (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
//
// IP Spaces require VCD 10.4.1+ with NSX-T.
//
// ## Example Usage
//
// ### IP Space IP Prefix Allocation)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupIpSpaceIpAllocation(ctx, &vcd.LookupIpSpaceIpAllocationArgs{
//				OrgId:     org1.Id,
//				IpSpaceId: space1.Id,
//				Type:      "IP_PREFIX",
//				IpAddress: "192.168.1.1/24",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### IP Space Floating IP Allocation)
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupIpSpaceIpAllocation(ctx, &vcd.LookupIpSpaceIpAllocationArgs{
//				OrgId:     org1.Id,
//				IpSpaceId: space1.Id,
//				Type:      "FLOATING_IP",
//				IpAddress: "192.168.1.1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpSpaceIpAllocation(ctx *pulumi.Context, args *LookupIpSpaceIpAllocationArgs, opts ...pulumi.InvokeOption) (*LookupIpSpaceIpAllocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpSpaceIpAllocationResult
	err := ctx.Invoke("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpSpaceIpAllocation.
type LookupIpSpaceIpAllocationArgs struct {
	Description *string `pulumi:"description"`
	// IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
	IpAddress string `pulumi:"ipAddress"`
	// Parent IP Space ID of IP Allocation
	IpSpaceId string `pulumi:"ipSpaceId"`
	// Parent Org ID of IP Allocation
	OrgId string `pulumi:"orgId"`
	// Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
	Type       string  `pulumi:"type"`
	UsageState *string `pulumi:"usageState"`
}

// A collection of values returned by getIpSpaceIpAllocation.
type LookupIpSpaceIpAllocationResult struct {
	AllocationDate string `pulumi:"allocationDate"`
	Description    string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	Ip           string `pulumi:"ip"`
	IpAddress    string `pulumi:"ipAddress"`
	IpSpaceId    string `pulumi:"ipSpaceId"`
	OrgId        string `pulumi:"orgId"`
	PrefixLength string `pulumi:"prefixLength"`
	Type         string `pulumi:"type"`
	UsageState   string `pulumi:"usageState"`
	UsedById     string `pulumi:"usedById"`
}

func LookupIpSpaceIpAllocationOutput(ctx *pulumi.Context, args LookupIpSpaceIpAllocationOutputArgs, opts ...pulumi.InvokeOption) LookupIpSpaceIpAllocationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpSpaceIpAllocationResultOutput, error) {
			args := v.(LookupIpSpaceIpAllocationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", args, LookupIpSpaceIpAllocationResultOutput{}, options).(LookupIpSpaceIpAllocationResultOutput), nil
		}).(LookupIpSpaceIpAllocationResultOutput)
}

// A collection of arguments for invoking getIpSpaceIpAllocation.
type LookupIpSpaceIpAllocationOutputArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Parent IP Space ID of IP Allocation
	IpSpaceId pulumi.StringInput `pulumi:"ipSpaceId"`
	// Parent Org ID of IP Allocation
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
	Type       pulumi.StringInput    `pulumi:"type"`
	UsageState pulumi.StringPtrInput `pulumi:"usageState"`
}

func (LookupIpSpaceIpAllocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpSpaceIpAllocationArgs)(nil)).Elem()
}

// A collection of values returned by getIpSpaceIpAllocation.
type LookupIpSpaceIpAllocationResultOutput struct{ *pulumi.OutputState }

func (LookupIpSpaceIpAllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpSpaceIpAllocationResult)(nil)).Elem()
}

func (o LookupIpSpaceIpAllocationResultOutput) ToLookupIpSpaceIpAllocationResultOutput() LookupIpSpaceIpAllocationResultOutput {
	return o
}

func (o LookupIpSpaceIpAllocationResultOutput) ToLookupIpSpaceIpAllocationResultOutputWithContext(ctx context.Context) LookupIpSpaceIpAllocationResultOutput {
	return o
}

func (o LookupIpSpaceIpAllocationResultOutput) AllocationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.AllocationDate }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIpSpaceIpAllocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.Ip }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) IpSpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.IpSpaceId }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) PrefixLength() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.PrefixLength }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) UsageState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.UsageState }).(pulumi.StringOutput)
}

func (o LookupIpSpaceIpAllocationResultOutput) UsedById() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceIpAllocationResult) string { return v.UsedById }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpSpaceIpAllocationResultOutput{})
}
