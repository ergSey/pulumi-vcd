// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApiFilter struct {
	pulumi.CustomResourceState

	// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
	ExternalEndpointId pulumi.StringOutput `pulumi:"externalEndpointId"`
	// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
	// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
	// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
	// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
	UrlMatcherPattern pulumi.StringOutput `pulumi:"urlMatcherPattern"`
	// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
	// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
	UrlMatcherScope pulumi.StringOutput `pulumi:"urlMatcherScope"`
}

// NewApiFilter registers a new resource with the given unique name, arguments, and options.
func NewApiFilter(ctx *pulumi.Context,
	name string, args *ApiFilterArgs, opts ...pulumi.ResourceOption) (*ApiFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalEndpointId'")
	}
	if args.UrlMatcherPattern == nil {
		return nil, errors.New("invalid value for required argument 'UrlMatcherPattern'")
	}
	if args.UrlMatcherScope == nil {
		return nil, errors.New("invalid value for required argument 'UrlMatcherScope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiFilter
	err := ctx.RegisterResource("vcd:index/apiFilter:ApiFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiFilter gets an existing ApiFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiFilterState, opts ...pulumi.ResourceOption) (*ApiFilter, error) {
	var resource ApiFilter
	err := ctx.ReadResource("vcd:index/apiFilter:ApiFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiFilter resources.
type apiFilterState struct {
	// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
	ExternalEndpointId *string `pulumi:"externalEndpointId"`
	// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
	// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
	// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
	// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
	UrlMatcherPattern *string `pulumi:"urlMatcherPattern"`
	// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
	// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
	UrlMatcherScope *string `pulumi:"urlMatcherScope"`
}

type ApiFilterState struct {
	// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
	ExternalEndpointId pulumi.StringPtrInput
	// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
	// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
	// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
	// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
	UrlMatcherPattern pulumi.StringPtrInput
	// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
	// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
	UrlMatcherScope pulumi.StringPtrInput
}

func (ApiFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiFilterState)(nil)).Elem()
}

type apiFilterArgs struct {
	// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
	ExternalEndpointId string `pulumi:"externalEndpointId"`
	// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
	// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
	// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
	// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
	UrlMatcherPattern string `pulumi:"urlMatcherPattern"`
	// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
	// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
	UrlMatcherScope string `pulumi:"urlMatcherScope"`
}

// The set of arguments for constructing a ApiFilter resource.
type ApiFilterArgs struct {
	// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
	ExternalEndpointId pulumi.StringInput
	// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
	// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
	// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
	// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
	UrlMatcherPattern pulumi.StringInput
	// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
	// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
	UrlMatcherScope pulumi.StringInput
}

func (ApiFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiFilterArgs)(nil)).Elem()
}

type ApiFilterInput interface {
	pulumi.Input

	ToApiFilterOutput() ApiFilterOutput
	ToApiFilterOutputWithContext(ctx context.Context) ApiFilterOutput
}

func (*ApiFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFilter)(nil)).Elem()
}

func (i *ApiFilter) ToApiFilterOutput() ApiFilterOutput {
	return i.ToApiFilterOutputWithContext(context.Background())
}

func (i *ApiFilter) ToApiFilterOutputWithContext(ctx context.Context) ApiFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFilterOutput)
}

// ApiFilterArrayInput is an input type that accepts ApiFilterArray and ApiFilterArrayOutput values.
// You can construct a concrete instance of `ApiFilterArrayInput` via:
//
//	ApiFilterArray{ ApiFilterArgs{...} }
type ApiFilterArrayInput interface {
	pulumi.Input

	ToApiFilterArrayOutput() ApiFilterArrayOutput
	ToApiFilterArrayOutputWithContext(context.Context) ApiFilterArrayOutput
}

type ApiFilterArray []ApiFilterInput

func (ApiFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiFilter)(nil)).Elem()
}

func (i ApiFilterArray) ToApiFilterArrayOutput() ApiFilterArrayOutput {
	return i.ToApiFilterArrayOutputWithContext(context.Background())
}

func (i ApiFilterArray) ToApiFilterArrayOutputWithContext(ctx context.Context) ApiFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFilterArrayOutput)
}

// ApiFilterMapInput is an input type that accepts ApiFilterMap and ApiFilterMapOutput values.
// You can construct a concrete instance of `ApiFilterMapInput` via:
//
//	ApiFilterMap{ "key": ApiFilterArgs{...} }
type ApiFilterMapInput interface {
	pulumi.Input

	ToApiFilterMapOutput() ApiFilterMapOutput
	ToApiFilterMapOutputWithContext(context.Context) ApiFilterMapOutput
}

type ApiFilterMap map[string]ApiFilterInput

func (ApiFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiFilter)(nil)).Elem()
}

func (i ApiFilterMap) ToApiFilterMapOutput() ApiFilterMapOutput {
	return i.ToApiFilterMapOutputWithContext(context.Background())
}

func (i ApiFilterMap) ToApiFilterMapOutputWithContext(ctx context.Context) ApiFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFilterMapOutput)
}

type ApiFilterOutput struct{ *pulumi.OutputState }

func (ApiFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFilter)(nil)).Elem()
}

func (o ApiFilterOutput) ToApiFilterOutput() ApiFilterOutput {
	return o
}

func (o ApiFilterOutput) ToApiFilterOutputWithContext(ctx context.Context) ApiFilterOutput {
	return o
}

// ID of the [External Endpoint](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/external_endpoint) where this API Filter will process the requests to
func (o ApiFilterOutput) ExternalEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiFilter) pulumi.StringOutput { return v.ExternalEndpointId }).(pulumi.StringOutput)
}

// Request URL pattern, written as a regular expression. This argument cannot exceed 1024 characters.
// In most cases, it should end with `.*` (it is like a suffix) which specifies that all the parts of the URL coming after (like parameters) will be redirected to an external endpoint.
// It is important to note that in the case of `url_matcher_scope=EXT_UI_TENANT`, the tenant name is not part of the pattern, it will match the request after the tenant name - if request
// is *"/ext-ui/tenant/testOrg/custom/test"*, the pattern will match against */custom/test*
func (o ApiFilterOutput) UrlMatcherPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiFilter) pulumi.StringOutput { return v.UrlMatcherPattern }).(pulumi.StringOutput)
}

// Allowed values are `EXT_API`, `EXT_UI_PROVIDER`, `EXT_UI_TENANT` corresponding to
// */ext-api*, */ext-ui/provider*, */ext-ui/tenant/<tenant-name>*
func (o ApiFilterOutput) UrlMatcherScope() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiFilter) pulumi.StringOutput { return v.UrlMatcherScope }).(pulumi.StringOutput)
}

type ApiFilterArrayOutput struct{ *pulumi.OutputState }

func (ApiFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiFilter)(nil)).Elem()
}

func (o ApiFilterArrayOutput) ToApiFilterArrayOutput() ApiFilterArrayOutput {
	return o
}

func (o ApiFilterArrayOutput) ToApiFilterArrayOutputWithContext(ctx context.Context) ApiFilterArrayOutput {
	return o
}

func (o ApiFilterArrayOutput) Index(i pulumi.IntInput) ApiFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiFilter {
		return vs[0].([]*ApiFilter)[vs[1].(int)]
	}).(ApiFilterOutput)
}

type ApiFilterMapOutput struct{ *pulumi.OutputState }

func (ApiFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiFilter)(nil)).Elem()
}

func (o ApiFilterMapOutput) ToApiFilterMapOutput() ApiFilterMapOutput {
	return o
}

func (o ApiFilterMapOutput) ToApiFilterMapOutputWithContext(ctx context.Context) ApiFilterMapOutput {
	return o
}

func (o ApiFilterMapOutput) MapIndex(k pulumi.StringInput) ApiFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiFilter {
		return vs[0].(map[string]*ApiFilter)[vs[1].(string)]
	}).(ApiFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFilterInput)(nil)).Elem(), &ApiFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFilterArrayInput)(nil)).Elem(), ApiFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFilterMapInput)(nil)).Elem(), ApiFilterMap{})
	pulumi.RegisterOutputType(ApiFilterOutput{})
	pulumi.RegisterOutputType(ApiFilterArrayOutput{})
	pulumi.RegisterOutputType(ApiFilterMapOutput{})
}
