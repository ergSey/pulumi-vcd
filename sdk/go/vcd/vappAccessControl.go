// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VappAccessControl struct {
	pulumi.CustomResourceState

	// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
	// `FullControl`). Required if `sharedWithEveryone` is `true`.
	EveryoneAccessLevel pulumi.StringPtrOutput `pulumi:"everyoneAccessLevel"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
	// this property must be set to `false`.
	SharedWithEveryone pulumi.BoolOutput `pulumi:"sharedWithEveryone"`
	// one or more blocks defining a subject to which we are sharing.
	// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
	SharedWiths VappAccessControlSharedWithArrayOutput `pulumi:"sharedWiths"`
	// A unique identifier for the vApp.
	VappId pulumi.StringOutput `pulumi:"vappId"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewVappAccessControl registers a new resource with the given unique name, arguments, and options.
func NewVappAccessControl(ctx *pulumi.Context,
	name string, args *VappAccessControlArgs, opts ...pulumi.ResourceOption) (*VappAccessControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SharedWithEveryone == nil {
		return nil, errors.New("invalid value for required argument 'SharedWithEveryone'")
	}
	if args.VappId == nil {
		return nil, errors.New("invalid value for required argument 'VappId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VappAccessControl
	err := ctx.RegisterResource("vcd:index/vappAccessControl:VappAccessControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVappAccessControl gets an existing VappAccessControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVappAccessControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VappAccessControlState, opts ...pulumi.ResourceOption) (*VappAccessControl, error) {
	var resource VappAccessControl
	err := ctx.ReadResource("vcd:index/vappAccessControl:VappAccessControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VappAccessControl resources.
type vappAccessControlState struct {
	// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
	// `FullControl`). Required if `sharedWithEveryone` is `true`.
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
	// this property must be set to `false`.
	SharedWithEveryone *bool `pulumi:"sharedWithEveryone"`
	// one or more blocks defining a subject to which we are sharing.
	// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
	SharedWiths []VappAccessControlSharedWith `pulumi:"sharedWiths"`
	// A unique identifier for the vApp.
	VappId *string `pulumi:"vappId"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

type VappAccessControlState struct {
	// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
	// `FullControl`). Required if `sharedWithEveryone` is `true`.
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
	// this property must be set to `false`.
	SharedWithEveryone pulumi.BoolPtrInput
	// one or more blocks defining a subject to which we are sharing.
	// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
	SharedWiths VappAccessControlSharedWithArrayInput
	// A unique identifier for the vApp.
	VappId pulumi.StringPtrInput
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (VappAccessControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*vappAccessControlState)(nil)).Elem()
}

type vappAccessControlArgs struct {
	// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
	// `FullControl`). Required if `sharedWithEveryone` is `true`.
	EveryoneAccessLevel *string `pulumi:"everyoneAccessLevel"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
	// this property must be set to `false`.
	SharedWithEveryone bool `pulumi:"sharedWithEveryone"`
	// one or more blocks defining a subject to which we are sharing.
	// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
	SharedWiths []VappAccessControlSharedWith `pulumi:"sharedWiths"`
	// A unique identifier for the vApp.
	VappId string `pulumi:"vappId"`
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a VappAccessControl resource.
type VappAccessControlArgs struct {
	// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
	// `FullControl`). Required if `sharedWithEveryone` is `true`.
	EveryoneAccessLevel pulumi.StringPtrInput
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
	// this property must be set to `false`.
	SharedWithEveryone pulumi.BoolInput
	// one or more blocks defining a subject to which we are sharing.
	// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
	SharedWiths VappAccessControlSharedWithArrayInput
	// A unique identifier for the vApp.
	VappId pulumi.StringInput
	// The name of organization to which the vApp belongs. Optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (VappAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vappAccessControlArgs)(nil)).Elem()
}

type VappAccessControlInput interface {
	pulumi.Input

	ToVappAccessControlOutput() VappAccessControlOutput
	ToVappAccessControlOutputWithContext(ctx context.Context) VappAccessControlOutput
}

func (*VappAccessControl) ElementType() reflect.Type {
	return reflect.TypeOf((**VappAccessControl)(nil)).Elem()
}

func (i *VappAccessControl) ToVappAccessControlOutput() VappAccessControlOutput {
	return i.ToVappAccessControlOutputWithContext(context.Background())
}

func (i *VappAccessControl) ToVappAccessControlOutputWithContext(ctx context.Context) VappAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappAccessControlOutput)
}

// VappAccessControlArrayInput is an input type that accepts VappAccessControlArray and VappAccessControlArrayOutput values.
// You can construct a concrete instance of `VappAccessControlArrayInput` via:
//
//	VappAccessControlArray{ VappAccessControlArgs{...} }
type VappAccessControlArrayInput interface {
	pulumi.Input

	ToVappAccessControlArrayOutput() VappAccessControlArrayOutput
	ToVappAccessControlArrayOutputWithContext(context.Context) VappAccessControlArrayOutput
}

type VappAccessControlArray []VappAccessControlInput

func (VappAccessControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappAccessControl)(nil)).Elem()
}

func (i VappAccessControlArray) ToVappAccessControlArrayOutput() VappAccessControlArrayOutput {
	return i.ToVappAccessControlArrayOutputWithContext(context.Background())
}

func (i VappAccessControlArray) ToVappAccessControlArrayOutputWithContext(ctx context.Context) VappAccessControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappAccessControlArrayOutput)
}

// VappAccessControlMapInput is an input type that accepts VappAccessControlMap and VappAccessControlMapOutput values.
// You can construct a concrete instance of `VappAccessControlMapInput` via:
//
//	VappAccessControlMap{ "key": VappAccessControlArgs{...} }
type VappAccessControlMapInput interface {
	pulumi.Input

	ToVappAccessControlMapOutput() VappAccessControlMapOutput
	ToVappAccessControlMapOutputWithContext(context.Context) VappAccessControlMapOutput
}

type VappAccessControlMap map[string]VappAccessControlInput

func (VappAccessControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappAccessControl)(nil)).Elem()
}

func (i VappAccessControlMap) ToVappAccessControlMapOutput() VappAccessControlMapOutput {
	return i.ToVappAccessControlMapOutputWithContext(context.Background())
}

func (i VappAccessControlMap) ToVappAccessControlMapOutputWithContext(ctx context.Context) VappAccessControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappAccessControlMapOutput)
}

type VappAccessControlOutput struct{ *pulumi.OutputState }

func (VappAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VappAccessControl)(nil)).Elem()
}

func (o VappAccessControlOutput) ToVappAccessControlOutput() VappAccessControlOutput {
	return o
}

func (o VappAccessControlOutput) ToVappAccessControlOutputWithContext(ctx context.Context) VappAccessControlOutput {
	return o
}

// Access level when the vApp is shared with everyone (one of `ReadOnly`, `Change`,
// `FullControl`). Required if `sharedWithEveryone` is `true`.
func (o VappAccessControlOutput) EveryoneAccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappAccessControl) pulumi.StringPtrOutput { return v.EveryoneAccessLevel }).(pulumi.StringPtrOutput)
}

// The name of organization to which the vApp belongs. Optional if defined at provider level.
func (o VappAccessControlOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappAccessControl) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Whether the vApp is shared with everyone. If any `sharedWith` blocks are included,
// this property must be set to `false`.
func (o VappAccessControlOutput) SharedWithEveryone() pulumi.BoolOutput {
	return o.ApplyT(func(v *VappAccessControl) pulumi.BoolOutput { return v.SharedWithEveryone }).(pulumi.BoolOutput)
}

// one or more blocks defining a subject to which we are sharing.
// See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
func (o VappAccessControlOutput) SharedWiths() VappAccessControlSharedWithArrayOutput {
	return o.ApplyT(func(v *VappAccessControl) VappAccessControlSharedWithArrayOutput { return v.SharedWiths }).(VappAccessControlSharedWithArrayOutput)
}

// A unique identifier for the vApp.
func (o VappAccessControlOutput) VappId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappAccessControl) pulumi.StringOutput { return v.VappId }).(pulumi.StringOutput)
}

// The name of organization to which the vApp belongs. Optional if defined at provider level.
func (o VappAccessControlOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappAccessControl) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type VappAccessControlArrayOutput struct{ *pulumi.OutputState }

func (VappAccessControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappAccessControl)(nil)).Elem()
}

func (o VappAccessControlArrayOutput) ToVappAccessControlArrayOutput() VappAccessControlArrayOutput {
	return o
}

func (o VappAccessControlArrayOutput) ToVappAccessControlArrayOutputWithContext(ctx context.Context) VappAccessControlArrayOutput {
	return o
}

func (o VappAccessControlArrayOutput) Index(i pulumi.IntInput) VappAccessControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VappAccessControl {
		return vs[0].([]*VappAccessControl)[vs[1].(int)]
	}).(VappAccessControlOutput)
}

type VappAccessControlMapOutput struct{ *pulumi.OutputState }

func (VappAccessControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappAccessControl)(nil)).Elem()
}

func (o VappAccessControlMapOutput) ToVappAccessControlMapOutput() VappAccessControlMapOutput {
	return o
}

func (o VappAccessControlMapOutput) ToVappAccessControlMapOutputWithContext(ctx context.Context) VappAccessControlMapOutput {
	return o
}

func (o VappAccessControlMapOutput) MapIndex(k pulumi.StringInput) VappAccessControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VappAccessControl {
		return vs[0].(map[string]*VappAccessControl)[vs[1].(string)]
	}).(VappAccessControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VappAccessControlInput)(nil)).Elem(), &VappAccessControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappAccessControlArrayInput)(nil)).Elem(), VappAccessControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappAccessControlMapInput)(nil)).Elem(), VappAccessControlMap{})
	pulumi.RegisterOutputType(VappAccessControlOutput{})
	pulumi.RegisterOutputType(VappAccessControlArrayOutput{})
	pulumi.RegisterOutputType(VappAccessControlMapOutput{})
}
