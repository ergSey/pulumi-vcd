// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbServerPool struct {
	pulumi.CustomResourceState

	// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
	// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
	AlgorithmParameters pulumi.StringPtrOutput `pulumi:"algorithmParameters"`
	// Server Pool description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the edge gateway on which the server pool is to be created
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// When transparency is `false` (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	EnableTransparency pulumi.BoolPtrOutput `pulumi:"enableTransparency"`
	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	//
	// <a id="member"></a>
	Members LbServerPoolMemberArrayOutput `pulumi:"members"`
	// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
	MonitorId pulumi.StringPtrOutput `pulumi:"monitorId"`
	// Server Pool name
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewLbServerPool registers a new resource with the given unique name, arguments, and options.
func NewLbServerPool(ctx *pulumi.Context,
	name string, args *LbServerPoolArgs, opts ...pulumi.ResourceOption) (*LbServerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbServerPool
	err := ctx.RegisterResource("vcd:index/lbServerPool:LbServerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbServerPool gets an existing LbServerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbServerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbServerPoolState, opts ...pulumi.ResourceOption) (*LbServerPool, error) {
	var resource LbServerPool
	err := ctx.ReadResource("vcd:index/lbServerPool:LbServerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbServerPool resources.
type lbServerPoolState struct {
	// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
	Algorithm *string `pulumi:"algorithm"`
	// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
	// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
	AlgorithmParameters *string `pulumi:"algorithmParameters"`
	// Server Pool description
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which the server pool is to be created
	EdgeGateway *string `pulumi:"edgeGateway"`
	// When transparency is `false` (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	EnableTransparency *bool `pulumi:"enableTransparency"`
	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	//
	// <a id="member"></a>
	Members []LbServerPoolMember `pulumi:"members"`
	// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
	MonitorId *string `pulumi:"monitorId"`
	// Server Pool name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

type LbServerPoolState struct {
	// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
	Algorithm pulumi.StringPtrInput
	// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
	// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
	AlgorithmParameters pulumi.StringPtrInput
	// Server Pool description
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which the server pool is to be created
	EdgeGateway pulumi.StringPtrInput
	// When transparency is `false` (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	EnableTransparency pulumi.BoolPtrInput
	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	//
	// <a id="member"></a>
	Members LbServerPoolMemberArrayInput
	// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
	MonitorId pulumi.StringPtrInput
	// Server Pool name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbServerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbServerPoolState)(nil)).Elem()
}

type lbServerPoolArgs struct {
	// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
	Algorithm string `pulumi:"algorithm"`
	// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
	// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
	AlgorithmParameters *string `pulumi:"algorithmParameters"`
	// Server Pool description
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which the server pool is to be created
	EdgeGateway string `pulumi:"edgeGateway"`
	// When transparency is `false` (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	EnableTransparency *bool `pulumi:"enableTransparency"`
	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	//
	// <a id="member"></a>
	Members []LbServerPoolMember `pulumi:"members"`
	// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
	MonitorId *string `pulumi:"monitorId"`
	// Server Pool name
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a LbServerPool resource.
type LbServerPoolArgs struct {
	// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
	Algorithm pulumi.StringInput
	// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
	// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
	AlgorithmParameters pulumi.StringPtrInput
	// Server Pool description
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which the server pool is to be created
	EdgeGateway pulumi.StringInput
	// When transparency is `false` (default) backend servers see the IP address of the
	// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
	// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
	// the edge gateway.
	EnableTransparency pulumi.BoolPtrInput
	// A block to define server pool members. Multiple can be used. See Member and
	// example for usage details.
	//
	// <a id="member"></a>
	Members LbServerPoolMemberArrayInput
	// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
	MonitorId pulumi.StringPtrInput
	// Server Pool name
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (LbServerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbServerPoolArgs)(nil)).Elem()
}

type LbServerPoolInput interface {
	pulumi.Input

	ToLbServerPoolOutput() LbServerPoolOutput
	ToLbServerPoolOutputWithContext(ctx context.Context) LbServerPoolOutput
}

func (*LbServerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**LbServerPool)(nil)).Elem()
}

func (i *LbServerPool) ToLbServerPoolOutput() LbServerPoolOutput {
	return i.ToLbServerPoolOutputWithContext(context.Background())
}

func (i *LbServerPool) ToLbServerPoolOutputWithContext(ctx context.Context) LbServerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServerPoolOutput)
}

// LbServerPoolArrayInput is an input type that accepts LbServerPoolArray and LbServerPoolArrayOutput values.
// You can construct a concrete instance of `LbServerPoolArrayInput` via:
//
//	LbServerPoolArray{ LbServerPoolArgs{...} }
type LbServerPoolArrayInput interface {
	pulumi.Input

	ToLbServerPoolArrayOutput() LbServerPoolArrayOutput
	ToLbServerPoolArrayOutputWithContext(context.Context) LbServerPoolArrayOutput
}

type LbServerPoolArray []LbServerPoolInput

func (LbServerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbServerPool)(nil)).Elem()
}

func (i LbServerPoolArray) ToLbServerPoolArrayOutput() LbServerPoolArrayOutput {
	return i.ToLbServerPoolArrayOutputWithContext(context.Background())
}

func (i LbServerPoolArray) ToLbServerPoolArrayOutputWithContext(ctx context.Context) LbServerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServerPoolArrayOutput)
}

// LbServerPoolMapInput is an input type that accepts LbServerPoolMap and LbServerPoolMapOutput values.
// You can construct a concrete instance of `LbServerPoolMapInput` via:
//
//	LbServerPoolMap{ "key": LbServerPoolArgs{...} }
type LbServerPoolMapInput interface {
	pulumi.Input

	ToLbServerPoolMapOutput() LbServerPoolMapOutput
	ToLbServerPoolMapOutputWithContext(context.Context) LbServerPoolMapOutput
}

type LbServerPoolMap map[string]LbServerPoolInput

func (LbServerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbServerPool)(nil)).Elem()
}

func (i LbServerPoolMap) ToLbServerPoolMapOutput() LbServerPoolMapOutput {
	return i.ToLbServerPoolMapOutputWithContext(context.Background())
}

func (i LbServerPoolMap) ToLbServerPoolMapOutputWithContext(ctx context.Context) LbServerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbServerPoolMapOutput)
}

type LbServerPoolOutput struct{ *pulumi.OutputState }

func (LbServerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbServerPool)(nil)).Elem()
}

func (o LbServerPoolOutput) ToLbServerPoolOutput() LbServerPoolOutput {
	return o
}

func (o LbServerPoolOutput) ToLbServerPoolOutputWithContext(ctx context.Context) LbServerPoolOutput {
	return o
}

// Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
func (o LbServerPoolOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
// parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
func (o LbServerPoolOutput) AlgorithmParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringPtrOutput { return v.AlgorithmParameters }).(pulumi.StringPtrOutput)
}

// Server Pool description
func (o LbServerPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the edge gateway on which the server pool is to be created
func (o LbServerPoolOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// When transparency is `false` (default) backend servers see the IP address of the
// traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
// address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
// the edge gateway.
func (o LbServerPoolOutput) EnableTransparency() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.BoolPtrOutput { return v.EnableTransparency }).(pulumi.BoolPtrOutput)
}

// A block to define server pool members. Multiple can be used. See Member and
// example for usage details.
//
// <a id="member"></a>
func (o LbServerPoolOutput) Members() LbServerPoolMemberArrayOutput {
	return o.ApplyT(func(v *LbServerPool) LbServerPoolMemberArrayOutput { return v.Members }).(LbServerPoolMemberArrayOutput)
}

// `LbServiceMonitor` resource `id` to attach to server pool for health check parameters
func (o LbServerPoolOutput) MonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringPtrOutput { return v.MonitorId }).(pulumi.StringPtrOutput)
}

// Server Pool name
func (o LbServerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o LbServerPoolOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o LbServerPoolOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LbServerPool) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type LbServerPoolArrayOutput struct{ *pulumi.OutputState }

func (LbServerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbServerPool)(nil)).Elem()
}

func (o LbServerPoolArrayOutput) ToLbServerPoolArrayOutput() LbServerPoolArrayOutput {
	return o
}

func (o LbServerPoolArrayOutput) ToLbServerPoolArrayOutputWithContext(ctx context.Context) LbServerPoolArrayOutput {
	return o
}

func (o LbServerPoolArrayOutput) Index(i pulumi.IntInput) LbServerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbServerPool {
		return vs[0].([]*LbServerPool)[vs[1].(int)]
	}).(LbServerPoolOutput)
}

type LbServerPoolMapOutput struct{ *pulumi.OutputState }

func (LbServerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbServerPool)(nil)).Elem()
}

func (o LbServerPoolMapOutput) ToLbServerPoolMapOutput() LbServerPoolMapOutput {
	return o
}

func (o LbServerPoolMapOutput) ToLbServerPoolMapOutputWithContext(ctx context.Context) LbServerPoolMapOutput {
	return o
}

func (o LbServerPoolMapOutput) MapIndex(k pulumi.StringInput) LbServerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbServerPool {
		return vs[0].(map[string]*LbServerPool)[vs[1].(string)]
	}).(LbServerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbServerPoolInput)(nil)).Elem(), &LbServerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbServerPoolArrayInput)(nil)).Elem(), LbServerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbServerPoolMapInput)(nil)).Elem(), LbServerPoolMap{})
	pulumi.RegisterOutputType(LbServerPoolOutput{})
	pulumi.RegisterOutputType(LbServerPoolArrayOutput{})
	pulumi.RegisterOutputType(LbServerPoolMapOutput{})
}
