// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrgSaml struct {
	pulumi.CustomResourceState

	// The name of the SAML attribute that returns the email address of the user
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// If true, the organization will use SAML for authentication
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	EntityId pulumi.StringPtrOutput `pulumi:"entityId"`
	// The name of the SAML attribute that returns the first name of the user
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// The name of the SAML attribute that returns the full name of the user
	FullName pulumi.StringPtrOutput `pulumi:"fullName"`
	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
	IdentityProviderMetadataFile pulumi.StringPtrOutput `pulumi:"identityProviderMetadataFile"`
	// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
	IdentityProviderMetadataText pulumi.StringPtrOutput `pulumi:"identityProviderMetadataText"`
	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The name of the SAML attribute that returns the identifiers of all roles of the user
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// The name of the SAML attribute that returns the surname of the user
	Surname pulumi.StringPtrOutput `pulumi:"surname"`
	// The name of the SAML attribute that returns the username of the user
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
}

// NewOrgSaml registers a new resource with the given unique name, arguments, and options.
func NewOrgSaml(ctx *pulumi.Context,
	name string, args *OrgSamlArgs, opts ...pulumi.ResourceOption) (*OrgSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgSaml
	err := ctx.RegisterResource("vcd:index/orgSaml:OrgSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgSaml gets an existing OrgSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgSamlState, opts ...pulumi.ResourceOption) (*OrgSaml, error) {
	var resource OrgSaml
	err := ctx.ReadResource("vcd:index/orgSaml:OrgSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgSaml resources.
type orgSamlState struct {
	// The name of the SAML attribute that returns the email address of the user
	Email *string `pulumi:"email"`
	// If true, the organization will use SAML for authentication
	Enabled *bool `pulumi:"enabled"`
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	EntityId *string `pulumi:"entityId"`
	// The name of the SAML attribute that returns the first name of the user
	FirstName *string `pulumi:"firstName"`
	// The name of the SAML attribute that returns the full name of the user
	FullName *string `pulumi:"fullName"`
	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	Group *string `pulumi:"group"`
	// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
	IdentityProviderMetadataFile *string `pulumi:"identityProviderMetadataFile"`
	// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
	IdentityProviderMetadataText *string `pulumi:"identityProviderMetadataText"`
	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	OrgId *string `pulumi:"orgId"`
	// The name of the SAML attribute that returns the identifiers of all roles of the user
	Role *string `pulumi:"role"`
	// The name of the SAML attribute that returns the surname of the user
	Surname *string `pulumi:"surname"`
	// The name of the SAML attribute that returns the username of the user
	UserName *string `pulumi:"userName"`
}

type OrgSamlState struct {
	// The name of the SAML attribute that returns the email address of the user
	Email pulumi.StringPtrInput
	// If true, the organization will use SAML for authentication
	Enabled pulumi.BoolPtrInput
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	EntityId pulumi.StringPtrInput
	// The name of the SAML attribute that returns the first name of the user
	FirstName pulumi.StringPtrInput
	// The name of the SAML attribute that returns the full name of the user
	FullName pulumi.StringPtrInput
	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	Group pulumi.StringPtrInput
	// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
	IdentityProviderMetadataFile pulumi.StringPtrInput
	// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
	IdentityProviderMetadataText pulumi.StringPtrInput
	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	OrgId pulumi.StringPtrInput
	// The name of the SAML attribute that returns the identifiers of all roles of the user
	Role pulumi.StringPtrInput
	// The name of the SAML attribute that returns the surname of the user
	Surname pulumi.StringPtrInput
	// The name of the SAML attribute that returns the username of the user
	UserName pulumi.StringPtrInput
}

func (OrgSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgSamlState)(nil)).Elem()
}

type orgSamlArgs struct {
	// The name of the SAML attribute that returns the email address of the user
	Email *string `pulumi:"email"`
	// If true, the organization will use SAML for authentication
	Enabled bool `pulumi:"enabled"`
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	EntityId *string `pulumi:"entityId"`
	// The name of the SAML attribute that returns the first name of the user
	FirstName *string `pulumi:"firstName"`
	// The name of the SAML attribute that returns the full name of the user
	FullName *string `pulumi:"fullName"`
	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	Group *string `pulumi:"group"`
	// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
	IdentityProviderMetadataFile *string `pulumi:"identityProviderMetadataFile"`
	// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
	IdentityProviderMetadataText *string `pulumi:"identityProviderMetadataText"`
	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	OrgId string `pulumi:"orgId"`
	// The name of the SAML attribute that returns the identifiers of all roles of the user
	Role *string `pulumi:"role"`
	// The name of the SAML attribute that returns the surname of the user
	Surname *string `pulumi:"surname"`
	// The name of the SAML attribute that returns the username of the user
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a OrgSaml resource.
type OrgSamlArgs struct {
	// The name of the SAML attribute that returns the email address of the user
	Email pulumi.StringPtrInput
	// If true, the organization will use SAML for authentication
	Enabled pulumi.BoolInput
	// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
	EntityId pulumi.StringPtrInput
	// The name of the SAML attribute that returns the first name of the user
	FirstName pulumi.StringPtrInput
	// The name of the SAML attribute that returns the full name of the user
	FullName pulumi.StringPtrInput
	// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
	Group pulumi.StringPtrInput
	// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
	IdentityProviderMetadataFile pulumi.StringPtrInput
	// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
	IdentityProviderMetadataText pulumi.StringPtrInput
	// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
	OrgId pulumi.StringInput
	// The name of the SAML attribute that returns the identifiers of all roles of the user
	Role pulumi.StringPtrInput
	// The name of the SAML attribute that returns the surname of the user
	Surname pulumi.StringPtrInput
	// The name of the SAML attribute that returns the username of the user
	UserName pulumi.StringPtrInput
}

func (OrgSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgSamlArgs)(nil)).Elem()
}

type OrgSamlInput interface {
	pulumi.Input

	ToOrgSamlOutput() OrgSamlOutput
	ToOrgSamlOutputWithContext(ctx context.Context) OrgSamlOutput
}

func (*OrgSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgSaml)(nil)).Elem()
}

func (i *OrgSaml) ToOrgSamlOutput() OrgSamlOutput {
	return i.ToOrgSamlOutputWithContext(context.Background())
}

func (i *OrgSaml) ToOrgSamlOutputWithContext(ctx context.Context) OrgSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSamlOutput)
}

// OrgSamlArrayInput is an input type that accepts OrgSamlArray and OrgSamlArrayOutput values.
// You can construct a concrete instance of `OrgSamlArrayInput` via:
//
//	OrgSamlArray{ OrgSamlArgs{...} }
type OrgSamlArrayInput interface {
	pulumi.Input

	ToOrgSamlArrayOutput() OrgSamlArrayOutput
	ToOrgSamlArrayOutputWithContext(context.Context) OrgSamlArrayOutput
}

type OrgSamlArray []OrgSamlInput

func (OrgSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgSaml)(nil)).Elem()
}

func (i OrgSamlArray) ToOrgSamlArrayOutput() OrgSamlArrayOutput {
	return i.ToOrgSamlArrayOutputWithContext(context.Background())
}

func (i OrgSamlArray) ToOrgSamlArrayOutputWithContext(ctx context.Context) OrgSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSamlArrayOutput)
}

// OrgSamlMapInput is an input type that accepts OrgSamlMap and OrgSamlMapOutput values.
// You can construct a concrete instance of `OrgSamlMapInput` via:
//
//	OrgSamlMap{ "key": OrgSamlArgs{...} }
type OrgSamlMapInput interface {
	pulumi.Input

	ToOrgSamlMapOutput() OrgSamlMapOutput
	ToOrgSamlMapOutputWithContext(context.Context) OrgSamlMapOutput
}

type OrgSamlMap map[string]OrgSamlInput

func (OrgSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgSaml)(nil)).Elem()
}

func (i OrgSamlMap) ToOrgSamlMapOutput() OrgSamlMapOutput {
	return i.ToOrgSamlMapOutputWithContext(context.Background())
}

func (i OrgSamlMap) ToOrgSamlMapOutputWithContext(ctx context.Context) OrgSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgSamlMapOutput)
}

type OrgSamlOutput struct{ *pulumi.OutputState }

func (OrgSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgSaml)(nil)).Elem()
}

func (o OrgSamlOutput) ToOrgSamlOutput() OrgSamlOutput {
	return o
}

func (o OrgSamlOutput) ToOrgSamlOutputWithContext(ctx context.Context) OrgSamlOutput {
	return o
}

// The name of the SAML attribute that returns the email address of the user
func (o OrgSamlOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// If true, the organization will use SAML for authentication
func (o OrgSamlOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Your service provider entity ID. Once you set this field, it cannot be changed back to empty
func (o OrgSamlOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.EntityId }).(pulumi.StringPtrOutput)
}

// The name of the SAML attribute that returns the first name of the user
func (o OrgSamlOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// The name of the SAML attribute that returns the full name of the user
func (o OrgSamlOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.FullName }).(pulumi.StringPtrOutput)
}

// The name of the SAML attribute that returns the identifiers of all the groups of which the user is a member
func (o OrgSamlOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// Name of a file containing the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataText` is not defined
func (o OrgSamlOutput) IdentityProviderMetadataFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.IdentityProviderMetadataFile }).(pulumi.StringPtrOutput)
}

// Text of the metadata text from a SAML Identity Provider. Required if `identityProviderMetadataFile` is not defined
func (o OrgSamlOutput) IdentityProviderMetadataText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.IdentityProviderMetadataText }).(pulumi.StringPtrOutput)
}

// Since there is only one SAML configuration available for an organization, the resource can be identified by the Org itself
func (o OrgSamlOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The name of the SAML attribute that returns the identifiers of all roles of the user
func (o OrgSamlOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// The name of the SAML attribute that returns the surname of the user
func (o OrgSamlOutput) Surname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.Surname }).(pulumi.StringPtrOutput)
}

// The name of the SAML attribute that returns the username of the user
func (o OrgSamlOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgSaml) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

type OrgSamlArrayOutput struct{ *pulumi.OutputState }

func (OrgSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgSaml)(nil)).Elem()
}

func (o OrgSamlArrayOutput) ToOrgSamlArrayOutput() OrgSamlArrayOutput {
	return o
}

func (o OrgSamlArrayOutput) ToOrgSamlArrayOutputWithContext(ctx context.Context) OrgSamlArrayOutput {
	return o
}

func (o OrgSamlArrayOutput) Index(i pulumi.IntInput) OrgSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgSaml {
		return vs[0].([]*OrgSaml)[vs[1].(int)]
	}).(OrgSamlOutput)
}

type OrgSamlMapOutput struct{ *pulumi.OutputState }

func (OrgSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgSaml)(nil)).Elem()
}

func (o OrgSamlMapOutput) ToOrgSamlMapOutput() OrgSamlMapOutput {
	return o
}

func (o OrgSamlMapOutput) ToOrgSamlMapOutputWithContext(ctx context.Context) OrgSamlMapOutput {
	return o
}

func (o OrgSamlMapOutput) MapIndex(k pulumi.StringInput) OrgSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgSaml {
		return vs[0].(map[string]*OrgSaml)[vs[1].(string)]
	}).(OrgSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSamlInput)(nil)).Elem(), &OrgSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSamlArrayInput)(nil)).Elem(), OrgSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgSamlMapInput)(nil)).Elem(), OrgSamlMap{})
	pulumi.RegisterOutputType(OrgSamlOutput{})
	pulumi.RegisterOutputType(OrgSamlArrayOutput{})
	pulumi.RegisterOutputType(OrgSamlMapOutput{})
}
