// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
//
// Supported in provider *v3.11+*.
//
// ## Example Usage
//
// ### IP Discovery Profile)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			nsxt, err := vcd.GetNsxtManager(ctx, &vcd.GetNsxtManagerArgs{
//				Name: "nsxManager1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.GetNsxtSegmentIpDiscoveryProfile(ctx, &vcd.GetNsxtSegmentIpDiscoveryProfileArgs{
//				Name:          "ip-discovery-profile-0",
//				NsxtManagerId: pulumi.StringRef(nsxt.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNsxtSegmentIpDiscoveryProfile(ctx *pulumi.Context, args *GetNsxtSegmentIpDiscoveryProfileArgs, opts ...pulumi.InvokeOption) (*GetNsxtSegmentIpDiscoveryProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNsxtSegmentIpDiscoveryProfileResult
	err := ctx.Invoke("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtSegmentIpDiscoveryProfile.
type GetNsxtSegmentIpDiscoveryProfileArgs struct {
	// The name of Segment Profile
	Name string `pulumi:"name"`
	// Segment Profile search context. Use when searching by NSX-T manager
	NsxtManagerId *string `pulumi:"nsxtManagerId"`
	// Segment Profile search context. Use when searching by VDC group
	//
	// > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
	VdcGroupId *string `pulumi:"vdcGroupId"`
	// Segment Profile search context. Use when searching by VDC
	VdcId *string `pulumi:"vdcId"`
}

// A collection of values returned by getNsxtSegmentIpDiscoveryProfile.
type GetNsxtSegmentIpDiscoveryProfileResult struct {
	// Indicates the number of ARP snooped IP addresses to be remembered per
	// logical port
	ArpBindingLimit int `pulumi:"arpBindingLimit"`
	// ARP and ND (Neighbor Discovery) cache timeout (in minutes)
	ArpBindingTimeout int `pulumi:"arpBindingTimeout"`
	// Description of IP Discovery Profile
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Defines whether ARP snooping is enabled
	IsArpSnoopingEnabled bool `pulumi:"isArpSnoopingEnabled"`
	// Defines whether DHCP snooping for IPv4 is enabled
	IsDhcpSnoopingV4Enabled bool `pulumi:"isDhcpSnoopingV4Enabled"`
	// Defines whether DHCP snooping for IPv6 is enabled
	IsDhcpSnoopingV6Enabled bool `pulumi:"isDhcpSnoopingV6Enabled"`
	// Defines whether duplicate IP detection is enabled. Duplicate
	// IP detection is used to determine if there is any IP conflict with any other port on the same
	// logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where
	// the IP was discovered last
	IsDuplicateIpDetectionEnabled bool `pulumi:"isDuplicateIpDetectionEnabled"`
	// Defines whether ND (Neighbor Discovery) snooping is enabled. If true,
	// this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in
	// the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS
	// messages, we will learn about the source which sent this NS message. From the NA message, we will
	// learn the resolved address in the message which the VM is a recipient of. Addresses snooped by
	// this method are subject to TOFU
	IsNdSnoopingEnabled bool `pulumi:"isNdSnoopingEnabled"`
	// Defines whether `Trust on First Use(TOFU)` paradigm is enabled
	IsTofuEnabled bool `pulumi:"isTofuEnabled"`
	// Defines whether fetching IPv4 address using vm-tools is enabled. This
	// option is only supported on ESX where vm-tools is installed
	IsVmtoolsV4Enabled bool `pulumi:"isVmtoolsV4Enabled"`
	// Defines whether fetching IPv6 address using vm-tools is enabled. This
	// will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the
	// VMTools software
	IsVmtoolsV6Enabled bool   `pulumi:"isVmtoolsV6Enabled"`
	Name               string `pulumi:"name"`
	// Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses
	NdSnoopingLimit int     `pulumi:"ndSnoopingLimit"`
	NsxtManagerId   *string `pulumi:"nsxtManagerId"`
	VdcGroupId      *string `pulumi:"vdcGroupId"`
	VdcId           *string `pulumi:"vdcId"`
}

func GetNsxtSegmentIpDiscoveryProfileOutput(ctx *pulumi.Context, args GetNsxtSegmentIpDiscoveryProfileOutputArgs, opts ...pulumi.InvokeOption) GetNsxtSegmentIpDiscoveryProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNsxtSegmentIpDiscoveryProfileResultOutput, error) {
			args := v.(GetNsxtSegmentIpDiscoveryProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", args, GetNsxtSegmentIpDiscoveryProfileResultOutput{}, options).(GetNsxtSegmentIpDiscoveryProfileResultOutput), nil
		}).(GetNsxtSegmentIpDiscoveryProfileResultOutput)
}

// A collection of arguments for invoking getNsxtSegmentIpDiscoveryProfile.
type GetNsxtSegmentIpDiscoveryProfileOutputArgs struct {
	// The name of Segment Profile
	Name pulumi.StringInput `pulumi:"name"`
	// Segment Profile search context. Use when searching by NSX-T manager
	NsxtManagerId pulumi.StringPtrInput `pulumi:"nsxtManagerId"`
	// Segment Profile search context. Use when searching by VDC group
	//
	// > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
	VdcGroupId pulumi.StringPtrInput `pulumi:"vdcGroupId"`
	// Segment Profile search context. Use when searching by VDC
	VdcId pulumi.StringPtrInput `pulumi:"vdcId"`
}

func (GetNsxtSegmentIpDiscoveryProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtSegmentIpDiscoveryProfileArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtSegmentIpDiscoveryProfile.
type GetNsxtSegmentIpDiscoveryProfileResultOutput struct{ *pulumi.OutputState }

func (GetNsxtSegmentIpDiscoveryProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtSegmentIpDiscoveryProfileResult)(nil)).Elem()
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) ToGetNsxtSegmentIpDiscoveryProfileResultOutput() GetNsxtSegmentIpDiscoveryProfileResultOutput {
	return o
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) ToGetNsxtSegmentIpDiscoveryProfileResultOutputWithContext(ctx context.Context) GetNsxtSegmentIpDiscoveryProfileResultOutput {
	return o
}

// Indicates the number of ARP snooped IP addresses to be remembered per
// logical port
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) ArpBindingLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) int { return v.ArpBindingLimit }).(pulumi.IntOutput)
}

// ARP and ND (Neighbor Discovery) cache timeout (in minutes)
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) ArpBindingTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) int { return v.ArpBindingTimeout }).(pulumi.IntOutput)
}

// Description of IP Discovery Profile
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Defines whether ARP snooping is enabled
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsArpSnoopingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsArpSnoopingEnabled }).(pulumi.BoolOutput)
}

// Defines whether DHCP snooping for IPv4 is enabled
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsDhcpSnoopingV4Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsDhcpSnoopingV4Enabled }).(pulumi.BoolOutput)
}

// Defines whether DHCP snooping for IPv6 is enabled
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsDhcpSnoopingV6Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsDhcpSnoopingV6Enabled }).(pulumi.BoolOutput)
}

// Defines whether duplicate IP detection is enabled. Duplicate
// IP detection is used to determine if there is any IP conflict with any other port on the same
// logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where
// the IP was discovered last
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsDuplicateIpDetectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsDuplicateIpDetectionEnabled }).(pulumi.BoolOutput)
}

// Defines whether ND (Neighbor Discovery) snooping is enabled. If true,
// this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in
// the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS
// messages, we will learn about the source which sent this NS message. From the NA message, we will
// learn the resolved address in the message which the VM is a recipient of. Addresses snooped by
// this method are subject to TOFU
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsNdSnoopingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsNdSnoopingEnabled }).(pulumi.BoolOutput)
}

// Defines whether `Trust on First Use(TOFU)` paradigm is enabled
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsTofuEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsTofuEnabled }).(pulumi.BoolOutput)
}

// Defines whether fetching IPv4 address using vm-tools is enabled. This
// option is only supported on ESX where vm-tools is installed
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsVmtoolsV4Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsVmtoolsV4Enabled }).(pulumi.BoolOutput)
}

// Defines whether fetching IPv6 address using vm-tools is enabled. This
// will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the
// VMTools software
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) IsVmtoolsV6Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) bool { return v.IsVmtoolsV6Enabled }).(pulumi.BoolOutput)
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses
func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) NdSnoopingLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) int { return v.NdSnoopingLimit }).(pulumi.IntOutput)
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) NsxtManagerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) *string { return v.NsxtManagerId }).(pulumi.StringPtrOutput)
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) VdcGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) *string { return v.VdcGroupId }).(pulumi.StringPtrOutput)
}

func (o GetNsxtSegmentIpDiscoveryProfileResultOutput) VdcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentIpDiscoveryProfileResult) *string { return v.VdcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNsxtSegmentIpDiscoveryProfileResultOutput{})
}
