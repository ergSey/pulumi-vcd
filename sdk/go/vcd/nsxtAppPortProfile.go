// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtAppPortProfile struct {
	pulumi.CustomResourceState

	// At least one block of Application Port definition
	//
	// <a id="app-port"></a>
	AppPorts NsxtAppPortProfileAppPortArrayOutput `pulumi:"appPorts"`
	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
	// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
	ContextId pulumi.StringOutput `pulumi:"contextId"`
	// Application Port Profile description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A unique name for Security Group
	Name pulumi.StringOutput `pulumi:"name"`
	// Required only when `scope` is `PROVIDER`. Deprecated
	// and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	NsxtManagerId pulumi.StringOutput `pulumi:"nsxtManagerId"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Application Port Profile scope - `PROVIDER`, `TENANT`
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	Vdc pulumi.StringOutput `pulumi:"vdc"`
}

// NewNsxtAppPortProfile registers a new resource with the given unique name, arguments, and options.
func NewNsxtAppPortProfile(ctx *pulumi.Context,
	name string, args *NsxtAppPortProfileArgs, opts ...pulumi.ResourceOption) (*NsxtAppPortProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppPorts == nil {
		return nil, errors.New("invalid value for required argument 'AppPorts'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtAppPortProfile
	err := ctx.RegisterResource("vcd:index/nsxtAppPortProfile:NsxtAppPortProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtAppPortProfile gets an existing NsxtAppPortProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtAppPortProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtAppPortProfileState, opts ...pulumi.ResourceOption) (*NsxtAppPortProfile, error) {
	var resource NsxtAppPortProfile
	err := ctx.ReadResource("vcd:index/nsxtAppPortProfile:NsxtAppPortProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtAppPortProfile resources.
type nsxtAppPortProfileState struct {
	// At least one block of Application Port definition
	//
	// <a id="app-port"></a>
	AppPorts []NsxtAppPortProfileAppPort `pulumi:"appPorts"`
	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
	// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
	ContextId *string `pulumi:"contextId"`
	// Application Port Profile description
	Description *string `pulumi:"description"`
	// A unique name for Security Group
	Name *string `pulumi:"name"`
	// Required only when `scope` is `PROVIDER`. Deprecated
	// and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	NsxtManagerId *string `pulumi:"nsxtManagerId"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// Application Port Profile scope - `PROVIDER`, `TENANT`
	Scope *string `pulumi:"scope"`
	// The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	Vdc *string `pulumi:"vdc"`
}

type NsxtAppPortProfileState struct {
	// At least one block of Application Port definition
	//
	// <a id="app-port"></a>
	AppPorts NsxtAppPortProfileAppPortArrayInput
	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
	// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
	ContextId pulumi.StringPtrInput
	// Application Port Profile description
	Description pulumi.StringPtrInput
	// A unique name for Security Group
	Name pulumi.StringPtrInput
	// Required only when `scope` is `PROVIDER`. Deprecated
	// and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	NsxtManagerId pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// Application Port Profile scope - `PROVIDER`, `TENANT`
	Scope pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	Vdc pulumi.StringPtrInput
}

func (NsxtAppPortProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAppPortProfileState)(nil)).Elem()
}

type nsxtAppPortProfileArgs struct {
	// At least one block of Application Port definition
	//
	// <a id="app-port"></a>
	AppPorts []NsxtAppPortProfileAppPort `pulumi:"appPorts"`
	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
	// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
	ContextId *string `pulumi:"contextId"`
	// Application Port Profile description
	Description *string `pulumi:"description"`
	// A unique name for Security Group
	Name *string `pulumi:"name"`
	// Required only when `scope` is `PROVIDER`. Deprecated
	// and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	NsxtManagerId *string `pulumi:"nsxtManagerId"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// Application Port Profile scope - `PROVIDER`, `TENANT`
	Scope string `pulumi:"scope"`
	// The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a NsxtAppPortProfile resource.
type NsxtAppPortProfileArgs struct {
	// At least one block of Application Port definition
	//
	// <a id="app-port"></a>
	AppPorts NsxtAppPortProfileAppPortArrayInput
	// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
	// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
	ContextId pulumi.StringPtrInput
	// Application Port Profile description
	Description pulumi.StringPtrInput
	// A unique name for Security Group
	Name pulumi.StringPtrInput
	// Required only when `scope` is `PROVIDER`. Deprecated
	// and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	NsxtManagerId pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// Application Port Profile scope - `PROVIDER`, `TENANT`
	Scope pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level.
	// Deprecated and replaced by `contextId`
	//
	// Deprecated: Deprecated in favor of 'context_id'
	Vdc pulumi.StringPtrInput
}

func (NsxtAppPortProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAppPortProfileArgs)(nil)).Elem()
}

type NsxtAppPortProfileInput interface {
	pulumi.Input

	ToNsxtAppPortProfileOutput() NsxtAppPortProfileOutput
	ToNsxtAppPortProfileOutputWithContext(ctx context.Context) NsxtAppPortProfileOutput
}

func (*NsxtAppPortProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAppPortProfile)(nil)).Elem()
}

func (i *NsxtAppPortProfile) ToNsxtAppPortProfileOutput() NsxtAppPortProfileOutput {
	return i.ToNsxtAppPortProfileOutputWithContext(context.Background())
}

func (i *NsxtAppPortProfile) ToNsxtAppPortProfileOutputWithContext(ctx context.Context) NsxtAppPortProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAppPortProfileOutput)
}

// NsxtAppPortProfileArrayInput is an input type that accepts NsxtAppPortProfileArray and NsxtAppPortProfileArrayOutput values.
// You can construct a concrete instance of `NsxtAppPortProfileArrayInput` via:
//
//	NsxtAppPortProfileArray{ NsxtAppPortProfileArgs{...} }
type NsxtAppPortProfileArrayInput interface {
	pulumi.Input

	ToNsxtAppPortProfileArrayOutput() NsxtAppPortProfileArrayOutput
	ToNsxtAppPortProfileArrayOutputWithContext(context.Context) NsxtAppPortProfileArrayOutput
}

type NsxtAppPortProfileArray []NsxtAppPortProfileInput

func (NsxtAppPortProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAppPortProfile)(nil)).Elem()
}

func (i NsxtAppPortProfileArray) ToNsxtAppPortProfileArrayOutput() NsxtAppPortProfileArrayOutput {
	return i.ToNsxtAppPortProfileArrayOutputWithContext(context.Background())
}

func (i NsxtAppPortProfileArray) ToNsxtAppPortProfileArrayOutputWithContext(ctx context.Context) NsxtAppPortProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAppPortProfileArrayOutput)
}

// NsxtAppPortProfileMapInput is an input type that accepts NsxtAppPortProfileMap and NsxtAppPortProfileMapOutput values.
// You can construct a concrete instance of `NsxtAppPortProfileMapInput` via:
//
//	NsxtAppPortProfileMap{ "key": NsxtAppPortProfileArgs{...} }
type NsxtAppPortProfileMapInput interface {
	pulumi.Input

	ToNsxtAppPortProfileMapOutput() NsxtAppPortProfileMapOutput
	ToNsxtAppPortProfileMapOutputWithContext(context.Context) NsxtAppPortProfileMapOutput
}

type NsxtAppPortProfileMap map[string]NsxtAppPortProfileInput

func (NsxtAppPortProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAppPortProfile)(nil)).Elem()
}

func (i NsxtAppPortProfileMap) ToNsxtAppPortProfileMapOutput() NsxtAppPortProfileMapOutput {
	return i.ToNsxtAppPortProfileMapOutputWithContext(context.Background())
}

func (i NsxtAppPortProfileMap) ToNsxtAppPortProfileMapOutputWithContext(ctx context.Context) NsxtAppPortProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAppPortProfileMapOutput)
}

type NsxtAppPortProfileOutput struct{ *pulumi.OutputState }

func (NsxtAppPortProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAppPortProfile)(nil)).Elem()
}

func (o NsxtAppPortProfileOutput) ToNsxtAppPortProfileOutput() NsxtAppPortProfileOutput {
	return o
}

func (o NsxtAppPortProfileOutput) ToNsxtAppPortProfileOutputWithContext(ctx context.Context) NsxtAppPortProfileOutput {
	return o
}

// At least one block of Application Port definition
//
// <a id="app-port"></a>
func (o NsxtAppPortProfileOutput) AppPorts() NsxtAppPortProfileAppPortArrayOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) NsxtAppPortProfileAppPortArrayOutput { return v.AppPorts }).(NsxtAppPortProfileAppPortArrayOutput)
}

// ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
// and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
func (o NsxtAppPortProfileOutput) ContextId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringOutput { return v.ContextId }).(pulumi.StringOutput)
}

// Application Port Profile description
func (o NsxtAppPortProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A unique name for Security Group
func (o NsxtAppPortProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required only when `scope` is `PROVIDER`. Deprecated
// and replaced by `contextId`
//
// Deprecated: Deprecated in favor of 'context_id'
func (o NsxtAppPortProfileOutput) NsxtManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringOutput { return v.NsxtManagerId }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o NsxtAppPortProfileOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Application Port Profile scope - `PROVIDER`, `TENANT`
func (o NsxtAppPortProfileOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level.
// Deprecated and replaced by `contextId`
//
// Deprecated: Deprecated in favor of 'context_id'
func (o NsxtAppPortProfileOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAppPortProfile) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

type NsxtAppPortProfileArrayOutput struct{ *pulumi.OutputState }

func (NsxtAppPortProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAppPortProfile)(nil)).Elem()
}

func (o NsxtAppPortProfileArrayOutput) ToNsxtAppPortProfileArrayOutput() NsxtAppPortProfileArrayOutput {
	return o
}

func (o NsxtAppPortProfileArrayOutput) ToNsxtAppPortProfileArrayOutputWithContext(ctx context.Context) NsxtAppPortProfileArrayOutput {
	return o
}

func (o NsxtAppPortProfileArrayOutput) Index(i pulumi.IntInput) NsxtAppPortProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtAppPortProfile {
		return vs[0].([]*NsxtAppPortProfile)[vs[1].(int)]
	}).(NsxtAppPortProfileOutput)
}

type NsxtAppPortProfileMapOutput struct{ *pulumi.OutputState }

func (NsxtAppPortProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAppPortProfile)(nil)).Elem()
}

func (o NsxtAppPortProfileMapOutput) ToNsxtAppPortProfileMapOutput() NsxtAppPortProfileMapOutput {
	return o
}

func (o NsxtAppPortProfileMapOutput) ToNsxtAppPortProfileMapOutputWithContext(ctx context.Context) NsxtAppPortProfileMapOutput {
	return o
}

func (o NsxtAppPortProfileMapOutput) MapIndex(k pulumi.StringInput) NsxtAppPortProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtAppPortProfile {
		return vs[0].(map[string]*NsxtAppPortProfile)[vs[1].(string)]
	}).(NsxtAppPortProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAppPortProfileInput)(nil)).Elem(), &NsxtAppPortProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAppPortProfileArrayInput)(nil)).Elem(), NsxtAppPortProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAppPortProfileMapInput)(nil)).Elem(), NsxtAppPortProfileMap{})
	pulumi.RegisterOutputType(NsxtAppPortProfileOutput{})
	pulumi.RegisterOutputType(NsxtAppPortProfileArrayOutput{})
	pulumi.RegisterOutputType(NsxtAppPortProfileMapOutput{})
}
