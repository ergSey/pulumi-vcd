// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpSpaceUplink struct {
	pulumi.CustomResourceState

	// A set of Tier-0 Router Interfaces to associate with this uplink
	AssociatedInterfaceIds pulumi.StringArrayOutput `pulumi:"associatedInterfaceIds"`
	// An optional description for IP Space Uplink
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// External Network ID For IP Space Uplink configuration
	ExternalNetworkId pulumi.StringOutput `pulumi:"externalNetworkId"`
	// IP Space ID configuration
	IpSpaceId pulumi.StringOutput `pulumi:"ipSpaceId"`
	// Backing IP Space type
	IpSpaceType pulumi.StringOutput `pulumi:"ipSpaceType"`
	// A tenant facing name for IP Space Uplink
	Name pulumi.StringOutput `pulumi:"name"`
	// Status of IP Space Uplink
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewIpSpaceUplink registers a new resource with the given unique name, arguments, and options.
func NewIpSpaceUplink(ctx *pulumi.Context,
	name string, args *IpSpaceUplinkArgs, opts ...pulumi.ResourceOption) (*IpSpaceUplink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExternalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalNetworkId'")
	}
	if args.IpSpaceId == nil {
		return nil, errors.New("invalid value for required argument 'IpSpaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpSpaceUplink
	err := ctx.RegisterResource("vcd:index/ipSpaceUplink:IpSpaceUplink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSpaceUplink gets an existing IpSpaceUplink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSpaceUplink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSpaceUplinkState, opts ...pulumi.ResourceOption) (*IpSpaceUplink, error) {
	var resource IpSpaceUplink
	err := ctx.ReadResource("vcd:index/ipSpaceUplink:IpSpaceUplink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSpaceUplink resources.
type ipSpaceUplinkState struct {
	// A set of Tier-0 Router Interfaces to associate with this uplink
	AssociatedInterfaceIds []string `pulumi:"associatedInterfaceIds"`
	// An optional description for IP Space Uplink
	Description *string `pulumi:"description"`
	// External Network ID For IP Space Uplink configuration
	ExternalNetworkId *string `pulumi:"externalNetworkId"`
	// IP Space ID configuration
	IpSpaceId *string `pulumi:"ipSpaceId"`
	// Backing IP Space type
	IpSpaceType *string `pulumi:"ipSpaceType"`
	// A tenant facing name for IP Space Uplink
	Name *string `pulumi:"name"`
	// Status of IP Space Uplink
	Status *string `pulumi:"status"`
}

type IpSpaceUplinkState struct {
	// A set of Tier-0 Router Interfaces to associate with this uplink
	AssociatedInterfaceIds pulumi.StringArrayInput
	// An optional description for IP Space Uplink
	Description pulumi.StringPtrInput
	// External Network ID For IP Space Uplink configuration
	ExternalNetworkId pulumi.StringPtrInput
	// IP Space ID configuration
	IpSpaceId pulumi.StringPtrInput
	// Backing IP Space type
	IpSpaceType pulumi.StringPtrInput
	// A tenant facing name for IP Space Uplink
	Name pulumi.StringPtrInput
	// Status of IP Space Uplink
	Status pulumi.StringPtrInput
}

func (IpSpaceUplinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceUplinkState)(nil)).Elem()
}

type ipSpaceUplinkArgs struct {
	// A set of Tier-0 Router Interfaces to associate with this uplink
	AssociatedInterfaceIds []string `pulumi:"associatedInterfaceIds"`
	// An optional description for IP Space Uplink
	Description *string `pulumi:"description"`
	// External Network ID For IP Space Uplink configuration
	ExternalNetworkId string `pulumi:"externalNetworkId"`
	// IP Space ID configuration
	IpSpaceId string `pulumi:"ipSpaceId"`
	// A tenant facing name for IP Space Uplink
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IpSpaceUplink resource.
type IpSpaceUplinkArgs struct {
	// A set of Tier-0 Router Interfaces to associate with this uplink
	AssociatedInterfaceIds pulumi.StringArrayInput
	// An optional description for IP Space Uplink
	Description pulumi.StringPtrInput
	// External Network ID For IP Space Uplink configuration
	ExternalNetworkId pulumi.StringInput
	// IP Space ID configuration
	IpSpaceId pulumi.StringInput
	// A tenant facing name for IP Space Uplink
	Name pulumi.StringPtrInput
}

func (IpSpaceUplinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceUplinkArgs)(nil)).Elem()
}

type IpSpaceUplinkInput interface {
	pulumi.Input

	ToIpSpaceUplinkOutput() IpSpaceUplinkOutput
	ToIpSpaceUplinkOutputWithContext(ctx context.Context) IpSpaceUplinkOutput
}

func (*IpSpaceUplink) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpaceUplink)(nil)).Elem()
}

func (i *IpSpaceUplink) ToIpSpaceUplinkOutput() IpSpaceUplinkOutput {
	return i.ToIpSpaceUplinkOutputWithContext(context.Background())
}

func (i *IpSpaceUplink) ToIpSpaceUplinkOutputWithContext(ctx context.Context) IpSpaceUplinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceUplinkOutput)
}

// IpSpaceUplinkArrayInput is an input type that accepts IpSpaceUplinkArray and IpSpaceUplinkArrayOutput values.
// You can construct a concrete instance of `IpSpaceUplinkArrayInput` via:
//
//	IpSpaceUplinkArray{ IpSpaceUplinkArgs{...} }
type IpSpaceUplinkArrayInput interface {
	pulumi.Input

	ToIpSpaceUplinkArrayOutput() IpSpaceUplinkArrayOutput
	ToIpSpaceUplinkArrayOutputWithContext(context.Context) IpSpaceUplinkArrayOutput
}

type IpSpaceUplinkArray []IpSpaceUplinkInput

func (IpSpaceUplinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpaceUplink)(nil)).Elem()
}

func (i IpSpaceUplinkArray) ToIpSpaceUplinkArrayOutput() IpSpaceUplinkArrayOutput {
	return i.ToIpSpaceUplinkArrayOutputWithContext(context.Background())
}

func (i IpSpaceUplinkArray) ToIpSpaceUplinkArrayOutputWithContext(ctx context.Context) IpSpaceUplinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceUplinkArrayOutput)
}

// IpSpaceUplinkMapInput is an input type that accepts IpSpaceUplinkMap and IpSpaceUplinkMapOutput values.
// You can construct a concrete instance of `IpSpaceUplinkMapInput` via:
//
//	IpSpaceUplinkMap{ "key": IpSpaceUplinkArgs{...} }
type IpSpaceUplinkMapInput interface {
	pulumi.Input

	ToIpSpaceUplinkMapOutput() IpSpaceUplinkMapOutput
	ToIpSpaceUplinkMapOutputWithContext(context.Context) IpSpaceUplinkMapOutput
}

type IpSpaceUplinkMap map[string]IpSpaceUplinkInput

func (IpSpaceUplinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpaceUplink)(nil)).Elem()
}

func (i IpSpaceUplinkMap) ToIpSpaceUplinkMapOutput() IpSpaceUplinkMapOutput {
	return i.ToIpSpaceUplinkMapOutputWithContext(context.Background())
}

func (i IpSpaceUplinkMap) ToIpSpaceUplinkMapOutputWithContext(ctx context.Context) IpSpaceUplinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceUplinkMapOutput)
}

type IpSpaceUplinkOutput struct{ *pulumi.OutputState }

func (IpSpaceUplinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpaceUplink)(nil)).Elem()
}

func (o IpSpaceUplinkOutput) ToIpSpaceUplinkOutput() IpSpaceUplinkOutput {
	return o
}

func (o IpSpaceUplinkOutput) ToIpSpaceUplinkOutputWithContext(ctx context.Context) IpSpaceUplinkOutput {
	return o
}

// A set of Tier-0 Router Interfaces to associate with this uplink
func (o IpSpaceUplinkOutput) AssociatedInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringArrayOutput { return v.AssociatedInterfaceIds }).(pulumi.StringArrayOutput)
}

// An optional description for IP Space Uplink
func (o IpSpaceUplinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// External Network ID For IP Space Uplink configuration
func (o IpSpaceUplinkOutput) ExternalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringOutput { return v.ExternalNetworkId }).(pulumi.StringOutput)
}

// IP Space ID configuration
func (o IpSpaceUplinkOutput) IpSpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringOutput { return v.IpSpaceId }).(pulumi.StringOutput)
}

// Backing IP Space type
func (o IpSpaceUplinkOutput) IpSpaceType() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringOutput { return v.IpSpaceType }).(pulumi.StringOutput)
}

// A tenant facing name for IP Space Uplink
func (o IpSpaceUplinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Status of IP Space Uplink
func (o IpSpaceUplinkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceUplink) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type IpSpaceUplinkArrayOutput struct{ *pulumi.OutputState }

func (IpSpaceUplinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpaceUplink)(nil)).Elem()
}

func (o IpSpaceUplinkArrayOutput) ToIpSpaceUplinkArrayOutput() IpSpaceUplinkArrayOutput {
	return o
}

func (o IpSpaceUplinkArrayOutput) ToIpSpaceUplinkArrayOutputWithContext(ctx context.Context) IpSpaceUplinkArrayOutput {
	return o
}

func (o IpSpaceUplinkArrayOutput) Index(i pulumi.IntInput) IpSpaceUplinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpSpaceUplink {
		return vs[0].([]*IpSpaceUplink)[vs[1].(int)]
	}).(IpSpaceUplinkOutput)
}

type IpSpaceUplinkMapOutput struct{ *pulumi.OutputState }

func (IpSpaceUplinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpaceUplink)(nil)).Elem()
}

func (o IpSpaceUplinkMapOutput) ToIpSpaceUplinkMapOutput() IpSpaceUplinkMapOutput {
	return o
}

func (o IpSpaceUplinkMapOutput) ToIpSpaceUplinkMapOutputWithContext(ctx context.Context) IpSpaceUplinkMapOutput {
	return o
}

func (o IpSpaceUplinkMapOutput) MapIndex(k pulumi.StringInput) IpSpaceUplinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpSpaceUplink {
		return vs[0].(map[string]*IpSpaceUplink)[vs[1].(string)]
	}).(IpSpaceUplinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceUplinkInput)(nil)).Elem(), &IpSpaceUplink{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceUplinkArrayInput)(nil)).Elem(), IpSpaceUplinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceUplinkMapInput)(nil)).Elem(), IpSpaceUplinkMap{})
	pulumi.RegisterOutputType(IpSpaceUplinkOutput{})
	pulumi.RegisterOutputType(IpSpaceUplinkArrayOutput{})
	pulumi.RegisterOutputType(IpSpaceUplinkMapOutput{})
}
