// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VappVm struct {
	pulumi.CustomResourceState

	// Automatically accept EULA if OVA has it. Default is `true`
	AcceptAllEulas pulumi.BoolPtrOutput `pulumi:"acceptAllEulas"`
	// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	//
	// Deprecated: Use `bootImageId` instead
	BootImage pulumi.StringPtrOutput `pulumi:"bootImage"`
	// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	BootImageId pulumi.StringPtrOutput `pulumi:"bootImageId"`
	// A block to define boot options of the VM. See Boot Options
	BootOptions VappVmBootOptionsOutput `pulumi:"bootOptions"`
	// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
	//
	// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
	CatalogName pulumi.StringPtrOutput `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine.
	ComputerName pulumi.StringOutput `pulumi:"computerName"`
	// Performs disk consolidation during creation.
	// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
	// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
	// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
	// storage performance.
	ConsolidateDisksOnCreate pulumi.BoolPtrOutput `pulumi:"consolidateDisksOnCreate"`
	// The ID of *an existing VM* to make a copy of it (it
	// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
	// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
	// resource) and using different source/destination VDCs.
	CopyFromVmId pulumi.StringPtrOutput `pulumi:"copyFromVmId"`
	// The number of cores per socket.
	CpuCores pulumi.IntOutput `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
	CpuHotAddEnabled pulumi.BoolPtrOutput `pulumi:"cpuHotAddEnabled"`
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit pulumi.IntOutput `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	CpuPriority pulumi.StringOutput `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure.
	CpuReservation pulumi.IntOutput `pulumi:"cpuReservation"`
	// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
	CpuShares pulumi.IntOutput `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
	Cpus pulumi.IntOutput `pulumi:"cpus"`
	// A block to define for guest customization options. See Customization
	Customization VappVmCustomizationOutput `pulumi:"customization"`
	// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	Description pulumi.StringOutput `pulumi:"description"`
	// Independent disk attachment configuration. See Disk below for details.
	Disks VappVmDiskArrayOutput `pulumi:"disks"`
	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
	ExposeHardwareVirtualization pulumi.BoolPtrOutput `pulumi:"exposeHardwareVirtualization"`
	// (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
	ExtraConfigs VappVmExtraConfigArrayOutput `pulumi:"extraConfigs"`
	// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
	Firmware pulumi.StringOutput `pulumi:"firmware"`
	// Key value map of guest properties
	GuestProperties pulumi.StringMapOutput `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
	HardwareVersion pulumi.StringOutput `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href pulumi.StringOutput `pulumi:"href"`
	// (*v3.13.+*) A true/false value telling whether the resource was imported.
	Imported pulumi.BoolOutput `pulumi:"imported"`
	// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
	// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
	InheritedMetadata pulumi.StringMapOutput `pulumi:"inheritedMetadata"`
	// (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
	InternalDisks VappVmInternalDiskArrayOutput `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
	Memory pulumi.IntOutput `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on. Default is `false`.
	MemoryHotAddEnabled pulumi.BoolPtrOutput `pulumi:"memoryHotAddEnabled"`
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	MemoryPriority pulumi.StringOutput `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntOutput `pulumi:"memoryReservation"`
	// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
	MemoryShares pulumi.IntOutput `pulumi:"memoryShares"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries VappVmMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
	// * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
	//   until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
	//   Tools are not present on the VM.
	NetworkDhcpWaitSeconds pulumi.IntPtrOutput `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	Networks VappVmNetworkArrayOutput `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayOutput `pulumi:"overrideTemplateDisks"`
	// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	PlacementPolicyId pulumi.StringOutput `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on. Default is `true`
	PowerOn pulumi.BoolPtrOutput `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
	PreventUpdatePowerOff pulumi.BoolPtrOutput `pulumi:"preventUpdatePowerOff"`
	// Set of security tags to be managed by the `VappVm` resource.
	// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
	// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
	SecurityTags pulumi.StringArrayOutput `pulumi:"securityTags"`
	// Set of extra configuration key/values to be added or modified. See Extra Configuration
	//
	// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
	// should be used. Using both would cause a behavioral conflict.
	SetExtraConfigs VappVmSetExtraConfigArrayOutput `pulumi:"setExtraConfigs"`
	// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	SizingPolicyId pulumi.StringOutput `pulumi:"sizingPolicyId"`
	// (*v3.8+*) The vApp status as a numeric code.
	Status pulumi.IntOutput `pulumi:"status"`
	// (*v3.8+*) The vApp status as text.
	StatusText pulumi.StringOutput `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile pulumi.StringOutput `pulumi:"storageProfile"`
	// Use `vappTemplateId` instead. The name of the vApp Template to use
	//
	// Deprecated: Use `vappTemplateId` instead
	TemplateName pulumi.StringPtrOutput `pulumi:"templateName"`
	// ID of parent vApp
	VappId pulumi.StringOutput `pulumi:"vappId"`
	// The vApp this VM belongs to.
	VappName pulumi.StringOutput `pulumi:"vappName"`
	// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
	VappTemplateId pulumi.StringPtrOutput `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	VmNameInTemplate pulumi.StringPtrOutput `pulumi:"vmNameInTemplate"`
	// (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
	VmType pulumi.StringOutput `pulumi:"vmType"`
}

// NewVappVm registers a new resource with the given unique name, arguments, and options.
func NewVappVm(ctx *pulumi.Context,
	name string, args *VappVmArgs, opts ...pulumi.ResourceOption) (*VappVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VappName == nil {
		return nil, errors.New("invalid value for required argument 'VappName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VappVm
	err := ctx.RegisterResource("vcd:index/vappVm:VappVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVappVm gets an existing VappVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVappVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VappVmState, opts ...pulumi.ResourceOption) (*VappVm, error) {
	var resource VappVm
	err := ctx.ReadResource("vcd:index/vappVm:VappVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VappVm resources.
type vappVmState struct {
	// Automatically accept EULA if OVA has it. Default is `true`
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	//
	// Deprecated: Use `bootImageId` instead
	BootImage *string `pulumi:"bootImage"`
	// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	BootImageId *string `pulumi:"bootImageId"`
	// A block to define boot options of the VM. See Boot Options
	BootOptions *VappVmBootOptions `pulumi:"bootOptions"`
	// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
	//
	// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine.
	ComputerName *string `pulumi:"computerName"`
	// Performs disk consolidation during creation.
	// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
	// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
	// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
	// storage performance.
	ConsolidateDisksOnCreate *bool `pulumi:"consolidateDisksOnCreate"`
	// The ID of *an existing VM* to make a copy of it (it
	// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
	// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
	// resource) and using different source/destination VDCs.
	CopyFromVmId *string `pulumi:"copyFromVmId"`
	// The number of cores per socket.
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure.
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
	Cpus *int `pulumi:"cpus"`
	// A block to define for guest customization options. See Customization
	Customization *VappVmCustomization `pulumi:"customization"`
	// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	Description *string `pulumi:"description"`
	// Independent disk attachment configuration. See Disk below for details.
	Disks []VappVmDisk `pulumi:"disks"`
	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
	ExtraConfigs []VappVmExtraConfig `pulumi:"extraConfigs"`
	// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
	Firmware *string `pulumi:"firmware"`
	// Key value map of guest properties
	GuestProperties map[string]string `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// (*v3.13.+*) A true/false value telling whether the resource was imported.
	Imported *bool `pulumi:"imported"`
	// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
	// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
	InheritedMetadata map[string]string `pulumi:"inheritedMetadata"`
	// (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
	InternalDisks []VappVmInternalDisk `pulumi:"internalDisks"`
	// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on. Default is `false`.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
	MemoryShares *int `pulumi:"memoryShares"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []VappVmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
	// * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
	//   until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
	//   Tools are not present on the VM.
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	Networks []VappVmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	OsType *string `pulumi:"osType"`
	// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
	OverrideTemplateDisks []VappVmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on. Default is `true`
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// Set of security tags to be managed by the `VappVm` resource.
	// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
	// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
	SecurityTags []string `pulumi:"securityTags"`
	// Set of extra configuration key/values to be added or modified. See Extra Configuration
	//
	// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
	// should be used. Using both would cause a behavioral conflict.
	SetExtraConfigs []VappVmSetExtraConfig `pulumi:"setExtraConfigs"`
	// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// (*v3.8+*) The vApp status as a numeric code.
	Status *int `pulumi:"status"`
	// (*v3.8+*) The vApp status as text.
	StatusText *string `pulumi:"statusText"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// Use `vappTemplateId` instead. The name of the vApp Template to use
	//
	// Deprecated: Use `vappTemplateId` instead
	TemplateName *string `pulumi:"templateName"`
	// ID of parent vApp
	VappId *string `pulumi:"vappId"`
	// The vApp this VM belongs to.
	VappName *string `pulumi:"vappName"`
	// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
	// (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
	VmType *string `pulumi:"vmType"`
}

type VappVmState struct {
	// Automatically accept EULA if OVA has it. Default is `true`
	AcceptAllEulas pulumi.BoolPtrInput
	// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	//
	// Deprecated: Use `bootImageId` instead
	BootImage pulumi.StringPtrInput
	// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	BootImageId pulumi.StringPtrInput
	// A block to define boot options of the VM. See Boot Options
	BootOptions VappVmBootOptionsPtrInput
	// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
	//
	// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine.
	ComputerName pulumi.StringPtrInput
	// Performs disk consolidation during creation.
	// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
	// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
	// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
	// storage performance.
	ConsolidateDisksOnCreate pulumi.BoolPtrInput
	// The ID of *an existing VM* to make a copy of it (it
	// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
	// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
	// resource) and using different source/destination VDCs.
	CopyFromVmId pulumi.StringPtrInput
	// The number of cores per socket.
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure.
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
	Cpus pulumi.IntPtrInput
	// A block to define for guest customization options. See Customization
	Customization VappVmCustomizationPtrInput
	// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	Description pulumi.StringPtrInput
	// Independent disk attachment configuration. See Disk below for details.
	Disks VappVmDiskArrayInput
	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
	ExtraConfigs VappVmExtraConfigArrayInput
	// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
	Firmware pulumi.StringPtrInput
	// Key value map of guest properties
	GuestProperties pulumi.StringMapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// (*v3.13.+*) A true/false value telling whether the resource was imported.
	Imported pulumi.BoolPtrInput
	// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
	// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
	InheritedMetadata pulumi.StringMapInput
	// (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
	InternalDisks VappVmInternalDiskArrayInput
	// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on. Default is `false`.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
	MemoryShares pulumi.IntPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries VappVmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
	// * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
	//   until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
	//   Tools are not present on the VM.
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	Networks VappVmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	OsType pulumi.StringPtrInput
	// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayInput
	// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on. Default is `true`
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// Set of security tags to be managed by the `VappVm` resource.
	// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
	// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
	SecurityTags pulumi.StringArrayInput
	// Set of extra configuration key/values to be added or modified. See Extra Configuration
	//
	// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
	// should be used. Using both would cause a behavioral conflict.
	SetExtraConfigs VappVmSetExtraConfigArrayInput
	// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	SizingPolicyId pulumi.StringPtrInput
	// (*v3.8+*) The vApp status as a numeric code.
	Status pulumi.IntPtrInput
	// (*v3.8+*) The vApp status as text.
	StatusText pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// Use `vappTemplateId` instead. The name of the vApp Template to use
	//
	// Deprecated: Use `vappTemplateId` instead
	TemplateName pulumi.StringPtrInput
	// ID of parent vApp
	VappId pulumi.StringPtrInput
	// The vApp this VM belongs to.
	VappName pulumi.StringPtrInput
	// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	VmNameInTemplate pulumi.StringPtrInput
	// (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
	VmType pulumi.StringPtrInput
}

func (VappVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vappVmState)(nil)).Elem()
}

type vappVmArgs struct {
	// Automatically accept EULA if OVA has it. Default is `true`
	AcceptAllEulas *bool `pulumi:"acceptAllEulas"`
	// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	//
	// Deprecated: Use `bootImageId` instead
	BootImage *string `pulumi:"bootImage"`
	// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	BootImageId *string `pulumi:"bootImageId"`
	// A block to define boot options of the VM. See Boot Options
	BootOptions *VappVmBootOptions `pulumi:"bootOptions"`
	// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
	//
	// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Computer name to assign to this virtual machine.
	ComputerName *string `pulumi:"computerName"`
	// Performs disk consolidation during creation.
	// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
	// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
	// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
	// storage performance.
	ConsolidateDisksOnCreate *bool `pulumi:"consolidateDisksOnCreate"`
	// The ID of *an existing VM* to make a copy of it (it
	// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
	// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
	// resource) and using different source/destination VDCs.
	CopyFromVmId *string `pulumi:"copyFromVmId"`
	// The number of cores per socket.
	CpuCores *int `pulumi:"cpuCores"`
	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
	CpuHotAddEnabled *bool `pulumi:"cpuHotAddEnabled"`
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit *int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	CpuPriority *string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure.
	CpuReservation *int `pulumi:"cpuReservation"`
	// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
	CpuShares *int `pulumi:"cpuShares"`
	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
	Cpus *int `pulumi:"cpus"`
	// A block to define for guest customization options. See Customization
	Customization *VappVmCustomization `pulumi:"customization"`
	// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	Description *string `pulumi:"description"`
	// Independent disk attachment configuration. See Disk below for details.
	Disks []VappVmDisk `pulumi:"disks"`
	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
	ExposeHardwareVirtualization *bool `pulumi:"exposeHardwareVirtualization"`
	// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
	Firmware *string `pulumi:"firmware"`
	// Key value map of guest properties
	GuestProperties map[string]string `pulumi:"guestProperties"`
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
	HardwareVersion *string `pulumi:"hardwareVersion"`
	// VM Hyper Reference
	Href *string `pulumi:"href"`
	// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
	Memory *int `pulumi:"memory"`
	// True if the virtual machine supports addition of memory while powered on. Default is `false`.
	MemoryHotAddEnabled *bool `pulumi:"memoryHotAddEnabled"`
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	MemoryPriority *string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation *int `pulumi:"memoryReservation"`
	// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
	MemoryShares *int `pulumi:"memoryShares"`
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries []VappVmMetadataEntry `pulumi:"metadataEntries"`
	// A name for the VM, unique within the vApp
	Name *string `pulumi:"name"`
	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
	// * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
	//   until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
	//   Tools are not present on the VM.
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	Networks []VappVmNetwork `pulumi:"networks"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	OsType *string `pulumi:"osType"`
	// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
	OverrideTemplateDisks []VappVmOverrideTemplateDisk `pulumi:"overrideTemplateDisks"`
	// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// A boolean value stating if this VM should be powered on. Default is `true`
	PowerOn *bool `pulumi:"powerOn"`
	// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
	PreventUpdatePowerOff *bool `pulumi:"preventUpdatePowerOff"`
	// Set of security tags to be managed by the `VappVm` resource.
	// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
	// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
	SecurityTags []string `pulumi:"securityTags"`
	// Set of extra configuration key/values to be added or modified. See Extra Configuration
	//
	// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
	// should be used. Using both would cause a behavioral conflict.
	SetExtraConfigs []VappVmSetExtraConfig `pulumi:"setExtraConfigs"`
	// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// Storage profile to override the default one
	StorageProfile *string `pulumi:"storageProfile"`
	// Use `vappTemplateId` instead. The name of the vApp Template to use
	//
	// Deprecated: Use `vappTemplateId` instead
	TemplateName *string `pulumi:"templateName"`
	// The vApp this VM belongs to.
	VappName string `pulumi:"vappName"`
	// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
	VappTemplateId *string `pulumi:"vappTemplateId"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	VmNameInTemplate *string `pulumi:"vmNameInTemplate"`
}

// The set of arguments for constructing a VappVm resource.
type VappVmArgs struct {
	// Automatically accept EULA if OVA has it. Default is `true`
	AcceptAllEulas pulumi.BoolPtrInput
	// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	//
	// Deprecated: Use `bootImageId` instead
	BootImage pulumi.StringPtrInput
	// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
	// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
	BootImageId pulumi.StringPtrInput
	// A block to define boot options of the VM. See Boot Options
	BootOptions VappVmBootOptionsPtrInput
	// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
	//
	// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
	CatalogName pulumi.StringPtrInput
	// Computer name to assign to this virtual machine.
	ComputerName pulumi.StringPtrInput
	// Performs disk consolidation during creation.
	// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
	// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
	// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
	// storage performance.
	ConsolidateDisksOnCreate pulumi.BoolPtrInput
	// The ID of *an existing VM* to make a copy of it (it
	// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
	// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
	// resource) and using different source/destination VDCs.
	CopyFromVmId pulumi.StringPtrInput
	// The number of cores per socket.
	CpuCores pulumi.IntPtrInput
	// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
	CpuHotAddEnabled pulumi.BoolPtrInput
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	CpuPriority pulumi.StringPtrInput
	// The amount of MHz reservation on the underlying virtualization infrastructure.
	CpuReservation pulumi.IntPtrInput
	// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
	CpuShares pulumi.IntPtrInput
	// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
	Cpus pulumi.IntPtrInput
	// A block to define for guest customization options. See Customization
	Customization VappVmCustomizationPtrInput
	// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
	// the description of the OVA used to create the VM.
	Description pulumi.StringPtrInput
	// Independent disk attachment configuration. See Disk below for details.
	Disks VappVmDiskArrayInput
	// Boolean for exposing full CPU virtualization to the
	// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
	// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
	ExposeHardwareVirtualization pulumi.BoolPtrInput
	// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
	Firmware pulumi.StringPtrInput
	// Key value map of guest properties
	GuestProperties pulumi.StringMapInput
	// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
	HardwareVersion pulumi.StringPtrInput
	// VM Hyper Reference
	Href pulumi.StringPtrInput
	// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
	Memory pulumi.IntPtrInput
	// True if the virtual machine supports addition of memory while powered on. Default is `false`.
	MemoryHotAddEnabled pulumi.BoolPtrInput
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit pulumi.IntPtrInput
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
	MemoryPriority pulumi.StringPtrInput
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation pulumi.IntPtrInput
	// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
	MemoryShares pulumi.IntPtrInput
	// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign. See Metadata section for details.
	MetadataEntries VappVmMetadataEntryArrayInput
	// A name for the VM, unique within the vApp
	Name pulumi.StringPtrInput
	// Optional number of seconds to try and wait for DHCP IP (only valid
	// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
	// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
	// * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
	//   until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
	//   Tools are not present on the VM.
	NetworkDhcpWaitSeconds pulumi.IntPtrInput
	// A block to define network interface. Multiple can be used. See Network and
	// example for usage details.
	Networks VappVmNetworkArrayInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
	OsType pulumi.StringPtrInput
	// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
	OverrideTemplateDisks VappVmOverrideTemplateDiskArrayInput
	// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	PlacementPolicyId pulumi.StringPtrInput
	// A boolean value stating if this VM should be powered on. Default is `true`
	PowerOn pulumi.BoolPtrInput
	// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
	PreventUpdatePowerOff pulumi.BoolPtrInput
	// Set of security tags to be managed by the `VappVm` resource.
	// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
	// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
	SecurityTags pulumi.StringArrayInput
	// Set of extra configuration key/values to be added or modified. See Extra Configuration
	//
	// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
	// should be used. Using both would cause a behavioral conflict.
	SetExtraConfigs VappVmSetExtraConfigArrayInput
	// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
	// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
	// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
	// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
	SizingPolicyId pulumi.StringPtrInput
	// Storage profile to override the default one
	StorageProfile pulumi.StringPtrInput
	// Use `vappTemplateId` instead. The name of the vApp Template to use
	//
	// Deprecated: Use `vappTemplateId` instead
	TemplateName pulumi.StringPtrInput
	// The vApp this VM belongs to.
	VappName pulumi.StringInput
	// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
	VappTemplateId pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
	VmNameInTemplate pulumi.StringPtrInput
}

func (VappVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vappVmArgs)(nil)).Elem()
}

type VappVmInput interface {
	pulumi.Input

	ToVappVmOutput() VappVmOutput
	ToVappVmOutputWithContext(ctx context.Context) VappVmOutput
}

func (*VappVm) ElementType() reflect.Type {
	return reflect.TypeOf((**VappVm)(nil)).Elem()
}

func (i *VappVm) ToVappVmOutput() VappVmOutput {
	return i.ToVappVmOutputWithContext(context.Background())
}

func (i *VappVm) ToVappVmOutputWithContext(ctx context.Context) VappVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmOutput)
}

// VappVmArrayInput is an input type that accepts VappVmArray and VappVmArrayOutput values.
// You can construct a concrete instance of `VappVmArrayInput` via:
//
//	VappVmArray{ VappVmArgs{...} }
type VappVmArrayInput interface {
	pulumi.Input

	ToVappVmArrayOutput() VappVmArrayOutput
	ToVappVmArrayOutputWithContext(context.Context) VappVmArrayOutput
}

type VappVmArray []VappVmInput

func (VappVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappVm)(nil)).Elem()
}

func (i VappVmArray) ToVappVmArrayOutput() VappVmArrayOutput {
	return i.ToVappVmArrayOutputWithContext(context.Background())
}

func (i VappVmArray) ToVappVmArrayOutputWithContext(ctx context.Context) VappVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmArrayOutput)
}

// VappVmMapInput is an input type that accepts VappVmMap and VappVmMapOutput values.
// You can construct a concrete instance of `VappVmMapInput` via:
//
//	VappVmMap{ "key": VappVmArgs{...} }
type VappVmMapInput interface {
	pulumi.Input

	ToVappVmMapOutput() VappVmMapOutput
	ToVappVmMapOutputWithContext(context.Context) VappVmMapOutput
}

type VappVmMap map[string]VappVmInput

func (VappVmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappVm)(nil)).Elem()
}

func (i VappVmMap) ToVappVmMapOutput() VappVmMapOutput {
	return i.ToVappVmMapOutputWithContext(context.Background())
}

func (i VappVmMap) ToVappVmMapOutputWithContext(ctx context.Context) VappVmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VappVmMapOutput)
}

type VappVmOutput struct{ *pulumi.OutputState }

func (VappVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VappVm)(nil)).Elem()
}

func (o VappVmOutput) ToVappVmOutput() VappVmOutput {
	return o
}

func (o VappVmOutput) ToVappVmOutputWithContext(ctx context.Context) VappVmOutput {
	return o
}

// Automatically accept EULA if OVA has it. Default is `true`
func (o VappVmOutput) AcceptAllEulas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.AcceptAllEulas }).(pulumi.BoolPtrOutput)
}

// Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
//
// Deprecated: Use `bootImageId` instead
func (o VappVmOutput) BootImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.BootImage }).(pulumi.StringPtrOutput)
}

// Media URN to mount as boot image. You can fetch it using a [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
// Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
func (o VappVmOutput) BootImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.BootImageId }).(pulumi.StringPtrOutput)
}

// A block to define boot options of the VM. See Boot Options
func (o VappVmOutput) BootOptions() VappVmBootOptionsOutput {
	return o.ApplyT(func(v *VappVm) VappVmBootOptionsOutput { return v.BootOptions }).(VappVmBootOptionsOutput)
}

// Use a [`Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
//
// Deprecated: You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
func (o VappVmOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.CatalogName }).(pulumi.StringPtrOutput)
}

// Computer name to assign to this virtual machine.
func (o VappVmOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.ComputerName }).(pulumi.StringOutput)
}

// Performs disk consolidation during creation.
// The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
// fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
// Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
// storage performance.
func (o VappVmOutput) ConsolidateDisksOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.ConsolidateDisksOnCreate }).(pulumi.BoolPtrOutput)
}

// The ID of *an existing VM* to make a copy of it (it
// cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
// *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `Vm`
// resource) and using different source/destination VDCs.
func (o VappVmOutput) CopyFromVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.CopyFromVmId }).(pulumi.StringPtrOutput)
}

// The number of cores per socket.
func (o VappVmOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuCores }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
func (o VappVmOutput) CpuHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.CpuHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
func (o VappVmOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
func (o VappVmOutput) CpuPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.CpuPriority }).(pulumi.StringOutput)
}

// The amount of MHz reservation on the underlying virtualization infrastructure.
func (o VappVmOutput) CpuReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
func (o VappVmOutput) CpuShares() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.CpuShares }).(pulumi.IntOutput)
}

// The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
func (o VappVmOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Cpus }).(pulumi.IntOutput)
}

// A block to define for guest customization options. See Customization
func (o VappVmOutput) Customization() VappVmCustomizationOutput {
	return o.ApplyT(func(v *VappVm) VappVmCustomizationOutput { return v.Customization }).(VappVmCustomizationOutput)
}

// The VM description. Note: for VM from Template `description` is read only. Currently, this field has
// the description of the OVA used to create the VM.
func (o VappVmOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Independent disk attachment configuration. See Disk below for details.
func (o VappVmOutput) Disks() VappVmDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmDiskArrayOutput { return v.Disks }).(VappVmDiskArrayOutput)
}

// Boolean for exposing full CPU virtualization to the
// guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
// translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
func (o VappVmOutput) ExposeHardwareVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.ExposeHardwareVirtualization }).(pulumi.BoolPtrOutput)
}

// (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
func (o VappVmOutput) ExtraConfigs() VappVmExtraConfigArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmExtraConfigArrayOutput { return v.ExtraConfigs }).(VappVmExtraConfigArrayOutput)
}

// Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
func (o VappVmOutput) Firmware() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Firmware }).(pulumi.StringOutput)
}

// Key value map of guest properties
func (o VappVmOutput) GuestProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringMapOutput { return v.GuestProperties }).(pulumi.StringMapOutput)
}

// Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
func (o VappVmOutput) HardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.HardwareVersion }).(pulumi.StringOutput)
}

// VM Hyper Reference
func (o VappVmOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// (*v3.13.+*) A true/false value telling whether the resource was imported.
func (o VappVmOutput) Imported() pulumi.BoolOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolOutput { return v.Imported }).(pulumi.BoolOutput)
}

// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
func (o VappVmOutput) InheritedMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringMapOutput { return v.InheritedMetadata }).(pulumi.StringMapOutput)
}

// (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
func (o VappVmOutput) InternalDisks() VappVmInternalDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmInternalDiskArrayOutput { return v.InternalDisks }).(VappVmInternalDiskArrayOutput)
}

// The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
func (o VappVmOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// True if the virtual machine supports addition of memory while powered on. Default is `false`.
func (o VappVmOutput) MemoryHotAddEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.MemoryHotAddEnabled }).(pulumi.BoolPtrOutput)
}

// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
func (o VappVmOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
func (o VappVmOutput) MemoryPriority() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.MemoryPriority }).(pulumi.StringOutput)
}

// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
func (o VappVmOutput) MemoryReservation() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
func (o VappVmOutput) MemoryShares() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.MemoryShares }).(pulumi.IntOutput)
}

// Use `metadataEntry` instead. Key value map of metadata to assign to this VM
//
// Deprecated: Use metadataEntry instead
func (o VappVmOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign. See Metadata section for details.
func (o VappVmOutput) MetadataEntries() VappVmMetadataEntryArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmMetadataEntryArrayOutput { return v.MetadataEntries }).(VappVmMetadataEntryArrayOutput)
}

// A name for the VM, unique within the vApp
func (o VappVmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional number of seconds to try and wait for DHCP IP (only valid
// for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
// is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
//   - VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
//     does not require for the VM to use Edge Gateways DHCP service.
//   - VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
//     relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
//     until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
//     Tools are not present on the VM.
func (o VappVmOutput) NetworkDhcpWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntPtrOutput { return v.NetworkDhcpWaitSeconds }).(pulumi.IntPtrOutput)
}

// A block to define network interface. Multiple can be used. See Network and
// example for usage details.
func (o VappVmOutput) Networks() VappVmNetworkArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmNetworkArrayOutput { return v.Networks }).(VappVmNetworkArrayOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o VappVmOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
func (o VappVmOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
func (o VappVmOutput) OverrideTemplateDisks() VappVmOverrideTemplateDiskArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmOverrideTemplateDiskArrayOutput { return v.OverrideTemplateDisks }).(VappVmOverrideTemplateDiskArrayOutput)
}

// VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
// In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
func (o VappVmOutput) PlacementPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.PlacementPolicyId }).(pulumi.StringOutput)
}

// A boolean value stating if this VM should be powered on. Default is `true`
func (o VappVmOutput) PowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.PowerOn }).(pulumi.BoolPtrOutput)
}

// True if the update of resource should fail when virtual machine power off needed. Default is `false`.
func (o VappVmOutput) PreventUpdatePowerOff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.BoolPtrOutput { return v.PreventUpdatePowerOff }).(pulumi.BoolPtrOutput)
}

// Set of security tags to be managed by the `VappVm` resource.
// To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
// This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
func (o VappVmOutput) SecurityTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringArrayOutput { return v.SecurityTags }).(pulumi.StringArrayOutput)
}

// Set of extra configuration key/values to be added or modified. See Extra Configuration
//
// > **Note:** Only one of `securityTags` attribute or [`SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
// should be used. Using both would cause a behavioral conflict.
func (o VappVmOutput) SetExtraConfigs() VappVmSetExtraConfigArrayOutput {
	return o.ApplyT(func(v *VappVm) VappVmSetExtraConfigArrayOutput { return v.SetExtraConfigs }).(VappVmSetExtraConfigArrayOutput)
}

// VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
// using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
// In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
// if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
func (o VappVmOutput) SizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.SizingPolicyId }).(pulumi.StringOutput)
}

// (*v3.8+*) The vApp status as a numeric code.
func (o VappVmOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *VappVm) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// (*v3.8+*) The vApp status as text.
func (o VappVmOutput) StatusText() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.StatusText }).(pulumi.StringOutput)
}

// Storage profile to override the default one
func (o VappVmOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.StorageProfile }).(pulumi.StringOutput)
}

// Use `vappTemplateId` instead. The name of the vApp Template to use
//
// Deprecated: Use `vappTemplateId` instead
func (o VappVmOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

// ID of parent vApp
func (o VappVmOutput) VappId() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.VappId }).(pulumi.StringOutput)
}

// The vApp this VM belongs to.
func (o VappVmOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.VappName }).(pulumi.StringOutput)
}

// The URN of the vApp Template to use. You can fetch it using a [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
func (o VappVmOutput) VappTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.VappTemplateId }).(pulumi.StringPtrOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o VappVmOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

// The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
func (o VappVmOutput) VmNameInTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringPtrOutput { return v.VmNameInTemplate }).(pulumi.StringPtrOutput)
}

// (*3.2+*) Type of the VM (either `VappVm` or `Vm`).
func (o VappVmOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v *VappVm) pulumi.StringOutput { return v.VmType }).(pulumi.StringOutput)
}

type VappVmArrayOutput struct{ *pulumi.OutputState }

func (VappVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VappVm)(nil)).Elem()
}

func (o VappVmArrayOutput) ToVappVmArrayOutput() VappVmArrayOutput {
	return o
}

func (o VappVmArrayOutput) ToVappVmArrayOutputWithContext(ctx context.Context) VappVmArrayOutput {
	return o
}

func (o VappVmArrayOutput) Index(i pulumi.IntInput) VappVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VappVm {
		return vs[0].([]*VappVm)[vs[1].(int)]
	}).(VappVmOutput)
}

type VappVmMapOutput struct{ *pulumi.OutputState }

func (VappVmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VappVm)(nil)).Elem()
}

func (o VappVmMapOutput) ToVappVmMapOutput() VappVmMapOutput {
	return o
}

func (o VappVmMapOutput) ToVappVmMapOutputWithContext(ctx context.Context) VappVmMapOutput {
	return o
}

func (o VappVmMapOutput) MapIndex(k pulumi.StringInput) VappVmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VappVm {
		return vs[0].(map[string]*VappVm)[vs[1].(string)]
	}).(VappVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmInput)(nil)).Elem(), &VappVm{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmArrayInput)(nil)).Elem(), VappVmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VappVmMapInput)(nil)).Elem(), VappVmMap{})
	pulumi.RegisterOutputType(VappVmOutput{})
	pulumi.RegisterOutputType(VappVmArrayOutput{})
	pulumi.RegisterOutputType(VappVmMapOutput{})
}
