// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
//
// Supported in provider *v2.6+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			web, err := vcd.LookupVapp(ctx, &vcd.LookupVappArgs{
//				Name: "web",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			web1, err := vcd.LookupVappVm(ctx, &vcd.LookupVappVmArgs{
//				VappName: web.Name,
//				Name:     "web1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vmId", id)
//			ctx.Export("vm", web1)
//			return nil
//		})
//	}
//
// ```
//
// Sample output:
//
// ## Metadata
//
// The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
//
// * `key` - Key of this metadata entry.
// * `value` - Value of this metadata entry.
// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
// * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
// * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
func LookupVappVm(ctx *pulumi.Context, args *LookupVappVmArgs, opts ...pulumi.InvokeOption) (*LookupVappVmResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVappVmResult
	err := ctx.Invoke("vcd:index/getVappVm:getVappVm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVappVm.
type LookupVappVmArgs struct {
	// A name for the VM, unique within the vApp
	Name string `pulumi:"name"`
	// Allows to wait for up to a defined amount of
	// seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
	// constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
	// __at least one__ of the following __must be true__:
	// * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
	//   until UI reports IP addresses, but is more constrained. However this is the only option if guest
	//   tools are not present on the VM.
	NetworkDhcpWaitSeconds *int `pulumi:"networkDhcpWaitSeconds"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// (*v3.8+*) VM placement policy ID.
	PlacementPolicyId *string `pulumi:"placementPolicyId"`
	// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
	SizingPolicyId *string `pulumi:"sizingPolicyId"`
	// The vApp this VM belongs to.
	VappName string `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getVappVm.
type LookupVappVmResult struct {
	BootOptions []GetVappVmBootOption `pulumi:"bootOptions"`
	// Computer name to assign to this virtual machine.
	ComputerName string `pulumi:"computerName"`
	// The number of cores per socket
	CpuCores         int  `pulumi:"cpuCores"`
	CpuHotAddEnabled bool `pulumi:"cpuHotAddEnabled"`
	// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	CpuLimit int `pulumi:"cpuLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
	CpuPriority string `pulumi:"cpuPriority"`
	// The amount of MHz reservation on the underlying virtualization infrastructure
	CpuReservation int `pulumi:"cpuReservation"`
	// Custom priority for the resource in MHz
	CpuShares int `pulumi:"cpuShares"`
	// The number of virtual CPUs allocated to the VM
	Cpus           int                      `pulumi:"cpus"`
	Customizations []GetVappVmCustomization `pulumi:"customizations"`
	// The VM description. Note: description is read only. Currently, this field has
	// the description of the OVA used to create the VM
	Description string `pulumi:"description"`
	// Independent disk attachment configuration.
	Disks []GetVappVmDisk `pulumi:"disks"`
	// Expose hardware-assisted CPU virtualization to guest OS
	ExposeHardwareVirtualization bool                   `pulumi:"exposeHardwareVirtualization"`
	ExtraConfigs                 []GetVappVmExtraConfig `pulumi:"extraConfigs"`
	Firmware                     string                 `pulumi:"firmware"`
	// Key value map of guest properties
	GuestProperties map[string]string `pulumi:"guestProperties"`
	// (*v2.9+*) Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.).
	HardwareVersion string `pulumi:"hardwareVersion"`
	Href            string `pulumi:"href"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
	// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
	InheritedMetadata map[string]string `pulumi:"inheritedMetadata"`
	// (*v2.7+*) A block providing internal disk of VM details
	InternalDisks []GetVappVmInternalDisk `pulumi:"internalDisks"`
	// The amount of RAM (in MB) allocated to the VM
	Memory              int  `pulumi:"memory"`
	MemoryHotAddEnabled bool `pulumi:"memoryHotAddEnabled"`
	// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
	MemoryLimit int `pulumi:"memoryLimit"`
	// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
	MemoryPriority string `pulumi:"memoryPriority"`
	// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
	MemoryReservation int `pulumi:"memoryReservation"`
	// Custom priority for the resource in MB
	MemoryShares int `pulumi:"memoryShares"`
	// (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to this VM
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries assigned to this VM. See Metadata section for details
	MetadataEntries        []GetVappVmMetadataEntry `pulumi:"metadataEntries"`
	Name                   string                   `pulumi:"name"`
	NetworkDhcpWaitSeconds *int                     `pulumi:"networkDhcpWaitSeconds"`
	// A block defining a network interface. Multiple can be used.
	Networks []GetVappVmNetwork `pulumi:"networks"`
	Org      *string            `pulumi:"org"`
	// (*v2.9+*) Operating System type.
	OsType string `pulumi:"osType"`
	// (*v3.8+*) VM placement policy ID.
	PlacementPolicyId string `pulumi:"placementPolicyId"`
	// (*v3.9+*) Set of security tags assigned to this VM.
	SecurityTags []string `pulumi:"securityTags"`
	// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
	SizingPolicyId string `pulumi:"sizingPolicyId"`
	// (*v3.8+*) The vApp status as a numeric code.
	Status int `pulumi:"status"`
	// (*v3.8+*) The vApp status as text.
	StatusText     string  `pulumi:"statusText"`
	StorageProfile string  `pulumi:"storageProfile"`
	VappId         string  `pulumi:"vappId"`
	VappName       string  `pulumi:"vappName"`
	Vdc            *string `pulumi:"vdc"`
	// (*3.2+*) - type of the VM (either `VappVm` or `Vm`)
	VmType string `pulumi:"vmType"`
}

func LookupVappVmOutput(ctx *pulumi.Context, args LookupVappVmOutputArgs, opts ...pulumi.InvokeOption) LookupVappVmResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVappVmResultOutput, error) {
			args := v.(LookupVappVmArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getVappVm:getVappVm", args, LookupVappVmResultOutput{}, options).(LookupVappVmResultOutput), nil
		}).(LookupVappVmResultOutput)
}

// A collection of arguments for invoking getVappVm.
type LookupVappVmOutputArgs struct {
	// A name for the VM, unique within the vApp
	Name pulumi.StringInput `pulumi:"name"`
	// Allows to wait for up to a defined amount of
	// seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
	// constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
	// __at least one__ of the following __must be true__:
	// * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
	//   does not require for the VM to use Edge Gateways DHCP service.
	// * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
	//   relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
	//   until UI reports IP addresses, but is more constrained. However this is the only option if guest
	//   tools are not present on the VM.
	NetworkDhcpWaitSeconds pulumi.IntPtrInput `pulumi:"networkDhcpWaitSeconds"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
	// (*v3.8+*) VM placement policy ID.
	PlacementPolicyId pulumi.StringPtrInput `pulumi:"placementPolicyId"`
	// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
	SizingPolicyId pulumi.StringPtrInput `pulumi:"sizingPolicyId"`
	// The vApp this VM belongs to.
	VappName pulumi.StringInput `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (LookupVappVmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappVmArgs)(nil)).Elem()
}

// A collection of values returned by getVappVm.
type LookupVappVmResultOutput struct{ *pulumi.OutputState }

func (LookupVappVmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappVmResult)(nil)).Elem()
}

func (o LookupVappVmResultOutput) ToLookupVappVmResultOutput() LookupVappVmResultOutput {
	return o
}

func (o LookupVappVmResultOutput) ToLookupVappVmResultOutputWithContext(ctx context.Context) LookupVappVmResultOutput {
	return o
}

func (o LookupVappVmResultOutput) BootOptions() GetVappVmBootOptionArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmBootOption { return v.BootOptions }).(GetVappVmBootOptionArrayOutput)
}

// Computer name to assign to this virtual machine.
func (o LookupVappVmResultOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.ComputerName }).(pulumi.StringOutput)
}

// The number of cores per socket
func (o LookupVappVmResultOutput) CpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.CpuCores }).(pulumi.IntOutput)
}

func (o LookupVappVmResultOutput) CpuHotAddEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVappVmResult) bool { return v.CpuHotAddEnabled }).(pulumi.BoolOutput)
}

// The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
func (o LookupVappVmResultOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.CpuLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
func (o LookupVappVmResultOutput) CpuPriority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.CpuPriority }).(pulumi.StringOutput)
}

// The amount of MHz reservation on the underlying virtualization infrastructure
func (o LookupVappVmResultOutput) CpuReservation() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.CpuReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource in MHz
func (o LookupVappVmResultOutput) CpuShares() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.CpuShares }).(pulumi.IntOutput)
}

// The number of virtual CPUs allocated to the VM
func (o LookupVappVmResultOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.Cpus }).(pulumi.IntOutput)
}

func (o LookupVappVmResultOutput) Customizations() GetVappVmCustomizationArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmCustomization { return v.Customizations }).(GetVappVmCustomizationArrayOutput)
}

// The VM description. Note: description is read only. Currently, this field has
// the description of the OVA used to create the VM
func (o LookupVappVmResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.Description }).(pulumi.StringOutput)
}

// Independent disk attachment configuration.
func (o LookupVappVmResultOutput) Disks() GetVappVmDiskArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmDisk { return v.Disks }).(GetVappVmDiskArrayOutput)
}

// Expose hardware-assisted CPU virtualization to guest OS
func (o LookupVappVmResultOutput) ExposeHardwareVirtualization() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVappVmResult) bool { return v.ExposeHardwareVirtualization }).(pulumi.BoolOutput)
}

func (o LookupVappVmResultOutput) ExtraConfigs() GetVappVmExtraConfigArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmExtraConfig { return v.ExtraConfigs }).(GetVappVmExtraConfigArrayOutput)
}

func (o LookupVappVmResultOutput) Firmware() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.Firmware }).(pulumi.StringOutput)
}

// Key value map of guest properties
func (o LookupVappVmResultOutput) GuestProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVappVmResult) map[string]string { return v.GuestProperties }).(pulumi.StringMapOutput)
}

// (*v2.9+*) Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.).
func (o LookupVappVmResultOutput) HardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.HardwareVersion }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.Href }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVappVmResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.Id }).(pulumi.StringOutput)
}

// (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
// details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
func (o LookupVappVmResultOutput) InheritedMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVappVmResult) map[string]string { return v.InheritedMetadata }).(pulumi.StringMapOutput)
}

// (*v2.7+*) A block providing internal disk of VM details
func (o LookupVappVmResultOutput) InternalDisks() GetVappVmInternalDiskArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmInternalDisk { return v.InternalDisks }).(GetVappVmInternalDiskArrayOutput)
}

// The amount of RAM (in MB) allocated to the VM
func (o LookupVappVmResultOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.Memory }).(pulumi.IntOutput)
}

func (o LookupVappVmResultOutput) MemoryHotAddEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVappVmResult) bool { return v.MemoryHotAddEnabled }).(pulumi.BoolOutput)
}

// The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
func (o LookupVappVmResultOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.MemoryLimit }).(pulumi.IntOutput)
}

// Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
func (o LookupVappVmResultOutput) MemoryPriority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.MemoryPriority }).(pulumi.StringOutput)
}

// The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
func (o LookupVappVmResultOutput) MemoryReservation() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.MemoryReservation }).(pulumi.IntOutput)
}

// Custom priority for the resource in MB
func (o LookupVappVmResultOutput) MemoryShares() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.MemoryShares }).(pulumi.IntOutput)
}

// (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to this VM
//
// Deprecated: Use metadataEntry instead
func (o LookupVappVmResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVappVmResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries assigned to this VM. See Metadata section for details
func (o LookupVappVmResultOutput) MetadataEntries() GetVappVmMetadataEntryArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmMetadataEntry { return v.MetadataEntries }).(GetVappVmMetadataEntryArrayOutput)
}

func (o LookupVappVmResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) NetworkDhcpWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVappVmResult) *int { return v.NetworkDhcpWaitSeconds }).(pulumi.IntPtrOutput)
}

// A block defining a network interface. Multiple can be used.
func (o LookupVappVmResultOutput) Networks() GetVappVmNetworkArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []GetVappVmNetwork { return v.Networks }).(GetVappVmNetworkArrayOutput)
}

func (o LookupVappVmResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVappVmResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

// (*v2.9+*) Operating System type.
func (o LookupVappVmResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.OsType }).(pulumi.StringOutput)
}

// (*v3.8+*) VM placement policy ID.
func (o LookupVappVmResultOutput) PlacementPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.PlacementPolicyId }).(pulumi.StringOutput)
}

// (*v3.9+*) Set of security tags assigned to this VM.
func (o LookupVappVmResultOutput) SecurityTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVappVmResult) []string { return v.SecurityTags }).(pulumi.StringArrayOutput)
}

// (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
func (o LookupVappVmResultOutput) SizingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.SizingPolicyId }).(pulumi.StringOutput)
}

// (*v3.8+*) The vApp status as a numeric code.
func (o LookupVappVmResultOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVappVmResult) int { return v.Status }).(pulumi.IntOutput)
}

// (*v3.8+*) The vApp status as text.
func (o LookupVappVmResultOutput) StatusText() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.StatusText }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.StorageProfile }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) VappId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.VappId }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.VappName }).(pulumi.StringOutput)
}

func (o LookupVappVmResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVappVmResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

// (*3.2+*) - type of the VM (either `VappVm` or `Vm`)
func (o LookupVappVmResultOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappVmResult) string { return v.VmType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVappVmResultOutput{})
}
