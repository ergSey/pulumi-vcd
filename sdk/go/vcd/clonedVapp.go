// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClonedVapp struct {
	pulumi.CustomResourceState

	// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
	// A source vApp can only be deleted if it is fully powered off.
	DeleteSource pulumi.BoolPtrOutput `pulumi:"deleteSource"`
	// An optional description for the vApp, up to 256 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Computed) The vApp Hyper Reference.
	Href pulumi.StringOutput `pulumi:"href"`
	// A unique name for the vApp
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// A boolean value stating if this vApp should be powered on. Default is `false`.
	PowerOn pulumi.BoolPtrOutput `pulumi:"powerOn"`
	// The ID of the source to use.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// The type of the source to use: one of `template` or `vapp`.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// (Computed) The vApp status as a numeric code.
	Status pulumi.IntOutput `pulumi:"status"`
	// (Computed) The vApp status as text.
	StatusText pulumi.StringOutput `pulumi:"statusText"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
	// (Computed) The list of VM names included in this vApp, in alphabetic order.
	VmLists pulumi.StringArrayOutput `pulumi:"vmLists"`
}

// NewClonedVapp registers a new resource with the given unique name, arguments, and options.
func NewClonedVapp(ctx *pulumi.Context,
	name string, args *ClonedVappArgs, opts ...pulumi.ResourceOption) (*ClonedVapp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClonedVapp
	err := ctx.RegisterResource("vcd:index/clonedVapp:ClonedVapp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClonedVapp gets an existing ClonedVapp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClonedVapp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClonedVappState, opts ...pulumi.ResourceOption) (*ClonedVapp, error) {
	var resource ClonedVapp
	err := ctx.ReadResource("vcd:index/clonedVapp:ClonedVapp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClonedVapp resources.
type clonedVappState struct {
	// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
	// A source vApp can only be deleted if it is fully powered off.
	DeleteSource *bool `pulumi:"deleteSource"`
	// An optional description for the vApp, up to 256 characters.
	Description *string `pulumi:"description"`
	// (Computed) The vApp Hyper Reference.
	Href *string `pulumi:"href"`
	// A unique name for the vApp
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// A boolean value stating if this vApp should be powered on. Default is `false`.
	PowerOn *bool `pulumi:"powerOn"`
	// The ID of the source to use.
	SourceId *string `pulumi:"sourceId"`
	// The type of the source to use: one of `template` or `vapp`.
	SourceType *string `pulumi:"sourceType"`
	// (Computed) The vApp status as a numeric code.
	Status *int `pulumi:"status"`
	// (Computed) The vApp status as text.
	StatusText *string `pulumi:"statusText"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
	// (Computed) The list of VM names included in this vApp, in alphabetic order.
	VmLists []string `pulumi:"vmLists"`
}

type ClonedVappState struct {
	// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
	// A source vApp can only be deleted if it is fully powered off.
	DeleteSource pulumi.BoolPtrInput
	// An optional description for the vApp, up to 256 characters.
	Description pulumi.StringPtrInput
	// (Computed) The vApp Hyper Reference.
	Href pulumi.StringPtrInput
	// A unique name for the vApp
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// A boolean value stating if this vApp should be powered on. Default is `false`.
	PowerOn pulumi.BoolPtrInput
	// The ID of the source to use.
	SourceId pulumi.StringPtrInput
	// The type of the source to use: one of `template` or `vapp`.
	SourceType pulumi.StringPtrInput
	// (Computed) The vApp status as a numeric code.
	Status pulumi.IntPtrInput
	// (Computed) The vApp status as text.
	StatusText pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
	// (Computed) The list of VM names included in this vApp, in alphabetic order.
	VmLists pulumi.StringArrayInput
}

func (ClonedVappState) ElementType() reflect.Type {
	return reflect.TypeOf((*clonedVappState)(nil)).Elem()
}

type clonedVappArgs struct {
	// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
	// A source vApp can only be deleted if it is fully powered off.
	DeleteSource *bool `pulumi:"deleteSource"`
	// An optional description for the vApp, up to 256 characters.
	Description *string `pulumi:"description"`
	// A unique name for the vApp
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// A boolean value stating if this vApp should be powered on. Default is `false`.
	PowerOn *bool `pulumi:"powerOn"`
	// The ID of the source to use.
	SourceId string `pulumi:"sourceId"`
	// The type of the source to use: one of `template` or `vapp`.
	SourceType string `pulumi:"sourceType"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a ClonedVapp resource.
type ClonedVappArgs struct {
	// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
	// A source vApp can only be deleted if it is fully powered off.
	DeleteSource pulumi.BoolPtrInput
	// An optional description for the vApp, up to 256 characters.
	Description pulumi.StringPtrInput
	// A unique name for the vApp
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// A boolean value stating if this vApp should be powered on. Default is `false`.
	PowerOn pulumi.BoolPtrInput
	// The ID of the source to use.
	SourceId pulumi.StringInput
	// The type of the source to use: one of `template` or `vapp`.
	SourceType pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput
}

func (ClonedVappArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clonedVappArgs)(nil)).Elem()
}

type ClonedVappInput interface {
	pulumi.Input

	ToClonedVappOutput() ClonedVappOutput
	ToClonedVappOutputWithContext(ctx context.Context) ClonedVappOutput
}

func (*ClonedVapp) ElementType() reflect.Type {
	return reflect.TypeOf((**ClonedVapp)(nil)).Elem()
}

func (i *ClonedVapp) ToClonedVappOutput() ClonedVappOutput {
	return i.ToClonedVappOutputWithContext(context.Background())
}

func (i *ClonedVapp) ToClonedVappOutputWithContext(ctx context.Context) ClonedVappOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClonedVappOutput)
}

// ClonedVappArrayInput is an input type that accepts ClonedVappArray and ClonedVappArrayOutput values.
// You can construct a concrete instance of `ClonedVappArrayInput` via:
//
//	ClonedVappArray{ ClonedVappArgs{...} }
type ClonedVappArrayInput interface {
	pulumi.Input

	ToClonedVappArrayOutput() ClonedVappArrayOutput
	ToClonedVappArrayOutputWithContext(context.Context) ClonedVappArrayOutput
}

type ClonedVappArray []ClonedVappInput

func (ClonedVappArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClonedVapp)(nil)).Elem()
}

func (i ClonedVappArray) ToClonedVappArrayOutput() ClonedVappArrayOutput {
	return i.ToClonedVappArrayOutputWithContext(context.Background())
}

func (i ClonedVappArray) ToClonedVappArrayOutputWithContext(ctx context.Context) ClonedVappArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClonedVappArrayOutput)
}

// ClonedVappMapInput is an input type that accepts ClonedVappMap and ClonedVappMapOutput values.
// You can construct a concrete instance of `ClonedVappMapInput` via:
//
//	ClonedVappMap{ "key": ClonedVappArgs{...} }
type ClonedVappMapInput interface {
	pulumi.Input

	ToClonedVappMapOutput() ClonedVappMapOutput
	ToClonedVappMapOutputWithContext(context.Context) ClonedVappMapOutput
}

type ClonedVappMap map[string]ClonedVappInput

func (ClonedVappMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClonedVapp)(nil)).Elem()
}

func (i ClonedVappMap) ToClonedVappMapOutput() ClonedVappMapOutput {
	return i.ToClonedVappMapOutputWithContext(context.Background())
}

func (i ClonedVappMap) ToClonedVappMapOutputWithContext(ctx context.Context) ClonedVappMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClonedVappMapOutput)
}

type ClonedVappOutput struct{ *pulumi.OutputState }

func (ClonedVappOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClonedVapp)(nil)).Elem()
}

func (o ClonedVappOutput) ToClonedVappOutput() ClonedVappOutput {
	return o
}

func (o ClonedVappOutput) ToClonedVappOutputWithContext(ctx context.Context) ClonedVappOutput {
	return o
}

// A boolean value of `true` or `false` stating if the source entity should be deleted after creation.
// A source vApp can only be deleted if it is fully powered off.
func (o ClonedVappOutput) DeleteSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.BoolPtrOutput { return v.DeleteSource }).(pulumi.BoolPtrOutput)
}

// An optional description for the vApp, up to 256 characters.
func (o ClonedVappOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Computed) The vApp Hyper Reference.
func (o ClonedVappOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringOutput { return v.Href }).(pulumi.StringOutput)
}

// A unique name for the vApp
func (o ClonedVappOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o ClonedVappOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// A boolean value stating if this vApp should be powered on. Default is `false`.
func (o ClonedVappOutput) PowerOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.BoolPtrOutput { return v.PowerOn }).(pulumi.BoolPtrOutput)
}

// The ID of the source to use.
func (o ClonedVappOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// The type of the source to use: one of `template` or `vapp`.
func (o ClonedVappOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// (Computed) The vApp status as a numeric code.
func (o ClonedVappOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// (Computed) The vApp status as text.
func (o ClonedVappOutput) StatusText() pulumi.StringOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringOutput { return v.StatusText }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
func (o ClonedVappOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

// (Computed) The list of VM names included in this vApp, in alphabetic order.
func (o ClonedVappOutput) VmLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClonedVapp) pulumi.StringArrayOutput { return v.VmLists }).(pulumi.StringArrayOutput)
}

type ClonedVappArrayOutput struct{ *pulumi.OutputState }

func (ClonedVappArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClonedVapp)(nil)).Elem()
}

func (o ClonedVappArrayOutput) ToClonedVappArrayOutput() ClonedVappArrayOutput {
	return o
}

func (o ClonedVappArrayOutput) ToClonedVappArrayOutputWithContext(ctx context.Context) ClonedVappArrayOutput {
	return o
}

func (o ClonedVappArrayOutput) Index(i pulumi.IntInput) ClonedVappOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClonedVapp {
		return vs[0].([]*ClonedVapp)[vs[1].(int)]
	}).(ClonedVappOutput)
}

type ClonedVappMapOutput struct{ *pulumi.OutputState }

func (ClonedVappMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClonedVapp)(nil)).Elem()
}

func (o ClonedVappMapOutput) ToClonedVappMapOutput() ClonedVappMapOutput {
	return o
}

func (o ClonedVappMapOutput) ToClonedVappMapOutputWithContext(ctx context.Context) ClonedVappMapOutput {
	return o
}

func (o ClonedVappMapOutput) MapIndex(k pulumi.StringInput) ClonedVappOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClonedVapp {
		return vs[0].(map[string]*ClonedVapp)[vs[1].(string)]
	}).(ClonedVappOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClonedVappInput)(nil)).Elem(), &ClonedVapp{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClonedVappArrayInput)(nil)).Elem(), ClonedVappArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClonedVappMapInput)(nil)).Elem(), ClonedVappMap{})
	pulumi.RegisterOutputType(ClonedVappOutput{})
	pulumi.RegisterOutputType(ClonedVappArrayOutput{})
	pulumi.RegisterOutputType(ClonedVappMapOutput{})
}
