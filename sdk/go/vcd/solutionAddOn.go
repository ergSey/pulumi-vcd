// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SolutionAddOn struct {
	pulumi.CustomResourceState

	// Local filesystem path of Solution Add-On. The Add-On image is required
	// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
	// Director.
	AddOnPath pulumi.StringOutput `pulumi:"addOnPath"`
	// Plugin can automatically trust the certificate of Solution
	// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
	// using the Solution Add-On if not enabled here.
	AutoTrustCertificate pulumi.BoolPtrOutput `pulumi:"autoTrustCertificate"`
	// The catalog item ID of Solution Add-On. It can be uploaded using
	// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
	CatalogItemId pulumi.StringOutput `pulumi:"catalogItemId"`
	// reports the name of Solution Add-On as defined in the system. This name can be also used
	// in data source
	// [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
	Name pulumi.StringOutput `pulumi:"name"`
	// Parent RDE state
	RdeState pulumi.StringOutput `pulumi:"rdeState"`
}

// NewSolutionAddOn registers a new resource with the given unique name, arguments, and options.
func NewSolutionAddOn(ctx *pulumi.Context,
	name string, args *SolutionAddOnArgs, opts ...pulumi.ResourceOption) (*SolutionAddOn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddOnPath == nil {
		return nil, errors.New("invalid value for required argument 'AddOnPath'")
	}
	if args.CatalogItemId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogItemId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SolutionAddOn
	err := ctx.RegisterResource("vcd:index/solutionAddOn:SolutionAddOn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionAddOn gets an existing SolutionAddOn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionAddOn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionAddOnState, opts ...pulumi.ResourceOption) (*SolutionAddOn, error) {
	var resource SolutionAddOn
	err := ctx.ReadResource("vcd:index/solutionAddOn:SolutionAddOn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionAddOn resources.
type solutionAddOnState struct {
	// Local filesystem path of Solution Add-On. The Add-On image is required
	// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
	// Director.
	AddOnPath *string `pulumi:"addOnPath"`
	// Plugin can automatically trust the certificate of Solution
	// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
	// using the Solution Add-On if not enabled here.
	AutoTrustCertificate *bool `pulumi:"autoTrustCertificate"`
	// The catalog item ID of Solution Add-On. It can be uploaded using
	// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
	CatalogItemId *string `pulumi:"catalogItemId"`
	// reports the name of Solution Add-On as defined in the system. This name can be also used
	// in data source
	// [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
	Name *string `pulumi:"name"`
	// Parent RDE state
	RdeState *string `pulumi:"rdeState"`
}

type SolutionAddOnState struct {
	// Local filesystem path of Solution Add-On. The Add-On image is required
	// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
	// Director.
	AddOnPath pulumi.StringPtrInput
	// Plugin can automatically trust the certificate of Solution
	// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
	// using the Solution Add-On if not enabled here.
	AutoTrustCertificate pulumi.BoolPtrInput
	// The catalog item ID of Solution Add-On. It can be uploaded using
	// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
	CatalogItemId pulumi.StringPtrInput
	// reports the name of Solution Add-On as defined in the system. This name can be also used
	// in data source
	// [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
	Name pulumi.StringPtrInput
	// Parent RDE state
	RdeState pulumi.StringPtrInput
}

func (SolutionAddOnState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionAddOnState)(nil)).Elem()
}

type solutionAddOnArgs struct {
	// Local filesystem path of Solution Add-On. The Add-On image is required
	// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
	// Director.
	AddOnPath string `pulumi:"addOnPath"`
	// Plugin can automatically trust the certificate of Solution
	// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
	// using the Solution Add-On if not enabled here.
	AutoTrustCertificate *bool `pulumi:"autoTrustCertificate"`
	// The catalog item ID of Solution Add-On. It can be uploaded using
	// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
	CatalogItemId string `pulumi:"catalogItemId"`
}

// The set of arguments for constructing a SolutionAddOn resource.
type SolutionAddOnArgs struct {
	// Local filesystem path of Solution Add-On. The Add-On image is required
	// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
	// Director.
	AddOnPath pulumi.StringInput
	// Plugin can automatically trust the certificate of Solution
	// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
	// using the Solution Add-On if not enabled here.
	AutoTrustCertificate pulumi.BoolPtrInput
	// The catalog item ID of Solution Add-On. It can be uploaded using
	// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
	CatalogItemId pulumi.StringInput
}

func (SolutionAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionAddOnArgs)(nil)).Elem()
}

type SolutionAddOnInput interface {
	pulumi.Input

	ToSolutionAddOnOutput() SolutionAddOnOutput
	ToSolutionAddOnOutputWithContext(ctx context.Context) SolutionAddOnOutput
}

func (*SolutionAddOn) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionAddOn)(nil)).Elem()
}

func (i *SolutionAddOn) ToSolutionAddOnOutput() SolutionAddOnOutput {
	return i.ToSolutionAddOnOutputWithContext(context.Background())
}

func (i *SolutionAddOn) ToSolutionAddOnOutputWithContext(ctx context.Context) SolutionAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnOutput)
}

// SolutionAddOnArrayInput is an input type that accepts SolutionAddOnArray and SolutionAddOnArrayOutput values.
// You can construct a concrete instance of `SolutionAddOnArrayInput` via:
//
//	SolutionAddOnArray{ SolutionAddOnArgs{...} }
type SolutionAddOnArrayInput interface {
	pulumi.Input

	ToSolutionAddOnArrayOutput() SolutionAddOnArrayOutput
	ToSolutionAddOnArrayOutputWithContext(context.Context) SolutionAddOnArrayOutput
}

type SolutionAddOnArray []SolutionAddOnInput

func (SolutionAddOnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionAddOn)(nil)).Elem()
}

func (i SolutionAddOnArray) ToSolutionAddOnArrayOutput() SolutionAddOnArrayOutput {
	return i.ToSolutionAddOnArrayOutputWithContext(context.Background())
}

func (i SolutionAddOnArray) ToSolutionAddOnArrayOutputWithContext(ctx context.Context) SolutionAddOnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnArrayOutput)
}

// SolutionAddOnMapInput is an input type that accepts SolutionAddOnMap and SolutionAddOnMapOutput values.
// You can construct a concrete instance of `SolutionAddOnMapInput` via:
//
//	SolutionAddOnMap{ "key": SolutionAddOnArgs{...} }
type SolutionAddOnMapInput interface {
	pulumi.Input

	ToSolutionAddOnMapOutput() SolutionAddOnMapOutput
	ToSolutionAddOnMapOutputWithContext(context.Context) SolutionAddOnMapOutput
}

type SolutionAddOnMap map[string]SolutionAddOnInput

func (SolutionAddOnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionAddOn)(nil)).Elem()
}

func (i SolutionAddOnMap) ToSolutionAddOnMapOutput() SolutionAddOnMapOutput {
	return i.ToSolutionAddOnMapOutputWithContext(context.Background())
}

func (i SolutionAddOnMap) ToSolutionAddOnMapOutputWithContext(ctx context.Context) SolutionAddOnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnMapOutput)
}

type SolutionAddOnOutput struct{ *pulumi.OutputState }

func (SolutionAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionAddOn)(nil)).Elem()
}

func (o SolutionAddOnOutput) ToSolutionAddOnOutput() SolutionAddOnOutput {
	return o
}

func (o SolutionAddOnOutput) ToSolutionAddOnOutputWithContext(ctx context.Context) SolutionAddOnOutput {
	return o
}

// Local filesystem path of Solution Add-On. The Add-On image is required
// locally as some of the metadata must be extracted for creating the Solution Add-On entry in Cloud
// Director.
func (o SolutionAddOnOutput) AddOnPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOn) pulumi.StringOutput { return v.AddOnPath }).(pulumi.StringOutput)
}

// Plugin can automatically trust the certificate of Solution
// Add-On. This is required for Solution Add-Ons to work and one will have to do it manually before
// using the Solution Add-On if not enabled here.
func (o SolutionAddOnOutput) AutoTrustCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SolutionAddOn) pulumi.BoolPtrOutput { return v.AutoTrustCertificate }).(pulumi.BoolPtrOutput)
}

// The catalog item ID of Solution Add-On. It can be uploaded using
// [`CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_media)
func (o SolutionAddOnOutput) CatalogItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOn) pulumi.StringOutput { return v.CatalogItemId }).(pulumi.StringOutput)
}

// reports the name of Solution Add-On as defined in the system. This name can be also used
// in data source
// [`SolutionAddOn`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/solution_add_on)
func (o SolutionAddOnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOn) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parent RDE state
func (o SolutionAddOnOutput) RdeState() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOn) pulumi.StringOutput { return v.RdeState }).(pulumi.StringOutput)
}

type SolutionAddOnArrayOutput struct{ *pulumi.OutputState }

func (SolutionAddOnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionAddOn)(nil)).Elem()
}

func (o SolutionAddOnArrayOutput) ToSolutionAddOnArrayOutput() SolutionAddOnArrayOutput {
	return o
}

func (o SolutionAddOnArrayOutput) ToSolutionAddOnArrayOutputWithContext(ctx context.Context) SolutionAddOnArrayOutput {
	return o
}

func (o SolutionAddOnArrayOutput) Index(i pulumi.IntInput) SolutionAddOnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolutionAddOn {
		return vs[0].([]*SolutionAddOn)[vs[1].(int)]
	}).(SolutionAddOnOutput)
}

type SolutionAddOnMapOutput struct{ *pulumi.OutputState }

func (SolutionAddOnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionAddOn)(nil)).Elem()
}

func (o SolutionAddOnMapOutput) ToSolutionAddOnMapOutput() SolutionAddOnMapOutput {
	return o
}

func (o SolutionAddOnMapOutput) ToSolutionAddOnMapOutputWithContext(ctx context.Context) SolutionAddOnMapOutput {
	return o
}

func (o SolutionAddOnMapOutput) MapIndex(k pulumi.StringInput) SolutionAddOnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolutionAddOn {
		return vs[0].(map[string]*SolutionAddOn)[vs[1].(string)]
	}).(SolutionAddOnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnInput)(nil)).Elem(), &SolutionAddOn{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnArrayInput)(nil)).Elem(), SolutionAddOnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnMapInput)(nil)).Elem(), SolutionAddOnMap{})
	pulumi.RegisterOutputType(SolutionAddOnOutput{})
	pulumi.RegisterOutputType(SolutionAddOnArrayOutput{})
	pulumi.RegisterOutputType(SolutionAddOnMapOutput{})
}
