// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Experimental in provider *3.11*.
//
// > **Note:** This resource requires system administrator privileges.
//
// Provides a resource to manage vGPU policies for virtual machines in VMware Cloud Director.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleOrg, err := vcd.LookupOrg(ctx, &vcd.LookupOrgArgs{
//				Name: "test_org",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleVgpuProfile, err := vcd.GetVgpuProfile(ctx, &vcd.GetVgpuProfileArgs{
//				Name: "grid_a100-10c",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleProviderVdc, err := vcd.LookupProviderVdc(ctx, &vcd.LookupProviderVdcArgs{
//				Name: "example_provider_vdc",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vmGroupExample, err := vcd.GetVmGroup(ctx, &vcd.GetVmGroupArgs{
//				Name: "vm-group-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleVgpuPolicy, err := vcd.NewVmVgpuPolicy(ctx, "example_vgpu_policy", &vcd.VmVgpuPolicyArgs{
//				Name:        pulumi.String("example-vgpu-policy"),
//				Description: pulumi.String("An example vGPU policy configuration"),
//				VgpuProfile: &vcd.VmVgpuPolicyVgpuProfileArgs{
//					Id:    pulumi.String(exampleVgpuProfile.Id),
//					Count: pulumi.Int(1),
//				},
//				Cpu: &vcd.VmVgpuPolicyCpuArgs{
//					Shares:               pulumi.String("886"),
//					LimitInMhz:           pulumi.String("2400"),
//					Count:                pulumi.String("9"),
//					SpeedInMhz:           pulumi.String("2500"),
//					CoresPerSocket:       pulumi.String("3"),
//					ReservationGuarantee: pulumi.String("0.55"),
//				},
//				Memory: &vcd.VmVgpuPolicyMemoryArgs{
//					Shares:    pulumi.String("1580"),
//					SizeInMb:  pulumi.String("3200"),
//					LimitInMb: pulumi.String("2800"),
//				},
//				ProviderVdcScopes: vcd.VmVgpuPolicyProviderVdcScopeArray{
//					&vcd.VmVgpuPolicyProviderVdcScopeArgs{
//						ProviderVdcId: pulumi.String(exampleProviderVdc.Id),
//						ClusterNames: pulumi.StringArray{
//							pulumi.String("cluster1"),
//						},
//						VmGroupId: pulumi.String(vmGroupExample.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleOrgVdc, err := vcd.NewOrgVdc(ctx, "example_org_vdc", &vcd.OrgVdcArgs{
//				Org:             pulumi.String(exampleOrg.Name),
//				Name:            pulumi.String("test-org-vdc"),
//				ProviderVdcName: pulumi.String(exampleProviderVdc.Name),
//				AllocationModel: pulumi.String("Flex"),
//				DeleteForce:     pulumi.Bool(true),
//				ComputeCapacity: &vcd.OrgVdcComputeCapacityArgs{
//					Cpu: &vcd.OrgVdcComputeCapacityCpuArgs{
//						Allocated: pulumi.Int(2048),
//					},
//					Memory: &vcd.OrgVdcComputeCapacityMemoryArgs{
//						Allocated: pulumi.Int(2048),
//					},
//				},
//				StorageProfiles: vcd.OrgVdcStorageProfileArray{
//					&vcd.OrgVdcStorageProfileArgs{
//						Name:    pulumi.String("*"),
//						Limit:   pulumi.Int(10240),
//						Default: pulumi.Bool(true),
//					},
//				},
//				Elasticity:              pulumi.Bool(true),
//				IncludeVmMemoryOverhead: pulumi.Bool(true),
//				MemoryGuaranteed:        pulumi.Float64(1),
//				DefaultComputePolicyId:  exampleVgpuPolicy.ID(),
//				VmVgpuPolicyIds: pulumi.StringArray{
//					exampleVgpuPolicy.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vcd.NewVm(ctx, "test_vm", &vcd.VmArgs{
//				Org:               pulumi.String(exampleOrg.Name),
//				Vdc:               exampleOrgVdc.Name,
//				Name:              pulumi.String("terraform-provider-vm"),
//				ComputerName:      pulumi.String("emptyVM"),
//				Memory:            pulumi.Int(2048),
//				Cpus:              pulumi.Int(2),
//				CpuCores:          pulumi.Int(1),
//				PowerOn:           pulumi.Bool(false),
//				OsType:            pulumi.String("sles11_64Guest"),
//				HardwareVersion:   pulumi.String("vmx-19"),
//				PlacementPolicyId: exampleVgpuPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Without A Sizing Policy)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.NewVmVgpuPolicy(ctx, "example_vgpu_policy_without_sizing", &vcd.VmVgpuPolicyArgs{
//				Name:        pulumi.String("example-vgpu-policy-without-sizing"),
//				Description: pulumi.String("An example vGPU policy configuration"),
//				VgpuProfile: &vcd.VmVgpuPolicyVgpuProfileArgs{
//					Id:    pulumi.Any(exampleVgpuProfile.Id),
//					Count: pulumi.Int(1),
//				},
//				ProviderVdcScopes: vcd.VmVgpuPolicyProviderVdcScopeArray{
//					&vcd.VmVgpuPolicyProviderVdcScopeArgs{
//						ProviderVdcId: pulumi.Any(exampleProviderVdc.Id),
//						ClusterNames: pulumi.StringArray{
//							pulumi.String("cluster1"),
//						},
//						VmGroupId: pulumi.Any(vmGroupExample.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VmVgpuPolicy struct {
	pulumi.CustomResourceState

	// Configuration options for CPU resources. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
	Cpu VmVgpuPolicyCpuPtrOutput `pulumi:"cpu"`
	// A brief description of the vGPU policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Memory resource configuration settings. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
	Memory VmVgpuPolicyMemoryPtrOutput `pulumi:"memory"`
	// The unique name assigned to the vGPU policy for a virtual machine.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the scope of the policy within
	// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
	// See `providerVdcScope` for more details.
	ProviderVdcScopes VmVgpuPolicyProviderVdcScopeArrayOutput `pulumi:"providerVdcScopes"`
	// Defines the vGPU profile ID and count.
	VgpuProfile VmVgpuPolicyVgpuProfileOutput `pulumi:"vgpuProfile"`
}

// NewVmVgpuPolicy registers a new resource with the given unique name, arguments, and options.
func NewVmVgpuPolicy(ctx *pulumi.Context,
	name string, args *VmVgpuPolicyArgs, opts ...pulumi.ResourceOption) (*VmVgpuPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VgpuProfile == nil {
		return nil, errors.New("invalid value for required argument 'VgpuProfile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmVgpuPolicy
	err := ctx.RegisterResource("vcd:index/vmVgpuPolicy:VmVgpuPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmVgpuPolicy gets an existing VmVgpuPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmVgpuPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmVgpuPolicyState, opts ...pulumi.ResourceOption) (*VmVgpuPolicy, error) {
	var resource VmVgpuPolicy
	err := ctx.ReadResource("vcd:index/vmVgpuPolicy:VmVgpuPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmVgpuPolicy resources.
type vmVgpuPolicyState struct {
	// Configuration options for CPU resources. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
	Cpu *VmVgpuPolicyCpu `pulumi:"cpu"`
	// A brief description of the vGPU policy.
	Description *string `pulumi:"description"`
	// Memory resource configuration settings. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
	Memory *VmVgpuPolicyMemory `pulumi:"memory"`
	// The unique name assigned to the vGPU policy for a virtual machine.
	Name *string `pulumi:"name"`
	// Defines the scope of the policy within
	// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
	// See `providerVdcScope` for more details.
	ProviderVdcScopes []VmVgpuPolicyProviderVdcScope `pulumi:"providerVdcScopes"`
	// Defines the vGPU profile ID and count.
	VgpuProfile *VmVgpuPolicyVgpuProfile `pulumi:"vgpuProfile"`
}

type VmVgpuPolicyState struct {
	// Configuration options for CPU resources. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
	Cpu VmVgpuPolicyCpuPtrInput
	// A brief description of the vGPU policy.
	Description pulumi.StringPtrInput
	// Memory resource configuration settings. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
	Memory VmVgpuPolicyMemoryPtrInput
	// The unique name assigned to the vGPU policy for a virtual machine.
	Name pulumi.StringPtrInput
	// Defines the scope of the policy within
	// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
	// See `providerVdcScope` for more details.
	ProviderVdcScopes VmVgpuPolicyProviderVdcScopeArrayInput
	// Defines the vGPU profile ID and count.
	VgpuProfile VmVgpuPolicyVgpuProfilePtrInput
}

func (VmVgpuPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmVgpuPolicyState)(nil)).Elem()
}

type vmVgpuPolicyArgs struct {
	// Configuration options for CPU resources. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
	Cpu *VmVgpuPolicyCpu `pulumi:"cpu"`
	// A brief description of the vGPU policy.
	Description *string `pulumi:"description"`
	// Memory resource configuration settings. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
	Memory *VmVgpuPolicyMemory `pulumi:"memory"`
	// The unique name assigned to the vGPU policy for a virtual machine.
	Name *string `pulumi:"name"`
	// Defines the scope of the policy within
	// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
	// See `providerVdcScope` for more details.
	ProviderVdcScopes []VmVgpuPolicyProviderVdcScope `pulumi:"providerVdcScopes"`
	// Defines the vGPU profile ID and count.
	VgpuProfile VmVgpuPolicyVgpuProfile `pulumi:"vgpuProfile"`
}

// The set of arguments for constructing a VmVgpuPolicy resource.
type VmVgpuPolicyArgs struct {
	// Configuration options for CPU resources. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
	Cpu VmVgpuPolicyCpuPtrInput
	// A brief description of the vGPU policy.
	Description pulumi.StringPtrInput
	// Memory resource configuration settings. If this is set,
	// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
	Memory VmVgpuPolicyMemoryPtrInput
	// The unique name assigned to the vGPU policy for a virtual machine.
	Name pulumi.StringPtrInput
	// Defines the scope of the policy within
	// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
	// See `providerVdcScope` for more details.
	ProviderVdcScopes VmVgpuPolicyProviderVdcScopeArrayInput
	// Defines the vGPU profile ID and count.
	VgpuProfile VmVgpuPolicyVgpuProfileInput
}

func (VmVgpuPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmVgpuPolicyArgs)(nil)).Elem()
}

type VmVgpuPolicyInput interface {
	pulumi.Input

	ToVmVgpuPolicyOutput() VmVgpuPolicyOutput
	ToVmVgpuPolicyOutputWithContext(ctx context.Context) VmVgpuPolicyOutput
}

func (*VmVgpuPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VmVgpuPolicy)(nil)).Elem()
}

func (i *VmVgpuPolicy) ToVmVgpuPolicyOutput() VmVgpuPolicyOutput {
	return i.ToVmVgpuPolicyOutputWithContext(context.Background())
}

func (i *VmVgpuPolicy) ToVmVgpuPolicyOutputWithContext(ctx context.Context) VmVgpuPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmVgpuPolicyOutput)
}

// VmVgpuPolicyArrayInput is an input type that accepts VmVgpuPolicyArray and VmVgpuPolicyArrayOutput values.
// You can construct a concrete instance of `VmVgpuPolicyArrayInput` via:
//
//	VmVgpuPolicyArray{ VmVgpuPolicyArgs{...} }
type VmVgpuPolicyArrayInput interface {
	pulumi.Input

	ToVmVgpuPolicyArrayOutput() VmVgpuPolicyArrayOutput
	ToVmVgpuPolicyArrayOutputWithContext(context.Context) VmVgpuPolicyArrayOutput
}

type VmVgpuPolicyArray []VmVgpuPolicyInput

func (VmVgpuPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmVgpuPolicy)(nil)).Elem()
}

func (i VmVgpuPolicyArray) ToVmVgpuPolicyArrayOutput() VmVgpuPolicyArrayOutput {
	return i.ToVmVgpuPolicyArrayOutputWithContext(context.Background())
}

func (i VmVgpuPolicyArray) ToVmVgpuPolicyArrayOutputWithContext(ctx context.Context) VmVgpuPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmVgpuPolicyArrayOutput)
}

// VmVgpuPolicyMapInput is an input type that accepts VmVgpuPolicyMap and VmVgpuPolicyMapOutput values.
// You can construct a concrete instance of `VmVgpuPolicyMapInput` via:
//
//	VmVgpuPolicyMap{ "key": VmVgpuPolicyArgs{...} }
type VmVgpuPolicyMapInput interface {
	pulumi.Input

	ToVmVgpuPolicyMapOutput() VmVgpuPolicyMapOutput
	ToVmVgpuPolicyMapOutputWithContext(context.Context) VmVgpuPolicyMapOutput
}

type VmVgpuPolicyMap map[string]VmVgpuPolicyInput

func (VmVgpuPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmVgpuPolicy)(nil)).Elem()
}

func (i VmVgpuPolicyMap) ToVmVgpuPolicyMapOutput() VmVgpuPolicyMapOutput {
	return i.ToVmVgpuPolicyMapOutputWithContext(context.Background())
}

func (i VmVgpuPolicyMap) ToVmVgpuPolicyMapOutputWithContext(ctx context.Context) VmVgpuPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmVgpuPolicyMapOutput)
}

type VmVgpuPolicyOutput struct{ *pulumi.OutputState }

func (VmVgpuPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmVgpuPolicy)(nil)).Elem()
}

func (o VmVgpuPolicyOutput) ToVmVgpuPolicyOutput() VmVgpuPolicyOutput {
	return o
}

func (o VmVgpuPolicyOutput) ToVmVgpuPolicyOutputWithContext(ctx context.Context) VmVgpuPolicyOutput {
	return o
}

// Configuration options for CPU resources. If this is set,
// a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
func (o VmVgpuPolicyOutput) Cpu() VmVgpuPolicyCpuPtrOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) VmVgpuPolicyCpuPtrOutput { return v.Cpu }).(VmVgpuPolicyCpuPtrOutput)
}

// A brief description of the vGPU policy.
func (o VmVgpuPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Memory resource configuration settings. If this is set,
// a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
func (o VmVgpuPolicyOutput) Memory() VmVgpuPolicyMemoryPtrOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) VmVgpuPolicyMemoryPtrOutput { return v.Memory }).(VmVgpuPolicyMemoryPtrOutput)
}

// The unique name assigned to the vGPU policy for a virtual machine.
func (o VmVgpuPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the scope of the policy within
// provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
// See `providerVdcScope` for more details.
func (o VmVgpuPolicyOutput) ProviderVdcScopes() VmVgpuPolicyProviderVdcScopeArrayOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) VmVgpuPolicyProviderVdcScopeArrayOutput { return v.ProviderVdcScopes }).(VmVgpuPolicyProviderVdcScopeArrayOutput)
}

// Defines the vGPU profile ID and count.
func (o VmVgpuPolicyOutput) VgpuProfile() VmVgpuPolicyVgpuProfileOutput {
	return o.ApplyT(func(v *VmVgpuPolicy) VmVgpuPolicyVgpuProfileOutput { return v.VgpuProfile }).(VmVgpuPolicyVgpuProfileOutput)
}

type VmVgpuPolicyArrayOutput struct{ *pulumi.OutputState }

func (VmVgpuPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmVgpuPolicy)(nil)).Elem()
}

func (o VmVgpuPolicyArrayOutput) ToVmVgpuPolicyArrayOutput() VmVgpuPolicyArrayOutput {
	return o
}

func (o VmVgpuPolicyArrayOutput) ToVmVgpuPolicyArrayOutputWithContext(ctx context.Context) VmVgpuPolicyArrayOutput {
	return o
}

func (o VmVgpuPolicyArrayOutput) Index(i pulumi.IntInput) VmVgpuPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmVgpuPolicy {
		return vs[0].([]*VmVgpuPolicy)[vs[1].(int)]
	}).(VmVgpuPolicyOutput)
}

type VmVgpuPolicyMapOutput struct{ *pulumi.OutputState }

func (VmVgpuPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmVgpuPolicy)(nil)).Elem()
}

func (o VmVgpuPolicyMapOutput) ToVmVgpuPolicyMapOutput() VmVgpuPolicyMapOutput {
	return o
}

func (o VmVgpuPolicyMapOutput) ToVmVgpuPolicyMapOutputWithContext(ctx context.Context) VmVgpuPolicyMapOutput {
	return o
}

func (o VmVgpuPolicyMapOutput) MapIndex(k pulumi.StringInput) VmVgpuPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmVgpuPolicy {
		return vs[0].(map[string]*VmVgpuPolicy)[vs[1].(string)]
	}).(VmVgpuPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmVgpuPolicyInput)(nil)).Elem(), &VmVgpuPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmVgpuPolicyArrayInput)(nil)).Elem(), VmVgpuPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmVgpuPolicyMapInput)(nil)).Elem(), VmVgpuPolicyMap{})
	pulumi.RegisterOutputType(VmVgpuPolicyOutput{})
	pulumi.RegisterOutputType(VmVgpuPolicyArrayOutput{})
	pulumi.RegisterOutputType(VmVgpuPolicyMapOutput{})
}
