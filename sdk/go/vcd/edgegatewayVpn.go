// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director IPsec VPN. This can be used to create,
// modify, and delete VPN settings and rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.NewEdgegatewayVpn(ctx, "vpn", &vcd.EdgegatewayVpnArgs{
//				EdgeGateway:        pulumi.String("Internet_01(nti0000bi2_123-456-2)"),
//				Name:               pulumi.String("west-to-east"),
//				Description:        pulumi.String("Description"),
//				EncryptionProtocol: pulumi.String("AES256"),
//				Mtu:                pulumi.Int(1400),
//				PeerId:             pulumi.String("64.121.123.11"),
//				PeerIpAddress:      pulumi.String("64.121.123.11"),
//				LocalId:            pulumi.String("64.121.123.10"),
//				LocalIpAddress:     pulumi.String("64.121.123.10"),
//				SharedSecret:       pulumi.String("***********************"),
//				PeerSubnets: vcd.EdgegatewayVpnPeerSubnetArray{
//					&vcd.EdgegatewayVpnPeerSubnetArgs{
//						PeerSubnetName:    pulumi.String("DMZ_WEST"),
//						PeerSubnetGateway: pulumi.String("10.0.10.1"),
//						PeerSubnetMask:    pulumi.String("255.255.255.0"),
//					},
//					&vcd.EdgegatewayVpnPeerSubnetArgs{
//						PeerSubnetName:    pulumi.String("WEB_WEST"),
//						PeerSubnetGateway: pulumi.String("10.0.20.1"),
//						PeerSubnetMask:    pulumi.String("255.255.255.0"),
//					},
//				},
//				LocalSubnets: vcd.EdgegatewayVpnLocalSubnetArray{
//					&vcd.EdgegatewayVpnLocalSubnetArgs{
//						LocalSubnetName:    pulumi.String("DMZ_EAST"),
//						LocalSubnetGateway: pulumi.String("10.0.1.1"),
//						LocalSubnetMask:    pulumi.String("255.255.255.0"),
//					},
//					&vcd.EdgegatewayVpnLocalSubnetArgs{
//						LocalSubnetName:    pulumi.String("WEB_EAST"),
//						LocalSubnetGateway: pulumi.String("10.0.22.1"),
//						LocalSubnetMask:    pulumi.String("255.255.255.0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Local Subnets
//
// Each Local Subnet supports the following attributes:
//
// * `localSubnetName` - (Required) Name of the local subnet
// * `localSubnetGateway` - (Required) Gateway of the local subnet
// * `localSubnetMask` - (Required) Subnet mask of the local subnet
//
// <a id="peersubnets"></a>
// ## Peer Subnets
//
// Each Peer Subnet supports the following attributes:
//
// * `peerSubnetName` - (Required) Name of the peer subnet
// * `peerSubnetGateway` - (Required) Gateway of the peer subnet
// * `peerSubnetMask` - (Required) Subnet mask of the peer subnet
type EdgegatewayVpn struct {
	pulumi.CustomResourceState

	// A description for the VPN
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the edge gateway on which to apply the Firewall Rules
	EdgeGateway pulumi.StringOutput `pulumi:"edgeGateway"`
	// E.g. `AES256`
	EncryptionProtocol pulumi.StringOutput `pulumi:"encryptionProtocol"`
	// Local ID
	LocalId pulumi.StringOutput `pulumi:"localId"`
	// Local IP Address
	LocalIpAddress pulumi.StringOutput `pulumi:"localIpAddress"`
	// List of Local Subnets see Local Subnets below for details.
	LocalSubnets EdgegatewayVpnLocalSubnetArrayOutput `pulumi:"localSubnets"`
	// The MTU setting
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// The name of the VPN
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Peer ID
	PeerId pulumi.StringOutput `pulumi:"peerId"`
	// Peer IP Address
	PeerIpAddress pulumi.StringOutput `pulumi:"peerIpAddress"`
	// List of Peer Subnets see Peer Subnets below for details.
	PeerSubnets EdgegatewayVpnPeerSubnetArrayOutput `pulumi:"peerSubnets"`
	// Shared Secret
	SharedSecret pulumi.StringOutput `pulumi:"sharedSecret"`
	// The name of VDC to use, optional if defined at provider level
	//
	// <a id="localsubnets"></a>
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewEdgegatewayVpn registers a new resource with the given unique name, arguments, and options.
func NewEdgegatewayVpn(ctx *pulumi.Context,
	name string, args *EdgegatewayVpnArgs, opts ...pulumi.ResourceOption) (*EdgegatewayVpn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGateway == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGateway'")
	}
	if args.EncryptionProtocol == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionProtocol'")
	}
	if args.LocalId == nil {
		return nil, errors.New("invalid value for required argument 'LocalId'")
	}
	if args.LocalIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'LocalIpAddress'")
	}
	if args.Mtu == nil {
		return nil, errors.New("invalid value for required argument 'Mtu'")
	}
	if args.PeerId == nil {
		return nil, errors.New("invalid value for required argument 'PeerId'")
	}
	if args.PeerIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'PeerIpAddress'")
	}
	if args.SharedSecret == nil {
		return nil, errors.New("invalid value for required argument 'SharedSecret'")
	}
	if args.SharedSecret != nil {
		args.SharedSecret = pulumi.ToSecret(args.SharedSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgegatewayVpn
	err := ctx.RegisterResource("vcd:index/edgegatewayVpn:EdgegatewayVpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgegatewayVpn gets an existing EdgegatewayVpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgegatewayVpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgegatewayVpnState, opts ...pulumi.ResourceOption) (*EdgegatewayVpn, error) {
	var resource EdgegatewayVpn
	err := ctx.ReadResource("vcd:index/edgegatewayVpn:EdgegatewayVpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgegatewayVpn resources.
type edgegatewayVpnState struct {
	// A description for the VPN
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which to apply the Firewall Rules
	EdgeGateway *string `pulumi:"edgeGateway"`
	// E.g. `AES256`
	EncryptionProtocol *string `pulumi:"encryptionProtocol"`
	// Local ID
	LocalId *string `pulumi:"localId"`
	// Local IP Address
	LocalIpAddress *string `pulumi:"localIpAddress"`
	// List of Local Subnets see Local Subnets below for details.
	LocalSubnets []EdgegatewayVpnLocalSubnet `pulumi:"localSubnets"`
	// The MTU setting
	Mtu *int `pulumi:"mtu"`
	// The name of the VPN
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Peer ID
	PeerId *string `pulumi:"peerId"`
	// Peer IP Address
	PeerIpAddress *string `pulumi:"peerIpAddress"`
	// List of Peer Subnets see Peer Subnets below for details.
	PeerSubnets []EdgegatewayVpnPeerSubnet `pulumi:"peerSubnets"`
	// Shared Secret
	SharedSecret *string `pulumi:"sharedSecret"`
	// The name of VDC to use, optional if defined at provider level
	//
	// <a id="localsubnets"></a>
	Vdc *string `pulumi:"vdc"`
}

type EdgegatewayVpnState struct {
	// A description for the VPN
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which to apply the Firewall Rules
	EdgeGateway pulumi.StringPtrInput
	// E.g. `AES256`
	EncryptionProtocol pulumi.StringPtrInput
	// Local ID
	LocalId pulumi.StringPtrInput
	// Local IP Address
	LocalIpAddress pulumi.StringPtrInput
	// List of Local Subnets see Local Subnets below for details.
	LocalSubnets EdgegatewayVpnLocalSubnetArrayInput
	// The MTU setting
	Mtu pulumi.IntPtrInput
	// The name of the VPN
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Peer ID
	PeerId pulumi.StringPtrInput
	// Peer IP Address
	PeerIpAddress pulumi.StringPtrInput
	// List of Peer Subnets see Peer Subnets below for details.
	PeerSubnets EdgegatewayVpnPeerSubnetArrayInput
	// Shared Secret
	SharedSecret pulumi.StringPtrInput
	// The name of VDC to use, optional if defined at provider level
	//
	// <a id="localsubnets"></a>
	Vdc pulumi.StringPtrInput
}

func (EdgegatewayVpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgegatewayVpnState)(nil)).Elem()
}

type edgegatewayVpnArgs struct {
	// A description for the VPN
	Description *string `pulumi:"description"`
	// The name of the edge gateway on which to apply the Firewall Rules
	EdgeGateway string `pulumi:"edgeGateway"`
	// E.g. `AES256`
	EncryptionProtocol string `pulumi:"encryptionProtocol"`
	// Local ID
	LocalId string `pulumi:"localId"`
	// Local IP Address
	LocalIpAddress string `pulumi:"localIpAddress"`
	// List of Local Subnets see Local Subnets below for details.
	LocalSubnets []EdgegatewayVpnLocalSubnet `pulumi:"localSubnets"`
	// The MTU setting
	Mtu int `pulumi:"mtu"`
	// The name of the VPN
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Peer ID
	PeerId string `pulumi:"peerId"`
	// Peer IP Address
	PeerIpAddress string `pulumi:"peerIpAddress"`
	// List of Peer Subnets see Peer Subnets below for details.
	PeerSubnets []EdgegatewayVpnPeerSubnet `pulumi:"peerSubnets"`
	// Shared Secret
	SharedSecret string `pulumi:"sharedSecret"`
	// The name of VDC to use, optional if defined at provider level
	//
	// <a id="localsubnets"></a>
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a EdgegatewayVpn resource.
type EdgegatewayVpnArgs struct {
	// A description for the VPN
	Description pulumi.StringPtrInput
	// The name of the edge gateway on which to apply the Firewall Rules
	EdgeGateway pulumi.StringInput
	// E.g. `AES256`
	EncryptionProtocol pulumi.StringInput
	// Local ID
	LocalId pulumi.StringInput
	// Local IP Address
	LocalIpAddress pulumi.StringInput
	// List of Local Subnets see Local Subnets below for details.
	LocalSubnets EdgegatewayVpnLocalSubnetArrayInput
	// The MTU setting
	Mtu pulumi.IntInput
	// The name of the VPN
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Peer ID
	PeerId pulumi.StringInput
	// Peer IP Address
	PeerIpAddress pulumi.StringInput
	// List of Peer Subnets see Peer Subnets below for details.
	PeerSubnets EdgegatewayVpnPeerSubnetArrayInput
	// Shared Secret
	SharedSecret pulumi.StringInput
	// The name of VDC to use, optional if defined at provider level
	//
	// <a id="localsubnets"></a>
	Vdc pulumi.StringPtrInput
}

func (EdgegatewayVpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgegatewayVpnArgs)(nil)).Elem()
}

type EdgegatewayVpnInput interface {
	pulumi.Input

	ToEdgegatewayVpnOutput() EdgegatewayVpnOutput
	ToEdgegatewayVpnOutputWithContext(ctx context.Context) EdgegatewayVpnOutput
}

func (*EdgegatewayVpn) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgegatewayVpn)(nil)).Elem()
}

func (i *EdgegatewayVpn) ToEdgegatewayVpnOutput() EdgegatewayVpnOutput {
	return i.ToEdgegatewayVpnOutputWithContext(context.Background())
}

func (i *EdgegatewayVpn) ToEdgegatewayVpnOutputWithContext(ctx context.Context) EdgegatewayVpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayVpnOutput)
}

// EdgegatewayVpnArrayInput is an input type that accepts EdgegatewayVpnArray and EdgegatewayVpnArrayOutput values.
// You can construct a concrete instance of `EdgegatewayVpnArrayInput` via:
//
//	EdgegatewayVpnArray{ EdgegatewayVpnArgs{...} }
type EdgegatewayVpnArrayInput interface {
	pulumi.Input

	ToEdgegatewayVpnArrayOutput() EdgegatewayVpnArrayOutput
	ToEdgegatewayVpnArrayOutputWithContext(context.Context) EdgegatewayVpnArrayOutput
}

type EdgegatewayVpnArray []EdgegatewayVpnInput

func (EdgegatewayVpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgegatewayVpn)(nil)).Elem()
}

func (i EdgegatewayVpnArray) ToEdgegatewayVpnArrayOutput() EdgegatewayVpnArrayOutput {
	return i.ToEdgegatewayVpnArrayOutputWithContext(context.Background())
}

func (i EdgegatewayVpnArray) ToEdgegatewayVpnArrayOutputWithContext(ctx context.Context) EdgegatewayVpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayVpnArrayOutput)
}

// EdgegatewayVpnMapInput is an input type that accepts EdgegatewayVpnMap and EdgegatewayVpnMapOutput values.
// You can construct a concrete instance of `EdgegatewayVpnMapInput` via:
//
//	EdgegatewayVpnMap{ "key": EdgegatewayVpnArgs{...} }
type EdgegatewayVpnMapInput interface {
	pulumi.Input

	ToEdgegatewayVpnMapOutput() EdgegatewayVpnMapOutput
	ToEdgegatewayVpnMapOutputWithContext(context.Context) EdgegatewayVpnMapOutput
}

type EdgegatewayVpnMap map[string]EdgegatewayVpnInput

func (EdgegatewayVpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgegatewayVpn)(nil)).Elem()
}

func (i EdgegatewayVpnMap) ToEdgegatewayVpnMapOutput() EdgegatewayVpnMapOutput {
	return i.ToEdgegatewayVpnMapOutputWithContext(context.Background())
}

func (i EdgegatewayVpnMap) ToEdgegatewayVpnMapOutputWithContext(ctx context.Context) EdgegatewayVpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayVpnMapOutput)
}

type EdgegatewayVpnOutput struct{ *pulumi.OutputState }

func (EdgegatewayVpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgegatewayVpn)(nil)).Elem()
}

func (o EdgegatewayVpnOutput) ToEdgegatewayVpnOutput() EdgegatewayVpnOutput {
	return o
}

func (o EdgegatewayVpnOutput) ToEdgegatewayVpnOutputWithContext(ctx context.Context) EdgegatewayVpnOutput {
	return o
}

// A description for the VPN
func (o EdgegatewayVpnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the edge gateway on which to apply the Firewall Rules
func (o EdgegatewayVpnOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.EdgeGateway }).(pulumi.StringOutput)
}

// E.g. `AES256`
func (o EdgegatewayVpnOutput) EncryptionProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.EncryptionProtocol }).(pulumi.StringOutput)
}

// Local ID
func (o EdgegatewayVpnOutput) LocalId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.LocalId }).(pulumi.StringOutput)
}

// Local IP Address
func (o EdgegatewayVpnOutput) LocalIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.LocalIpAddress }).(pulumi.StringOutput)
}

// List of Local Subnets see Local Subnets below for details.
func (o EdgegatewayVpnOutput) LocalSubnets() EdgegatewayVpnLocalSubnetArrayOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) EdgegatewayVpnLocalSubnetArrayOutput { return v.LocalSubnets }).(EdgegatewayVpnLocalSubnetArrayOutput)
}

// The MTU setting
func (o EdgegatewayVpnOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// The name of the VPN
func (o EdgegatewayVpnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o EdgegatewayVpnOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Peer ID
func (o EdgegatewayVpnOutput) PeerId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.PeerId }).(pulumi.StringOutput)
}

// Peer IP Address
func (o EdgegatewayVpnOutput) PeerIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.PeerIpAddress }).(pulumi.StringOutput)
}

// List of Peer Subnets see Peer Subnets below for details.
func (o EdgegatewayVpnOutput) PeerSubnets() EdgegatewayVpnPeerSubnetArrayOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) EdgegatewayVpnPeerSubnetArrayOutput { return v.PeerSubnets }).(EdgegatewayVpnPeerSubnetArrayOutput)
}

// Shared Secret
func (o EdgegatewayVpnOutput) SharedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringOutput { return v.SharedSecret }).(pulumi.StringOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// <a id="localsubnets"></a>
func (o EdgegatewayVpnOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgegatewayVpn) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type EdgegatewayVpnArrayOutput struct{ *pulumi.OutputState }

func (EdgegatewayVpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgegatewayVpn)(nil)).Elem()
}

func (o EdgegatewayVpnArrayOutput) ToEdgegatewayVpnArrayOutput() EdgegatewayVpnArrayOutput {
	return o
}

func (o EdgegatewayVpnArrayOutput) ToEdgegatewayVpnArrayOutputWithContext(ctx context.Context) EdgegatewayVpnArrayOutput {
	return o
}

func (o EdgegatewayVpnArrayOutput) Index(i pulumi.IntInput) EdgegatewayVpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgegatewayVpn {
		return vs[0].([]*EdgegatewayVpn)[vs[1].(int)]
	}).(EdgegatewayVpnOutput)
}

type EdgegatewayVpnMapOutput struct{ *pulumi.OutputState }

func (EdgegatewayVpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgegatewayVpn)(nil)).Elem()
}

func (o EdgegatewayVpnMapOutput) ToEdgegatewayVpnMapOutput() EdgegatewayVpnMapOutput {
	return o
}

func (o EdgegatewayVpnMapOutput) ToEdgegatewayVpnMapOutputWithContext(ctx context.Context) EdgegatewayVpnMapOutput {
	return o
}

func (o EdgegatewayVpnMapOutput) MapIndex(k pulumi.StringInput) EdgegatewayVpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgegatewayVpn {
		return vs[0].(map[string]*EdgegatewayVpn)[vs[1].(string)]
	}).(EdgegatewayVpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayVpnInput)(nil)).Elem(), &EdgegatewayVpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayVpnArrayInput)(nil)).Elem(), EdgegatewayVpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayVpnMapInput)(nil)).Elem(), EdgegatewayVpnMap{})
	pulumi.RegisterOutputType(EdgegatewayVpnOutput{})
	pulumi.RegisterOutputType(EdgegatewayVpnArrayOutput{})
	pulumi.RegisterOutputType(EdgegatewayVpnMapOutput{})
}
