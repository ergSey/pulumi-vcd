// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
//
// Provides a data source to read NSX-T Edge Gateway DNS forwarder configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			existing, err := vcd.LookupOrgVdc(ctx, &vcd.LookupOrgVdcArgs{
//				Name: "existing-vdc",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testing, err := vcd.LookupNsxtEdgegateway(ctx, &vcd.LookupNsxtEdgegatewayArgs{
//				OwnerId: pulumi.StringRef(existing.Id),
//				Name:    "server-testing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.LookupNsxtEdgegatewayDns(ctx, &vcd.LookupNsxtEdgegatewayDnsArgs{
//				Org:           pulumi.StringRef("datacloud"),
//				EdgeGatewayId: testing.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNsxtEdgegatewayDns(ctx *pulumi.Context, args *LookupNsxtEdgegatewayDnsArgs, opts ...pulumi.InvokeOption) (*LookupNsxtEdgegatewayDnsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNsxtEdgegatewayDnsResult
	err := ctx.Invoke("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtEdgegatewayDns.
type LookupNsxtEdgegatewayDnsArgs struct {
	// The ID of the Edge Gateway (NSX-T only).
	// Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// The name of organization to use, optional if defined at
	// provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
}

// A collection of values returned by getNsxtEdgegatewayDns.
type LookupNsxtEdgegatewayDnsResult struct {
	ConditionalForwarderZones []GetNsxtEdgegatewayDnsConditionalForwarderZone `pulumi:"conditionalForwarderZones"`
	DefaultForwarderZones     []GetNsxtEdgegatewayDnsDefaultForwarderZone     `pulumi:"defaultForwarderZones"`
	EdgeGatewayId             string                                          `pulumi:"edgeGatewayId"`
	Enabled                   bool                                            `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id                string  `pulumi:"id"`
	ListenerIp        string  `pulumi:"listenerIp"`
	Org               *string `pulumi:"org"`
	SnatRuleEnabled   bool    `pulumi:"snatRuleEnabled"`
	SnatRuleIpAddress string  `pulumi:"snatRuleIpAddress"`
}

func LookupNsxtEdgegatewayDnsOutput(ctx *pulumi.Context, args LookupNsxtEdgegatewayDnsOutputArgs, opts ...pulumi.InvokeOption) LookupNsxtEdgegatewayDnsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNsxtEdgegatewayDnsResultOutput, error) {
			args := v.(LookupNsxtEdgegatewayDnsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", args, LookupNsxtEdgegatewayDnsResultOutput{}, options).(LookupNsxtEdgegatewayDnsResultOutput), nil
		}).(LookupNsxtEdgegatewayDnsResultOutput)
}

// A collection of arguments for invoking getNsxtEdgegatewayDns.
type LookupNsxtEdgegatewayDnsOutputArgs struct {
	// The ID of the Edge Gateway (NSX-T only).
	// Can be looked up using [`NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId pulumi.StringInput `pulumi:"edgeGatewayId"`
	// The name of organization to use, optional if defined at
	// provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupNsxtEdgegatewayDnsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayDnsArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtEdgegatewayDns.
type LookupNsxtEdgegatewayDnsResultOutput struct{ *pulumi.OutputState }

func (LookupNsxtEdgegatewayDnsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtEdgegatewayDnsResult)(nil)).Elem()
}

func (o LookupNsxtEdgegatewayDnsResultOutput) ToLookupNsxtEdgegatewayDnsResultOutput() LookupNsxtEdgegatewayDnsResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayDnsResultOutput) ToLookupNsxtEdgegatewayDnsResultOutputWithContext(ctx context.Context) LookupNsxtEdgegatewayDnsResultOutput {
	return o
}

func (o LookupNsxtEdgegatewayDnsResultOutput) ConditionalForwarderZones() GetNsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) []GetNsxtEdgegatewayDnsConditionalForwarderZone {
		return v.ConditionalForwarderZones
	}).(GetNsxtEdgegatewayDnsConditionalForwarderZoneArrayOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) DefaultForwarderZones() GetNsxtEdgegatewayDnsDefaultForwarderZoneArrayOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) []GetNsxtEdgegatewayDnsDefaultForwarderZone {
		return v.DefaultForwarderZones
	}).(GetNsxtEdgegatewayDnsDefaultForwarderZoneArrayOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) string { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNsxtEdgegatewayDnsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) string { return v.ListenerIp }).(pulumi.StringOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) SnatRuleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) bool { return v.SnatRuleEnabled }).(pulumi.BoolOutput)
}

func (o LookupNsxtEdgegatewayDnsResultOutput) SnatRuleIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtEdgegatewayDnsResult) string { return v.SnatRuleIpAddress }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNsxtEdgegatewayDnsResultOutput{})
}
