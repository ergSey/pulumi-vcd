// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.4+* and VCD 10.2+ with NSX-T and ALB.
//
// Provides a data source to read ALB Controller for Providers. It helps to integrate VMware Cloud Director with
// Avi Load Balancer deployment. Controller instances are registered with VMware Cloud Director instance.
// Controller instances serve as a central control plane for the load-balancing services provided by Avi Load
// Balancer.
//
// > Only `System Administrator` can use this data source.
//
// > VCD 10.3.0 has a caching bug which prevents listing importable clouds immediately (retrieved using
// [`getNsxtAlbImportableCloud`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_alb_importable_cloud)) after ALB
// Controller is created. This data should be available 15 minutes after the Controller is created.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupNsxtAlbController(ctx, &vcd.LookupNsxtAlbControllerArgs{
//				Name: "avi controller",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNsxtAlbController(ctx *pulumi.Context, args *LookupNsxtAlbControllerArgs, opts ...pulumi.InvokeOption) (*LookupNsxtAlbControllerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNsxtAlbControllerResult
	err := ctx.Invoke("vcd:index/getNsxtAlbController:getNsxtAlbController", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtAlbController.
type LookupNsxtAlbControllerArgs struct {
	// Unique name of existing ALB Controller.
	Name string `pulumi:"name"`
}

// A collection of values returned by getNsxtAlbController.
type LookupNsxtAlbControllerResult struct {
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	LicenseType string `pulumi:"licenseType"`
	Name        string `pulumi:"name"`
	Url         string `pulumi:"url"`
	Username    string `pulumi:"username"`
	Version     string `pulumi:"version"`
}

func LookupNsxtAlbControllerOutput(ctx *pulumi.Context, args LookupNsxtAlbControllerOutputArgs, opts ...pulumi.InvokeOption) LookupNsxtAlbControllerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNsxtAlbControllerResultOutput, error) {
			args := v.(LookupNsxtAlbControllerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtAlbController:getNsxtAlbController", args, LookupNsxtAlbControllerResultOutput{}, options).(LookupNsxtAlbControllerResultOutput), nil
		}).(LookupNsxtAlbControllerResultOutput)
}

// A collection of arguments for invoking getNsxtAlbController.
type LookupNsxtAlbControllerOutputArgs struct {
	// Unique name of existing ALB Controller.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupNsxtAlbControllerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtAlbControllerArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtAlbController.
type LookupNsxtAlbControllerResultOutput struct{ *pulumi.OutputState }

func (LookupNsxtAlbControllerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNsxtAlbControllerResult)(nil)).Elem()
}

func (o LookupNsxtAlbControllerResultOutput) ToLookupNsxtAlbControllerResultOutput() LookupNsxtAlbControllerResultOutput {
	return o
}

func (o LookupNsxtAlbControllerResultOutput) ToLookupNsxtAlbControllerResultOutputWithContext(ctx context.Context) LookupNsxtAlbControllerResultOutput {
	return o
}

func (o LookupNsxtAlbControllerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNsxtAlbControllerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNsxtAlbControllerResultOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.LicenseType }).(pulumi.StringOutput)
}

func (o LookupNsxtAlbControllerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNsxtAlbControllerResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Url }).(pulumi.StringOutput)
}

func (o LookupNsxtAlbControllerResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Username }).(pulumi.StringOutput)
}

func (o LookupNsxtAlbControllerResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNsxtAlbControllerResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNsxtAlbControllerResultOutput{})
}
