// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source for vCenter server attached to VCD.
//
// Supported in provider *v3.0+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetVcenter(ctx, &vcd.GetVcenterArgs{
//				Name: "vcenter-one",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVcenter(ctx *pulumi.Context, args *GetVcenterArgs, opts ...pulumi.InvokeOption) (*GetVcenterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVcenterResult
	err := ctx.Invoke("vcd:index/getVcenter:getVcenter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVcenter.
type GetVcenterArgs struct {
	// vCenter name
	Name string `pulumi:"name"`
}

// A collection of values returned by getVcenter.
type GetVcenterResult struct {
	// vCenter connection status (e.g. `CONNECTED`).
	ConnectionStatus string `pulumi:"connectionStatus"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Boolean value if vCenter is enabled.
	IsEnabled bool   `pulumi:"isEnabled"`
	Name      string `pulumi:"name"`
	// vCenter status (e.g. `READY`).
	Status string `pulumi:"status"`
	// Hostname of configured vCenter.
	VcenterHost string `pulumi:"vcenterHost"`
	// vCenter version (e.g. `6.7.0`)
	VcenterVersion string `pulumi:"vcenterVersion"`
}

func GetVcenterOutput(ctx *pulumi.Context, args GetVcenterOutputArgs, opts ...pulumi.InvokeOption) GetVcenterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVcenterResultOutput, error) {
			args := v.(GetVcenterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getVcenter:getVcenter", args, GetVcenterResultOutput{}, options).(GetVcenterResultOutput), nil
		}).(GetVcenterResultOutput)
}

// A collection of arguments for invoking getVcenter.
type GetVcenterOutputArgs struct {
	// vCenter name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetVcenterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcenterArgs)(nil)).Elem()
}

// A collection of values returned by getVcenter.
type GetVcenterResultOutput struct{ *pulumi.OutputState }

func (GetVcenterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVcenterResult)(nil)).Elem()
}

func (o GetVcenterResultOutput) ToGetVcenterResultOutput() GetVcenterResultOutput {
	return o
}

func (o GetVcenterResultOutput) ToGetVcenterResultOutputWithContext(ctx context.Context) GetVcenterResultOutput {
	return o
}

// vCenter connection status (e.g. `CONNECTED`).
func (o GetVcenterResultOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVcenterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Boolean value if vCenter is enabled.
func (o GetVcenterResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVcenterResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o GetVcenterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.Name }).(pulumi.StringOutput)
}

// vCenter status (e.g. `READY`).
func (o GetVcenterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.Status }).(pulumi.StringOutput)
}

// Hostname of configured vCenter.
func (o GetVcenterResultOutput) VcenterHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.VcenterHost }).(pulumi.StringOutput)
}

// vCenter version (e.g. `6.7.0`)
func (o GetVcenterResultOutput) VcenterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetVcenterResult) string { return v.VcenterVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVcenterResultOutput{})
}
