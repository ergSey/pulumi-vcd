// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
// perform some optional checks with version constraints.
//
// Supported in provider *v3.12+*. Requires System Administrator privileges.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
//			_, err := vcd.GetVersion(ctx, &vcd.GetVersionArgs{
//				Condition:      pulumi.StringRef("= 10.5.1"),
//				FailIfNotMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
//			gte1042, err := vcd.GetVersion(ctx, &vcd.GetVersionArgs{
//				Condition:      pulumi.StringRef(">= 10.4.2"),
//				FailIfNotMatch: pulumi.BoolRef(false),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("isGte1042", gte1042.MatchesCondition)
//			// This data source will assert that the VCD version is less than 10.5.0
//			_, err = vcd.GetVersion(ctx, &vcd.GetVersionArgs{
//				Condition:      pulumi.StringRef("< 10.5.0"),
//				FailIfNotMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// This data source will assert that the VCD version is 10.5.X
//			_, err = vcd.GetVersion(ctx, &vcd.GetVersionArgs{
//				Condition:      pulumi.StringRef("~> 10.5"),
//				FailIfNotMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// This data source will assert that the VCD version is not 10.5.1
//			_, err = vcd.GetVersion(ctx, &vcd.GetVersionArgs{
//				Condition:      pulumi.StringRef("!= 10.5.1"),
//				FailIfNotMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVersion(ctx *pulumi.Context, args *GetVersionArgs, opts ...pulumi.InvokeOption) (*GetVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVersionResult
	err := ctx.Invoke("vcd:index/getVersion:getVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVersion.
type GetVersionArgs struct {
	// A version constraint to check against the VCD version
	Condition *string `pulumi:"condition"`
	// Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
	FailIfNotMatch *bool `pulumi:"failIfNotMatch"`
}

// A collection of values returned by getVersion.
type GetVersionResult struct {
	// The maximum supported API version
	ApiVersion     string  `pulumi:"apiVersion"`
	Condition      *string `pulumi:"condition"`
	FailIfNotMatch *bool   `pulumi:"failIfNotMatch"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// It is true if the VCD version matches the constraint set in `condition`
	MatchesCondition bool `pulumi:"matchesCondition"`
	// The VCD version
	VcdVersion string `pulumi:"vcdVersion"`
}

func GetVersionOutput(ctx *pulumi.Context, args GetVersionOutputArgs, opts ...pulumi.InvokeOption) GetVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVersionResultOutput, error) {
			args := v.(GetVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getVersion:getVersion", args, GetVersionResultOutput{}, options).(GetVersionResultOutput), nil
		}).(GetVersionResultOutput)
}

// A collection of arguments for invoking getVersion.
type GetVersionOutputArgs struct {
	// A version constraint to check against the VCD version
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
	FailIfNotMatch pulumi.BoolPtrInput `pulumi:"failIfNotMatch"`
}

func (GetVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionArgs)(nil)).Elem()
}

// A collection of values returned by getVersion.
type GetVersionResultOutput struct{ *pulumi.OutputState }

func (GetVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionResult)(nil)).Elem()
}

func (o GetVersionResultOutput) ToGetVersionResultOutput() GetVersionResultOutput {
	return o
}

func (o GetVersionResultOutput) ToGetVersionResultOutputWithContext(ctx context.Context) GetVersionResultOutput {
	return o
}

// The maximum supported API version
func (o GetVersionResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o GetVersionResultOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVersionResult) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o GetVersionResultOutput) FailIfNotMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVersionResult) *bool { return v.FailIfNotMatch }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

// It is true if the VCD version matches the constraint set in `condition`
func (o GetVersionResultOutput) MatchesCondition() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVersionResult) bool { return v.MatchesCondition }).(pulumi.BoolOutput)
}

// The VCD version
func (o GetVersionResultOutput) VcdVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionResult) string { return v.VcdVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVersionResultOutput{})
}
