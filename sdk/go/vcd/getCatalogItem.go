// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > If you only need vApp Template features, you may use [`CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
//
// Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its
// data within other resources or data sources.
//
// Supported in provider *v2.5+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_first_item, err := vcd.LookupCatalogItem(ctx, &vcd.LookupCatalogItemArgs{
//				Org:     pulumi.StringRef("my-org"),
//				Catalog: "my-cat",
//				Name:    pulumi.StringRef("my-first-item"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.NewCatalogItem(ctx, "my-second-item", &vcd.CatalogItemArgs{
//				Org:             pulumi.String(my_first_item.Org),
//				Catalog:         pulumi.String(my_first_item.Catalog),
//				Name:            pulumi.String("my-second-item"),
//				Description:     pulumi.Sprintf("Belongs to %v", my_first_item.Catalog),
//				OvaPath:         pulumi.String("/path/to/test_vapp_template.ova"),
//				UploadPieceSize: pulumi.Int(5),
//				Metadata:        pulumi.StringMap(my_first_item.Metadata),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Metadata
//
// The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
//
// * `key` - Key of this metadata entry.
// * `value` - Value of this metadata entry.
// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
// * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
// * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
//
// ## Filter arguments
//
// (Supported in provider *v2.9+*)
//
//   - `nameRegex` - (Optional) matches the name using a regular expression.
//   - `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
//     optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
//     The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
//     is recommended.
//     Comparison with equality operator (`==`) need to define the date to the microseconds.
//   - `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
//     are set, it retrieves the newest item.
//   - `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
//     are set, it retrieves the oldest item.
//   - `metadata` - (Optional) One or more parameters that will match metadata contents.
//
// See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
func LookupCatalogItem(ctx *pulumi.Context, args *LookupCatalogItemArgs, opts ...pulumi.InvokeOption) (*LookupCatalogItemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCatalogItemResult
	err := ctx.Invoke("vcd:index/getCatalogItem:getCatalogItem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogItem.
type LookupCatalogItemArgs struct {
	// Catalog name
	Catalog string `pulumi:"catalog"`
	// Retrieves the data source using one or more filter parameters
	Filter *GetCatalogItemFilter `pulumi:"filter"`
	// Catalog Item name (optional when `filter` is used)
	Name *string `pulumi:"name"`
	// Org name
	Org *string `pulumi:"org"`
}

// A collection of values returned by getCatalogItem.
type LookupCatalogItemResult struct {
	Catalog string `pulumi:"catalog"`
	// (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to the catalog item.
	CatalogItemMetadata map[string]string `pulumi:"catalogItemMetadata"`
	Created             string            `pulumi:"created"`
	// Catalog item description.
	Description string                `pulumi:"description"`
	Filter      *GetCatalogItemFilter `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Key value map of metadata assigned to the associated vApp template.
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries assigned to the catalog item. See Metadata section for details.
	MetadataEntries []GetCatalogItemMetadataEntry `pulumi:"metadataEntries"`
	Name            *string                       `pulumi:"name"`
	Org             *string                       `pulumi:"org"`
}

func LookupCatalogItemOutput(ctx *pulumi.Context, args LookupCatalogItemOutputArgs, opts ...pulumi.InvokeOption) LookupCatalogItemResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCatalogItemResultOutput, error) {
			args := v.(LookupCatalogItemArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getCatalogItem:getCatalogItem", args, LookupCatalogItemResultOutput{}, options).(LookupCatalogItemResultOutput), nil
		}).(LookupCatalogItemResultOutput)
}

// A collection of arguments for invoking getCatalogItem.
type LookupCatalogItemOutputArgs struct {
	// Catalog name
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// Retrieves the data source using one or more filter parameters
	Filter GetCatalogItemFilterPtrInput `pulumi:"filter"`
	// Catalog Item name (optional when `filter` is used)
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Org name
	Org pulumi.StringPtrInput `pulumi:"org"`
}

func (LookupCatalogItemOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogItemArgs)(nil)).Elem()
}

// A collection of values returned by getCatalogItem.
type LookupCatalogItemResultOutput struct{ *pulumi.OutputState }

func (LookupCatalogItemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogItemResult)(nil)).Elem()
}

func (o LookupCatalogItemResultOutput) ToLookupCatalogItemResultOutput() LookupCatalogItemResultOutput {
	return o
}

func (o LookupCatalogItemResultOutput) ToLookupCatalogItemResultOutputWithContext(ctx context.Context) LookupCatalogItemResultOutput {
	return o
}

func (o LookupCatalogItemResultOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) string { return v.Catalog }).(pulumi.StringOutput)
}

// (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to the catalog item.
func (o LookupCatalogItemResultOutput) CatalogItemMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) map[string]string { return v.CatalogItemMetadata }).(pulumi.StringMapOutput)
}

func (o LookupCatalogItemResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) string { return v.Created }).(pulumi.StringOutput)
}

// Catalog item description.
func (o LookupCatalogItemResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupCatalogItemResultOutput) Filter() GetCatalogItemFilterPtrOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) *GetCatalogItemFilter { return v.Filter }).(GetCatalogItemFilterPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCatalogItemResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) string { return v.Id }).(pulumi.StringOutput)
}

// Key value map of metadata assigned to the associated vApp template.
//
// Deprecated: Use metadataEntry instead
func (o LookupCatalogItemResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries assigned to the catalog item. See Metadata section for details.
func (o LookupCatalogItemResultOutput) MetadataEntries() GetCatalogItemMetadataEntryArrayOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) []GetCatalogItemMetadataEntry { return v.MetadataEntries }).(GetCatalogItemMetadataEntryArrayOutput)
}

func (o LookupCatalogItemResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupCatalogItemResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCatalogItemResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCatalogItemResultOutput{})
}
