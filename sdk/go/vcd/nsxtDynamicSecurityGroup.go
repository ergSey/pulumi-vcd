// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtDynamicSecurityGroup struct {
	pulumi.CustomResourceState

	// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
	// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
	// contains up to 4 `rule` definitions.
	Criterias NsxtDynamicSecurityGroupCriteriaArrayOutput `pulumi:"criterias"`
	// An optional description of the Dynamic Security Group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A set of member VMs (if exist). see Member VMs below for details.
	MemberVms NsxtDynamicSecurityGroupMemberVmArrayOutput `pulumi:"memberVms"`
	// A unique name for Dynamic Security Group
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// VDC Group ID for Dynamic Security Group creation.
	VdcGroupId pulumi.StringOutput `pulumi:"vdcGroupId"`
}

// NewNsxtDynamicSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewNsxtDynamicSecurityGroup(ctx *pulumi.Context,
	name string, args *NsxtDynamicSecurityGroupArgs, opts ...pulumi.ResourceOption) (*NsxtDynamicSecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VdcGroupId == nil {
		return nil, errors.New("invalid value for required argument 'VdcGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtDynamicSecurityGroup
	err := ctx.RegisterResource("vcd:index/nsxtDynamicSecurityGroup:NsxtDynamicSecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtDynamicSecurityGroup gets an existing NsxtDynamicSecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtDynamicSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtDynamicSecurityGroupState, opts ...pulumi.ResourceOption) (*NsxtDynamicSecurityGroup, error) {
	var resource NsxtDynamicSecurityGroup
	err := ctx.ReadResource("vcd:index/nsxtDynamicSecurityGroup:NsxtDynamicSecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtDynamicSecurityGroup resources.
type nsxtDynamicSecurityGroupState struct {
	// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
	// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
	// contains up to 4 `rule` definitions.
	Criterias []NsxtDynamicSecurityGroupCriteria `pulumi:"criterias"`
	// An optional description of the Dynamic Security Group
	Description *string `pulumi:"description"`
	// A set of member VMs (if exist). see Member VMs below for details.
	MemberVms []NsxtDynamicSecurityGroupMemberVm `pulumi:"memberVms"`
	// A unique name for Dynamic Security Group
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// VDC Group ID for Dynamic Security Group creation.
	VdcGroupId *string `pulumi:"vdcGroupId"`
}

type NsxtDynamicSecurityGroupState struct {
	// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
	// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
	// contains up to 4 `rule` definitions.
	Criterias NsxtDynamicSecurityGroupCriteriaArrayInput
	// An optional description of the Dynamic Security Group
	Description pulumi.StringPtrInput
	// A set of member VMs (if exist). see Member VMs below for details.
	MemberVms NsxtDynamicSecurityGroupMemberVmArrayInput
	// A unique name for Dynamic Security Group
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// VDC Group ID for Dynamic Security Group creation.
	VdcGroupId pulumi.StringPtrInput
}

func (NsxtDynamicSecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtDynamicSecurityGroupState)(nil)).Elem()
}

type nsxtDynamicSecurityGroupArgs struct {
	// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
	// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
	// contains up to 4 `rule` definitions.
	Criterias []NsxtDynamicSecurityGroupCriteria `pulumi:"criterias"`
	// An optional description of the Dynamic Security Group
	Description *string `pulumi:"description"`
	// A unique name for Dynamic Security Group
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// VDC Group ID for Dynamic Security Group creation.
	VdcGroupId string `pulumi:"vdcGroupId"`
}

// The set of arguments for constructing a NsxtDynamicSecurityGroup resource.
type NsxtDynamicSecurityGroupArgs struct {
	// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
	// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
	// contains up to 4 `rule` definitions.
	Criterias NsxtDynamicSecurityGroupCriteriaArrayInput
	// An optional description of the Dynamic Security Group
	Description pulumi.StringPtrInput
	// A unique name for Dynamic Security Group
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// VDC Group ID for Dynamic Security Group creation.
	VdcGroupId pulumi.StringInput
}

func (NsxtDynamicSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtDynamicSecurityGroupArgs)(nil)).Elem()
}

type NsxtDynamicSecurityGroupInput interface {
	pulumi.Input

	ToNsxtDynamicSecurityGroupOutput() NsxtDynamicSecurityGroupOutput
	ToNsxtDynamicSecurityGroupOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupOutput
}

func (*NsxtDynamicSecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (i *NsxtDynamicSecurityGroup) ToNsxtDynamicSecurityGroupOutput() NsxtDynamicSecurityGroupOutput {
	return i.ToNsxtDynamicSecurityGroupOutputWithContext(context.Background())
}

func (i *NsxtDynamicSecurityGroup) ToNsxtDynamicSecurityGroupOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtDynamicSecurityGroupOutput)
}

// NsxtDynamicSecurityGroupArrayInput is an input type that accepts NsxtDynamicSecurityGroupArray and NsxtDynamicSecurityGroupArrayOutput values.
// You can construct a concrete instance of `NsxtDynamicSecurityGroupArrayInput` via:
//
//	NsxtDynamicSecurityGroupArray{ NsxtDynamicSecurityGroupArgs{...} }
type NsxtDynamicSecurityGroupArrayInput interface {
	pulumi.Input

	ToNsxtDynamicSecurityGroupArrayOutput() NsxtDynamicSecurityGroupArrayOutput
	ToNsxtDynamicSecurityGroupArrayOutputWithContext(context.Context) NsxtDynamicSecurityGroupArrayOutput
}

type NsxtDynamicSecurityGroupArray []NsxtDynamicSecurityGroupInput

func (NsxtDynamicSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (i NsxtDynamicSecurityGroupArray) ToNsxtDynamicSecurityGroupArrayOutput() NsxtDynamicSecurityGroupArrayOutput {
	return i.ToNsxtDynamicSecurityGroupArrayOutputWithContext(context.Background())
}

func (i NsxtDynamicSecurityGroupArray) ToNsxtDynamicSecurityGroupArrayOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtDynamicSecurityGroupArrayOutput)
}

// NsxtDynamicSecurityGroupMapInput is an input type that accepts NsxtDynamicSecurityGroupMap and NsxtDynamicSecurityGroupMapOutput values.
// You can construct a concrete instance of `NsxtDynamicSecurityGroupMapInput` via:
//
//	NsxtDynamicSecurityGroupMap{ "key": NsxtDynamicSecurityGroupArgs{...} }
type NsxtDynamicSecurityGroupMapInput interface {
	pulumi.Input

	ToNsxtDynamicSecurityGroupMapOutput() NsxtDynamicSecurityGroupMapOutput
	ToNsxtDynamicSecurityGroupMapOutputWithContext(context.Context) NsxtDynamicSecurityGroupMapOutput
}

type NsxtDynamicSecurityGroupMap map[string]NsxtDynamicSecurityGroupInput

func (NsxtDynamicSecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (i NsxtDynamicSecurityGroupMap) ToNsxtDynamicSecurityGroupMapOutput() NsxtDynamicSecurityGroupMapOutput {
	return i.ToNsxtDynamicSecurityGroupMapOutputWithContext(context.Background())
}

func (i NsxtDynamicSecurityGroupMap) ToNsxtDynamicSecurityGroupMapOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtDynamicSecurityGroupMapOutput)
}

type NsxtDynamicSecurityGroupOutput struct{ *pulumi.OutputState }

func (NsxtDynamicSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (o NsxtDynamicSecurityGroupOutput) ToNsxtDynamicSecurityGroupOutput() NsxtDynamicSecurityGroupOutput {
	return o
}

func (o NsxtDynamicSecurityGroupOutput) ToNsxtDynamicSecurityGroupOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupOutput {
	return o
}

// Up to 3 criteria for matching VMs. List of criteria is matched with boolean
// `OR` operation and matching any of defined criteria will include objects. Each `criteria` can
// contains up to 4 `rule` definitions.
func (o NsxtDynamicSecurityGroupOutput) Criterias() NsxtDynamicSecurityGroupCriteriaArrayOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) NsxtDynamicSecurityGroupCriteriaArrayOutput { return v.Criterias }).(NsxtDynamicSecurityGroupCriteriaArrayOutput)
}

// An optional description of the Dynamic Security Group
func (o NsxtDynamicSecurityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A set of member VMs (if exist). see Member VMs below for details.
func (o NsxtDynamicSecurityGroupOutput) MemberVms() NsxtDynamicSecurityGroupMemberVmArrayOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) NsxtDynamicSecurityGroupMemberVmArrayOutput { return v.MemberVms }).(NsxtDynamicSecurityGroupMemberVmArrayOutput)
}

// A unique name for Dynamic Security Group
func (o NsxtDynamicSecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o NsxtDynamicSecurityGroupOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// VDC Group ID for Dynamic Security Group creation.
func (o NsxtDynamicSecurityGroupOutput) VdcGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtDynamicSecurityGroup) pulumi.StringOutput { return v.VdcGroupId }).(pulumi.StringOutput)
}

type NsxtDynamicSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (NsxtDynamicSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (o NsxtDynamicSecurityGroupArrayOutput) ToNsxtDynamicSecurityGroupArrayOutput() NsxtDynamicSecurityGroupArrayOutput {
	return o
}

func (o NsxtDynamicSecurityGroupArrayOutput) ToNsxtDynamicSecurityGroupArrayOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupArrayOutput {
	return o
}

func (o NsxtDynamicSecurityGroupArrayOutput) Index(i pulumi.IntInput) NsxtDynamicSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtDynamicSecurityGroup {
		return vs[0].([]*NsxtDynamicSecurityGroup)[vs[1].(int)]
	}).(NsxtDynamicSecurityGroupOutput)
}

type NsxtDynamicSecurityGroupMapOutput struct{ *pulumi.OutputState }

func (NsxtDynamicSecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtDynamicSecurityGroup)(nil)).Elem()
}

func (o NsxtDynamicSecurityGroupMapOutput) ToNsxtDynamicSecurityGroupMapOutput() NsxtDynamicSecurityGroupMapOutput {
	return o
}

func (o NsxtDynamicSecurityGroupMapOutput) ToNsxtDynamicSecurityGroupMapOutputWithContext(ctx context.Context) NsxtDynamicSecurityGroupMapOutput {
	return o
}

func (o NsxtDynamicSecurityGroupMapOutput) MapIndex(k pulumi.StringInput) NsxtDynamicSecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtDynamicSecurityGroup {
		return vs[0].(map[string]*NsxtDynamicSecurityGroup)[vs[1].(string)]
	}).(NsxtDynamicSecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtDynamicSecurityGroupInput)(nil)).Elem(), &NsxtDynamicSecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtDynamicSecurityGroupArrayInput)(nil)).Elem(), NsxtDynamicSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtDynamicSecurityGroupMapInput)(nil)).Elem(), NsxtDynamicSecurityGroupMap{})
	pulumi.RegisterOutputType(NsxtDynamicSecurityGroupOutput{})
	pulumi.RegisterOutputType(NsxtDynamicSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(NsxtDynamicSecurityGroupMapOutput{})
}
