// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its
// data within other resources or data sources.
//
// Supported in provider *v3.8+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_pvdc, err := vcd.LookupProviderVdc(ctx, &vcd.LookupProviderVdcArgs{
//				Name: "my-pvdc",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("providerVdc", my_pvdc.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## Compute Capacity
//
// The `computeCapacity` attribute is a list with a single item which has the following nested attributes:
//
// * `cpu` - An indicator of CPU. See CPU and memory below.
// * `memory` - An indicator of memory. See CPU and memory below.
// * `isElastic` -  True if compute capacity can grow or shrink based on demand.
// * `isHa` - True if compute capacity is highly available.
//
// <a id="cpu-and-memory"></a>
// ### CPU and memory
//
// The `cpu` and `memory` indicators have the following nested attributes:
//
// * `allocation` - Allocated CPU/Memory for this Provider VDC.
// * `overhead` - CPU/Memory overhead for this Provider VDC.
// * `reserved` - Reserved CPU/Memory for this Provider VDC.
// * `total` - Total CPU/Memory for this Provider VDC.
// * `units` - Units for the CPU/Memory of this Provider VDC.
// * `used` - Used CPU/Memory in this Provider VDC.
//
// <a id="metadata"></a>
// ## Metadata
//
// The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
//
// * `key` - Key of this metadata entry.
// * `value` - Value of this metadata entry.
// * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
// * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
// * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
func LookupProviderVdc(ctx *pulumi.Context, args *LookupProviderVdcArgs, opts ...pulumi.InvokeOption) (*LookupProviderVdcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProviderVdcResult
	err := ctx.Invoke("vcd:index/getProviderVdc:getProviderVdc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProviderVdc.
type LookupProviderVdcArgs struct {
	// Provider VDC name
	Name string `pulumi:"name"`
}

// A collection of values returned by getProviderVdc.
type LookupProviderVdcResult struct {
	// Set of virtual hardware versions supported by this Provider VDC.
	Capabilities []string `pulumi:"capabilities"`
	// An indicator of CPU and memory capacity. See Compute Capacity below for details.
	ComputeCapacities []GetProviderVdcComputeCapacity `pulumi:"computeCapacities"`
	// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
	ComputeProviderScope string `pulumi:"computeProviderScope"`
	// Optional description of the Provider VDC.
	Description string `pulumi:"description"`
	// Set of IDs of External Networks.
	ExternalNetworkIds []string `pulumi:"externalNetworkIds"`
	// The highest virtual hardware version supported by this Provider VDC.
	HighestSupportedHardwareVersion string `pulumi:"highestSupportedHardwareVersion"`
	// Set with all the hosts which are connected to VC server.
	HostIds []string `pulumi:"hostIds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
	IsEnabled bool `pulumi:"isEnabled"`
	// (Deprecated) Use `metadataEntry` instead. Key and value pairs for Provider VDC Metadata.
	//
	// Deprecated: Use metadataEntry instead
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
	MetadataEntries []GetProviderVdcMetadataEntry `pulumi:"metadataEntries"`
	Name            string                        `pulumi:"name"`
	// Set IDs of the Network Pools used by this Provider VDC.
	NetworkPoolIds []string `pulumi:"networkPoolIds"`
	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
	NsxtManagerId string `pulumi:"nsxtManagerId"`
	// Set of IDs of the Resource Pools backing this provider VDC.
	ResourcePoolIds []string `pulumi:"resourcePoolIds"`
	// Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
	Status              int      `pulumi:"status"`
	StorageContainerIds []string `pulumi:"storageContainerIds"`
	// Set of IDs to the Storage Profiles available to this Provider VDC.
	StorageProfileIds   []string `pulumi:"storageProfileIds"`
	StorageProfileNames []string `pulumi:"storageProfileNames"`
	// ID of the universal network reference.
	UniversalNetworkPoolId string `pulumi:"universalNetworkPoolId"`
	// ID of the vCenter Server that provides the Resource Pools and Datastores.
	VcenterId string `pulumi:"vcenterId"`
}

func LookupProviderVdcOutput(ctx *pulumi.Context, args LookupProviderVdcOutputArgs, opts ...pulumi.InvokeOption) LookupProviderVdcResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProviderVdcResultOutput, error) {
			args := v.(LookupProviderVdcArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getProviderVdc:getProviderVdc", args, LookupProviderVdcResultOutput{}, options).(LookupProviderVdcResultOutput), nil
		}).(LookupProviderVdcResultOutput)
}

// A collection of arguments for invoking getProviderVdc.
type LookupProviderVdcOutputArgs struct {
	// Provider VDC name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupProviderVdcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProviderVdcArgs)(nil)).Elem()
}

// A collection of values returned by getProviderVdc.
type LookupProviderVdcResultOutput struct{ *pulumi.OutputState }

func (LookupProviderVdcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProviderVdcResult)(nil)).Elem()
}

func (o LookupProviderVdcResultOutput) ToLookupProviderVdcResultOutput() LookupProviderVdcResultOutput {
	return o
}

func (o LookupProviderVdcResultOutput) ToLookupProviderVdcResultOutputWithContext(ctx context.Context) LookupProviderVdcResultOutput {
	return o
}

// Set of virtual hardware versions supported by this Provider VDC.
func (o LookupProviderVdcResultOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.Capabilities }).(pulumi.StringArrayOutput)
}

// An indicator of CPU and memory capacity. See Compute Capacity below for details.
func (o LookupProviderVdcResultOutput) ComputeCapacities() GetProviderVdcComputeCapacityArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []GetProviderVdcComputeCapacity { return v.ComputeCapacities }).(GetProviderVdcComputeCapacityArrayOutput)
}

// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
func (o LookupProviderVdcResultOutput) ComputeProviderScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.ComputeProviderScope }).(pulumi.StringOutput)
}

// Optional description of the Provider VDC.
func (o LookupProviderVdcResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.Description }).(pulumi.StringOutput)
}

// Set of IDs of External Networks.
func (o LookupProviderVdcResultOutput) ExternalNetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.ExternalNetworkIds }).(pulumi.StringArrayOutput)
}

// The highest virtual hardware version supported by this Provider VDC.
func (o LookupProviderVdcResultOutput) HighestSupportedHardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.HighestSupportedHardwareVersion }).(pulumi.StringOutput)
}

// Set with all the hosts which are connected to VC server.
func (o LookupProviderVdcResultOutput) HostIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.HostIds }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProviderVdcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.Id }).(pulumi.StringOutput)
}

// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
func (o LookupProviderVdcResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// (Deprecated) Use `metadataEntry` instead. Key and value pairs for Provider VDC Metadata.
//
// Deprecated: Use metadataEntry instead
func (o LookupProviderVdcResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
func (o LookupProviderVdcResultOutput) MetadataEntries() GetProviderVdcMetadataEntryArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []GetProviderVdcMetadataEntry { return v.MetadataEntries }).(GetProviderVdcMetadataEntryArrayOutput)
}

func (o LookupProviderVdcResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.Name }).(pulumi.StringOutput)
}

// Set IDs of the Network Pools used by this Provider VDC.
func (o LookupProviderVdcResultOutput) NetworkPoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.NetworkPoolIds }).(pulumi.StringArrayOutput)
}

// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
func (o LookupProviderVdcResultOutput) NsxtManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.NsxtManagerId }).(pulumi.StringOutput)
}

// Set of IDs of the Resource Pools backing this provider VDC.
func (o LookupProviderVdcResultOutput) ResourcePoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.ResourcePoolIds }).(pulumi.StringArrayOutput)
}

// Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
func (o LookupProviderVdcResultOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) int { return v.Status }).(pulumi.IntOutput)
}

func (o LookupProviderVdcResultOutput) StorageContainerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.StorageContainerIds }).(pulumi.StringArrayOutput)
}

// Set of IDs to the Storage Profiles available to this Provider VDC.
func (o LookupProviderVdcResultOutput) StorageProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.StorageProfileIds }).(pulumi.StringArrayOutput)
}

func (o LookupProviderVdcResultOutput) StorageProfileNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) []string { return v.StorageProfileNames }).(pulumi.StringArrayOutput)
}

// ID of the universal network reference.
func (o LookupProviderVdcResultOutput) UniversalNetworkPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.UniversalNetworkPoolId }).(pulumi.StringOutput)
}

// ID of the vCenter Server that provides the Resource Pools and Datastores.
func (o LookupProviderVdcResultOutput) VcenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProviderVdcResult) string { return v.VcenterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProviderVdcResultOutput{})
}
