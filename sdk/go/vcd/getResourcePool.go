// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source for a resource pool attached to a vCenter. A resource pool is an essential component of a Provider VDC.
//
// > Note 1: this data source requires System Administrator privileges
//
// > Note 2: you can create or modify a resource pool using vSphere provider
//
// Supported in provider *v3.10+*
//
// ## Example Usage
//
// ### 1
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vcenter1, err := vcd.GetVcenter(ctx, &vcd.GetVcenterArgs{
//				Name: "vc1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.GetResourcePool(ctx, &vcd.GetResourcePoolArgs{
//				Name:      "resource-pool-for-vcd-01",
//				VcenterId: vcenter1.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### 2
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetResourcePool(ctx, &vcd.GetResourcePoolArgs{
//				Name:      "common-name",
//				VcenterId: vcenter1.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// When you receive such error, you can run the script again, but using the resource pool ID instead of the name.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetResourcePool(ctx, &vcd.GetResourcePoolArgs{
//				Name:      "resgroup-241",
//				VcenterId: vcenter1.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetResourcePool(ctx *pulumi.Context, args *GetResourcePoolArgs, opts ...pulumi.InvokeOption) (*GetResourcePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetResourcePoolResult
	err := ctx.Invoke("vcd:index/getResourcePool:getResourcePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourcePool.
type GetResourcePoolArgs struct {
	// resource pool name. The name may not be unique within the vCenter. If that happens, you will get an
	// error message with the list of IDs for the pools with the same name, and can subsequently enter the resource pool ID instead of the name.
	// (See Example Usage 2)
	Name string `pulumi:"name"`
	// ID of the vCenter to which this resource pool belongs.
	VcenterId string `pulumi:"vcenterId"`
}

// A collection of values returned by getResourcePool.
type GetResourcePoolResult struct {
	// managed object reference of the vCenter cluster that this resource pool is hosted on.
	ClusterMoref string `pulumi:"clusterMoref"`
	// default hardware version available to this resource pool.
	HardwareVersion string `pulumi:"hardwareVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Name      string `pulumi:"name"`
	VcenterId string `pulumi:"vcenterId"`
}

func GetResourcePoolOutput(ctx *pulumi.Context, args GetResourcePoolOutputArgs, opts ...pulumi.InvokeOption) GetResourcePoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetResourcePoolResultOutput, error) {
			args := v.(GetResourcePoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getResourcePool:getResourcePool", args, GetResourcePoolResultOutput{}, options).(GetResourcePoolResultOutput), nil
		}).(GetResourcePoolResultOutput)
}

// A collection of arguments for invoking getResourcePool.
type GetResourcePoolOutputArgs struct {
	// resource pool name. The name may not be unique within the vCenter. If that happens, you will get an
	// error message with the list of IDs for the pools with the same name, and can subsequently enter the resource pool ID instead of the name.
	// (See Example Usage 2)
	Name pulumi.StringInput `pulumi:"name"`
	// ID of the vCenter to which this resource pool belongs.
	VcenterId pulumi.StringInput `pulumi:"vcenterId"`
}

func (GetResourcePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcePoolArgs)(nil)).Elem()
}

// A collection of values returned by getResourcePool.
type GetResourcePoolResultOutput struct{ *pulumi.OutputState }

func (GetResourcePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourcePoolResult)(nil)).Elem()
}

func (o GetResourcePoolResultOutput) ToGetResourcePoolResultOutput() GetResourcePoolResultOutput {
	return o
}

func (o GetResourcePoolResultOutput) ToGetResourcePoolResultOutputWithContext(ctx context.Context) GetResourcePoolResultOutput {
	return o
}

// managed object reference of the vCenter cluster that this resource pool is hosted on.
func (o GetResourcePoolResultOutput) ClusterMoref() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcePoolResult) string { return v.ClusterMoref }).(pulumi.StringOutput)
}

// default hardware version available to this resource pool.
func (o GetResourcePoolResultOutput) HardwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcePoolResult) string { return v.HardwareVersion }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetResourcePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetResourcePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetResourcePoolResultOutput) VcenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourcePoolResult) string { return v.VcenterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetResourcePoolResultOutput{})
}
