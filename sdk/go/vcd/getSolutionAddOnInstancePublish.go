// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Supported in provider *v3.13+* and VCD 10.4.1+.
//
// Provides a data source to read publishing configuration of Solution Add-On Instances in Cloud Director.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupSolutionAddOnInstancePublish(ctx, &vcd.LookupSolutionAddOnInstancePublishArgs{
//				AddOnInstanceName: "MyDseInstanceName",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSolutionAddOnInstancePublish(ctx *pulumi.Context, args *LookupSolutionAddOnInstancePublishArgs, opts ...pulumi.InvokeOption) (*LookupSolutionAddOnInstancePublishResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSolutionAddOnInstancePublishResult
	err := ctx.Invoke("vcd:index/getSolutionAddOnInstancePublish:getSolutionAddOnInstancePublish", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSolutionAddOnInstancePublish.
type LookupSolutionAddOnInstancePublishArgs struct {
	// The name of Solution Add-On Instance
	AddOnInstanceName string `pulumi:"addOnInstanceName"`
}

// A collection of values returned by getSolutionAddOnInstancePublish.
type LookupSolutionAddOnInstancePublishResult struct {
	AddOnInstanceId   string `pulumi:"addOnInstanceId"`
	AddOnInstanceName string `pulumi:"addOnInstanceName"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string   `pulumi:"id"`
	OrgIds              []string `pulumi:"orgIds"`
	PublishToAllTenants bool     `pulumi:"publishToAllTenants"`
	RdeState            string   `pulumi:"rdeState"`
}

func LookupSolutionAddOnInstancePublishOutput(ctx *pulumi.Context, args LookupSolutionAddOnInstancePublishOutputArgs, opts ...pulumi.InvokeOption) LookupSolutionAddOnInstancePublishResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSolutionAddOnInstancePublishResultOutput, error) {
			args := v.(LookupSolutionAddOnInstancePublishArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getSolutionAddOnInstancePublish:getSolutionAddOnInstancePublish", args, LookupSolutionAddOnInstancePublishResultOutput{}, options).(LookupSolutionAddOnInstancePublishResultOutput), nil
		}).(LookupSolutionAddOnInstancePublishResultOutput)
}

// A collection of arguments for invoking getSolutionAddOnInstancePublish.
type LookupSolutionAddOnInstancePublishOutputArgs struct {
	// The name of Solution Add-On Instance
	AddOnInstanceName pulumi.StringInput `pulumi:"addOnInstanceName"`
}

func (LookupSolutionAddOnInstancePublishOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionAddOnInstancePublishArgs)(nil)).Elem()
}

// A collection of values returned by getSolutionAddOnInstancePublish.
type LookupSolutionAddOnInstancePublishResultOutput struct{ *pulumi.OutputState }

func (LookupSolutionAddOnInstancePublishResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionAddOnInstancePublishResult)(nil)).Elem()
}

func (o LookupSolutionAddOnInstancePublishResultOutput) ToLookupSolutionAddOnInstancePublishResultOutput() LookupSolutionAddOnInstancePublishResultOutput {
	return o
}

func (o LookupSolutionAddOnInstancePublishResultOutput) ToLookupSolutionAddOnInstancePublishResultOutputWithContext(ctx context.Context) LookupSolutionAddOnInstancePublishResultOutput {
	return o
}

func (o LookupSolutionAddOnInstancePublishResultOutput) AddOnInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) string { return v.AddOnInstanceId }).(pulumi.StringOutput)
}

func (o LookupSolutionAddOnInstancePublishResultOutput) AddOnInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) string { return v.AddOnInstanceName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSolutionAddOnInstancePublishResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSolutionAddOnInstancePublishResultOutput) OrgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) []string { return v.OrgIds }).(pulumi.StringArrayOutput)
}

func (o LookupSolutionAddOnInstancePublishResultOutput) PublishToAllTenants() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) bool { return v.PublishToAllTenants }).(pulumi.BoolOutput)
}

func (o LookupSolutionAddOnInstancePublishResultOutput) RdeState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionAddOnInstancePublishResult) string { return v.RdeState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSolutionAddOnInstancePublishResultOutput{})
}
