// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the capability of fetching an existing Runtime Defined Entity Type from VMware Cloud Director.
//
// Supported in provider *v3.9+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myRdeType, err := vcd.LookupRdeType(ctx, &vcd.LookupRdeTypeArgs{
//				Vendor:  "bigcorp",
//				Nss:     "tech",
//				Version: "1.2.3",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("type-name", myRdeType.Name)
//			ctx.Export("type-id", myRdeType.Id)
//			return nil
//		})
//	}
//
// ```
func LookupRdeType(ctx *pulumi.Context, args *LookupRdeTypeArgs, opts ...pulumi.InvokeOption) (*LookupRdeTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRdeTypeResult
	err := ctx.Invoke("vcd:index/getRdeType:getRdeType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRdeType.
type LookupRdeTypeArgs struct {
	// A unique namespace associated with the Runtime Defined Entity Type.
	Nss string `pulumi:"nss"`
	// The vendor of the Runtime Defined Entity Type.
	Vendor string `pulumi:"vendor"`
	// The version of the Runtime Defined Entity Type. Must follow [semantic versioning](https://semver.org/) syntax.
	Version string `pulumi:"version"`
}

// A collection of values returned by getRdeType.
type LookupRdeTypeResult struct {
	Description string           `pulumi:"description"`
	ExternalId  string           `pulumi:"externalId"`
	Hooks       []GetRdeTypeHook `pulumi:"hooks"`
	// The provider-assigned unique ID for this managed resource.
	Id               string   `pulumi:"id"`
	InheritedVersion string   `pulumi:"inheritedVersion"`
	InterfaceIds     []string `pulumi:"interfaceIds"`
	Name             string   `pulumi:"name"`
	Nss              string   `pulumi:"nss"`
	Readonly         bool     `pulumi:"readonly"`
	Schema           string   `pulumi:"schema"`
	Vendor           string   `pulumi:"vendor"`
	Version          string   `pulumi:"version"`
}

func LookupRdeTypeOutput(ctx *pulumi.Context, args LookupRdeTypeOutputArgs, opts ...pulumi.InvokeOption) LookupRdeTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRdeTypeResultOutput, error) {
			args := v.(LookupRdeTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getRdeType:getRdeType", args, LookupRdeTypeResultOutput{}, options).(LookupRdeTypeResultOutput), nil
		}).(LookupRdeTypeResultOutput)
}

// A collection of arguments for invoking getRdeType.
type LookupRdeTypeOutputArgs struct {
	// A unique namespace associated with the Runtime Defined Entity Type.
	Nss pulumi.StringInput `pulumi:"nss"`
	// The vendor of the Runtime Defined Entity Type.
	Vendor pulumi.StringInput `pulumi:"vendor"`
	// The version of the Runtime Defined Entity Type. Must follow [semantic versioning](https://semver.org/) syntax.
	Version pulumi.StringInput `pulumi:"version"`
}

func (LookupRdeTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdeTypeArgs)(nil)).Elem()
}

// A collection of values returned by getRdeType.
type LookupRdeTypeResultOutput struct{ *pulumi.OutputState }

func (LookupRdeTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdeTypeResult)(nil)).Elem()
}

func (o LookupRdeTypeResultOutput) ToLookupRdeTypeResultOutput() LookupRdeTypeResultOutput {
	return o
}

func (o LookupRdeTypeResultOutput) ToLookupRdeTypeResultOutputWithContext(ctx context.Context) LookupRdeTypeResultOutput {
	return o
}

func (o LookupRdeTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.ExternalId }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) Hooks() GetRdeTypeHookArrayOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) []GetRdeTypeHook { return v.Hooks }).(GetRdeTypeHookArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRdeTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) InheritedVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.InheritedVersion }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) InterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) []string { return v.InterfaceIds }).(pulumi.StringArrayOutput)
}

func (o LookupRdeTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) Nss() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Nss }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) Readonly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) bool { return v.Readonly }).(pulumi.BoolOutput)
}

func (o LookupRdeTypeResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Schema }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Vendor }).(pulumi.StringOutput)
}

func (o LookupRdeTypeResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeTypeResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRdeTypeResultOutput{})
}
