// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExternalNetworkV2 struct {
	pulumi.CustomResourceState

	// An Org ID that this network should be
	// dedicated to. Only applicable when `use_ip_spaces=true`
	DedicatedOrgId pulumi.StringOutput `pulumi:"dedicatedOrgId"`
	// Network friendly description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// One or more IP scopes for the network. See IP Scope below for details.
	IpScopes ExternalNetworkV2IpScopeArrayOutput `pulumi:"ipScopes"`
	// A unique name for the network
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure intentions for
	// NAT and Firewall rule configuration:
	// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
	//   default behavior.
	// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
	// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
	//   Edge gateways.
	NatAndFirewallServiceIntention pulumi.StringOutput `pulumi:"natAndFirewallServiceIntention"`
	// NSX-T network definition. See NSX-T Network below for details.
	NsxtNetwork ExternalNetworkV2NsxtNetworkPtrOutput `pulumi:"nsxtNetwork"`
	// Configure intentions for
	// Org VDC network Route Advertisement:
	// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
	//   configured to be advertised. This is the default behavior.
	// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
	//   advertised by default but can be configured to be advertised after creation.
	// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
	//   associated with IP Space Uplinks, will be advertised by default. This can be changed on an
	//   individual network level later, if necessary.
	//
	// <a id="ipscope"></a>
	RouteAdvertisementIntention pulumi.StringOutput `pulumi:"routeAdvertisementIntention"`
	// Defines if the network uses IP Spaces. Do
	// not specify `ipScope` when using IP Spaces. (default `false`)
	UseIpSpaces pulumi.BoolPtrOutput `pulumi:"useIpSpaces"`
	// One or more blocks of vSphere Network..
	VsphereNetworks ExternalNetworkV2VsphereNetworkArrayOutput `pulumi:"vsphereNetworks"`
}

// NewExternalNetworkV2 registers a new resource with the given unique name, arguments, and options.
func NewExternalNetworkV2(ctx *pulumi.Context,
	name string, args *ExternalNetworkV2Args, opts ...pulumi.ResourceOption) (*ExternalNetworkV2, error) {
	if args == nil {
		args = &ExternalNetworkV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalNetworkV2
	err := ctx.RegisterResource("vcd:index/externalNetworkV2:ExternalNetworkV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalNetworkV2 gets an existing ExternalNetworkV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalNetworkV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalNetworkV2State, opts ...pulumi.ResourceOption) (*ExternalNetworkV2, error) {
	var resource ExternalNetworkV2
	err := ctx.ReadResource("vcd:index/externalNetworkV2:ExternalNetworkV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalNetworkV2 resources.
type externalNetworkV2State struct {
	// An Org ID that this network should be
	// dedicated to. Only applicable when `use_ip_spaces=true`
	DedicatedOrgId *string `pulumi:"dedicatedOrgId"`
	// Network friendly description
	Description *string `pulumi:"description"`
	// One or more IP scopes for the network. See IP Scope below for details.
	IpScopes []ExternalNetworkV2IpScope `pulumi:"ipScopes"`
	// A unique name for the network
	Name *string `pulumi:"name"`
	// Configure intentions for
	// NAT and Firewall rule configuration:
	// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
	//   default behavior.
	// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
	// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
	//   Edge gateways.
	NatAndFirewallServiceIntention *string `pulumi:"natAndFirewallServiceIntention"`
	// NSX-T network definition. See NSX-T Network below for details.
	NsxtNetwork *ExternalNetworkV2NsxtNetwork `pulumi:"nsxtNetwork"`
	// Configure intentions for
	// Org VDC network Route Advertisement:
	// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
	//   configured to be advertised. This is the default behavior.
	// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
	//   advertised by default but can be configured to be advertised after creation.
	// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
	//   associated with IP Space Uplinks, will be advertised by default. This can be changed on an
	//   individual network level later, if necessary.
	//
	// <a id="ipscope"></a>
	RouteAdvertisementIntention *string `pulumi:"routeAdvertisementIntention"`
	// Defines if the network uses IP Spaces. Do
	// not specify `ipScope` when using IP Spaces. (default `false`)
	UseIpSpaces *bool `pulumi:"useIpSpaces"`
	// One or more blocks of vSphere Network..
	VsphereNetworks []ExternalNetworkV2VsphereNetwork `pulumi:"vsphereNetworks"`
}

type ExternalNetworkV2State struct {
	// An Org ID that this network should be
	// dedicated to. Only applicable when `use_ip_spaces=true`
	DedicatedOrgId pulumi.StringPtrInput
	// Network friendly description
	Description pulumi.StringPtrInput
	// One or more IP scopes for the network. See IP Scope below for details.
	IpScopes ExternalNetworkV2IpScopeArrayInput
	// A unique name for the network
	Name pulumi.StringPtrInput
	// Configure intentions for
	// NAT and Firewall rule configuration:
	// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
	//   default behavior.
	// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
	// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
	//   Edge gateways.
	NatAndFirewallServiceIntention pulumi.StringPtrInput
	// NSX-T network definition. See NSX-T Network below for details.
	NsxtNetwork ExternalNetworkV2NsxtNetworkPtrInput
	// Configure intentions for
	// Org VDC network Route Advertisement:
	// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
	//   configured to be advertised. This is the default behavior.
	// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
	//   advertised by default but can be configured to be advertised after creation.
	// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
	//   associated with IP Space Uplinks, will be advertised by default. This can be changed on an
	//   individual network level later, if necessary.
	//
	// <a id="ipscope"></a>
	RouteAdvertisementIntention pulumi.StringPtrInput
	// Defines if the network uses IP Spaces. Do
	// not specify `ipScope` when using IP Spaces. (default `false`)
	UseIpSpaces pulumi.BoolPtrInput
	// One or more blocks of vSphere Network..
	VsphereNetworks ExternalNetworkV2VsphereNetworkArrayInput
}

func (ExternalNetworkV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNetworkV2State)(nil)).Elem()
}

type externalNetworkV2Args struct {
	// An Org ID that this network should be
	// dedicated to. Only applicable when `use_ip_spaces=true`
	DedicatedOrgId *string `pulumi:"dedicatedOrgId"`
	// Network friendly description
	Description *string `pulumi:"description"`
	// One or more IP scopes for the network. See IP Scope below for details.
	IpScopes []ExternalNetworkV2IpScope `pulumi:"ipScopes"`
	// A unique name for the network
	Name *string `pulumi:"name"`
	// Configure intentions for
	// NAT and Firewall rule configuration:
	// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
	//   default behavior.
	// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
	// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
	//   Edge gateways.
	NatAndFirewallServiceIntention *string `pulumi:"natAndFirewallServiceIntention"`
	// NSX-T network definition. See NSX-T Network below for details.
	NsxtNetwork *ExternalNetworkV2NsxtNetwork `pulumi:"nsxtNetwork"`
	// Configure intentions for
	// Org VDC network Route Advertisement:
	// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
	//   configured to be advertised. This is the default behavior.
	// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
	//   advertised by default but can be configured to be advertised after creation.
	// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
	//   associated with IP Space Uplinks, will be advertised by default. This can be changed on an
	//   individual network level later, if necessary.
	//
	// <a id="ipscope"></a>
	RouteAdvertisementIntention *string `pulumi:"routeAdvertisementIntention"`
	// Defines if the network uses IP Spaces. Do
	// not specify `ipScope` when using IP Spaces. (default `false`)
	UseIpSpaces *bool `pulumi:"useIpSpaces"`
	// One or more blocks of vSphere Network..
	VsphereNetworks []ExternalNetworkV2VsphereNetwork `pulumi:"vsphereNetworks"`
}

// The set of arguments for constructing a ExternalNetworkV2 resource.
type ExternalNetworkV2Args struct {
	// An Org ID that this network should be
	// dedicated to. Only applicable when `use_ip_spaces=true`
	DedicatedOrgId pulumi.StringPtrInput
	// Network friendly description
	Description pulumi.StringPtrInput
	// One or more IP scopes for the network. See IP Scope below for details.
	IpScopes ExternalNetworkV2IpScopeArrayInput
	// A unique name for the network
	Name pulumi.StringPtrInput
	// Configure intentions for
	// NAT and Firewall rule configuration:
	// * `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
	//   default behavior.
	// * `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
	// * `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
	//   Edge gateways.
	NatAndFirewallServiceIntention pulumi.StringPtrInput
	// NSX-T network definition. See NSX-T Network below for details.
	NsxtNetwork ExternalNetworkV2NsxtNetworkPtrInput
	// Configure intentions for
	// Org VDC network Route Advertisement:
	// * `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
	//   configured to be advertised. This is the default behavior.
	// * `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
	//   Uplink will be advertised by default. This can be changed on an individual network level later,
	//   if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
	//   advertised by default but can be configured to be advertised after creation.
	// * `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
	//   associated with IP Space Uplinks, will be advertised by default. This can be changed on an
	//   individual network level later, if necessary.
	//
	// <a id="ipscope"></a>
	RouteAdvertisementIntention pulumi.StringPtrInput
	// Defines if the network uses IP Spaces. Do
	// not specify `ipScope` when using IP Spaces. (default `false`)
	UseIpSpaces pulumi.BoolPtrInput
	// One or more blocks of vSphere Network..
	VsphereNetworks ExternalNetworkV2VsphereNetworkArrayInput
}

func (ExternalNetworkV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNetworkV2Args)(nil)).Elem()
}

type ExternalNetworkV2Input interface {
	pulumi.Input

	ToExternalNetworkV2Output() ExternalNetworkV2Output
	ToExternalNetworkV2OutputWithContext(ctx context.Context) ExternalNetworkV2Output
}

func (*ExternalNetworkV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetworkV2)(nil)).Elem()
}

func (i *ExternalNetworkV2) ToExternalNetworkV2Output() ExternalNetworkV2Output {
	return i.ToExternalNetworkV2OutputWithContext(context.Background())
}

func (i *ExternalNetworkV2) ToExternalNetworkV2OutputWithContext(ctx context.Context) ExternalNetworkV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkV2Output)
}

// ExternalNetworkV2ArrayInput is an input type that accepts ExternalNetworkV2Array and ExternalNetworkV2ArrayOutput values.
// You can construct a concrete instance of `ExternalNetworkV2ArrayInput` via:
//
//	ExternalNetworkV2Array{ ExternalNetworkV2Args{...} }
type ExternalNetworkV2ArrayInput interface {
	pulumi.Input

	ToExternalNetworkV2ArrayOutput() ExternalNetworkV2ArrayOutput
	ToExternalNetworkV2ArrayOutputWithContext(context.Context) ExternalNetworkV2ArrayOutput
}

type ExternalNetworkV2Array []ExternalNetworkV2Input

func (ExternalNetworkV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNetworkV2)(nil)).Elem()
}

func (i ExternalNetworkV2Array) ToExternalNetworkV2ArrayOutput() ExternalNetworkV2ArrayOutput {
	return i.ToExternalNetworkV2ArrayOutputWithContext(context.Background())
}

func (i ExternalNetworkV2Array) ToExternalNetworkV2ArrayOutputWithContext(ctx context.Context) ExternalNetworkV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkV2ArrayOutput)
}

// ExternalNetworkV2MapInput is an input type that accepts ExternalNetworkV2Map and ExternalNetworkV2MapOutput values.
// You can construct a concrete instance of `ExternalNetworkV2MapInput` via:
//
//	ExternalNetworkV2Map{ "key": ExternalNetworkV2Args{...} }
type ExternalNetworkV2MapInput interface {
	pulumi.Input

	ToExternalNetworkV2MapOutput() ExternalNetworkV2MapOutput
	ToExternalNetworkV2MapOutputWithContext(context.Context) ExternalNetworkV2MapOutput
}

type ExternalNetworkV2Map map[string]ExternalNetworkV2Input

func (ExternalNetworkV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNetworkV2)(nil)).Elem()
}

func (i ExternalNetworkV2Map) ToExternalNetworkV2MapOutput() ExternalNetworkV2MapOutput {
	return i.ToExternalNetworkV2MapOutputWithContext(context.Background())
}

func (i ExternalNetworkV2Map) ToExternalNetworkV2MapOutputWithContext(ctx context.Context) ExternalNetworkV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkV2MapOutput)
}

type ExternalNetworkV2Output struct{ *pulumi.OutputState }

func (ExternalNetworkV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetworkV2)(nil)).Elem()
}

func (o ExternalNetworkV2Output) ToExternalNetworkV2Output() ExternalNetworkV2Output {
	return o
}

func (o ExternalNetworkV2Output) ToExternalNetworkV2OutputWithContext(ctx context.Context) ExternalNetworkV2Output {
	return o
}

// An Org ID that this network should be
// dedicated to. Only applicable when `use_ip_spaces=true`
func (o ExternalNetworkV2Output) DedicatedOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.StringOutput { return v.DedicatedOrgId }).(pulumi.StringOutput)
}

// Network friendly description
func (o ExternalNetworkV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// One or more IP scopes for the network. See IP Scope below for details.
func (o ExternalNetworkV2Output) IpScopes() ExternalNetworkV2IpScopeArrayOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) ExternalNetworkV2IpScopeArrayOutput { return v.IpScopes }).(ExternalNetworkV2IpScopeArrayOutput)
}

// A unique name for the network
func (o ExternalNetworkV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure intentions for
// NAT and Firewall rule configuration:
//   - `EDGE_GATEWAY` - Allow management of NAT and firewall rules only on Edge Gateways. This is the
//     default behavior.
//   - `PROVIDER_GATEWAY` - Allow management of NAT and firewall rules only on Provider Gateways.
//   - `PROVIDER_AND_EDGE_GATEWAY` - Allow management of NAT and firewall rules on both the Provider and
//     Edge gateways.
func (o ExternalNetworkV2Output) NatAndFirewallServiceIntention() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.StringOutput { return v.NatAndFirewallServiceIntention }).(pulumi.StringOutput)
}

// NSX-T network definition. See NSX-T Network below for details.
func (o ExternalNetworkV2Output) NsxtNetwork() ExternalNetworkV2NsxtNetworkPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) ExternalNetworkV2NsxtNetworkPtrOutput { return v.NsxtNetwork }).(ExternalNetworkV2NsxtNetworkPtrOutput)
}

// Configure intentions for
// Org VDC network Route Advertisement:
//   - `IP_SPACE_UPLINKS_ADVERTISED_STRICT` - All networks within IP Space associated with IP Space
//     Uplink will be advertised by default. This can be changed on an individual network level later,
//     if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks cannot be
//     configured to be advertised. This is the default behavior.
//   - `IP_SPACE_UPLINKS_ADVERTISED_FLEXIBLE` - All networks within IP Space associated with IP Space
//     Uplink will be advertised by default. This can be changed on an individual network level later,
//     if necessary. All other networks outside of IP Spaces associated with IP Space Uplinks are not
//     advertised by default but can be configured to be advertised after creation.
//   - `ALL_NETWORKS_ADVERTISED` - All networks, regardless on whether they fall inside of any IP Spaces
//     associated with IP Space Uplinks, will be advertised by default. This can be changed on an
//     individual network level later, if necessary.
//
// <a id="ipscope"></a>
func (o ExternalNetworkV2Output) RouteAdvertisementIntention() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.StringOutput { return v.RouteAdvertisementIntention }).(pulumi.StringOutput)
}

// Defines if the network uses IP Spaces. Do
// not specify `ipScope` when using IP Spaces. (default `false`)
func (o ExternalNetworkV2Output) UseIpSpaces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) pulumi.BoolPtrOutput { return v.UseIpSpaces }).(pulumi.BoolPtrOutput)
}

// One or more blocks of vSphere Network..
func (o ExternalNetworkV2Output) VsphereNetworks() ExternalNetworkV2VsphereNetworkArrayOutput {
	return o.ApplyT(func(v *ExternalNetworkV2) ExternalNetworkV2VsphereNetworkArrayOutput { return v.VsphereNetworks }).(ExternalNetworkV2VsphereNetworkArrayOutput)
}

type ExternalNetworkV2ArrayOutput struct{ *pulumi.OutputState }

func (ExternalNetworkV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNetworkV2)(nil)).Elem()
}

func (o ExternalNetworkV2ArrayOutput) ToExternalNetworkV2ArrayOutput() ExternalNetworkV2ArrayOutput {
	return o
}

func (o ExternalNetworkV2ArrayOutput) ToExternalNetworkV2ArrayOutputWithContext(ctx context.Context) ExternalNetworkV2ArrayOutput {
	return o
}

func (o ExternalNetworkV2ArrayOutput) Index(i pulumi.IntInput) ExternalNetworkV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalNetworkV2 {
		return vs[0].([]*ExternalNetworkV2)[vs[1].(int)]
	}).(ExternalNetworkV2Output)
}

type ExternalNetworkV2MapOutput struct{ *pulumi.OutputState }

func (ExternalNetworkV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNetworkV2)(nil)).Elem()
}

func (o ExternalNetworkV2MapOutput) ToExternalNetworkV2MapOutput() ExternalNetworkV2MapOutput {
	return o
}

func (o ExternalNetworkV2MapOutput) ToExternalNetworkV2MapOutputWithContext(ctx context.Context) ExternalNetworkV2MapOutput {
	return o
}

func (o ExternalNetworkV2MapOutput) MapIndex(k pulumi.StringInput) ExternalNetworkV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalNetworkV2 {
		return vs[0].(map[string]*ExternalNetworkV2)[vs[1].(string)]
	}).(ExternalNetworkV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkV2Input)(nil)).Elem(), &ExternalNetworkV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkV2ArrayInput)(nil)).Elem(), ExternalNetworkV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNetworkV2MapInput)(nil)).Elem(), ExternalNetworkV2Map{})
	pulumi.RegisterOutputType(ExternalNetworkV2Output{})
	pulumi.RegisterOutputType(ExternalNetworkV2ArrayOutput{})
	pulumi.RegisterOutputType(ExternalNetworkV2MapOutput{})
}
