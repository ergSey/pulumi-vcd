// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read IP Spaces. IP Spaces provide structured approach to allocating public
// and private IP addresses by preventing the use of overlapping IP addresses across organizations and
// organization VDCs.
//
// IP Spaces require VCD 10.4.1+ with NSX-T.
//
// ## Example Usage
//
// ### Private IP Space Within An Org)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupIpSpace(ctx, &vcd.LookupIpSpaceArgs{
//				OrgId: pulumi.StringRef(org1.Id),
//				Name:  "private-ip-space",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Public Or Shared IP Space)
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupIpSpace(ctx, &vcd.LookupIpSpaceArgs{
//				Name: "public-or-shared-ip-space",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpSpace(ctx *pulumi.Context, args *LookupIpSpaceArgs, opts ...pulumi.InvokeOption) (*LookupIpSpaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpSpaceResult
	err := ctx.Invoke("vcd:index/getIpSpace:getIpSpace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpSpace.
type LookupIpSpaceArgs struct {
	// The name of IP Space.
	Name string `pulumi:"name"`
	// Org ID for Private IP Space.
	OrgId *string `pulumi:"orgId"`
}

// A collection of values returned by getIpSpace.
type LookupIpSpaceResult struct {
	DefaultFirewallRuleCreationEnabled bool   `pulumi:"defaultFirewallRuleCreationEnabled"`
	DefaultNoSnatRuleCreationEnabled   bool   `pulumi:"defaultNoSnatRuleCreationEnabled"`
	DefaultSnatRuleCreationEnabled     bool   `pulumi:"defaultSnatRuleCreationEnabled"`
	Description                        string `pulumi:"description"`
	ExternalScope                      string `pulumi:"externalScope"`
	// The provider-assigned unique ID for this managed resource.
	Id                        string               `pulumi:"id"`
	InternalScopes            []string             `pulumi:"internalScopes"`
	IpPrefixes                []GetIpSpaceIpPrefix `pulumi:"ipPrefixes"`
	IpRangeQuota              string               `pulumi:"ipRangeQuota"`
	IpRanges                  []GetIpSpaceIpRange  `pulumi:"ipRanges"`
	Name                      string               `pulumi:"name"`
	OrgId                     *string              `pulumi:"orgId"`
	RouteAdvertisementEnabled bool                 `pulumi:"routeAdvertisementEnabled"`
	Type                      string               `pulumi:"type"`
}

func LookupIpSpaceOutput(ctx *pulumi.Context, args LookupIpSpaceOutputArgs, opts ...pulumi.InvokeOption) LookupIpSpaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpSpaceResultOutput, error) {
			args := v.(LookupIpSpaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getIpSpace:getIpSpace", args, LookupIpSpaceResultOutput{}, options).(LookupIpSpaceResultOutput), nil
		}).(LookupIpSpaceResultOutput)
}

// A collection of arguments for invoking getIpSpace.
type LookupIpSpaceOutputArgs struct {
	// The name of IP Space.
	Name pulumi.StringInput `pulumi:"name"`
	// Org ID for Private IP Space.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
}

func (LookupIpSpaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpSpaceArgs)(nil)).Elem()
}

// A collection of values returned by getIpSpace.
type LookupIpSpaceResultOutput struct{ *pulumi.OutputState }

func (LookupIpSpaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpSpaceResult)(nil)).Elem()
}

func (o LookupIpSpaceResultOutput) ToLookupIpSpaceResultOutput() LookupIpSpaceResultOutput {
	return o
}

func (o LookupIpSpaceResultOutput) ToLookupIpSpaceResultOutputWithContext(ctx context.Context) LookupIpSpaceResultOutput {
	return o
}

func (o LookupIpSpaceResultOutput) DefaultFirewallRuleCreationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) bool { return v.DefaultFirewallRuleCreationEnabled }).(pulumi.BoolOutput)
}

func (o LookupIpSpaceResultOutput) DefaultNoSnatRuleCreationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) bool { return v.DefaultNoSnatRuleCreationEnabled }).(pulumi.BoolOutput)
}

func (o LookupIpSpaceResultOutput) DefaultSnatRuleCreationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) bool { return v.DefaultSnatRuleCreationEnabled }).(pulumi.BoolOutput)
}

func (o LookupIpSpaceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupIpSpaceResultOutput) ExternalScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.ExternalScope }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIpSpaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIpSpaceResultOutput) InternalScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) []string { return v.InternalScopes }).(pulumi.StringArrayOutput)
}

func (o LookupIpSpaceResultOutput) IpPrefixes() GetIpSpaceIpPrefixArrayOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) []GetIpSpaceIpPrefix { return v.IpPrefixes }).(GetIpSpaceIpPrefixArrayOutput)
}

func (o LookupIpSpaceResultOutput) IpRangeQuota() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.IpRangeQuota }).(pulumi.StringOutput)
}

func (o LookupIpSpaceResultOutput) IpRanges() GetIpSpaceIpRangeArrayOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) []GetIpSpaceIpRange { return v.IpRanges }).(GetIpSpaceIpRangeArrayOutput)
}

func (o LookupIpSpaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupIpSpaceResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

func (o LookupIpSpaceResultOutput) RouteAdvertisementEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) bool { return v.RouteAdvertisementEnabled }).(pulumi.BoolOutput)
}

func (o LookupIpSpaceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpSpaceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpSpaceResultOutput{})
}
