// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CseKubernetesCluster struct {
	pulumi.CustomResourceState

	// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
	// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
	// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
	ApiTokenFile pulumi.StringPtrOutput `pulumi:"apiTokenFile"`
	// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
	// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
	// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
	AutoRepairOnErrors pulumi.BoolOutput `pulumi:"autoRepairOnErrors"`
	// The version of CAPVCD used by this cluster
	CapvcdVersion pulumi.StringOutput `pulumi:"capvcdVersion"`
	// The cluster resource set bindings of this cluster
	ClusterResourceSetBindings pulumi.StringArrayOutput `pulumi:"clusterResourceSetBindings"`
	// See **Control Plane**
	ControlPlane CseKubernetesClusterControlPlaneOutput `pulumi:"controlPlane"`
	// The version of the Cloud Provider Interface used by this cluster
	CpiVersion pulumi.StringOutput `pulumi:"cpiVersion"`
	// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
	// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
	CseVersion pulumi.StringOutput `pulumi:"cseVersion"`
	// The version of the Container Storage Interface used by this cluster
	CsiVersion pulumi.StringOutput `pulumi:"csiVersion"`
	// See **Default Storage Class**
	DefaultStorageClass CseKubernetesClusterDefaultStorageClassPtrOutput `pulumi:"defaultStorageClass"`
	// A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
	Events CseKubernetesClusterEventArrayOutput `pulumi:"events"`
	// The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
	Kubeconfig pulumi.StringOutput `pulumi:"kubeconfig"`
	// The ID of the vApp Template that corresponds to a Kubernetes template OVA
	KubernetesTemplateId pulumi.StringOutput `pulumi:"kubernetesTemplateId"`
	// The version of Kubernetes installed in this cluster
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
	// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the network that the Kubernetes cluster will use
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
	// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
	NodeHealthCheck pulumi.BoolPtrOutput `pulumi:"nodeHealthCheck"`
	// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
	// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
	// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
	// this argument to `0` means to wait indefinitely
	OperationsTimeoutMinutes pulumi.IntPtrOutput `pulumi:"operationsTimeoutMinutes"`
	// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// The user that creates the cluster and owns the API token specified in `apiToken`.
	// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
	// If not specified, it assumes it's the user from the provider configuration
	//
	// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
	// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
	// there is an existing issue that prevents the cluster to be created.
	Owner pulumi.StringPtrOutput `pulumi:"owner"`
	// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
	PodsCidr pulumi.StringPtrOutput `pulumi:"podsCidr"`
	// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
	Runtime pulumi.StringPtrOutput `pulumi:"runtime"`
	// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
	ServicesCidr pulumi.StringPtrOutput `pulumi:"servicesCidr"`
	// The SSH public key used to log in into the cluster nodes
	SshPublicKey pulumi.StringPtrOutput `pulumi:"sshPublicKey"`
	// The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
	// created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
	// cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
	State pulumi.StringOutput `pulumi:"state"`
	// A set of vApp Template names that can be fetched with a
	// [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
	SupportedUpgrades pulumi.StringArrayOutput `pulumi:"supportedUpgrades"`
	// The version of TKG installed in this cluster
	TkgProductVersion pulumi.StringOutput `pulumi:"tkgProductVersion"`
	// The ID of the VDC that hosts the Kubernetes cluster
	VdcId pulumi.StringOutput `pulumi:"vdcId"`
	// A virtual IP subnet for the cluster
	VirtualIpSubnet pulumi.StringPtrOutput `pulumi:"virtualIpSubnet"`
	// See **Worker Pools**
	WorkerPools CseKubernetesClusterWorkerPoolArrayOutput `pulumi:"workerPools"`
}

// NewCseKubernetesCluster registers a new resource with the given unique name, arguments, and options.
func NewCseKubernetesCluster(ctx *pulumi.Context,
	name string, args *CseKubernetesClusterArgs, opts ...pulumi.ResourceOption) (*CseKubernetesCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlane == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlane'")
	}
	if args.CseVersion == nil {
		return nil, errors.New("invalid value for required argument 'CseVersion'")
	}
	if args.KubernetesTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesTemplateId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.VdcId == nil {
		return nil, errors.New("invalid value for required argument 'VdcId'")
	}
	if args.WorkerPools == nil {
		return nil, errors.New("invalid value for required argument 'WorkerPools'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeconfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CseKubernetesCluster
	err := ctx.RegisterResource("vcd:index/cseKubernetesCluster:CseKubernetesCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseKubernetesCluster gets an existing CseKubernetesCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseKubernetesCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseKubernetesClusterState, opts ...pulumi.ResourceOption) (*CseKubernetesCluster, error) {
	var resource CseKubernetesCluster
	err := ctx.ReadResource("vcd:index/cseKubernetesCluster:CseKubernetesCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseKubernetesCluster resources.
type cseKubernetesClusterState struct {
	// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
	// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
	// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
	ApiTokenFile *string `pulumi:"apiTokenFile"`
	// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
	// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
	// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
	AutoRepairOnErrors *bool `pulumi:"autoRepairOnErrors"`
	// The version of CAPVCD used by this cluster
	CapvcdVersion *string `pulumi:"capvcdVersion"`
	// The cluster resource set bindings of this cluster
	ClusterResourceSetBindings []string `pulumi:"clusterResourceSetBindings"`
	// See **Control Plane**
	ControlPlane *CseKubernetesClusterControlPlane `pulumi:"controlPlane"`
	// The version of the Cloud Provider Interface used by this cluster
	CpiVersion *string `pulumi:"cpiVersion"`
	// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
	// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
	CseVersion *string `pulumi:"cseVersion"`
	// The version of the Container Storage Interface used by this cluster
	CsiVersion *string `pulumi:"csiVersion"`
	// See **Default Storage Class**
	DefaultStorageClass *CseKubernetesClusterDefaultStorageClass `pulumi:"defaultStorageClass"`
	// A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
	Events []CseKubernetesClusterEvent `pulumi:"events"`
	// The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
	Kubeconfig *string `pulumi:"kubeconfig"`
	// The ID of the vApp Template that corresponds to a Kubernetes template OVA
	KubernetesTemplateId *string `pulumi:"kubernetesTemplateId"`
	// The version of Kubernetes installed in this cluster
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
	// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
	Name *string `pulumi:"name"`
	// The ID of the network that the Kubernetes cluster will use
	NetworkId *string `pulumi:"networkId"`
	// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
	// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
	NodeHealthCheck *bool `pulumi:"nodeHealthCheck"`
	// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
	// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
	// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
	// this argument to `0` means to wait indefinitely
	OperationsTimeoutMinutes *int `pulumi:"operationsTimeoutMinutes"`
	// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
	Org *string `pulumi:"org"`
	// The user that creates the cluster and owns the API token specified in `apiToken`.
	// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
	// If not specified, it assumes it's the user from the provider configuration
	//
	// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
	// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
	// there is an existing issue that prevents the cluster to be created.
	Owner *string `pulumi:"owner"`
	// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
	PodsCidr *string `pulumi:"podsCidr"`
	// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
	Runtime *string `pulumi:"runtime"`
	// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
	ServicesCidr *string `pulumi:"servicesCidr"`
	// The SSH public key used to log in into the cluster nodes
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
	// created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
	// cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
	State *string `pulumi:"state"`
	// A set of vApp Template names that can be fetched with a
	// [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
	SupportedUpgrades []string `pulumi:"supportedUpgrades"`
	// The version of TKG installed in this cluster
	TkgProductVersion *string `pulumi:"tkgProductVersion"`
	// The ID of the VDC that hosts the Kubernetes cluster
	VdcId *string `pulumi:"vdcId"`
	// A virtual IP subnet for the cluster
	VirtualIpSubnet *string `pulumi:"virtualIpSubnet"`
	// See **Worker Pools**
	WorkerPools []CseKubernetesClusterWorkerPool `pulumi:"workerPools"`
}

type CseKubernetesClusterState struct {
	// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
	// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
	// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
	ApiTokenFile pulumi.StringPtrInput
	// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
	// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
	// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
	AutoRepairOnErrors pulumi.BoolPtrInput
	// The version of CAPVCD used by this cluster
	CapvcdVersion pulumi.StringPtrInput
	// The cluster resource set bindings of this cluster
	ClusterResourceSetBindings pulumi.StringArrayInput
	// See **Control Plane**
	ControlPlane CseKubernetesClusterControlPlanePtrInput
	// The version of the Cloud Provider Interface used by this cluster
	CpiVersion pulumi.StringPtrInput
	// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
	// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
	CseVersion pulumi.StringPtrInput
	// The version of the Container Storage Interface used by this cluster
	CsiVersion pulumi.StringPtrInput
	// See **Default Storage Class**
	DefaultStorageClass CseKubernetesClusterDefaultStorageClassPtrInput
	// A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
	Events CseKubernetesClusterEventArrayInput
	// The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
	Kubeconfig pulumi.StringPtrInput
	// The ID of the vApp Template that corresponds to a Kubernetes template OVA
	KubernetesTemplateId pulumi.StringPtrInput
	// The version of Kubernetes installed in this cluster
	KubernetesVersion pulumi.StringPtrInput
	// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
	// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
	Name pulumi.StringPtrInput
	// The ID of the network that the Kubernetes cluster will use
	NetworkId pulumi.StringPtrInput
	// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
	// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
	NodeHealthCheck pulumi.BoolPtrInput
	// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
	// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
	// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
	// this argument to `0` means to wait indefinitely
	OperationsTimeoutMinutes pulumi.IntPtrInput
	// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
	Org pulumi.StringPtrInput
	// The user that creates the cluster and owns the API token specified in `apiToken`.
	// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
	// If not specified, it assumes it's the user from the provider configuration
	//
	// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
	// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
	// there is an existing issue that prevents the cluster to be created.
	Owner pulumi.StringPtrInput
	// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
	PodsCidr pulumi.StringPtrInput
	// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
	Runtime pulumi.StringPtrInput
	// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
	ServicesCidr pulumi.StringPtrInput
	// The SSH public key used to log in into the cluster nodes
	SshPublicKey pulumi.StringPtrInput
	// The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
	// created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
	// cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
	State pulumi.StringPtrInput
	// A set of vApp Template names that can be fetched with a
	// [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
	SupportedUpgrades pulumi.StringArrayInput
	// The version of TKG installed in this cluster
	TkgProductVersion pulumi.StringPtrInput
	// The ID of the VDC that hosts the Kubernetes cluster
	VdcId pulumi.StringPtrInput
	// A virtual IP subnet for the cluster
	VirtualIpSubnet pulumi.StringPtrInput
	// See **Worker Pools**
	WorkerPools CseKubernetesClusterWorkerPoolArrayInput
}

func (CseKubernetesClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseKubernetesClusterState)(nil)).Elem()
}

type cseKubernetesClusterArgs struct {
	// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
	// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
	// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
	ApiTokenFile *string `pulumi:"apiTokenFile"`
	// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
	// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
	// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
	AutoRepairOnErrors *bool `pulumi:"autoRepairOnErrors"`
	// See **Control Plane**
	ControlPlane CseKubernetesClusterControlPlane `pulumi:"controlPlane"`
	// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
	// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
	CseVersion string `pulumi:"cseVersion"`
	// See **Default Storage Class**
	DefaultStorageClass *CseKubernetesClusterDefaultStorageClass `pulumi:"defaultStorageClass"`
	// The ID of the vApp Template that corresponds to a Kubernetes template OVA
	KubernetesTemplateId string `pulumi:"kubernetesTemplateId"`
	// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
	// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
	Name *string `pulumi:"name"`
	// The ID of the network that the Kubernetes cluster will use
	NetworkId string `pulumi:"networkId"`
	// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
	// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
	NodeHealthCheck *bool `pulumi:"nodeHealthCheck"`
	// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
	// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
	// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
	// this argument to `0` means to wait indefinitely
	OperationsTimeoutMinutes *int `pulumi:"operationsTimeoutMinutes"`
	// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
	Org *string `pulumi:"org"`
	// The user that creates the cluster and owns the API token specified in `apiToken`.
	// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
	// If not specified, it assumes it's the user from the provider configuration
	//
	// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
	// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
	// there is an existing issue that prevents the cluster to be created.
	Owner *string `pulumi:"owner"`
	// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
	PodsCidr *string `pulumi:"podsCidr"`
	// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
	Runtime *string `pulumi:"runtime"`
	// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
	ServicesCidr *string `pulumi:"servicesCidr"`
	// The SSH public key used to log in into the cluster nodes
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// The ID of the VDC that hosts the Kubernetes cluster
	VdcId string `pulumi:"vdcId"`
	// A virtual IP subnet for the cluster
	VirtualIpSubnet *string `pulumi:"virtualIpSubnet"`
	// See **Worker Pools**
	WorkerPools []CseKubernetesClusterWorkerPool `pulumi:"workerPools"`
}

// The set of arguments for constructing a CseKubernetesCluster resource.
type CseKubernetesClusterArgs struct {
	// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
	// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
	// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
	ApiTokenFile pulumi.StringPtrInput
	// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
	// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
	// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
	AutoRepairOnErrors pulumi.BoolPtrInput
	// See **Control Plane**
	ControlPlane CseKubernetesClusterControlPlaneInput
	// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
	// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
	CseVersion pulumi.StringInput
	// See **Default Storage Class**
	DefaultStorageClass CseKubernetesClusterDefaultStorageClassPtrInput
	// The ID of the vApp Template that corresponds to a Kubernetes template OVA
	KubernetesTemplateId pulumi.StringInput
	// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
	// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
	Name pulumi.StringPtrInput
	// The ID of the network that the Kubernetes cluster will use
	NetworkId pulumi.StringInput
	// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
	// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
	NodeHealthCheck pulumi.BoolPtrInput
	// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
	// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
	// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
	// this argument to `0` means to wait indefinitely
	OperationsTimeoutMinutes pulumi.IntPtrInput
	// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
	Org pulumi.StringPtrInput
	// The user that creates the cluster and owns the API token specified in `apiToken`.
	// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
	// If not specified, it assumes it's the user from the provider configuration
	//
	// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
	// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
	// there is an existing issue that prevents the cluster to be created.
	Owner pulumi.StringPtrInput
	// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
	PodsCidr pulumi.StringPtrInput
	// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
	Runtime pulumi.StringPtrInput
	// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
	ServicesCidr pulumi.StringPtrInput
	// The SSH public key used to log in into the cluster nodes
	SshPublicKey pulumi.StringPtrInput
	// The ID of the VDC that hosts the Kubernetes cluster
	VdcId pulumi.StringInput
	// A virtual IP subnet for the cluster
	VirtualIpSubnet pulumi.StringPtrInput
	// See **Worker Pools**
	WorkerPools CseKubernetesClusterWorkerPoolArrayInput
}

func (CseKubernetesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseKubernetesClusterArgs)(nil)).Elem()
}

type CseKubernetesClusterInput interface {
	pulumi.Input

	ToCseKubernetesClusterOutput() CseKubernetesClusterOutput
	ToCseKubernetesClusterOutputWithContext(ctx context.Context) CseKubernetesClusterOutput
}

func (*CseKubernetesCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CseKubernetesCluster)(nil)).Elem()
}

func (i *CseKubernetesCluster) ToCseKubernetesClusterOutput() CseKubernetesClusterOutput {
	return i.ToCseKubernetesClusterOutputWithContext(context.Background())
}

func (i *CseKubernetesCluster) ToCseKubernetesClusterOutputWithContext(ctx context.Context) CseKubernetesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseKubernetesClusterOutput)
}

// CseKubernetesClusterArrayInput is an input type that accepts CseKubernetesClusterArray and CseKubernetesClusterArrayOutput values.
// You can construct a concrete instance of `CseKubernetesClusterArrayInput` via:
//
//	CseKubernetesClusterArray{ CseKubernetesClusterArgs{...} }
type CseKubernetesClusterArrayInput interface {
	pulumi.Input

	ToCseKubernetesClusterArrayOutput() CseKubernetesClusterArrayOutput
	ToCseKubernetesClusterArrayOutputWithContext(context.Context) CseKubernetesClusterArrayOutput
}

type CseKubernetesClusterArray []CseKubernetesClusterInput

func (CseKubernetesClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseKubernetesCluster)(nil)).Elem()
}

func (i CseKubernetesClusterArray) ToCseKubernetesClusterArrayOutput() CseKubernetesClusterArrayOutput {
	return i.ToCseKubernetesClusterArrayOutputWithContext(context.Background())
}

func (i CseKubernetesClusterArray) ToCseKubernetesClusterArrayOutputWithContext(ctx context.Context) CseKubernetesClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseKubernetesClusterArrayOutput)
}

// CseKubernetesClusterMapInput is an input type that accepts CseKubernetesClusterMap and CseKubernetesClusterMapOutput values.
// You can construct a concrete instance of `CseKubernetesClusterMapInput` via:
//
//	CseKubernetesClusterMap{ "key": CseKubernetesClusterArgs{...} }
type CseKubernetesClusterMapInput interface {
	pulumi.Input

	ToCseKubernetesClusterMapOutput() CseKubernetesClusterMapOutput
	ToCseKubernetesClusterMapOutputWithContext(context.Context) CseKubernetesClusterMapOutput
}

type CseKubernetesClusterMap map[string]CseKubernetesClusterInput

func (CseKubernetesClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseKubernetesCluster)(nil)).Elem()
}

func (i CseKubernetesClusterMap) ToCseKubernetesClusterMapOutput() CseKubernetesClusterMapOutput {
	return i.ToCseKubernetesClusterMapOutputWithContext(context.Background())
}

func (i CseKubernetesClusterMap) ToCseKubernetesClusterMapOutputWithContext(ctx context.Context) CseKubernetesClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseKubernetesClusterMapOutput)
}

type CseKubernetesClusterOutput struct{ *pulumi.OutputState }

func (CseKubernetesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseKubernetesCluster)(nil)).Elem()
}

func (o CseKubernetesClusterOutput) ToCseKubernetesClusterOutput() CseKubernetesClusterOutput {
	return o
}

func (o CseKubernetesClusterOutput) ToCseKubernetesClusterOutputWithContext(ctx context.Context) CseKubernetesClusterOutput {
	return o
}

// Must be a file generated by [`ApiToken` resource](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/api_token),
// or a file that follows the same formatting, that stores the API token used to create and manage the cluster,
// owned by the user specified in `owner`. Be careful about this file, as it contains sensitive information
func (o CseKubernetesClusterOutput) ApiTokenFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.ApiTokenFile }).(pulumi.StringPtrOutput)
}

// If errors occur before the Kubernetes cluster becomes available, and this argument is `true`,
// CSE Server will automatically attempt to repair the cluster. Defaults to `false`.
// Since CSE 4.1.1, when the cluster is available/provisioned, this flag is set automatically to false.
func (o CseKubernetesClusterOutput) AutoRepairOnErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.BoolOutput { return v.AutoRepairOnErrors }).(pulumi.BoolOutput)
}

// The version of CAPVCD used by this cluster
func (o CseKubernetesClusterOutput) CapvcdVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.CapvcdVersion }).(pulumi.StringOutput)
}

// The cluster resource set bindings of this cluster
func (o CseKubernetesClusterOutput) ClusterResourceSetBindings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringArrayOutput { return v.ClusterResourceSetBindings }).(pulumi.StringArrayOutput)
}

// See **Control Plane**
func (o CseKubernetesClusterOutput) ControlPlane() CseKubernetesClusterControlPlaneOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) CseKubernetesClusterControlPlaneOutput { return v.ControlPlane }).(CseKubernetesClusterControlPlaneOutput)
}

// The version of the Cloud Provider Interface used by this cluster
func (o CseKubernetesClusterOutput) CpiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.CpiVersion }).(pulumi.StringOutput)
}

// Specifies the CSE version to use. Accepted versions: `4.1.0`, `4.1.1` (also for *4.1.1a*),
// `4.2.0`, `4.2.1`, `4.2.2` (VCD Provider *v3.14.1+*) and `4.2.3` (VCD Provider *v3.14.1+*)
func (o CseKubernetesClusterOutput) CseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.CseVersion }).(pulumi.StringOutput)
}

// The version of the Container Storage Interface used by this cluster
func (o CseKubernetesClusterOutput) CsiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.CsiVersion }).(pulumi.StringOutput)
}

// See **Default Storage Class**
func (o CseKubernetesClusterOutput) DefaultStorageClass() CseKubernetesClusterDefaultStorageClassPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) CseKubernetesClusterDefaultStorageClassPtrOutput {
		return v.DefaultStorageClass
	}).(CseKubernetesClusterDefaultStorageClassPtrOutput)
}

// A set of events that happened during the Kubernetes cluster lifecycle. They're ordered from most recent to least. Each event has:
func (o CseKubernetesClusterOutput) Events() CseKubernetesClusterEventArrayOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) CseKubernetesClusterEventArrayOutput { return v.Events }).(CseKubernetesClusterEventArrayOutput)
}

// The ready-to-use Kubeconfig file **contents** as a raw string. Only available when `state=provisioned`
func (o CseKubernetesClusterOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

// The ID of the vApp Template that corresponds to a Kubernetes template OVA
func (o CseKubernetesClusterOutput) KubernetesTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.KubernetesTemplateId }).(pulumi.StringOutput)
}

// The version of Kubernetes installed in this cluster
func (o CseKubernetesClusterOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// The name of the Kubernetes cluster. It must contain only lowercase alphanumeric characters or "-",
// start with an alphabetic character, end with an alphanumeric, and contain at most 31 characters
func (o CseKubernetesClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the network that the Kubernetes cluster will use
func (o CseKubernetesClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// After the Kubernetes cluster becomes available, nodes that become unhealthy will be
// remediated according to unhealthy node conditions and remediation rules. Defaults to `false`
func (o CseKubernetesClusterOutput) NodeHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.BoolPtrOutput { return v.NodeHealthCheck }).(pulumi.BoolPtrOutput)
}

// The time, in minutes, to wait for the cluster operations to be successfully completed. For example, during cluster
// creation, it should be in `provisioned`state before the timeout is reached, otherwise the operation will return an
// error. For cluster deletion, this timeoutspecifies the time to wait until the cluster is completely deleted. Setting
// this argument to `0` means to wait indefinitely
func (o CseKubernetesClusterOutput) OperationsTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.IntPtrOutput { return v.OperationsTimeoutMinutes }).(pulumi.IntPtrOutput)
}

// The name of organization that will host the Kubernetes cluster, optional if defined in the provider configuration
func (o CseKubernetesClusterOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// The user that creates the cluster and owns the API token specified in `apiToken`.
// It must have the `Kubernetes Cluster Author` role that was created during CSE installation.
// If not specified, it assumes it's the user from the provider configuration
//
// > Versions 4.2.2 and 4.2.3 should not use the System administrator for the `owner` nor `apiTokenFile`, as stated in their
// [release notes](https://docs.vmware.com/en/VMware-Cloud-Director-Container-Service-Extension/4.2.2/rn/vmware-cloud-director-container-service-extension-422-release-notes/index.html#Known%20Issues),
// there is an existing issue that prevents the cluster to be created.
func (o CseKubernetesClusterOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.Owner }).(pulumi.StringPtrOutput)
}

// A CIDR block for the pods to use. Defaults to `100.96.0.0/11`
func (o CseKubernetesClusterOutput) PodsCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.PodsCidr }).(pulumi.StringPtrOutput)
}

// Specifies the Kubernetes runtime to use. Defaults to `tkg` (Tanzu Kubernetes Grid)
func (o CseKubernetesClusterOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.Runtime }).(pulumi.StringPtrOutput)
}

// A CIDR block for the services to use. Defaults to `100.64.0.0/13`
func (o CseKubernetesClusterOutput) ServicesCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.ServicesCidr }).(pulumi.StringPtrOutput)
}

// The SSH public key used to log in into the cluster nodes
func (o CseKubernetesClusterOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.SshPublicKey }).(pulumi.StringPtrOutput)
}

// The Kubernetes cluster status, can be `provisioning` when it is being created, `provisioned` when it was successfully
// created and ready to use, or `error` when an error occurred. `provisioning` can only be obtained when a timeout happens during
// cluster creation. `error` can only be obtained either with a timeout or when `auto_repair_on_errors=false`.
func (o CseKubernetesClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A set of vApp Template names that can be fetched with a
// [`CatalogVappTemplate` data source](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) to upgrade the cluster.
func (o CseKubernetesClusterOutput) SupportedUpgrades() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringArrayOutput { return v.SupportedUpgrades }).(pulumi.StringArrayOutput)
}

// The version of TKG installed in this cluster
func (o CseKubernetesClusterOutput) TkgProductVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.TkgProductVersion }).(pulumi.StringOutput)
}

// The ID of the VDC that hosts the Kubernetes cluster
func (o CseKubernetesClusterOutput) VdcId() pulumi.StringOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringOutput { return v.VdcId }).(pulumi.StringOutput)
}

// A virtual IP subnet for the cluster
func (o CseKubernetesClusterOutput) VirtualIpSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) pulumi.StringPtrOutput { return v.VirtualIpSubnet }).(pulumi.StringPtrOutput)
}

// See **Worker Pools**
func (o CseKubernetesClusterOutput) WorkerPools() CseKubernetesClusterWorkerPoolArrayOutput {
	return o.ApplyT(func(v *CseKubernetesCluster) CseKubernetesClusterWorkerPoolArrayOutput { return v.WorkerPools }).(CseKubernetesClusterWorkerPoolArrayOutput)
}

type CseKubernetesClusterArrayOutput struct{ *pulumi.OutputState }

func (CseKubernetesClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseKubernetesCluster)(nil)).Elem()
}

func (o CseKubernetesClusterArrayOutput) ToCseKubernetesClusterArrayOutput() CseKubernetesClusterArrayOutput {
	return o
}

func (o CseKubernetesClusterArrayOutput) ToCseKubernetesClusterArrayOutputWithContext(ctx context.Context) CseKubernetesClusterArrayOutput {
	return o
}

func (o CseKubernetesClusterArrayOutput) Index(i pulumi.IntInput) CseKubernetesClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseKubernetesCluster {
		return vs[0].([]*CseKubernetesCluster)[vs[1].(int)]
	}).(CseKubernetesClusterOutput)
}

type CseKubernetesClusterMapOutput struct{ *pulumi.OutputState }

func (CseKubernetesClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseKubernetesCluster)(nil)).Elem()
}

func (o CseKubernetesClusterMapOutput) ToCseKubernetesClusterMapOutput() CseKubernetesClusterMapOutput {
	return o
}

func (o CseKubernetesClusterMapOutput) ToCseKubernetesClusterMapOutputWithContext(ctx context.Context) CseKubernetesClusterMapOutput {
	return o
}

func (o CseKubernetesClusterMapOutput) MapIndex(k pulumi.StringInput) CseKubernetesClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseKubernetesCluster {
		return vs[0].(map[string]*CseKubernetesCluster)[vs[1].(string)]
	}).(CseKubernetesClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseKubernetesClusterInput)(nil)).Elem(), &CseKubernetesCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseKubernetesClusterArrayInput)(nil)).Elem(), CseKubernetesClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseKubernetesClusterMapInput)(nil)).Elem(), CseKubernetesClusterMap{})
	pulumi.RegisterOutputType(CseKubernetesClusterOutput{})
	pulumi.RegisterOutputType(CseKubernetesClusterArrayOutput{})
	pulumi.RegisterOutputType(CseKubernetesClusterMapOutput{})
}
