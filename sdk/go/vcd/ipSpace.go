// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpSpace struct {
	pulumi.CustomResourceState

	// Defines whether
	// default firewall rule creation should be enabled
	DefaultFirewallRuleCreationEnabled pulumi.BoolPtrOutput `pulumi:"defaultFirewallRuleCreationEnabled"`
	// Defines whether NO SNAT
	// rule creation should be enabled
	DefaultNoSnatRuleCreationEnabled pulumi.BoolPtrOutput `pulumi:"defaultNoSnatRuleCreationEnabled"`
	// Defines whether SNAT rule
	// creation should be enabled
	//
	// <a id="ipspace-ip-range"></a>
	DefaultSnatRuleCreationEnabled pulumi.BoolPtrOutput `pulumi:"defaultSnatRuleCreationEnabled"`
	// Description of IP Space
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The external scope defines the total span of IP addresses to which the IP
	// space has access, for example the internet or a WAN.
	ExternalScope pulumi.StringPtrOutput `pulumi:"externalScope"`
	// The internal scope of an IP space is a list of CIDR notations that
	// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
	InternalScopes pulumi.StringArrayOutput `pulumi:"internalScopes"`
	// One or more IP prefixes (blocks) ip_prefix
	IpPrefixes IpSpaceIpPrefixArrayOutput `pulumi:"ipPrefixes"`
	// If you entered at least one IP Range
	// (ip_range), enter a number of floating IP addresses to allocate individually.
	// `-1` is unlimited, while `0` means that no IPs can be allocated.
	IpRangeQuota pulumi.StringOutput `pulumi:"ipRangeQuota"`
	// One or more ipRange for floating IP address
	// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
	IpRanges IpSpaceIpRangeArrayOutput `pulumi:"ipRanges"`
	// A name for IP Space
	Name pulumi.StringOutput `pulumi:"name"`
	// Required for `PRIVATE` type
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Toggle on the route advertisement option to
	// enable advertising networks with IP prefixes from this IP space (default `false`)
	RouteAdvertisementEnabled pulumi.BoolPtrOutput `pulumi:"routeAdvertisementEnabled"`
	// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
	// * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
	//   provider* through a quota-based system.
	// * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
	//   tenant space, but as a service provider, you don't want to expose it to organizations in your
	//   environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
	// * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
	//   only one organization that is specified during the space creation. For this organization, IP
	//   consumption is unlimited.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIpSpace registers a new resource with the given unique name, arguments, and options.
func NewIpSpace(ctx *pulumi.Context,
	name string, args *IpSpaceArgs, opts ...pulumi.ResourceOption) (*IpSpace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InternalScopes == nil {
		return nil, errors.New("invalid value for required argument 'InternalScopes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpSpace
	err := ctx.RegisterResource("vcd:index/ipSpace:IpSpace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSpace gets an existing IpSpace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSpace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSpaceState, opts ...pulumi.ResourceOption) (*IpSpace, error) {
	var resource IpSpace
	err := ctx.ReadResource("vcd:index/ipSpace:IpSpace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSpace resources.
type ipSpaceState struct {
	// Defines whether
	// default firewall rule creation should be enabled
	DefaultFirewallRuleCreationEnabled *bool `pulumi:"defaultFirewallRuleCreationEnabled"`
	// Defines whether NO SNAT
	// rule creation should be enabled
	DefaultNoSnatRuleCreationEnabled *bool `pulumi:"defaultNoSnatRuleCreationEnabled"`
	// Defines whether SNAT rule
	// creation should be enabled
	//
	// <a id="ipspace-ip-range"></a>
	DefaultSnatRuleCreationEnabled *bool `pulumi:"defaultSnatRuleCreationEnabled"`
	// Description of IP Space
	Description *string `pulumi:"description"`
	// The external scope defines the total span of IP addresses to which the IP
	// space has access, for example the internet or a WAN.
	ExternalScope *string `pulumi:"externalScope"`
	// The internal scope of an IP space is a list of CIDR notations that
	// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
	InternalScopes []string `pulumi:"internalScopes"`
	// One or more IP prefixes (blocks) ip_prefix
	IpPrefixes []IpSpaceIpPrefix `pulumi:"ipPrefixes"`
	// If you entered at least one IP Range
	// (ip_range), enter a number of floating IP addresses to allocate individually.
	// `-1` is unlimited, while `0` means that no IPs can be allocated.
	IpRangeQuota *string `pulumi:"ipRangeQuota"`
	// One or more ipRange for floating IP address
	// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
	IpRanges []IpSpaceIpRange `pulumi:"ipRanges"`
	// A name for IP Space
	Name *string `pulumi:"name"`
	// Required for `PRIVATE` type
	OrgId *string `pulumi:"orgId"`
	// Toggle on the route advertisement option to
	// enable advertising networks with IP prefixes from this IP space (default `false`)
	RouteAdvertisementEnabled *bool `pulumi:"routeAdvertisementEnabled"`
	// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
	// * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
	//   provider* through a quota-based system.
	// * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
	//   tenant space, but as a service provider, you don't want to expose it to organizations in your
	//   environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
	// * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
	//   only one organization that is specified during the space creation. For this organization, IP
	//   consumption is unlimited.
	Type *string `pulumi:"type"`
}

type IpSpaceState struct {
	// Defines whether
	// default firewall rule creation should be enabled
	DefaultFirewallRuleCreationEnabled pulumi.BoolPtrInput
	// Defines whether NO SNAT
	// rule creation should be enabled
	DefaultNoSnatRuleCreationEnabled pulumi.BoolPtrInput
	// Defines whether SNAT rule
	// creation should be enabled
	//
	// <a id="ipspace-ip-range"></a>
	DefaultSnatRuleCreationEnabled pulumi.BoolPtrInput
	// Description of IP Space
	Description pulumi.StringPtrInput
	// The external scope defines the total span of IP addresses to which the IP
	// space has access, for example the internet or a WAN.
	ExternalScope pulumi.StringPtrInput
	// The internal scope of an IP space is a list of CIDR notations that
	// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
	InternalScopes pulumi.StringArrayInput
	// One or more IP prefixes (blocks) ip_prefix
	IpPrefixes IpSpaceIpPrefixArrayInput
	// If you entered at least one IP Range
	// (ip_range), enter a number of floating IP addresses to allocate individually.
	// `-1` is unlimited, while `0` means that no IPs can be allocated.
	IpRangeQuota pulumi.StringPtrInput
	// One or more ipRange for floating IP address
	// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
	IpRanges IpSpaceIpRangeArrayInput
	// A name for IP Space
	Name pulumi.StringPtrInput
	// Required for `PRIVATE` type
	OrgId pulumi.StringPtrInput
	// Toggle on the route advertisement option to
	// enable advertising networks with IP prefixes from this IP space (default `false`)
	RouteAdvertisementEnabled pulumi.BoolPtrInput
	// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
	// * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
	//   provider* through a quota-based system.
	// * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
	//   tenant space, but as a service provider, you don't want to expose it to organizations in your
	//   environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
	// * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
	//   only one organization that is specified during the space creation. For this organization, IP
	//   consumption is unlimited.
	Type pulumi.StringPtrInput
}

func (IpSpaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceState)(nil)).Elem()
}

type ipSpaceArgs struct {
	// Defines whether
	// default firewall rule creation should be enabled
	DefaultFirewallRuleCreationEnabled *bool `pulumi:"defaultFirewallRuleCreationEnabled"`
	// Defines whether NO SNAT
	// rule creation should be enabled
	DefaultNoSnatRuleCreationEnabled *bool `pulumi:"defaultNoSnatRuleCreationEnabled"`
	// Defines whether SNAT rule
	// creation should be enabled
	//
	// <a id="ipspace-ip-range"></a>
	DefaultSnatRuleCreationEnabled *bool `pulumi:"defaultSnatRuleCreationEnabled"`
	// Description of IP Space
	Description *string `pulumi:"description"`
	// The external scope defines the total span of IP addresses to which the IP
	// space has access, for example the internet or a WAN.
	ExternalScope *string `pulumi:"externalScope"`
	// The internal scope of an IP space is a list of CIDR notations that
	// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
	InternalScopes []string `pulumi:"internalScopes"`
	// One or more IP prefixes (blocks) ip_prefix
	IpPrefixes []IpSpaceIpPrefix `pulumi:"ipPrefixes"`
	// If you entered at least one IP Range
	// (ip_range), enter a number of floating IP addresses to allocate individually.
	// `-1` is unlimited, while `0` means that no IPs can be allocated.
	IpRangeQuota *string `pulumi:"ipRangeQuota"`
	// One or more ipRange for floating IP address
	// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
	IpRanges []IpSpaceIpRange `pulumi:"ipRanges"`
	// A name for IP Space
	Name *string `pulumi:"name"`
	// Required for `PRIVATE` type
	OrgId *string `pulumi:"orgId"`
	// Toggle on the route advertisement option to
	// enable advertising networks with IP prefixes from this IP space (default `false`)
	RouteAdvertisementEnabled *bool `pulumi:"routeAdvertisementEnabled"`
	// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
	// * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
	//   provider* through a quota-based system.
	// * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
	//   tenant space, but as a service provider, you don't want to expose it to organizations in your
	//   environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
	// * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
	//   only one organization that is specified during the space creation. For this organization, IP
	//   consumption is unlimited.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a IpSpace resource.
type IpSpaceArgs struct {
	// Defines whether
	// default firewall rule creation should be enabled
	DefaultFirewallRuleCreationEnabled pulumi.BoolPtrInput
	// Defines whether NO SNAT
	// rule creation should be enabled
	DefaultNoSnatRuleCreationEnabled pulumi.BoolPtrInput
	// Defines whether SNAT rule
	// creation should be enabled
	//
	// <a id="ipspace-ip-range"></a>
	DefaultSnatRuleCreationEnabled pulumi.BoolPtrInput
	// Description of IP Space
	Description pulumi.StringPtrInput
	// The external scope defines the total span of IP addresses to which the IP
	// space has access, for example the internet or a WAN.
	ExternalScope pulumi.StringPtrInput
	// The internal scope of an IP space is a list of CIDR notations that
	// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
	InternalScopes pulumi.StringArrayInput
	// One or more IP prefixes (blocks) ip_prefix
	IpPrefixes IpSpaceIpPrefixArrayInput
	// If you entered at least one IP Range
	// (ip_range), enter a number of floating IP addresses to allocate individually.
	// `-1` is unlimited, while `0` means that no IPs can be allocated.
	IpRangeQuota pulumi.StringPtrInput
	// One or more ipRange for floating IP address
	// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
	IpRanges IpSpaceIpRangeArrayInput
	// A name for IP Space
	Name pulumi.StringPtrInput
	// Required for `PRIVATE` type
	OrgId pulumi.StringPtrInput
	// Toggle on the route advertisement option to
	// enable advertising networks with IP prefixes from this IP space (default `false`)
	RouteAdvertisementEnabled pulumi.BoolPtrInput
	// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
	// * `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
	//   provider* through a quota-based system.
	// * `SHARED_SERVICES` - An IP space for services and management networks that are required in the
	//   tenant space, but as a service provider, you don't want to expose it to organizations in your
	//   environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
	// * `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
	//   only one organization that is specified during the space creation. For this organization, IP
	//   consumption is unlimited.
	Type pulumi.StringInput
}

func (IpSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceArgs)(nil)).Elem()
}

type IpSpaceInput interface {
	pulumi.Input

	ToIpSpaceOutput() IpSpaceOutput
	ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput
}

func (*IpSpace) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpace)(nil)).Elem()
}

func (i *IpSpace) ToIpSpaceOutput() IpSpaceOutput {
	return i.ToIpSpaceOutputWithContext(context.Background())
}

func (i *IpSpace) ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceOutput)
}

// IpSpaceArrayInput is an input type that accepts IpSpaceArray and IpSpaceArrayOutput values.
// You can construct a concrete instance of `IpSpaceArrayInput` via:
//
//	IpSpaceArray{ IpSpaceArgs{...} }
type IpSpaceArrayInput interface {
	pulumi.Input

	ToIpSpaceArrayOutput() IpSpaceArrayOutput
	ToIpSpaceArrayOutputWithContext(context.Context) IpSpaceArrayOutput
}

type IpSpaceArray []IpSpaceInput

func (IpSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpace)(nil)).Elem()
}

func (i IpSpaceArray) ToIpSpaceArrayOutput() IpSpaceArrayOutput {
	return i.ToIpSpaceArrayOutputWithContext(context.Background())
}

func (i IpSpaceArray) ToIpSpaceArrayOutputWithContext(ctx context.Context) IpSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceArrayOutput)
}

// IpSpaceMapInput is an input type that accepts IpSpaceMap and IpSpaceMapOutput values.
// You can construct a concrete instance of `IpSpaceMapInput` via:
//
//	IpSpaceMap{ "key": IpSpaceArgs{...} }
type IpSpaceMapInput interface {
	pulumi.Input

	ToIpSpaceMapOutput() IpSpaceMapOutput
	ToIpSpaceMapOutputWithContext(context.Context) IpSpaceMapOutput
}

type IpSpaceMap map[string]IpSpaceInput

func (IpSpaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpace)(nil)).Elem()
}

func (i IpSpaceMap) ToIpSpaceMapOutput() IpSpaceMapOutput {
	return i.ToIpSpaceMapOutputWithContext(context.Background())
}

func (i IpSpaceMap) ToIpSpaceMapOutputWithContext(ctx context.Context) IpSpaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceMapOutput)
}

type IpSpaceOutput struct{ *pulumi.OutputState }

func (IpSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpace)(nil)).Elem()
}

func (o IpSpaceOutput) ToIpSpaceOutput() IpSpaceOutput {
	return o
}

func (o IpSpaceOutput) ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput {
	return o
}

// Defines whether
// default firewall rule creation should be enabled
func (o IpSpaceOutput) DefaultFirewallRuleCreationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.BoolPtrOutput { return v.DefaultFirewallRuleCreationEnabled }).(pulumi.BoolPtrOutput)
}

// Defines whether NO SNAT
// rule creation should be enabled
func (o IpSpaceOutput) DefaultNoSnatRuleCreationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.BoolPtrOutput { return v.DefaultNoSnatRuleCreationEnabled }).(pulumi.BoolPtrOutput)
}

// Defines whether SNAT rule
// creation should be enabled
//
// <a id="ipspace-ip-range"></a>
func (o IpSpaceOutput) DefaultSnatRuleCreationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.BoolPtrOutput { return v.DefaultSnatRuleCreationEnabled }).(pulumi.BoolPtrOutput)
}

// Description of IP Space
func (o IpSpaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The external scope defines the total span of IP addresses to which the IP
// space has access, for example the internet or a WAN.
func (o IpSpaceOutput) ExternalScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringPtrOutput { return v.ExternalScope }).(pulumi.StringPtrOutput)
}

// The internal scope of an IP space is a list of CIDR notations that
// defines the exact span of IP addresses in which all ranges and blocks must be contained in.
func (o IpSpaceOutput) InternalScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringArrayOutput { return v.InternalScopes }).(pulumi.StringArrayOutput)
}

// One or more IP prefixes (blocks) ip_prefix
func (o IpSpaceOutput) IpPrefixes() IpSpaceIpPrefixArrayOutput {
	return o.ApplyT(func(v *IpSpace) IpSpaceIpPrefixArrayOutput { return v.IpPrefixes }).(IpSpaceIpPrefixArrayOutput)
}

// If you entered at least one IP Range
// (ip_range), enter a number of floating IP addresses to allocate individually.
// `-1` is unlimited, while `0` means that no IPs can be allocated.
func (o IpSpaceOutput) IpRangeQuota() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringOutput { return v.IpRangeQuota }).(pulumi.StringOutput)
}

// One or more ipRange for floating IP address
// allocation. (Floating IP addresses are just IP addresses taken from the defined range)
func (o IpSpaceOutput) IpRanges() IpSpaceIpRangeArrayOutput {
	return o.ApplyT(func(v *IpSpace) IpSpaceIpRangeArrayOutput { return v.IpRanges }).(IpSpaceIpRangeArrayOutput)
}

// A name for IP Space
func (o IpSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required for `PRIVATE` type
func (o IpSpaceOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Toggle on the route advertisement option to
// enable advertising networks with IP prefixes from this IP space (default `false`)
func (o IpSpaceOutput) RouteAdvertisementEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.BoolPtrOutput { return v.RouteAdvertisementEnabled }).(pulumi.BoolPtrOutput)
}

// One of `PUBLIC`, `SHARED_SERVICES`, `PRIVATE`
//   - `PUBLIC` - A public IP space is *used by multiple organizations* and is *controlled by the service
//     provider* through a quota-based system.
//   - `SHARED_SERVICES` - An IP space for services and management networks that are required in the
//     tenant space, but as a service provider, you don't want to expose it to organizations in your
//     environment. The main difference from `PUBLIC` network is that IPs cannot be allocated by tenants.
//   - `PRIVATE` - Private IP spaces are dedicated to a single tenant - a private IP space is used by
//     only one organization that is specified during the space creation. For this organization, IP
//     consumption is unlimited.
func (o IpSpaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IpSpaceArrayOutput struct{ *pulumi.OutputState }

func (IpSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpace)(nil)).Elem()
}

func (o IpSpaceArrayOutput) ToIpSpaceArrayOutput() IpSpaceArrayOutput {
	return o
}

func (o IpSpaceArrayOutput) ToIpSpaceArrayOutputWithContext(ctx context.Context) IpSpaceArrayOutput {
	return o
}

func (o IpSpaceArrayOutput) Index(i pulumi.IntInput) IpSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpSpace {
		return vs[0].([]*IpSpace)[vs[1].(int)]
	}).(IpSpaceOutput)
}

type IpSpaceMapOutput struct{ *pulumi.OutputState }

func (IpSpaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpace)(nil)).Elem()
}

func (o IpSpaceMapOutput) ToIpSpaceMapOutput() IpSpaceMapOutput {
	return o
}

func (o IpSpaceMapOutput) ToIpSpaceMapOutputWithContext(ctx context.Context) IpSpaceMapOutput {
	return o
}

func (o IpSpaceMapOutput) MapIndex(k pulumi.StringInput) IpSpaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpSpace {
		return vs[0].(map[string]*IpSpace)[vs[1].(string)]
	}).(IpSpaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceInput)(nil)).Elem(), &IpSpace{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceArrayInput)(nil)).Elem(), IpSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceMapInput)(nil)).Elem(), IpSpaceMap{})
	pulumi.RegisterOutputType(IpSpaceOutput{})
	pulumi.RegisterOutputType(IpSpaceArrayOutput{})
	pulumi.RegisterOutputType(IpSpaceMapOutput{})
}
