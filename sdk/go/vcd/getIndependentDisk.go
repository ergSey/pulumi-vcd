// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its
// data within other resources or data sources.
//
// Supported in provider *v2.5+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			existing_disk, err := vcd.LookupIndependentDisk(ctx, &vcd.LookupIndependentDiskArgs{
//				Org:  pulumi.StringRef("my-org"),
//				Vdc:  pulumi.StringRef("my-vdc"),
//				Id:   pulumi.StringRef("urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e"),
//				Name: pulumi.StringRef("my-disk"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("disk-iops", existing_disk.Iops)
//			ctx.Export("typeIsAttached", existing_disk.IsAttached)
//			return nil
//		})
//	}
//
// ```
func LookupIndependentDisk(ctx *pulumi.Context, args *LookupIndependentDiskArgs, opts ...pulumi.InvokeOption) (*LookupIndependentDiskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIndependentDiskResult
	err := ctx.Invoke("vcd:index/getIndependentDisk:getIndependentDisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIndependentDisk.
type LookupIndependentDiskArgs struct {
	// Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
	Id *string `pulumi:"id"`
	// Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getIndependentDisk.
type LookupIndependentDiskResult struct {
	AttachedVmIds []string `pulumi:"attachedVmIds"`
	BusSubType    string   `pulumi:"busSubType"`
	BusType       string   `pulumi:"busType"`
	DatastoreName string   `pulumi:"datastoreName"`
	Description   string   `pulumi:"description"`
	Encrypted     bool     `pulumi:"encrypted"`
	Id            *string  `pulumi:"id"`
	Iops          int      `pulumi:"iops"`
	IsAttached    bool     `pulumi:"isAttached"`
	// Deprecated: Use metadataEntry instead
	Metadata        map[string]string                 `pulumi:"metadata"`
	MetadataEntries []GetIndependentDiskMetadataEntry `pulumi:"metadataEntries"`
	Name            *string                           `pulumi:"name"`
	Org             *string                           `pulumi:"org"`
	OwnerName       string                            `pulumi:"ownerName"`
	SharingType     string                            `pulumi:"sharingType"`
	SizeInMb        int                               `pulumi:"sizeInMb"`
	StorageProfile  string                            `pulumi:"storageProfile"`
	Uuid            string                            `pulumi:"uuid"`
	Vdc             *string                           `pulumi:"vdc"`
}

func LookupIndependentDiskOutput(ctx *pulumi.Context, args LookupIndependentDiskOutputArgs, opts ...pulumi.InvokeOption) LookupIndependentDiskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIndependentDiskResultOutput, error) {
			args := v.(LookupIndependentDiskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getIndependentDisk:getIndependentDisk", args, LookupIndependentDiskResultOutput{}, options).(LookupIndependentDiskResultOutput), nil
		}).(LookupIndependentDiskResultOutput)
}

// A collection of arguments for invoking getIndependentDisk.
type LookupIndependentDiskOutputArgs struct {
	// Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (LookupIndependentDiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndependentDiskArgs)(nil)).Elem()
}

// A collection of values returned by getIndependentDisk.
type LookupIndependentDiskResultOutput struct{ *pulumi.OutputState }

func (LookupIndependentDiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndependentDiskResult)(nil)).Elem()
}

func (o LookupIndependentDiskResultOutput) ToLookupIndependentDiskResultOutput() LookupIndependentDiskResultOutput {
	return o
}

func (o LookupIndependentDiskResultOutput) ToLookupIndependentDiskResultOutputWithContext(ctx context.Context) LookupIndependentDiskResultOutput {
	return o
}

func (o LookupIndependentDiskResultOutput) AttachedVmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) []string { return v.AttachedVmIds }).(pulumi.StringArrayOutput)
}

func (o LookupIndependentDiskResultOutput) BusSubType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.BusSubType }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) BusType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.BusType }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) DatastoreName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.DatastoreName }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o LookupIndependentDiskResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupIndependentDiskResultOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) int { return v.Iops }).(pulumi.IntOutput)
}

func (o LookupIndependentDiskResultOutput) IsAttached() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) bool { return v.IsAttached }).(pulumi.BoolOutput)
}

// Deprecated: Use metadataEntry instead
func (o LookupIndependentDiskResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o LookupIndependentDiskResultOutput) MetadataEntries() GetIndependentDiskMetadataEntryArrayOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) []GetIndependentDiskMetadataEntry { return v.MetadataEntries }).(GetIndependentDiskMetadataEntryArrayOutput)
}

func (o LookupIndependentDiskResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupIndependentDiskResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o LookupIndependentDiskResultOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.OwnerName }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) SharingType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.SharingType }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) SizeInMb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) int { return v.SizeInMb }).(pulumi.IntOutput)
}

func (o LookupIndependentDiskResultOutput) StorageProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.StorageProfile }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func (o LookupIndependentDiskResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndependentDiskResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIndependentDiskResultOutput{})
}
