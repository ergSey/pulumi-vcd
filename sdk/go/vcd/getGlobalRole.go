// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director global role data source. This can be used to read global roles.
//
// Supported in provider *v3.3+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupGlobalRole(ctx, &vcd.LookupGlobalRoleArgs{
//				Name: "vApp Author",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## More information
//
// See [Roles management](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/roles_management) for a broader description of how global roles and
// rights work together.
func LookupGlobalRole(ctx *pulumi.Context, args *LookupGlobalRoleArgs, opts ...pulumi.InvokeOption) (*LookupGlobalRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGlobalRoleResult
	err := ctx.Invoke("vcd:index/getGlobalRole:getGlobalRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGlobalRole.
type LookupGlobalRoleArgs struct {
	// The name of the global role.
	Name string `pulumi:"name"`
}

// A collection of values returned by getGlobalRole.
type LookupGlobalRoleResult struct {
	// Key used for internationalization.
	BundleKey string `pulumi:"bundleKey"`
	// A description of the global role
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// When true, publishes the global role to all tenants
	PublishToAllTenants bool `pulumi:"publishToAllTenants"`
	// Whether this global role is read-only
	ReadOnly bool `pulumi:"readOnly"`
	// List of rights assigned to this role
	Rights []string `pulumi:"rights"`
	// List of tenants to which this global role gets published. Ignored if `publishToAllTenants` is true.
	Tenants []string `pulumi:"tenants"`
}

func LookupGlobalRoleOutput(ctx *pulumi.Context, args LookupGlobalRoleOutputArgs, opts ...pulumi.InvokeOption) LookupGlobalRoleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGlobalRoleResultOutput, error) {
			args := v.(LookupGlobalRoleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getGlobalRole:getGlobalRole", args, LookupGlobalRoleResultOutput{}, options).(LookupGlobalRoleResultOutput), nil
		}).(LookupGlobalRoleResultOutput)
}

// A collection of arguments for invoking getGlobalRole.
type LookupGlobalRoleOutputArgs struct {
	// The name of the global role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupGlobalRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlobalRoleArgs)(nil)).Elem()
}

// A collection of values returned by getGlobalRole.
type LookupGlobalRoleResultOutput struct{ *pulumi.OutputState }

func (LookupGlobalRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlobalRoleResult)(nil)).Elem()
}

func (o LookupGlobalRoleResultOutput) ToLookupGlobalRoleResultOutput() LookupGlobalRoleResultOutput {
	return o
}

func (o LookupGlobalRoleResultOutput) ToLookupGlobalRoleResultOutputWithContext(ctx context.Context) LookupGlobalRoleResultOutput {
	return o
}

// Key used for internationalization.
func (o LookupGlobalRoleResultOutput) BundleKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) string { return v.BundleKey }).(pulumi.StringOutput)
}

// A description of the global role
func (o LookupGlobalRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGlobalRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGlobalRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// When true, publishes the global role to all tenants
func (o LookupGlobalRoleResultOutput) PublishToAllTenants() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) bool { return v.PublishToAllTenants }).(pulumi.BoolOutput)
}

// Whether this global role is read-only
func (o LookupGlobalRoleResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// List of rights assigned to this role
func (o LookupGlobalRoleResultOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

// List of tenants to which this global role gets published. Ignored if `publishToAllTenants` is true.
func (o LookupGlobalRoleResultOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGlobalRoleResult) []string { return v.Tenants }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGlobalRoleResultOutput{})
}
