// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DseRegistryConfiguration struct {
	pulumi.CustomResourceState

	// Chart repository for Helm based images
	ChartRepository pulumi.StringOutput `pulumi:"chartRepository"`
	// A set of version constrains that this Data Solution defines
	CompatibleVersionConstraints pulumi.StringArrayOutput `pulumi:"compatibleVersionConstraints"`
	// Only applies to `VCD Data Solutions` configuration. Specifies
	// credentials that can be used to authenticate to repositories. See Container Registry
	// Configuration
	//
	// <a id="container-registry"></a>
	ContainerRegistries DseRegistryConfigurationContainerRegistryArrayOutput `pulumi:"containerRegistries"`
	// Default chart repository as provided by Data Solution
	DefaultChartRepository pulumi.StringOutput `pulumi:"defaultChartRepository"`
	// Default package name as provided by Data Solution
	DefaultPackageName pulumi.StringOutput `pulumi:"defaultPackageName"`
	// Default container repository as provided by Data Solution
	DefaultRepository pulumi.StringOutput `pulumi:"defaultRepository"`
	// Default package version as provided by Data Solution
	DefaultVersion pulumi.StringOutput `pulumi:"defaultVersion"`
	// The name of Data Solution as it appears in repository configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// Helm package name. Only for Helm based images
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// Package repository for container based images
	PackageRepository pulumi.StringOutput `pulumi:"packageRepository"`
	// State of parent Runtime Defined Entity (RDE)
	RdeState pulumi.StringOutput `pulumi:"rdeState"`
	// Boolean flag as defined in Data Solution
	RequiresVersionCompatibility pulumi.BoolOutput `pulumi:"requiresVersionCompatibility"`
	// Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
	Type pulumi.StringOutput `pulumi:"type"`
	// Defines if repository settings should be inherited from Data
	// Solution itself. Default `false`
	UseDefaultValues pulumi.BoolPtrOutput `pulumi:"useDefaultValues"`
	// Version of package to use. Required when `useDefaultValues` is not used.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDseRegistryConfiguration registers a new resource with the given unique name, arguments, and options.
func NewDseRegistryConfiguration(ctx *pulumi.Context,
	name string, args *DseRegistryConfigurationArgs, opts ...pulumi.ResourceOption) (*DseRegistryConfiguration, error) {
	if args == nil {
		args = &DseRegistryConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DseRegistryConfiguration
	err := ctx.RegisterResource("vcd:index/dseRegistryConfiguration:DseRegistryConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDseRegistryConfiguration gets an existing DseRegistryConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDseRegistryConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DseRegistryConfigurationState, opts ...pulumi.ResourceOption) (*DseRegistryConfiguration, error) {
	var resource DseRegistryConfiguration
	err := ctx.ReadResource("vcd:index/dseRegistryConfiguration:DseRegistryConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DseRegistryConfiguration resources.
type dseRegistryConfigurationState struct {
	// Chart repository for Helm based images
	ChartRepository *string `pulumi:"chartRepository"`
	// A set of version constrains that this Data Solution defines
	CompatibleVersionConstraints []string `pulumi:"compatibleVersionConstraints"`
	// Only applies to `VCD Data Solutions` configuration. Specifies
	// credentials that can be used to authenticate to repositories. See Container Registry
	// Configuration
	//
	// <a id="container-registry"></a>
	ContainerRegistries []DseRegistryConfigurationContainerRegistry `pulumi:"containerRegistries"`
	// Default chart repository as provided by Data Solution
	DefaultChartRepository *string `pulumi:"defaultChartRepository"`
	// Default package name as provided by Data Solution
	DefaultPackageName *string `pulumi:"defaultPackageName"`
	// Default container repository as provided by Data Solution
	DefaultRepository *string `pulumi:"defaultRepository"`
	// Default package version as provided by Data Solution
	DefaultVersion *string `pulumi:"defaultVersion"`
	// The name of Data Solution as it appears in repository configuration
	Name *string `pulumi:"name"`
	// Helm package name. Only for Helm based images
	PackageName *string `pulumi:"packageName"`
	// Package repository for container based images
	PackageRepository *string `pulumi:"packageRepository"`
	// State of parent Runtime Defined Entity (RDE)
	RdeState *string `pulumi:"rdeState"`
	// Boolean flag as defined in Data Solution
	RequiresVersionCompatibility *bool `pulumi:"requiresVersionCompatibility"`
	// Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
	Type *string `pulumi:"type"`
	// Defines if repository settings should be inherited from Data
	// Solution itself. Default `false`
	UseDefaultValues *bool `pulumi:"useDefaultValues"`
	// Version of package to use. Required when `useDefaultValues` is not used.
	Version *string `pulumi:"version"`
}

type DseRegistryConfigurationState struct {
	// Chart repository for Helm based images
	ChartRepository pulumi.StringPtrInput
	// A set of version constrains that this Data Solution defines
	CompatibleVersionConstraints pulumi.StringArrayInput
	// Only applies to `VCD Data Solutions` configuration. Specifies
	// credentials that can be used to authenticate to repositories. See Container Registry
	// Configuration
	//
	// <a id="container-registry"></a>
	ContainerRegistries DseRegistryConfigurationContainerRegistryArrayInput
	// Default chart repository as provided by Data Solution
	DefaultChartRepository pulumi.StringPtrInput
	// Default package name as provided by Data Solution
	DefaultPackageName pulumi.StringPtrInput
	// Default container repository as provided by Data Solution
	DefaultRepository pulumi.StringPtrInput
	// Default package version as provided by Data Solution
	DefaultVersion pulumi.StringPtrInput
	// The name of Data Solution as it appears in repository configuration
	Name pulumi.StringPtrInput
	// Helm package name. Only for Helm based images
	PackageName pulumi.StringPtrInput
	// Package repository for container based images
	PackageRepository pulumi.StringPtrInput
	// State of parent Runtime Defined Entity (RDE)
	RdeState pulumi.StringPtrInput
	// Boolean flag as defined in Data Solution
	RequiresVersionCompatibility pulumi.BoolPtrInput
	// Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
	Type pulumi.StringPtrInput
	// Defines if repository settings should be inherited from Data
	// Solution itself. Default `false`
	UseDefaultValues pulumi.BoolPtrInput
	// Version of package to use. Required when `useDefaultValues` is not used.
	Version pulumi.StringPtrInput
}

func (DseRegistryConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dseRegistryConfigurationState)(nil)).Elem()
}

type dseRegistryConfigurationArgs struct {
	// Chart repository for Helm based images
	ChartRepository *string `pulumi:"chartRepository"`
	// Only applies to `VCD Data Solutions` configuration. Specifies
	// credentials that can be used to authenticate to repositories. See Container Registry
	// Configuration
	//
	// <a id="container-registry"></a>
	ContainerRegistries []DseRegistryConfigurationContainerRegistry `pulumi:"containerRegistries"`
	// The name of Data Solution as it appears in repository configuration
	Name *string `pulumi:"name"`
	// Helm package name. Only for Helm based images
	PackageName *string `pulumi:"packageName"`
	// Package repository for container based images
	PackageRepository *string `pulumi:"packageRepository"`
	// Defines if repository settings should be inherited from Data
	// Solution itself. Default `false`
	UseDefaultValues *bool `pulumi:"useDefaultValues"`
	// Version of package to use. Required when `useDefaultValues` is not used.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a DseRegistryConfiguration resource.
type DseRegistryConfigurationArgs struct {
	// Chart repository for Helm based images
	ChartRepository pulumi.StringPtrInput
	// Only applies to `VCD Data Solutions` configuration. Specifies
	// credentials that can be used to authenticate to repositories. See Container Registry
	// Configuration
	//
	// <a id="container-registry"></a>
	ContainerRegistries DseRegistryConfigurationContainerRegistryArrayInput
	// The name of Data Solution as it appears in repository configuration
	Name pulumi.StringPtrInput
	// Helm package name. Only for Helm based images
	PackageName pulumi.StringPtrInput
	// Package repository for container based images
	PackageRepository pulumi.StringPtrInput
	// Defines if repository settings should be inherited from Data
	// Solution itself. Default `false`
	UseDefaultValues pulumi.BoolPtrInput
	// Version of package to use. Required when `useDefaultValues` is not used.
	Version pulumi.StringPtrInput
}

func (DseRegistryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dseRegistryConfigurationArgs)(nil)).Elem()
}

type DseRegistryConfigurationInput interface {
	pulumi.Input

	ToDseRegistryConfigurationOutput() DseRegistryConfigurationOutput
	ToDseRegistryConfigurationOutputWithContext(ctx context.Context) DseRegistryConfigurationOutput
}

func (*DseRegistryConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**DseRegistryConfiguration)(nil)).Elem()
}

func (i *DseRegistryConfiguration) ToDseRegistryConfigurationOutput() DseRegistryConfigurationOutput {
	return i.ToDseRegistryConfigurationOutputWithContext(context.Background())
}

func (i *DseRegistryConfiguration) ToDseRegistryConfigurationOutputWithContext(ctx context.Context) DseRegistryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseRegistryConfigurationOutput)
}

// DseRegistryConfigurationArrayInput is an input type that accepts DseRegistryConfigurationArray and DseRegistryConfigurationArrayOutput values.
// You can construct a concrete instance of `DseRegistryConfigurationArrayInput` via:
//
//	DseRegistryConfigurationArray{ DseRegistryConfigurationArgs{...} }
type DseRegistryConfigurationArrayInput interface {
	pulumi.Input

	ToDseRegistryConfigurationArrayOutput() DseRegistryConfigurationArrayOutput
	ToDseRegistryConfigurationArrayOutputWithContext(context.Context) DseRegistryConfigurationArrayOutput
}

type DseRegistryConfigurationArray []DseRegistryConfigurationInput

func (DseRegistryConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DseRegistryConfiguration)(nil)).Elem()
}

func (i DseRegistryConfigurationArray) ToDseRegistryConfigurationArrayOutput() DseRegistryConfigurationArrayOutput {
	return i.ToDseRegistryConfigurationArrayOutputWithContext(context.Background())
}

func (i DseRegistryConfigurationArray) ToDseRegistryConfigurationArrayOutputWithContext(ctx context.Context) DseRegistryConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseRegistryConfigurationArrayOutput)
}

// DseRegistryConfigurationMapInput is an input type that accepts DseRegistryConfigurationMap and DseRegistryConfigurationMapOutput values.
// You can construct a concrete instance of `DseRegistryConfigurationMapInput` via:
//
//	DseRegistryConfigurationMap{ "key": DseRegistryConfigurationArgs{...} }
type DseRegistryConfigurationMapInput interface {
	pulumi.Input

	ToDseRegistryConfigurationMapOutput() DseRegistryConfigurationMapOutput
	ToDseRegistryConfigurationMapOutputWithContext(context.Context) DseRegistryConfigurationMapOutput
}

type DseRegistryConfigurationMap map[string]DseRegistryConfigurationInput

func (DseRegistryConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DseRegistryConfiguration)(nil)).Elem()
}

func (i DseRegistryConfigurationMap) ToDseRegistryConfigurationMapOutput() DseRegistryConfigurationMapOutput {
	return i.ToDseRegistryConfigurationMapOutputWithContext(context.Background())
}

func (i DseRegistryConfigurationMap) ToDseRegistryConfigurationMapOutputWithContext(ctx context.Context) DseRegistryConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DseRegistryConfigurationMapOutput)
}

type DseRegistryConfigurationOutput struct{ *pulumi.OutputState }

func (DseRegistryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DseRegistryConfiguration)(nil)).Elem()
}

func (o DseRegistryConfigurationOutput) ToDseRegistryConfigurationOutput() DseRegistryConfigurationOutput {
	return o
}

func (o DseRegistryConfigurationOutput) ToDseRegistryConfigurationOutputWithContext(ctx context.Context) DseRegistryConfigurationOutput {
	return o
}

// Chart repository for Helm based images
func (o DseRegistryConfigurationOutput) ChartRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.ChartRepository }).(pulumi.StringOutput)
}

// A set of version constrains that this Data Solution defines
func (o DseRegistryConfigurationOutput) CompatibleVersionConstraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringArrayOutput { return v.CompatibleVersionConstraints }).(pulumi.StringArrayOutput)
}

// Only applies to `VCD Data Solutions` configuration. Specifies
// credentials that can be used to authenticate to repositories. See Container Registry
// Configuration
//
// <a id="container-registry"></a>
func (o DseRegistryConfigurationOutput) ContainerRegistries() DseRegistryConfigurationContainerRegistryArrayOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) DseRegistryConfigurationContainerRegistryArrayOutput {
		return v.ContainerRegistries
	}).(DseRegistryConfigurationContainerRegistryArrayOutput)
}

// Default chart repository as provided by Data Solution
func (o DseRegistryConfigurationOutput) DefaultChartRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.DefaultChartRepository }).(pulumi.StringOutput)
}

// Default package name as provided by Data Solution
func (o DseRegistryConfigurationOutput) DefaultPackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.DefaultPackageName }).(pulumi.StringOutput)
}

// Default container repository as provided by Data Solution
func (o DseRegistryConfigurationOutput) DefaultRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.DefaultRepository }).(pulumi.StringOutput)
}

// Default package version as provided by Data Solution
func (o DseRegistryConfigurationOutput) DefaultVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.DefaultVersion }).(pulumi.StringOutput)
}

// The name of Data Solution as it appears in repository configuration
func (o DseRegistryConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Helm package name. Only for Helm based images
func (o DseRegistryConfigurationOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// Package repository for container based images
func (o DseRegistryConfigurationOutput) PackageRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.PackageRepository }).(pulumi.StringOutput)
}

// State of parent Runtime Defined Entity (RDE)
func (o DseRegistryConfigurationOutput) RdeState() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.RdeState }).(pulumi.StringOutput)
}

// Boolean flag as defined in Data Solution
func (o DseRegistryConfigurationOutput) RequiresVersionCompatibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.BoolOutput { return v.RequiresVersionCompatibility }).(pulumi.BoolOutput)
}

// Type of repository settings. It can be one of `PackageRepository`, `ChartRepository`
func (o DseRegistryConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Defines if repository settings should be inherited from Data
// Solution itself. Default `false`
func (o DseRegistryConfigurationOutput) UseDefaultValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.BoolPtrOutput { return v.UseDefaultValues }).(pulumi.BoolPtrOutput)
}

// Version of package to use. Required when `useDefaultValues` is not used.
func (o DseRegistryConfigurationOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DseRegistryConfiguration) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DseRegistryConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DseRegistryConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DseRegistryConfiguration)(nil)).Elem()
}

func (o DseRegistryConfigurationArrayOutput) ToDseRegistryConfigurationArrayOutput() DseRegistryConfigurationArrayOutput {
	return o
}

func (o DseRegistryConfigurationArrayOutput) ToDseRegistryConfigurationArrayOutputWithContext(ctx context.Context) DseRegistryConfigurationArrayOutput {
	return o
}

func (o DseRegistryConfigurationArrayOutput) Index(i pulumi.IntInput) DseRegistryConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DseRegistryConfiguration {
		return vs[0].([]*DseRegistryConfiguration)[vs[1].(int)]
	}).(DseRegistryConfigurationOutput)
}

type DseRegistryConfigurationMapOutput struct{ *pulumi.OutputState }

func (DseRegistryConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DseRegistryConfiguration)(nil)).Elem()
}

func (o DseRegistryConfigurationMapOutput) ToDseRegistryConfigurationMapOutput() DseRegistryConfigurationMapOutput {
	return o
}

func (o DseRegistryConfigurationMapOutput) ToDseRegistryConfigurationMapOutputWithContext(ctx context.Context) DseRegistryConfigurationMapOutput {
	return o
}

func (o DseRegistryConfigurationMapOutput) MapIndex(k pulumi.StringInput) DseRegistryConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DseRegistryConfiguration {
		return vs[0].(map[string]*DseRegistryConfiguration)[vs[1].(string)]
	}).(DseRegistryConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DseRegistryConfigurationInput)(nil)).Elem(), &DseRegistryConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DseRegistryConfigurationArrayInput)(nil)).Elem(), DseRegistryConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DseRegistryConfigurationMapInput)(nil)).Elem(), DseRegistryConfigurationMap{})
	pulumi.RegisterOutputType(DseRegistryConfigurationOutput{})
	pulumi.RegisterOutputType(DseRegistryConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DseRegistryConfigurationMapOutput{})
}
