// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpSpaceIpAllocation struct {
	pulumi.CustomResourceState

	// allocation date in formated as `2023-06-07T09:57:58.721Z` (ISO 8601)
	AllocationDate pulumi.StringOutput `pulumi:"allocationDate"`
	// Can only be set when `usage_state=USED_MANUAL`
	//
	// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
	// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
	// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
	// Edge Gateway withing VDC will return errors of type `This operation is denied`.
	Description pulumi.StringOutput `pulumi:"description"`
	// convenience field. For `type=IP_PREFIX` it will contain only the IP from CIDR returned
	Ip pulumi.StringOutput `pulumi:"ip"`
	// IP address or CIDR
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// IP Space ID to use for IP Allocations
	IpSpaceId pulumi.StringPtrOutput `pulumi:"ipSpaceId"`
	// Org ID in which the IP is allocated
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Required when `type=IP_PREFIX`
	PrefixLength pulumi.StringOutput `pulumi:"prefixLength"`
	// One of `FLOATING_IP`, `IP_PREFIX`
	// * `FLOATING_IP` - allocates single IP from defined ranges in IP Space
	// * `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
	//   Prefix
	Type pulumi.StringOutput `pulumi:"type"`
	// (Optional) Only used with manual reservations. Value `USED_MANUAL`
	// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
	UsageState pulumi.StringOutput `pulumi:"usageState"`
	// contains entity ID that is using the IP if `usage_state=USED`
	UsedById pulumi.StringOutput `pulumi:"usedById"`
	// An option to request a specific IP or subnet from IP Space.
	// **Note:** This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewIpSpaceIpAllocation registers a new resource with the given unique name, arguments, and options.
func NewIpSpaceIpAllocation(ctx *pulumi.Context,
	name string, args *IpSpaceIpAllocationArgs, opts ...pulumi.ResourceOption) (*IpSpaceIpAllocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpSpaceIpAllocation
	err := ctx.RegisterResource("vcd:index/ipSpaceIpAllocation:IpSpaceIpAllocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSpaceIpAllocation gets an existing IpSpaceIpAllocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSpaceIpAllocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSpaceIpAllocationState, opts ...pulumi.ResourceOption) (*IpSpaceIpAllocation, error) {
	var resource IpSpaceIpAllocation
	err := ctx.ReadResource("vcd:index/ipSpaceIpAllocation:IpSpaceIpAllocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSpaceIpAllocation resources.
type ipSpaceIpAllocationState struct {
	// allocation date in formated as `2023-06-07T09:57:58.721Z` (ISO 8601)
	AllocationDate *string `pulumi:"allocationDate"`
	// Can only be set when `usage_state=USED_MANUAL`
	//
	// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
	// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
	// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
	// Edge Gateway withing VDC will return errors of type `This operation is denied`.
	Description *string `pulumi:"description"`
	// convenience field. For `type=IP_PREFIX` it will contain only the IP from CIDR returned
	Ip *string `pulumi:"ip"`
	// IP address or CIDR
	IpAddress *string `pulumi:"ipAddress"`
	// IP Space ID to use for IP Allocations
	IpSpaceId *string `pulumi:"ipSpaceId"`
	// Org ID in which the IP is allocated
	OrgId *string `pulumi:"orgId"`
	// Required when `type=IP_PREFIX`
	PrefixLength *string `pulumi:"prefixLength"`
	// One of `FLOATING_IP`, `IP_PREFIX`
	// * `FLOATING_IP` - allocates single IP from defined ranges in IP Space
	// * `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
	//   Prefix
	Type *string `pulumi:"type"`
	// (Optional) Only used with manual reservations. Value `USED_MANUAL`
	// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
	UsageState *string `pulumi:"usageState"`
	// contains entity ID that is using the IP if `usage_state=USED`
	UsedById *string `pulumi:"usedById"`
	// An option to request a specific IP or subnet from IP Space.
	// **Note:** This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	Value *string `pulumi:"value"`
}

type IpSpaceIpAllocationState struct {
	// allocation date in formated as `2023-06-07T09:57:58.721Z` (ISO 8601)
	AllocationDate pulumi.StringPtrInput
	// Can only be set when `usage_state=USED_MANUAL`
	//
	// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
	// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
	// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
	// Edge Gateway withing VDC will return errors of type `This operation is denied`.
	Description pulumi.StringPtrInput
	// convenience field. For `type=IP_PREFIX` it will contain only the IP from CIDR returned
	Ip pulumi.StringPtrInput
	// IP address or CIDR
	IpAddress pulumi.StringPtrInput
	// IP Space ID to use for IP Allocations
	IpSpaceId pulumi.StringPtrInput
	// Org ID in which the IP is allocated
	OrgId pulumi.StringPtrInput
	// Required when `type=IP_PREFIX`
	PrefixLength pulumi.StringPtrInput
	// One of `FLOATING_IP`, `IP_PREFIX`
	// * `FLOATING_IP` - allocates single IP from defined ranges in IP Space
	// * `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
	//   Prefix
	Type pulumi.StringPtrInput
	// (Optional) Only used with manual reservations. Value `USED_MANUAL`
	// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
	UsageState pulumi.StringPtrInput
	// contains entity ID that is using the IP if `usage_state=USED`
	UsedById pulumi.StringPtrInput
	// An option to request a specific IP or subnet from IP Space.
	// **Note:** This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	Value pulumi.StringPtrInput
}

func (IpSpaceIpAllocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceIpAllocationState)(nil)).Elem()
}

type ipSpaceIpAllocationArgs struct {
	// Can only be set when `usage_state=USED_MANUAL`
	//
	// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
	// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
	// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
	// Edge Gateway withing VDC will return errors of type `This operation is denied`.
	Description *string `pulumi:"description"`
	// IP Space ID to use for IP Allocations
	IpSpaceId *string `pulumi:"ipSpaceId"`
	// Org ID in which the IP is allocated
	OrgId string `pulumi:"orgId"`
	// Required when `type=IP_PREFIX`
	PrefixLength *string `pulumi:"prefixLength"`
	// One of `FLOATING_IP`, `IP_PREFIX`
	// * `FLOATING_IP` - allocates single IP from defined ranges in IP Space
	// * `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
	//   Prefix
	Type string `pulumi:"type"`
	// (Optional) Only used with manual reservations. Value `USED_MANUAL`
	// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
	UsageState *string `pulumi:"usageState"`
	// An option to request a specific IP or subnet from IP Space.
	// **Note:** This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a IpSpaceIpAllocation resource.
type IpSpaceIpAllocationArgs struct {
	// Can only be set when `usage_state=USED_MANUAL`
	//
	// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
	// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
	// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
	// Edge Gateway withing VDC will return errors of type `This operation is denied`.
	Description pulumi.StringPtrInput
	// IP Space ID to use for IP Allocations
	IpSpaceId pulumi.StringPtrInput
	// Org ID in which the IP is allocated
	OrgId pulumi.StringInput
	// Required when `type=IP_PREFIX`
	PrefixLength pulumi.StringPtrInput
	// One of `FLOATING_IP`, `IP_PREFIX`
	// * `FLOATING_IP` - allocates single IP from defined ranges in IP Space
	// * `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
	//   Prefix
	Type pulumi.StringInput
	// (Optional) Only used with manual reservations. Value `USED_MANUAL`
	// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
	UsageState pulumi.StringPtrInput
	// An option to request a specific IP or subnet from IP Space.
	// **Note:** This field does not support IP ranges because it would cause multiple allocations
	// created in one resource. Please use multiple resource instances to allocate IP ranges.
	Value pulumi.StringPtrInput
}

func (IpSpaceIpAllocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceIpAllocationArgs)(nil)).Elem()
}

type IpSpaceIpAllocationInput interface {
	pulumi.Input

	ToIpSpaceIpAllocationOutput() IpSpaceIpAllocationOutput
	ToIpSpaceIpAllocationOutputWithContext(ctx context.Context) IpSpaceIpAllocationOutput
}

func (*IpSpaceIpAllocation) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpaceIpAllocation)(nil)).Elem()
}

func (i *IpSpaceIpAllocation) ToIpSpaceIpAllocationOutput() IpSpaceIpAllocationOutput {
	return i.ToIpSpaceIpAllocationOutputWithContext(context.Background())
}

func (i *IpSpaceIpAllocation) ToIpSpaceIpAllocationOutputWithContext(ctx context.Context) IpSpaceIpAllocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceIpAllocationOutput)
}

// IpSpaceIpAllocationArrayInput is an input type that accepts IpSpaceIpAllocationArray and IpSpaceIpAllocationArrayOutput values.
// You can construct a concrete instance of `IpSpaceIpAllocationArrayInput` via:
//
//	IpSpaceIpAllocationArray{ IpSpaceIpAllocationArgs{...} }
type IpSpaceIpAllocationArrayInput interface {
	pulumi.Input

	ToIpSpaceIpAllocationArrayOutput() IpSpaceIpAllocationArrayOutput
	ToIpSpaceIpAllocationArrayOutputWithContext(context.Context) IpSpaceIpAllocationArrayOutput
}

type IpSpaceIpAllocationArray []IpSpaceIpAllocationInput

func (IpSpaceIpAllocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpaceIpAllocation)(nil)).Elem()
}

func (i IpSpaceIpAllocationArray) ToIpSpaceIpAllocationArrayOutput() IpSpaceIpAllocationArrayOutput {
	return i.ToIpSpaceIpAllocationArrayOutputWithContext(context.Background())
}

func (i IpSpaceIpAllocationArray) ToIpSpaceIpAllocationArrayOutputWithContext(ctx context.Context) IpSpaceIpAllocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceIpAllocationArrayOutput)
}

// IpSpaceIpAllocationMapInput is an input type that accepts IpSpaceIpAllocationMap and IpSpaceIpAllocationMapOutput values.
// You can construct a concrete instance of `IpSpaceIpAllocationMapInput` via:
//
//	IpSpaceIpAllocationMap{ "key": IpSpaceIpAllocationArgs{...} }
type IpSpaceIpAllocationMapInput interface {
	pulumi.Input

	ToIpSpaceIpAllocationMapOutput() IpSpaceIpAllocationMapOutput
	ToIpSpaceIpAllocationMapOutputWithContext(context.Context) IpSpaceIpAllocationMapOutput
}

type IpSpaceIpAllocationMap map[string]IpSpaceIpAllocationInput

func (IpSpaceIpAllocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpaceIpAllocation)(nil)).Elem()
}

func (i IpSpaceIpAllocationMap) ToIpSpaceIpAllocationMapOutput() IpSpaceIpAllocationMapOutput {
	return i.ToIpSpaceIpAllocationMapOutputWithContext(context.Background())
}

func (i IpSpaceIpAllocationMap) ToIpSpaceIpAllocationMapOutputWithContext(ctx context.Context) IpSpaceIpAllocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceIpAllocationMapOutput)
}

type IpSpaceIpAllocationOutput struct{ *pulumi.OutputState }

func (IpSpaceIpAllocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpaceIpAllocation)(nil)).Elem()
}

func (o IpSpaceIpAllocationOutput) ToIpSpaceIpAllocationOutput() IpSpaceIpAllocationOutput {
	return o
}

func (o IpSpaceIpAllocationOutput) ToIpSpaceIpAllocationOutputWithContext(ctx context.Context) IpSpaceIpAllocationOutput {
	return o
}

// allocation date in formated as `2023-06-07T09:57:58.721Z` (ISO 8601)
func (o IpSpaceIpAllocationOutput) AllocationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.AllocationDate }).(pulumi.StringOutput)
}

// Can only be set when `usage_state=USED_MANUAL`
//
// > IP Allocation resources can be created only if there is a NSX-T Edge Gateway
// (`NsxtEdgegateway`) that is backed by the Provider Gateway (`ExternalNetworkV2`) with IP
// Space Uplinks (`IpSpaceUplink`). Attempting to allocate IP Addresses before having an
// Edge Gateway withing VDC will return errors of type `This operation is denied`.
func (o IpSpaceIpAllocationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// convenience field. For `type=IP_PREFIX` it will contain only the IP from CIDR returned
func (o IpSpaceIpAllocationOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// IP address or CIDR
func (o IpSpaceIpAllocationOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// IP Space ID to use for IP Allocations
func (o IpSpaceIpAllocationOutput) IpSpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringPtrOutput { return v.IpSpaceId }).(pulumi.StringPtrOutput)
}

// Org ID in which the IP is allocated
func (o IpSpaceIpAllocationOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Required when `type=IP_PREFIX`
func (o IpSpaceIpAllocationOutput) PrefixLength() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.PrefixLength }).(pulumi.StringOutput)
}

// One of `FLOATING_IP`, `IP_PREFIX`
//   - `FLOATING_IP` - allocates single IP from defined ranges in IP Space
//   - `IP_PREFIX` - allocates subnets. **Note** field `prefixLength` is required to allocate IP
//     Prefix
func (o IpSpaceIpAllocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// (Optional) Only used with manual reservations. Value `USED_MANUAL`
// enables manual IP reservation. Value `UNUSED` is set to release manual allocation of IP.
func (o IpSpaceIpAllocationOutput) UsageState() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.UsageState }).(pulumi.StringOutput)
}

// contains entity ID that is using the IP if `usage_state=USED`
func (o IpSpaceIpAllocationOutput) UsedById() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringOutput { return v.UsedById }).(pulumi.StringOutput)
}

// An option to request a specific IP or subnet from IP Space.
// **Note:** This field does not support IP ranges because it would cause multiple allocations
// created in one resource. Please use multiple resource instances to allocate IP ranges.
func (o IpSpaceIpAllocationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpaceIpAllocation) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

type IpSpaceIpAllocationArrayOutput struct{ *pulumi.OutputState }

func (IpSpaceIpAllocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpaceIpAllocation)(nil)).Elem()
}

func (o IpSpaceIpAllocationArrayOutput) ToIpSpaceIpAllocationArrayOutput() IpSpaceIpAllocationArrayOutput {
	return o
}

func (o IpSpaceIpAllocationArrayOutput) ToIpSpaceIpAllocationArrayOutputWithContext(ctx context.Context) IpSpaceIpAllocationArrayOutput {
	return o
}

func (o IpSpaceIpAllocationArrayOutput) Index(i pulumi.IntInput) IpSpaceIpAllocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpSpaceIpAllocation {
		return vs[0].([]*IpSpaceIpAllocation)[vs[1].(int)]
	}).(IpSpaceIpAllocationOutput)
}

type IpSpaceIpAllocationMapOutput struct{ *pulumi.OutputState }

func (IpSpaceIpAllocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpaceIpAllocation)(nil)).Elem()
}

func (o IpSpaceIpAllocationMapOutput) ToIpSpaceIpAllocationMapOutput() IpSpaceIpAllocationMapOutput {
	return o
}

func (o IpSpaceIpAllocationMapOutput) ToIpSpaceIpAllocationMapOutputWithContext(ctx context.Context) IpSpaceIpAllocationMapOutput {
	return o
}

func (o IpSpaceIpAllocationMapOutput) MapIndex(k pulumi.StringInput) IpSpaceIpAllocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpSpaceIpAllocation {
		return vs[0].(map[string]*IpSpaceIpAllocation)[vs[1].(string)]
	}).(IpSpaceIpAllocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceIpAllocationInput)(nil)).Elem(), &IpSpaceIpAllocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceIpAllocationArrayInput)(nil)).Elem(), IpSpaceIpAllocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceIpAllocationMapInput)(nil)).Elem(), IpSpaceIpAllocationMap{})
	pulumi.RegisterOutputType(IpSpaceIpAllocationOutput{})
	pulumi.RegisterOutputType(IpSpaceIpAllocationArrayOutput{})
	pulumi.RegisterOutputType(IpSpaceIpAllocationMapOutput{})
}
