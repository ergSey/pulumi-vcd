// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxvDistributedFirewall struct {
	pulumi.CustomResourceState

	// Shows whether the NSX-V Distributed Firewall is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// One or more blocks with Firewall Rule definitions. **Order
	// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
	Rules NsxvDistributedFirewallRuleArrayOutput `pulumi:"rules"`
	// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
	VdcId pulumi.StringOutput `pulumi:"vdcId"`
}

// NewNsxvDistributedFirewall registers a new resource with the given unique name, arguments, and options.
func NewNsxvDistributedFirewall(ctx *pulumi.Context,
	name string, args *NsxvDistributedFirewallArgs, opts ...pulumi.ResourceOption) (*NsxvDistributedFirewall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VdcId == nil {
		return nil, errors.New("invalid value for required argument 'VdcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxvDistributedFirewall
	err := ctx.RegisterResource("vcd:index/nsxvDistributedFirewall:NsxvDistributedFirewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxvDistributedFirewall gets an existing NsxvDistributedFirewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxvDistributedFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxvDistributedFirewallState, opts ...pulumi.ResourceOption) (*NsxvDistributedFirewall, error) {
	var resource NsxvDistributedFirewall
	err := ctx.ReadResource("vcd:index/nsxvDistributedFirewall:NsxvDistributedFirewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxvDistributedFirewall resources.
type nsxvDistributedFirewallState struct {
	// Shows whether the NSX-V Distributed Firewall is enabled.
	Enabled *bool `pulumi:"enabled"`
	// One or more blocks with Firewall Rule definitions. **Order
	// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
	Rules []NsxvDistributedFirewallRule `pulumi:"rules"`
	// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
	VdcId *string `pulumi:"vdcId"`
}

type NsxvDistributedFirewallState struct {
	// Shows whether the NSX-V Distributed Firewall is enabled.
	Enabled pulumi.BoolPtrInput
	// One or more blocks with Firewall Rule definitions. **Order
	// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
	Rules NsxvDistributedFirewallRuleArrayInput
	// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
	VdcId pulumi.StringPtrInput
}

func (NsxvDistributedFirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDistributedFirewallState)(nil)).Elem()
}

type nsxvDistributedFirewallArgs struct {
	// One or more blocks with Firewall Rule definitions. **Order
	// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
	Rules []NsxvDistributedFirewallRule `pulumi:"rules"`
	// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
	VdcId string `pulumi:"vdcId"`
}

// The set of arguments for constructing a NsxvDistributedFirewall resource.
type NsxvDistributedFirewallArgs struct {
	// One or more blocks with Firewall Rule definitions. **Order
	// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
	Rules NsxvDistributedFirewallRuleArrayInput
	// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
	VdcId pulumi.StringInput
}

func (NsxvDistributedFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxvDistributedFirewallArgs)(nil)).Elem()
}

type NsxvDistributedFirewallInput interface {
	pulumi.Input

	ToNsxvDistributedFirewallOutput() NsxvDistributedFirewallOutput
	ToNsxvDistributedFirewallOutputWithContext(ctx context.Context) NsxvDistributedFirewallOutput
}

func (*NsxvDistributedFirewall) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDistributedFirewall)(nil)).Elem()
}

func (i *NsxvDistributedFirewall) ToNsxvDistributedFirewallOutput() NsxvDistributedFirewallOutput {
	return i.ToNsxvDistributedFirewallOutputWithContext(context.Background())
}

func (i *NsxvDistributedFirewall) ToNsxvDistributedFirewallOutputWithContext(ctx context.Context) NsxvDistributedFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDistributedFirewallOutput)
}

// NsxvDistributedFirewallArrayInput is an input type that accepts NsxvDistributedFirewallArray and NsxvDistributedFirewallArrayOutput values.
// You can construct a concrete instance of `NsxvDistributedFirewallArrayInput` via:
//
//	NsxvDistributedFirewallArray{ NsxvDistributedFirewallArgs{...} }
type NsxvDistributedFirewallArrayInput interface {
	pulumi.Input

	ToNsxvDistributedFirewallArrayOutput() NsxvDistributedFirewallArrayOutput
	ToNsxvDistributedFirewallArrayOutputWithContext(context.Context) NsxvDistributedFirewallArrayOutput
}

type NsxvDistributedFirewallArray []NsxvDistributedFirewallInput

func (NsxvDistributedFirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDistributedFirewall)(nil)).Elem()
}

func (i NsxvDistributedFirewallArray) ToNsxvDistributedFirewallArrayOutput() NsxvDistributedFirewallArrayOutput {
	return i.ToNsxvDistributedFirewallArrayOutputWithContext(context.Background())
}

func (i NsxvDistributedFirewallArray) ToNsxvDistributedFirewallArrayOutputWithContext(ctx context.Context) NsxvDistributedFirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDistributedFirewallArrayOutput)
}

// NsxvDistributedFirewallMapInput is an input type that accepts NsxvDistributedFirewallMap and NsxvDistributedFirewallMapOutput values.
// You can construct a concrete instance of `NsxvDistributedFirewallMapInput` via:
//
//	NsxvDistributedFirewallMap{ "key": NsxvDistributedFirewallArgs{...} }
type NsxvDistributedFirewallMapInput interface {
	pulumi.Input

	ToNsxvDistributedFirewallMapOutput() NsxvDistributedFirewallMapOutput
	ToNsxvDistributedFirewallMapOutputWithContext(context.Context) NsxvDistributedFirewallMapOutput
}

type NsxvDistributedFirewallMap map[string]NsxvDistributedFirewallInput

func (NsxvDistributedFirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDistributedFirewall)(nil)).Elem()
}

func (i NsxvDistributedFirewallMap) ToNsxvDistributedFirewallMapOutput() NsxvDistributedFirewallMapOutput {
	return i.ToNsxvDistributedFirewallMapOutputWithContext(context.Background())
}

func (i NsxvDistributedFirewallMap) ToNsxvDistributedFirewallMapOutputWithContext(ctx context.Context) NsxvDistributedFirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvDistributedFirewallMapOutput)
}

type NsxvDistributedFirewallOutput struct{ *pulumi.OutputState }

func (NsxvDistributedFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxvDistributedFirewall)(nil)).Elem()
}

func (o NsxvDistributedFirewallOutput) ToNsxvDistributedFirewallOutput() NsxvDistributedFirewallOutput {
	return o
}

func (o NsxvDistributedFirewallOutput) ToNsxvDistributedFirewallOutputWithContext(ctx context.Context) NsxvDistributedFirewallOutput {
	return o
}

// Shows whether the NSX-V Distributed Firewall is enabled.
func (o NsxvDistributedFirewallOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxvDistributedFirewall) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// One or more blocks with Firewall Rule definitions. **Order
// defines firewall rule precedence**. If no rules are defined, all will be removed from the firewall
func (o NsxvDistributedFirewallOutput) Rules() NsxvDistributedFirewallRuleArrayOutput {
	return o.ApplyT(func(v *NsxvDistributedFirewall) NsxvDistributedFirewallRuleArrayOutput { return v.Rules }).(NsxvDistributedFirewallRuleArrayOutput)
}

// The ID of VDC to manage the Distributed Firewall in. Can be looked up using a `OrgVdc` data source
func (o NsxvDistributedFirewallOutput) VdcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxvDistributedFirewall) pulumi.StringOutput { return v.VdcId }).(pulumi.StringOutput)
}

type NsxvDistributedFirewallArrayOutput struct{ *pulumi.OutputState }

func (NsxvDistributedFirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxvDistributedFirewall)(nil)).Elem()
}

func (o NsxvDistributedFirewallArrayOutput) ToNsxvDistributedFirewallArrayOutput() NsxvDistributedFirewallArrayOutput {
	return o
}

func (o NsxvDistributedFirewallArrayOutput) ToNsxvDistributedFirewallArrayOutputWithContext(ctx context.Context) NsxvDistributedFirewallArrayOutput {
	return o
}

func (o NsxvDistributedFirewallArrayOutput) Index(i pulumi.IntInput) NsxvDistributedFirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxvDistributedFirewall {
		return vs[0].([]*NsxvDistributedFirewall)[vs[1].(int)]
	}).(NsxvDistributedFirewallOutput)
}

type NsxvDistributedFirewallMapOutput struct{ *pulumi.OutputState }

func (NsxvDistributedFirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxvDistributedFirewall)(nil)).Elem()
}

func (o NsxvDistributedFirewallMapOutput) ToNsxvDistributedFirewallMapOutput() NsxvDistributedFirewallMapOutput {
	return o
}

func (o NsxvDistributedFirewallMapOutput) ToNsxvDistributedFirewallMapOutputWithContext(ctx context.Context) NsxvDistributedFirewallMapOutput {
	return o
}

func (o NsxvDistributedFirewallMapOutput) MapIndex(k pulumi.StringInput) NsxvDistributedFirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxvDistributedFirewall {
		return vs[0].(map[string]*NsxvDistributedFirewall)[vs[1].(string)]
	}).(NsxvDistributedFirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDistributedFirewallInput)(nil)).Elem(), &NsxvDistributedFirewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDistributedFirewallArrayInput)(nil)).Elem(), NsxvDistributedFirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvDistributedFirewallMapInput)(nil)).Elem(), NsxvDistributedFirewallMap{})
	pulumi.RegisterOutputType(NsxvDistributedFirewallOutput{})
	pulumi.RegisterOutputType(NsxvDistributedFirewallArrayOutput{})
	pulumi.RegisterOutputType(NsxvDistributedFirewallMapOutput{})
}
