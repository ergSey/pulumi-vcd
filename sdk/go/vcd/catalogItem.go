// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CatalogItem struct {
	pulumi.CustomResourceState

	// The name of the catalog where to upload OVA file
	Catalog pulumi.StringOutput `pulumi:"catalog"`
	// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
	//
	// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
	// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
	//
	// <a id="metadata"></a>
	//
	// Deprecated: Use metadataEntry instead
	CatalogItemMetadata pulumi.StringMapOutput `pulumi:"catalogItemMetadata"`
	// Time stamp of when the item was created
	Created pulumi.StringOutput `pulumi:"created"`
	// Description of item
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Key value map of metadata to assign to the associated vApp Template
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	MetadataEntries CatalogItemMetadataEntryArrayOutput `pulumi:"metadataEntries"`
	// Item name in catalog
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrOutput `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrOutput `pulumi:"ovfUrl"`
	// Default false. Allows seeing upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrOutput `pulumi:"showUploadProgress"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrOutput `pulumi:"uploadPieceSize"`
}

// NewCatalogItem registers a new resource with the given unique name, arguments, and options.
func NewCatalogItem(ctx *pulumi.Context,
	name string, args *CatalogItemArgs, opts ...pulumi.ResourceOption) (*CatalogItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Catalog == nil {
		return nil, errors.New("invalid value for required argument 'Catalog'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CatalogItem
	err := ctx.RegisterResource("vcd:index/catalogItem:CatalogItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogItem gets an existing CatalogItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogItemState, opts ...pulumi.ResourceOption) (*CatalogItem, error) {
	var resource CatalogItem
	err := ctx.ReadResource("vcd:index/catalogItem:CatalogItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogItem resources.
type catalogItemState struct {
	// The name of the catalog where to upload OVA file
	Catalog *string `pulumi:"catalog"`
	// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
	//
	// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
	// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
	//
	// <a id="metadata"></a>
	//
	// Deprecated: Use metadataEntry instead
	CatalogItemMetadata map[string]string `pulumi:"catalogItemMetadata"`
	// Time stamp of when the item was created
	Created *string `pulumi:"created"`
	// Description of item
	Description *string `pulumi:"description"`
	// Key value map of metadata to assign to the associated vApp Template
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	MetadataEntries []CatalogItemMetadataEntry `pulumi:"metadataEntries"`
	// Item name in catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath *string `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl *string `pulumi:"ovfUrl"`
	// Default false. Allows seeing upload progress. (See note below)
	ShowUploadProgress *bool `pulumi:"showUploadProgress"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
}

type CatalogItemState struct {
	// The name of the catalog where to upload OVA file
	Catalog pulumi.StringPtrInput
	// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
	//
	// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
	// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
	//
	// <a id="metadata"></a>
	//
	// Deprecated: Use metadataEntry instead
	CatalogItemMetadata pulumi.StringMapInput
	// Time stamp of when the item was created
	Created pulumi.StringPtrInput
	// Description of item
	Description pulumi.StringPtrInput
	// Key value map of metadata to assign to the associated vApp Template
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	MetadataEntries CatalogItemMetadataEntryArrayInput
	// Item name in catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrInput
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrInput
	// Default false. Allows seeing upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrInput
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrInput
}

func (CatalogItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogItemState)(nil)).Elem()
}

type catalogItemArgs struct {
	// The name of the catalog where to upload OVA file
	Catalog string `pulumi:"catalog"`
	// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
	//
	// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
	// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
	//
	// <a id="metadata"></a>
	//
	// Deprecated: Use metadataEntry instead
	CatalogItemMetadata map[string]string `pulumi:"catalogItemMetadata"`
	// Description of item
	Description *string `pulumi:"description"`
	// Key value map of metadata to assign to the associated vApp Template
	Metadata map[string]string `pulumi:"metadata"`
	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	MetadataEntries []CatalogItemMetadataEntry `pulumi:"metadataEntries"`
	// Item name in catalog
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// Absolute or relative path to file to upload
	OvaPath *string `pulumi:"ovaPath"`
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl *string `pulumi:"ovfUrl"`
	// Default false. Allows seeing upload progress. (See note below)
	ShowUploadProgress *bool `pulumi:"showUploadProgress"`
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize *int `pulumi:"uploadPieceSize"`
}

// The set of arguments for constructing a CatalogItem resource.
type CatalogItemArgs struct {
	// The name of the catalog where to upload OVA file
	Catalog pulumi.StringInput
	// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
	//
	// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
	// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
	//
	// <a id="metadata"></a>
	//
	// Deprecated: Use metadataEntry instead
	CatalogItemMetadata pulumi.StringMapInput
	// Description of item
	Description pulumi.StringPtrInput
	// Key value map of metadata to assign to the associated vApp Template
	Metadata pulumi.StringMapInput
	// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
	MetadataEntries CatalogItemMetadataEntryArrayInput
	// Item name in catalog
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput
	// Absolute or relative path to file to upload
	OvaPath pulumi.StringPtrInput
	// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
	OvfUrl pulumi.StringPtrInput
	// Default false. Allows seeing upload progress. (See note below)
	ShowUploadProgress pulumi.BoolPtrInput
	// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
	UploadPieceSize pulumi.IntPtrInput
}

func (CatalogItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogItemArgs)(nil)).Elem()
}

type CatalogItemInput interface {
	pulumi.Input

	ToCatalogItemOutput() CatalogItemOutput
	ToCatalogItemOutputWithContext(ctx context.Context) CatalogItemOutput
}

func (*CatalogItem) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogItem)(nil)).Elem()
}

func (i *CatalogItem) ToCatalogItemOutput() CatalogItemOutput {
	return i.ToCatalogItemOutputWithContext(context.Background())
}

func (i *CatalogItem) ToCatalogItemOutputWithContext(ctx context.Context) CatalogItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogItemOutput)
}

// CatalogItemArrayInput is an input type that accepts CatalogItemArray and CatalogItemArrayOutput values.
// You can construct a concrete instance of `CatalogItemArrayInput` via:
//
//	CatalogItemArray{ CatalogItemArgs{...} }
type CatalogItemArrayInput interface {
	pulumi.Input

	ToCatalogItemArrayOutput() CatalogItemArrayOutput
	ToCatalogItemArrayOutputWithContext(context.Context) CatalogItemArrayOutput
}

type CatalogItemArray []CatalogItemInput

func (CatalogItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogItem)(nil)).Elem()
}

func (i CatalogItemArray) ToCatalogItemArrayOutput() CatalogItemArrayOutput {
	return i.ToCatalogItemArrayOutputWithContext(context.Background())
}

func (i CatalogItemArray) ToCatalogItemArrayOutputWithContext(ctx context.Context) CatalogItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogItemArrayOutput)
}

// CatalogItemMapInput is an input type that accepts CatalogItemMap and CatalogItemMapOutput values.
// You can construct a concrete instance of `CatalogItemMapInput` via:
//
//	CatalogItemMap{ "key": CatalogItemArgs{...} }
type CatalogItemMapInput interface {
	pulumi.Input

	ToCatalogItemMapOutput() CatalogItemMapOutput
	ToCatalogItemMapOutputWithContext(context.Context) CatalogItemMapOutput
}

type CatalogItemMap map[string]CatalogItemInput

func (CatalogItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogItem)(nil)).Elem()
}

func (i CatalogItemMap) ToCatalogItemMapOutput() CatalogItemMapOutput {
	return i.ToCatalogItemMapOutputWithContext(context.Background())
}

func (i CatalogItemMap) ToCatalogItemMapOutputWithContext(ctx context.Context) CatalogItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogItemMapOutput)
}

type CatalogItemOutput struct{ *pulumi.OutputState }

func (CatalogItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogItem)(nil)).Elem()
}

func (o CatalogItemOutput) ToCatalogItemOutput() CatalogItemOutput {
	return o
}

func (o CatalogItemOutput) ToCatalogItemOutputWithContext(ctx context.Context) CatalogItemOutput {
	return o
}

// The name of the catalog where to upload OVA file
func (o CatalogItemOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringOutput { return v.Catalog }).(pulumi.StringOutput)
}

// Use `metadataEntry` instead.  Key value map of metadata to assign to the Catalog Item
//
// > This resource handles metadata in the following way: `metadata` attribute assigns metadata to the associated **vApp Template**.
// `metadataEntry` attribute assigns metadata to the **Catalog Item**. `catalogItemMetadata` is deprecated and should not be used.
//
// <a id="metadata"></a>
//
// Deprecated: Use metadataEntry instead
func (o CatalogItemOutput) CatalogItemMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringMapOutput { return v.CatalogItemMetadata }).(pulumi.StringMapOutput)
}

// Time stamp of when the item was created
func (o CatalogItemOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Description of item
func (o CatalogItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Key value map of metadata to assign to the associated vApp Template
func (o CatalogItemOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A set of metadata entries to assign to the Catalog Item. See Metadata section for details.
func (o CatalogItemOutput) MetadataEntries() CatalogItemMetadataEntryArrayOutput {
	return o.ApplyT(func(v *CatalogItem) CatalogItemMetadataEntryArrayOutput { return v.MetadataEntries }).(CatalogItemMetadataEntryArrayOutput)
}

// Item name in catalog
func (o CatalogItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
func (o CatalogItemOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// Absolute or relative path to file to upload
func (o CatalogItemOutput) OvaPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringPtrOutput { return v.OvaPath }).(pulumi.StringPtrOutput)
}

// URL to OVF file. Only OVF (not OVA) files are supported by VCD uploading by URL
func (o CatalogItemOutput) OvfUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.StringPtrOutput { return v.OvfUrl }).(pulumi.StringPtrOutput)
}

// Default false. Allows seeing upload progress. (See note below)
func (o CatalogItemOutput) ShowUploadProgress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.BoolPtrOutput { return v.ShowUploadProgress }).(pulumi.BoolPtrOutput)
}

// Size in MB for splitting upload size. It can possibly impact upload performance. Default 1MB.
func (o CatalogItemOutput) UploadPieceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CatalogItem) pulumi.IntPtrOutput { return v.UploadPieceSize }).(pulumi.IntPtrOutput)
}

type CatalogItemArrayOutput struct{ *pulumi.OutputState }

func (CatalogItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogItem)(nil)).Elem()
}

func (o CatalogItemArrayOutput) ToCatalogItemArrayOutput() CatalogItemArrayOutput {
	return o
}

func (o CatalogItemArrayOutput) ToCatalogItemArrayOutputWithContext(ctx context.Context) CatalogItemArrayOutput {
	return o
}

func (o CatalogItemArrayOutput) Index(i pulumi.IntInput) CatalogItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogItem {
		return vs[0].([]*CatalogItem)[vs[1].(int)]
	}).(CatalogItemOutput)
}

type CatalogItemMapOutput struct{ *pulumi.OutputState }

func (CatalogItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogItem)(nil)).Elem()
}

func (o CatalogItemMapOutput) ToCatalogItemMapOutput() CatalogItemMapOutput {
	return o
}

func (o CatalogItemMapOutput) ToCatalogItemMapOutputWithContext(ctx context.Context) CatalogItemMapOutput {
	return o
}

func (o CatalogItemMapOutput) MapIndex(k pulumi.StringInput) CatalogItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogItem {
		return vs[0].(map[string]*CatalogItem)[vs[1].(string)]
	}).(CatalogItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogItemInput)(nil)).Elem(), &CatalogItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogItemArrayInput)(nil)).Elem(), CatalogItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogItemMapInput)(nil)).Elem(), CatalogItemMap{})
	pulumi.RegisterOutputType(CatalogItemOutput{})
	pulumi.RegisterOutputType(CatalogItemArrayOutput{})
	pulumi.RegisterOutputType(CatalogItemMapOutput{})
}
