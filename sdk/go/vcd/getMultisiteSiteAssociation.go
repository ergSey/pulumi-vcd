// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read a VMware Cloud Director site association information.
//
// > Note: this data source requires System Administrator privileges
//
// Supported in provider *v3.13+*
//
// ## Example Usage
//
// ### 1
//
// Retrieving a site association using the associated site ID.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupMultisiteSiteAssociation(ctx, &vcd.LookupMultisiteSiteAssociationArgs{
//				AssociatedSiteId: pulumi.StringRef("urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### 2
//
// Retrieving a site association using the association data file.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupMultisiteSiteAssociation(ctx, &vcd.LookupMultisiteSiteAssociationArgs{
//				AssociationDataFile: pulumi.StringRef("remote-site.xml"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## More information
//
// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
// of association workflows.
func LookupMultisiteSiteAssociation(ctx *pulumi.Context, args *LookupMultisiteSiteAssociationArgs, opts ...pulumi.InvokeOption) (*LookupMultisiteSiteAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMultisiteSiteAssociationResult
	err := ctx.Invoke("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMultisiteSiteAssociation.
type LookupMultisiteSiteAssociationArgs struct {
	// ID of the remote site associated with the current one. (Used in alternative to
	// `associatedDataFile`)
	AssociatedSiteId *string `pulumi:"associatedSiteId"`
	// Name of the file containing the data used to associate this site to another one.
	// (Used when `associatedSiteId` is not known)
	AssociationDataFile *string `pulumi:"associationDataFile"`
}

// A collection of values returned by getMultisiteSiteAssociation.
type LookupMultisiteSiteAssociationResult struct {
	// The URL of the associated site.
	AssociatedSiteHref string  `pulumi:"associatedSiteHref"`
	AssociatedSiteId   *string `pulumi:"associatedSiteId"`
	// The name of the associated site.
	AssociatedSiteName  string  `pulumi:"associatedSiteName"`
	AssociationDataFile *string `pulumi:"associationDataFile"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
	Status string `pulumi:"status"`
}

func LookupMultisiteSiteAssociationOutput(ctx *pulumi.Context, args LookupMultisiteSiteAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupMultisiteSiteAssociationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMultisiteSiteAssociationResultOutput, error) {
			args := v.(LookupMultisiteSiteAssociationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", args, LookupMultisiteSiteAssociationResultOutput{}, options).(LookupMultisiteSiteAssociationResultOutput), nil
		}).(LookupMultisiteSiteAssociationResultOutput)
}

// A collection of arguments for invoking getMultisiteSiteAssociation.
type LookupMultisiteSiteAssociationOutputArgs struct {
	// ID of the remote site associated with the current one. (Used in alternative to
	// `associatedDataFile`)
	AssociatedSiteId pulumi.StringPtrInput `pulumi:"associatedSiteId"`
	// Name of the file containing the data used to associate this site to another one.
	// (Used when `associatedSiteId` is not known)
	AssociationDataFile pulumi.StringPtrInput `pulumi:"associationDataFile"`
}

func (LookupMultisiteSiteAssociationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultisiteSiteAssociationArgs)(nil)).Elem()
}

// A collection of values returned by getMultisiteSiteAssociation.
type LookupMultisiteSiteAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupMultisiteSiteAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultisiteSiteAssociationResult)(nil)).Elem()
}

func (o LookupMultisiteSiteAssociationResultOutput) ToLookupMultisiteSiteAssociationResultOutput() LookupMultisiteSiteAssociationResultOutput {
	return o
}

func (o LookupMultisiteSiteAssociationResultOutput) ToLookupMultisiteSiteAssociationResultOutputWithContext(ctx context.Context) LookupMultisiteSiteAssociationResultOutput {
	return o
}

// The URL of the associated site.
func (o LookupMultisiteSiteAssociationResultOutput) AssociatedSiteHref() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) string { return v.AssociatedSiteHref }).(pulumi.StringOutput)
}

func (o LookupMultisiteSiteAssociationResultOutput) AssociatedSiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) *string { return v.AssociatedSiteId }).(pulumi.StringPtrOutput)
}

// The name of the associated site.
func (o LookupMultisiteSiteAssociationResultOutput) AssociatedSiteName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) string { return v.AssociatedSiteName }).(pulumi.StringOutput)
}

func (o LookupMultisiteSiteAssociationResultOutput) AssociationDataFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) *string { return v.AssociationDataFile }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMultisiteSiteAssociationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
func (o LookupMultisiteSiteAssociationResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMultisiteSiteAssociationResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMultisiteSiteAssociationResultOutput{})
}
