// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source for VMware Cloud Director Org network attached to vApp. This can be used to access vApp Org VDC network.
//
// Supported in provider *v2.7+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			web, err := vcd.LookupVapp(ctx, &vcd.LookupVappArgs{
//				Name: "web",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.LookupVappOrgNetwork(ctx, &vcd.LookupVappOrgNetworkArgs{
//				VappName:       web.Name,
//				OrgNetworkName: "my-vapp-org-network",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", network1VcdVappNetwork.Id)
//			return nil
//		})
//	}
//
// ```
func LookupVappOrgNetwork(ctx *pulumi.Context, args *LookupVappOrgNetworkArgs, opts ...pulumi.InvokeOption) (*LookupVappOrgNetworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVappOrgNetworkResult
	err := ctx.Invoke("vcd:index/getVappOrgNetwork:getVappOrgNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVappOrgNetwork.
type LookupVappOrgNetworkArgs struct {
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// A name for the vApp Org network, unique within the vApp.
	OrgNetworkName string `pulumi:"orgNetworkName"`
	// The vApp name.
	VappName string `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getVappOrgNetwork.
type LookupVappOrgNetworkResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	IsFenced           bool    `pulumi:"isFenced"`
	Org                *string `pulumi:"org"`
	OrgNetworkName     string  `pulumi:"orgNetworkName"`
	RetainIpMacEnabled bool    `pulumi:"retainIpMacEnabled"`
	VappName           string  `pulumi:"vappName"`
	Vdc                *string `pulumi:"vdc"`
}

func LookupVappOrgNetworkOutput(ctx *pulumi.Context, args LookupVappOrgNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupVappOrgNetworkResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVappOrgNetworkResultOutput, error) {
			args := v.(LookupVappOrgNetworkArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getVappOrgNetwork:getVappOrgNetwork", args, LookupVappOrgNetworkResultOutput{}, options).(LookupVappOrgNetworkResultOutput), nil
		}).(LookupVappOrgNetworkResultOutput)
}

// A collection of arguments for invoking getVappOrgNetwork.
type LookupVappOrgNetworkOutputArgs struct {
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
	// A name for the vApp Org network, unique within the vApp.
	OrgNetworkName pulumi.StringInput `pulumi:"orgNetworkName"`
	// The vApp name.
	VappName pulumi.StringInput `pulumi:"vappName"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (LookupVappOrgNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappOrgNetworkArgs)(nil)).Elem()
}

// A collection of values returned by getVappOrgNetwork.
type LookupVappOrgNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupVappOrgNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVappOrgNetworkResult)(nil)).Elem()
}

func (o LookupVappOrgNetworkResultOutput) ToLookupVappOrgNetworkResultOutput() LookupVappOrgNetworkResultOutput {
	return o
}

func (o LookupVappOrgNetworkResultOutput) ToLookupVappOrgNetworkResultOutputWithContext(ctx context.Context) LookupVappOrgNetworkResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVappOrgNetworkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVappOrgNetworkResultOutput) IsFenced() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) bool { return v.IsFenced }).(pulumi.BoolOutput)
}

func (o LookupVappOrgNetworkResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o LookupVappOrgNetworkResultOutput) OrgNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) string { return v.OrgNetworkName }).(pulumi.StringOutput)
}

func (o LookupVappOrgNetworkResultOutput) RetainIpMacEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) bool { return v.RetainIpMacEnabled }).(pulumi.BoolOutput)
}

func (o LookupVappOrgNetworkResultOutput) VappName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) string { return v.VappName }).(pulumi.StringOutput)
}

func (o LookupVappOrgNetworkResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVappOrgNetworkResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVappOrgNetworkResultOutput{})
}
