// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtEdgegatewayRateLimiting struct {
	pulumi.CustomResourceState

	// NSX-T Edge Gateway ID
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// A QoS profile to apply for egress traffic. *Note* leaving empty
	// means `unlimited`.
	//
	// > Ingress and Egress profile IDs can be looked up using
	// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
	// data source.
	EgressProfileId pulumi.StringPtrOutput `pulumi:"egressProfileId"`
	// A QoS profile to apply for ingress traffic. *Note* leaving empty
	// means `unlimited`.
	IngressProfileId pulumi.StringPtrOutput `pulumi:"ingressProfileId"`
	// Org in which the NSX-T Edge Gateway is located
	Org pulumi.StringPtrOutput `pulumi:"org"`
}

// NewNsxtEdgegatewayRateLimiting registers a new resource with the given unique name, arguments, and options.
func NewNsxtEdgegatewayRateLimiting(ctx *pulumi.Context,
	name string, args *NsxtEdgegatewayRateLimitingArgs, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayRateLimiting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtEdgegatewayRateLimiting
	err := ctx.RegisterResource("vcd:index/nsxtEdgegatewayRateLimiting:NsxtEdgegatewayRateLimiting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtEdgegatewayRateLimiting gets an existing NsxtEdgegatewayRateLimiting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtEdgegatewayRateLimiting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtEdgegatewayRateLimitingState, opts ...pulumi.ResourceOption) (*NsxtEdgegatewayRateLimiting, error) {
	var resource NsxtEdgegatewayRateLimiting
	err := ctx.ReadResource("vcd:index/nsxtEdgegatewayRateLimiting:NsxtEdgegatewayRateLimiting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtEdgegatewayRateLimiting resources.
type nsxtEdgegatewayRateLimitingState struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// A QoS profile to apply for egress traffic. *Note* leaving empty
	// means `unlimited`.
	//
	// > Ingress and Egress profile IDs can be looked up using
	// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
	// data source.
	EgressProfileId *string `pulumi:"egressProfileId"`
	// A QoS profile to apply for ingress traffic. *Note* leaving empty
	// means `unlimited`.
	IngressProfileId *string `pulumi:"ingressProfileId"`
	// Org in which the NSX-T Edge Gateway is located
	Org *string `pulumi:"org"`
}

type NsxtEdgegatewayRateLimitingState struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId pulumi.StringPtrInput
	// A QoS profile to apply for egress traffic. *Note* leaving empty
	// means `unlimited`.
	//
	// > Ingress and Egress profile IDs can be looked up using
	// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
	// data source.
	EgressProfileId pulumi.StringPtrInput
	// A QoS profile to apply for ingress traffic. *Note* leaving empty
	// means `unlimited`.
	IngressProfileId pulumi.StringPtrInput
	// Org in which the NSX-T Edge Gateway is located
	Org pulumi.StringPtrInput
}

func (NsxtEdgegatewayRateLimitingState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayRateLimitingState)(nil)).Elem()
}

type nsxtEdgegatewayRateLimitingArgs struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// A QoS profile to apply for egress traffic. *Note* leaving empty
	// means `unlimited`.
	//
	// > Ingress and Egress profile IDs can be looked up using
	// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
	// data source.
	EgressProfileId *string `pulumi:"egressProfileId"`
	// A QoS profile to apply for ingress traffic. *Note* leaving empty
	// means `unlimited`.
	IngressProfileId *string `pulumi:"ingressProfileId"`
	// Org in which the NSX-T Edge Gateway is located
	Org *string `pulumi:"org"`
}

// The set of arguments for constructing a NsxtEdgegatewayRateLimiting resource.
type NsxtEdgegatewayRateLimitingArgs struct {
	// NSX-T Edge Gateway ID
	EdgeGatewayId pulumi.StringInput
	// A QoS profile to apply for egress traffic. *Note* leaving empty
	// means `unlimited`.
	//
	// > Ingress and Egress profile IDs can be looked up using
	// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
	// data source.
	EgressProfileId pulumi.StringPtrInput
	// A QoS profile to apply for ingress traffic. *Note* leaving empty
	// means `unlimited`.
	IngressProfileId pulumi.StringPtrInput
	// Org in which the NSX-T Edge Gateway is located
	Org pulumi.StringPtrInput
}

func (NsxtEdgegatewayRateLimitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtEdgegatewayRateLimitingArgs)(nil)).Elem()
}

type NsxtEdgegatewayRateLimitingInput interface {
	pulumi.Input

	ToNsxtEdgegatewayRateLimitingOutput() NsxtEdgegatewayRateLimitingOutput
	ToNsxtEdgegatewayRateLimitingOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingOutput
}

func (*NsxtEdgegatewayRateLimiting) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (i *NsxtEdgegatewayRateLimiting) ToNsxtEdgegatewayRateLimitingOutput() NsxtEdgegatewayRateLimitingOutput {
	return i.ToNsxtEdgegatewayRateLimitingOutputWithContext(context.Background())
}

func (i *NsxtEdgegatewayRateLimiting) ToNsxtEdgegatewayRateLimitingOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayRateLimitingOutput)
}

// NsxtEdgegatewayRateLimitingArrayInput is an input type that accepts NsxtEdgegatewayRateLimitingArray and NsxtEdgegatewayRateLimitingArrayOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayRateLimitingArrayInput` via:
//
//	NsxtEdgegatewayRateLimitingArray{ NsxtEdgegatewayRateLimitingArgs{...} }
type NsxtEdgegatewayRateLimitingArrayInput interface {
	pulumi.Input

	ToNsxtEdgegatewayRateLimitingArrayOutput() NsxtEdgegatewayRateLimitingArrayOutput
	ToNsxtEdgegatewayRateLimitingArrayOutputWithContext(context.Context) NsxtEdgegatewayRateLimitingArrayOutput
}

type NsxtEdgegatewayRateLimitingArray []NsxtEdgegatewayRateLimitingInput

func (NsxtEdgegatewayRateLimitingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (i NsxtEdgegatewayRateLimitingArray) ToNsxtEdgegatewayRateLimitingArrayOutput() NsxtEdgegatewayRateLimitingArrayOutput {
	return i.ToNsxtEdgegatewayRateLimitingArrayOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayRateLimitingArray) ToNsxtEdgegatewayRateLimitingArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayRateLimitingArrayOutput)
}

// NsxtEdgegatewayRateLimitingMapInput is an input type that accepts NsxtEdgegatewayRateLimitingMap and NsxtEdgegatewayRateLimitingMapOutput values.
// You can construct a concrete instance of `NsxtEdgegatewayRateLimitingMapInput` via:
//
//	NsxtEdgegatewayRateLimitingMap{ "key": NsxtEdgegatewayRateLimitingArgs{...} }
type NsxtEdgegatewayRateLimitingMapInput interface {
	pulumi.Input

	ToNsxtEdgegatewayRateLimitingMapOutput() NsxtEdgegatewayRateLimitingMapOutput
	ToNsxtEdgegatewayRateLimitingMapOutputWithContext(context.Context) NsxtEdgegatewayRateLimitingMapOutput
}

type NsxtEdgegatewayRateLimitingMap map[string]NsxtEdgegatewayRateLimitingInput

func (NsxtEdgegatewayRateLimitingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (i NsxtEdgegatewayRateLimitingMap) ToNsxtEdgegatewayRateLimitingMapOutput() NsxtEdgegatewayRateLimitingMapOutput {
	return i.ToNsxtEdgegatewayRateLimitingMapOutputWithContext(context.Background())
}

func (i NsxtEdgegatewayRateLimitingMap) ToNsxtEdgegatewayRateLimitingMapOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtEdgegatewayRateLimitingMapOutput)
}

type NsxtEdgegatewayRateLimitingOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayRateLimitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (o NsxtEdgegatewayRateLimitingOutput) ToNsxtEdgegatewayRateLimitingOutput() NsxtEdgegatewayRateLimitingOutput {
	return o
}

func (o NsxtEdgegatewayRateLimitingOutput) ToNsxtEdgegatewayRateLimitingOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingOutput {
	return o
}

// NSX-T Edge Gateway ID
func (o NsxtEdgegatewayRateLimitingOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayRateLimiting) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// A QoS profile to apply for egress traffic. *Note* leaving empty
// means `unlimited`.
//
// > Ingress and Egress profile IDs can be looked up using
// [`getNsxtEdgegatewayQosProfile`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway_qos_profile)
// data source.
func (o NsxtEdgegatewayRateLimitingOutput) EgressProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayRateLimiting) pulumi.StringPtrOutput { return v.EgressProfileId }).(pulumi.StringPtrOutput)
}

// A QoS profile to apply for ingress traffic. *Note* leaving empty
// means `unlimited`.
func (o NsxtEdgegatewayRateLimitingOutput) IngressProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayRateLimiting) pulumi.StringPtrOutput { return v.IngressProfileId }).(pulumi.StringPtrOutput)
}

// Org in which the NSX-T Edge Gateway is located
func (o NsxtEdgegatewayRateLimitingOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtEdgegatewayRateLimiting) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

type NsxtEdgegatewayRateLimitingArrayOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayRateLimitingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (o NsxtEdgegatewayRateLimitingArrayOutput) ToNsxtEdgegatewayRateLimitingArrayOutput() NsxtEdgegatewayRateLimitingArrayOutput {
	return o
}

func (o NsxtEdgegatewayRateLimitingArrayOutput) ToNsxtEdgegatewayRateLimitingArrayOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingArrayOutput {
	return o
}

func (o NsxtEdgegatewayRateLimitingArrayOutput) Index(i pulumi.IntInput) NsxtEdgegatewayRateLimitingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtEdgegatewayRateLimiting {
		return vs[0].([]*NsxtEdgegatewayRateLimiting)[vs[1].(int)]
	}).(NsxtEdgegatewayRateLimitingOutput)
}

type NsxtEdgegatewayRateLimitingMapOutput struct{ *pulumi.OutputState }

func (NsxtEdgegatewayRateLimitingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtEdgegatewayRateLimiting)(nil)).Elem()
}

func (o NsxtEdgegatewayRateLimitingMapOutput) ToNsxtEdgegatewayRateLimitingMapOutput() NsxtEdgegatewayRateLimitingMapOutput {
	return o
}

func (o NsxtEdgegatewayRateLimitingMapOutput) ToNsxtEdgegatewayRateLimitingMapOutputWithContext(ctx context.Context) NsxtEdgegatewayRateLimitingMapOutput {
	return o
}

func (o NsxtEdgegatewayRateLimitingMapOutput) MapIndex(k pulumi.StringInput) NsxtEdgegatewayRateLimitingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtEdgegatewayRateLimiting {
		return vs[0].(map[string]*NsxtEdgegatewayRateLimiting)[vs[1].(string)]
	}).(NsxtEdgegatewayRateLimitingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayRateLimitingInput)(nil)).Elem(), &NsxtEdgegatewayRateLimiting{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayRateLimitingArrayInput)(nil)).Elem(), NsxtEdgegatewayRateLimitingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtEdgegatewayRateLimitingMapInput)(nil)).Elem(), NsxtEdgegatewayRateLimitingMap{})
	pulumi.RegisterOutputType(NsxtEdgegatewayRateLimitingOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayRateLimitingArrayOutput{})
	pulumi.RegisterOutputType(NsxtEdgegatewayRateLimitingMapOutput{})
}
