// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the capability of fetching an existing Runtime Defined Entity Interface from VMware Cloud Director.
//
// Supported in provider *v3.9+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myInterface, err := vcd.LookupRdeInterface(ctx, &vcd.LookupRdeInterfaceArgs{
//				Vendor:  "bigcorp",
//				Nss:     "tech",
//				Version: "1.2.3",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("interfaceName", myInterface.Name)
//			ctx.Export("interfaceId", myInterface.Id)
//			return nil
//		})
//	}
//
// ```
func LookupRdeInterface(ctx *pulumi.Context, args *LookupRdeInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupRdeInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRdeInterfaceResult
	err := ctx.Invoke("vcd:index/getRdeInterface:getRdeInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRdeInterface.
type LookupRdeInterfaceArgs struct {
	// A unique namespace associated with the RDE Interface.
	Nss string `pulumi:"nss"`
	// The vendor of the RDE Interface.
	Vendor string `pulumi:"vendor"`
	// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
	Version string `pulumi:"version"`
}

// A collection of values returned by getRdeInterface.
type LookupRdeInterfaceResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Name     string `pulumi:"name"`
	Nss      string `pulumi:"nss"`
	Readonly bool   `pulumi:"readonly"`
	Vendor   string `pulumi:"vendor"`
	Version  string `pulumi:"version"`
}

func LookupRdeInterfaceOutput(ctx *pulumi.Context, args LookupRdeInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupRdeInterfaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRdeInterfaceResultOutput, error) {
			args := v.(LookupRdeInterfaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getRdeInterface:getRdeInterface", args, LookupRdeInterfaceResultOutput{}, options).(LookupRdeInterfaceResultOutput), nil
		}).(LookupRdeInterfaceResultOutput)
}

// A collection of arguments for invoking getRdeInterface.
type LookupRdeInterfaceOutputArgs struct {
	// A unique namespace associated with the RDE Interface.
	Nss pulumi.StringInput `pulumi:"nss"`
	// The vendor of the RDE Interface.
	Vendor pulumi.StringInput `pulumi:"vendor"`
	// The version of the RDE Interface. Must follow [semantic versioning](https://semver.org/) syntax.
	Version pulumi.StringInput `pulumi:"version"`
}

func (LookupRdeInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdeInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getRdeInterface.
type LookupRdeInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupRdeInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRdeInterfaceResult)(nil)).Elem()
}

func (o LookupRdeInterfaceResultOutput) ToLookupRdeInterfaceResultOutput() LookupRdeInterfaceResultOutput {
	return o
}

func (o LookupRdeInterfaceResultOutput) ToLookupRdeInterfaceResultOutputWithContext(ctx context.Context) LookupRdeInterfaceResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRdeInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRdeInterfaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRdeInterfaceResultOutput) Nss() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) string { return v.Nss }).(pulumi.StringOutput)
}

func (o LookupRdeInterfaceResultOutput) Readonly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) bool { return v.Readonly }).(pulumi.BoolOutput)
}

func (o LookupRdeInterfaceResultOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) string { return v.Vendor }).(pulumi.StringOutput)
}

func (o LookupRdeInterfaceResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRdeInterfaceResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRdeInterfaceResultOutput{})
}
