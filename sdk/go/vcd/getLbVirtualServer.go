// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
// internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests.
//
// > **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
// This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&29=&93=)
// to check supported VMware Cloud Director and NSX for vSphere configurations.
//
// > **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere
// API Guide. The API supports NSX 6.2, 6.3, and 6.4.
//
// Supported in provider *v2.4+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.LookupLbVirtualServer(ctx, &vcd.LookupLbVirtualServerArgs{
//				Org:         pulumi.StringRef("my-org"),
//				Vdc:         pulumi.StringRef("my-org-vdc"),
//				EdgeGateway: "my-edge-gw",
//				Name:        "not-managed",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLbVirtualServer(ctx *pulumi.Context, args *LookupLbVirtualServerArgs, opts ...pulumi.InvokeOption) (*LookupLbVirtualServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLbVirtualServerResult
	err := ctx.Invoke("vcd:index/getLbVirtualServer:getLbVirtualServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbVirtualServer.
type LookupLbVirtualServerArgs struct {
	// The name of the edge gateway on which the virtual server is defined
	EdgeGateway string `pulumi:"edgeGateway"`
	// Name for identifying the exact virtual server
	Name string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org *string `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc *string `pulumi:"vdc"`
}

// A collection of values returned by getLbVirtualServer.
type LookupLbVirtualServerResult struct {
	AppProfileId        string   `pulumi:"appProfileId"`
	AppRuleIds          []string `pulumi:"appRuleIds"`
	ConnectionLimit     int      `pulumi:"connectionLimit"`
	ConnectionRateLimit int      `pulumi:"connectionRateLimit"`
	Description         string   `pulumi:"description"`
	EdgeGateway         string   `pulumi:"edgeGateway"`
	EnableAcceleration  bool     `pulumi:"enableAcceleration"`
	Enabled             bool     `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	IpAddress    string  `pulumi:"ipAddress"`
	Name         string  `pulumi:"name"`
	Org          *string `pulumi:"org"`
	Port         int     `pulumi:"port"`
	Protocol     string  `pulumi:"protocol"`
	ServerPoolId string  `pulumi:"serverPoolId"`
	Vdc          *string `pulumi:"vdc"`
}

func LookupLbVirtualServerOutput(ctx *pulumi.Context, args LookupLbVirtualServerOutputArgs, opts ...pulumi.InvokeOption) LookupLbVirtualServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLbVirtualServerResultOutput, error) {
			args := v.(LookupLbVirtualServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getLbVirtualServer:getLbVirtualServer", args, LookupLbVirtualServerResultOutput{}, options).(LookupLbVirtualServerResultOutput), nil
		}).(LookupLbVirtualServerResultOutput)
}

// A collection of arguments for invoking getLbVirtualServer.
type LookupLbVirtualServerOutputArgs struct {
	// The name of the edge gateway on which the virtual server is defined
	EdgeGateway pulumi.StringInput `pulumi:"edgeGateway"`
	// Name for identifying the exact virtual server
	Name pulumi.StringInput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
	Org pulumi.StringPtrInput `pulumi:"org"`
	// The name of VDC to use, optional if defined at provider level
	Vdc pulumi.StringPtrInput `pulumi:"vdc"`
}

func (LookupLbVirtualServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbVirtualServerArgs)(nil)).Elem()
}

// A collection of values returned by getLbVirtualServer.
type LookupLbVirtualServerResultOutput struct{ *pulumi.OutputState }

func (LookupLbVirtualServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbVirtualServerResult)(nil)).Elem()
}

func (o LookupLbVirtualServerResultOutput) ToLookupLbVirtualServerResultOutput() LookupLbVirtualServerResultOutput {
	return o
}

func (o LookupLbVirtualServerResultOutput) ToLookupLbVirtualServerResultOutputWithContext(ctx context.Context) LookupLbVirtualServerResultOutput {
	return o
}

func (o LookupLbVirtualServerResultOutput) AppProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.AppProfileId }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) AppRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) []string { return v.AppRuleIds }).(pulumi.StringArrayOutput)
}

func (o LookupLbVirtualServerResultOutput) ConnectionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) int { return v.ConnectionLimit }).(pulumi.IntOutput)
}

func (o LookupLbVirtualServerResultOutput) ConnectionRateLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) int { return v.ConnectionRateLimit }).(pulumi.IntOutput)
}

func (o LookupLbVirtualServerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) EdgeGateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.EdgeGateway }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) EnableAcceleration() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) bool { return v.EnableAcceleration }).(pulumi.BoolOutput)
}

func (o LookupLbVirtualServerResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLbVirtualServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) *string { return v.Org }).(pulumi.StringPtrOutput)
}

func (o LookupLbVirtualServerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) int { return v.Port }).(pulumi.IntOutput)
}

func (o LookupLbVirtualServerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) ServerPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) string { return v.ServerPoolId }).(pulumi.StringOutput)
}

func (o LookupLbVirtualServerResultOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLbVirtualServerResult) *string { return v.Vdc }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLbVirtualServerResultOutput{})
}
