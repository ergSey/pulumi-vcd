// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read a VMware Cloud Director Org association data to be used for association with another Org.
//
// Supported in provider *v3.13+*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_org, err := vcd.LookupOrg(ctx, &vcd.LookupOrgArgs{
//				Name: "my-org",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.GetMultisiteOrgData(ctx, &vcd.GetMultisiteOrgDataArgs{
//				OrgId:          my_org.Id,
//				DownloadToFile: pulumi.StringRef("filename.xml"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## More information
//
// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
// of association workflows.
func GetMultisiteOrgData(ctx *pulumi.Context, args *GetMultisiteOrgDataArgs, opts ...pulumi.InvokeOption) (*GetMultisiteOrgDataResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMultisiteOrgDataResult
	err := ctx.Invoke("vcd:index/getMultisiteOrgData:getMultisiteOrgData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMultisiteOrgData.
type GetMultisiteOrgDataArgs struct {
	// Name of the file that will contain the data needed to associate this Org to another one,
	// either on the same VCD or in a different one.
	// Contains the same data returned in `associationData`.
	DownloadToFile *string `pulumi:"downloadToFile"`
	// The ID of the organization for which we need to collect the data.
	OrgId string `pulumi:"orgId"`
}

// A collection of values returned by getMultisiteOrgData.
type GetMultisiteOrgDataResult struct {
	// The data needed to associate this Org to another one. Contains the same data that would be saved into
	// the file defined in `downloadToFile`.
	AssociationData string `pulumi:"associationData"`
	// An alphabetically sorted list of current associations.
	Associations   []string `pulumi:"associations"`
	DownloadToFile *string  `pulumi:"downloadToFile"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The number of current associations with other Orgs.
	NumberOfAssociations int    `pulumi:"numberOfAssociations"`
	OrgId                string `pulumi:"orgId"`
}

func GetMultisiteOrgDataOutput(ctx *pulumi.Context, args GetMultisiteOrgDataOutputArgs, opts ...pulumi.InvokeOption) GetMultisiteOrgDataResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMultisiteOrgDataResultOutput, error) {
			args := v.(GetMultisiteOrgDataArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getMultisiteOrgData:getMultisiteOrgData", args, GetMultisiteOrgDataResultOutput{}, options).(GetMultisiteOrgDataResultOutput), nil
		}).(GetMultisiteOrgDataResultOutput)
}

// A collection of arguments for invoking getMultisiteOrgData.
type GetMultisiteOrgDataOutputArgs struct {
	// Name of the file that will contain the data needed to associate this Org to another one,
	// either on the same VCD or in a different one.
	// Contains the same data returned in `associationData`.
	DownloadToFile pulumi.StringPtrInput `pulumi:"downloadToFile"`
	// The ID of the organization for which we need to collect the data.
	OrgId pulumi.StringInput `pulumi:"orgId"`
}

func (GetMultisiteOrgDataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMultisiteOrgDataArgs)(nil)).Elem()
}

// A collection of values returned by getMultisiteOrgData.
type GetMultisiteOrgDataResultOutput struct{ *pulumi.OutputState }

func (GetMultisiteOrgDataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMultisiteOrgDataResult)(nil)).Elem()
}

func (o GetMultisiteOrgDataResultOutput) ToGetMultisiteOrgDataResultOutput() GetMultisiteOrgDataResultOutput {
	return o
}

func (o GetMultisiteOrgDataResultOutput) ToGetMultisiteOrgDataResultOutputWithContext(ctx context.Context) GetMultisiteOrgDataResultOutput {
	return o
}

// The data needed to associate this Org to another one. Contains the same data that would be saved into
// the file defined in `downloadToFile`.
func (o GetMultisiteOrgDataResultOutput) AssociationData() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) string { return v.AssociationData }).(pulumi.StringOutput)
}

// An alphabetically sorted list of current associations.
func (o GetMultisiteOrgDataResultOutput) Associations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) []string { return v.Associations }).(pulumi.StringArrayOutput)
}

func (o GetMultisiteOrgDataResultOutput) DownloadToFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) *string { return v.DownloadToFile }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMultisiteOrgDataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of current associations with other Orgs.
func (o GetMultisiteOrgDataResultOutput) NumberOfAssociations() pulumi.IntOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) int { return v.NumberOfAssociations }).(pulumi.IntOutput)
}

func (o GetMultisiteOrgDataResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteOrgDataResult) string { return v.OrgId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMultisiteOrgDataResultOutput{})
}
