// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Edgegateway struct {
	pulumi.CustomResourceState

	// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
	Configuration pulumi.StringOutput `pulumi:"configuration"`
	// (*v2.6+*) - IP address of edge gateway used for default network
	DefaultExternalNetworkIp pulumi.StringOutput    `pulumi:"defaultExternalNetworkIp"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	// If advanced networking enabled, also enable distributed
	// routing. Default is `false`.
	DistributedRouting pulumi.BoolPtrOutput `pulumi:"distributedRouting"`
	// (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
	// connected to external networks.
	ExternalNetworkIps pulumi.StringArrayOutput `pulumi:"externalNetworkIps"`
	// One or more blocks defining external networks, their
	// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
	// in external network block below.
	ExternalNetworks EdgegatewayExternalNetworkArrayOutput `pulumi:"externalNetworks"`
	// When FIPS mode is enabled, any secure communication to or from
	// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
	// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
	// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
	FipsModeEnabled pulumi.BoolPtrOutput `pulumi:"fipsModeEnabled"`
	// Default firewall rule (last in the processing order) action.
	// One of `accept` or `deny`. Default `deny`.
	//
	// <a id="external-network"></a>
	FwDefaultRuleAction pulumi.StringPtrOutput `pulumi:"fwDefaultRuleAction"`
	// Enable default firewall rule (last in the processing
	// order) logging. Default `false`.
	FwDefaultRuleLoggingEnabled pulumi.BoolPtrOutput `pulumi:"fwDefaultRuleLoggingEnabled"`
	// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
	// disable NAT and other NAT dependent features like Load Balancer.
	FwEnabled pulumi.BoolPtrOutput `pulumi:"fwEnabled"`
	// Enable high availability on this edge gateway. Default is `false`.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// Enable to configure the load balancer to use the faster L4
	// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
	// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
	// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
	// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
	// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
	// that the firewall is enabled on the edge gateway.
	LbAccelerationEnabled pulumi.BoolPtrOutput `pulumi:"lbAccelerationEnabled"`
	// Enable load balancing. Default is `false`.
	LbEnabled pulumi.BoolPtrOutput `pulumi:"lbEnabled"`
	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is `false`.
	LbLoggingEnabled pulumi.BoolPtrOutput `pulumi:"lbLoggingEnabled"`
	// Choose the severity of events to be logged. One of `emergency`,
	// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
	LbLoglevel pulumi.StringPtrOutput `pulumi:"lbLoglevel"`
	// A unique name for the edge gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// When default route is set, it will be used for
	// gateways' default routing and DNS forwarding. Default is `false`.
	UseDefaultRouteForDnsRelay pulumi.BoolOutput `pulumi:"useDefaultRouteForDnsRelay"`
	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	Vdc pulumi.StringPtrOutput `pulumi:"vdc"`
}

// NewEdgegateway registers a new resource with the given unique name, arguments, and options.
func NewEdgegateway(ctx *pulumi.Context,
	name string, args *EdgegatewayArgs, opts ...pulumi.ResourceOption) (*Edgegateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.ExternalNetworks == nil {
		return nil, errors.New("invalid value for required argument 'ExternalNetworks'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Edgegateway
	err := ctx.RegisterResource("vcd:index/edgegateway:Edgegateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgegateway gets an existing Edgegateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgegateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgegatewayState, opts ...pulumi.ResourceOption) (*Edgegateway, error) {
	var resource Edgegateway
	err := ctx.ReadResource("vcd:index/edgegateway:Edgegateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Edgegateway resources.
type edgegatewayState struct {
	// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
	Configuration *string `pulumi:"configuration"`
	// (*v2.6+*) - IP address of edge gateway used for default network
	DefaultExternalNetworkIp *string `pulumi:"defaultExternalNetworkIp"`
	Description              *string `pulumi:"description"`
	// If advanced networking enabled, also enable distributed
	// routing. Default is `false`.
	DistributedRouting *bool `pulumi:"distributedRouting"`
	// (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
	// connected to external networks.
	ExternalNetworkIps []string `pulumi:"externalNetworkIps"`
	// One or more blocks defining external networks, their
	// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
	// in external network block below.
	ExternalNetworks []EdgegatewayExternalNetwork `pulumi:"externalNetworks"`
	// When FIPS mode is enabled, any secure communication to or from
	// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
	// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
	// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
	FipsModeEnabled *bool `pulumi:"fipsModeEnabled"`
	// Default firewall rule (last in the processing order) action.
	// One of `accept` or `deny`. Default `deny`.
	//
	// <a id="external-network"></a>
	FwDefaultRuleAction *string `pulumi:"fwDefaultRuleAction"`
	// Enable default firewall rule (last in the processing
	// order) logging. Default `false`.
	FwDefaultRuleLoggingEnabled *bool `pulumi:"fwDefaultRuleLoggingEnabled"`
	// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
	// disable NAT and other NAT dependent features like Load Balancer.
	FwEnabled *bool `pulumi:"fwEnabled"`
	// Enable high availability on this edge gateway. Default is `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Enable to configure the load balancer to use the faster L4
	// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
	// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
	// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
	// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
	// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
	// that the firewall is enabled on the edge gateway.
	LbAccelerationEnabled *bool `pulumi:"lbAccelerationEnabled"`
	// Enable load balancing. Default is `false`.
	LbEnabled *bool `pulumi:"lbEnabled"`
	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is `false`.
	LbLoggingEnabled *bool `pulumi:"lbLoggingEnabled"`
	// Choose the severity of events to be logged. One of `emergency`,
	// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
	LbLoglevel *string `pulumi:"lbLoglevel"`
	// A unique name for the edge gateway.
	Name *string `pulumi:"name"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// When default route is set, it will be used for
	// gateways' default routing and DNS forwarding. Default is `false`.
	UseDefaultRouteForDnsRelay *bool `pulumi:"useDefaultRouteForDnsRelay"`
	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

type EdgegatewayState struct {
	// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
	Configuration pulumi.StringPtrInput
	// (*v2.6+*) - IP address of edge gateway used for default network
	DefaultExternalNetworkIp pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	// If advanced networking enabled, also enable distributed
	// routing. Default is `false`.
	DistributedRouting pulumi.BoolPtrInput
	// (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
	// connected to external networks.
	ExternalNetworkIps pulumi.StringArrayInput
	// One or more blocks defining external networks, their
	// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
	// in external network block below.
	ExternalNetworks EdgegatewayExternalNetworkArrayInput
	// When FIPS mode is enabled, any secure communication to or from
	// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
	// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
	// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
	FipsModeEnabled pulumi.BoolPtrInput
	// Default firewall rule (last in the processing order) action.
	// One of `accept` or `deny`. Default `deny`.
	//
	// <a id="external-network"></a>
	FwDefaultRuleAction pulumi.StringPtrInput
	// Enable default firewall rule (last in the processing
	// order) logging. Default `false`.
	FwDefaultRuleLoggingEnabled pulumi.BoolPtrInput
	// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
	// disable NAT and other NAT dependent features like Load Balancer.
	FwEnabled pulumi.BoolPtrInput
	// Enable high availability on this edge gateway. Default is `false`.
	HaEnabled pulumi.BoolPtrInput
	// Enable to configure the load balancer to use the faster L4
	// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
	// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
	// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
	// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
	// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
	// that the firewall is enabled on the edge gateway.
	LbAccelerationEnabled pulumi.BoolPtrInput
	// Enable load balancing. Default is `false`.
	LbEnabled pulumi.BoolPtrInput
	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is `false`.
	LbLoggingEnabled pulumi.BoolPtrInput
	// Choose the severity of events to be logged. One of `emergency`,
	// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
	LbLoglevel pulumi.StringPtrInput
	// A unique name for the edge gateway.
	Name pulumi.StringPtrInput
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// When default route is set, it will be used for
	// gateways' default routing and DNS forwarding. Default is `false`.
	UseDefaultRouteForDnsRelay pulumi.BoolPtrInput
	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (EdgegatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgegatewayState)(nil)).Elem()
}

type edgegatewayArgs struct {
	// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
	Configuration string  `pulumi:"configuration"`
	Description   *string `pulumi:"description"`
	// If advanced networking enabled, also enable distributed
	// routing. Default is `false`.
	DistributedRouting *bool `pulumi:"distributedRouting"`
	// One or more blocks defining external networks, their
	// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
	// in external network block below.
	ExternalNetworks []EdgegatewayExternalNetwork `pulumi:"externalNetworks"`
	// When FIPS mode is enabled, any secure communication to or from
	// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
	// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
	// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
	FipsModeEnabled *bool `pulumi:"fipsModeEnabled"`
	// Default firewall rule (last in the processing order) action.
	// One of `accept` or `deny`. Default `deny`.
	//
	// <a id="external-network"></a>
	FwDefaultRuleAction *string `pulumi:"fwDefaultRuleAction"`
	// Enable default firewall rule (last in the processing
	// order) logging. Default `false`.
	FwDefaultRuleLoggingEnabled *bool `pulumi:"fwDefaultRuleLoggingEnabled"`
	// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
	// disable NAT and other NAT dependent features like Load Balancer.
	FwEnabled *bool `pulumi:"fwEnabled"`
	// Enable high availability on this edge gateway. Default is `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// Enable to configure the load balancer to use the faster L4
	// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
	// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
	// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
	// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
	// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
	// that the firewall is enabled on the edge gateway.
	LbAccelerationEnabled *bool `pulumi:"lbAccelerationEnabled"`
	// Enable load balancing. Default is `false`.
	LbEnabled *bool `pulumi:"lbEnabled"`
	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is `false`.
	LbLoggingEnabled *bool `pulumi:"lbLoggingEnabled"`
	// Choose the severity of events to be logged. One of `emergency`,
	// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
	LbLoglevel *string `pulumi:"lbLoglevel"`
	// A unique name for the edge gateway.
	Name *string `pulumi:"name"`
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org *string `pulumi:"org"`
	// When default route is set, it will be used for
	// gateways' default routing and DNS forwarding. Default is `false`.
	UseDefaultRouteForDnsRelay *bool `pulumi:"useDefaultRouteForDnsRelay"`
	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	Vdc *string `pulumi:"vdc"`
}

// The set of arguments for constructing a Edgegateway resource.
type EdgegatewayArgs struct {
	// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
	Configuration pulumi.StringInput
	Description   pulumi.StringPtrInput
	// If advanced networking enabled, also enable distributed
	// routing. Default is `false`.
	DistributedRouting pulumi.BoolPtrInput
	// One or more blocks defining external networks, their
	// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
	// in external network block below.
	ExternalNetworks EdgegatewayExternalNetworkArrayInput
	// When FIPS mode is enabled, any secure communication to or from
	// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
	// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
	// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
	FipsModeEnabled pulumi.BoolPtrInput
	// Default firewall rule (last in the processing order) action.
	// One of `accept` or `deny`. Default `deny`.
	//
	// <a id="external-network"></a>
	FwDefaultRuleAction pulumi.StringPtrInput
	// Enable default firewall rule (last in the processing
	// order) logging. Default `false`.
	FwDefaultRuleLoggingEnabled pulumi.BoolPtrInput
	// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
	// disable NAT and other NAT dependent features like Load Balancer.
	FwEnabled pulumi.BoolPtrInput
	// Enable high availability on this edge gateway. Default is `false`.
	HaEnabled pulumi.BoolPtrInput
	// Enable to configure the load balancer to use the faster L4
	// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
	// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
	// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
	// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
	// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
	// that the firewall is enabled on the edge gateway.
	LbAccelerationEnabled pulumi.BoolPtrInput
	// Enable load balancing. Default is `false`.
	LbEnabled pulumi.BoolPtrInput
	// Enables the edge gateway load balancer to collect traffic logs.
	// Default is `false`.
	LbLoggingEnabled pulumi.BoolPtrInput
	// Choose the severity of events to be logged. One of `emergency`,
	// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
	LbLoglevel pulumi.StringPtrInput
	// A unique name for the edge gateway.
	Name pulumi.StringPtrInput
	// The name of organization to which the VDC belongs. Optional if defined at provider level.
	Org pulumi.StringPtrInput
	// When default route is set, it will be used for
	// gateways' default routing and DNS forwarding. Default is `false`.
	UseDefaultRouteForDnsRelay pulumi.BoolPtrInput
	// The name of VDC that owns the edge gateway. Optional if defined at provider level.
	Vdc pulumi.StringPtrInput
}

func (EdgegatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgegatewayArgs)(nil)).Elem()
}

type EdgegatewayInput interface {
	pulumi.Input

	ToEdgegatewayOutput() EdgegatewayOutput
	ToEdgegatewayOutputWithContext(ctx context.Context) EdgegatewayOutput
}

func (*Edgegateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Edgegateway)(nil)).Elem()
}

func (i *Edgegateway) ToEdgegatewayOutput() EdgegatewayOutput {
	return i.ToEdgegatewayOutputWithContext(context.Background())
}

func (i *Edgegateway) ToEdgegatewayOutputWithContext(ctx context.Context) EdgegatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayOutput)
}

// EdgegatewayArrayInput is an input type that accepts EdgegatewayArray and EdgegatewayArrayOutput values.
// You can construct a concrete instance of `EdgegatewayArrayInput` via:
//
//	EdgegatewayArray{ EdgegatewayArgs{...} }
type EdgegatewayArrayInput interface {
	pulumi.Input

	ToEdgegatewayArrayOutput() EdgegatewayArrayOutput
	ToEdgegatewayArrayOutputWithContext(context.Context) EdgegatewayArrayOutput
}

type EdgegatewayArray []EdgegatewayInput

func (EdgegatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Edgegateway)(nil)).Elem()
}

func (i EdgegatewayArray) ToEdgegatewayArrayOutput() EdgegatewayArrayOutput {
	return i.ToEdgegatewayArrayOutputWithContext(context.Background())
}

func (i EdgegatewayArray) ToEdgegatewayArrayOutputWithContext(ctx context.Context) EdgegatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayArrayOutput)
}

// EdgegatewayMapInput is an input type that accepts EdgegatewayMap and EdgegatewayMapOutput values.
// You can construct a concrete instance of `EdgegatewayMapInput` via:
//
//	EdgegatewayMap{ "key": EdgegatewayArgs{...} }
type EdgegatewayMapInput interface {
	pulumi.Input

	ToEdgegatewayMapOutput() EdgegatewayMapOutput
	ToEdgegatewayMapOutputWithContext(context.Context) EdgegatewayMapOutput
}

type EdgegatewayMap map[string]EdgegatewayInput

func (EdgegatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Edgegateway)(nil)).Elem()
}

func (i EdgegatewayMap) ToEdgegatewayMapOutput() EdgegatewayMapOutput {
	return i.ToEdgegatewayMapOutputWithContext(context.Background())
}

func (i EdgegatewayMap) ToEdgegatewayMapOutputWithContext(ctx context.Context) EdgegatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgegatewayMapOutput)
}

type EdgegatewayOutput struct{ *pulumi.OutputState }

func (EdgegatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Edgegateway)(nil)).Elem()
}

func (o EdgegatewayOutput) ToEdgegatewayOutput() EdgegatewayOutput {
	return o
}

func (o EdgegatewayOutput) ToEdgegatewayOutputWithContext(ctx context.Context) EdgegatewayOutput {
	return o
}

// Configuration of the vShield edge VM for this gateway. One of: `compact`, `full` ("Large"), `x-large`, `full4` ("Quad Large").
func (o EdgegatewayOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringOutput { return v.Configuration }).(pulumi.StringOutput)
}

// (*v2.6+*) - IP address of edge gateway used for default network
func (o EdgegatewayOutput) DefaultExternalNetworkIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringOutput { return v.DefaultExternalNetworkIp }).(pulumi.StringOutput)
}

func (o EdgegatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If advanced networking enabled, also enable distributed
// routing. Default is `false`.
func (o EdgegatewayOutput) DistributedRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.DistributedRouting }).(pulumi.BoolPtrOutput)
}

// (*v2.6+*) - A list of IP addresses assigned to edge gateway interfaces
// connected to external networks.
func (o EdgegatewayOutput) ExternalNetworkIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringArrayOutput { return v.ExternalNetworkIps }).(pulumi.StringArrayOutput)
}

// One or more blocks defining external networks, their
// subnets, IP addresses and  IP pool suballocation attached to edge gateway interfaces. Details are
// in external network block below.
func (o EdgegatewayOutput) ExternalNetworks() EdgegatewayExternalNetworkArrayOutput {
	return o.ApplyT(func(v *Edgegateway) EdgegatewayExternalNetworkArrayOutput { return v.ExternalNetworks }).(EdgegatewayExternalNetworkArrayOutput)
}

// When FIPS mode is enabled, any secure communication to or from
// the NSX Edge uses cryptographic algorithms or protocols that are allowed by United States Federal
// Information Processing Standards (FIPS). FIPS mode turns on the cipher suites that comply with
// FIPS. Default is `false`. **Note:** to use FIPS mode it must be enabled in vCD system settings.
func (o EdgegatewayOutput) FipsModeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.FipsModeEnabled }).(pulumi.BoolPtrOutput)
}

// Default firewall rule (last in the processing order) action.
// One of `accept` or `deny`. Default `deny`.
//
// <a id="external-network"></a>
func (o EdgegatewayOutput) FwDefaultRuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringPtrOutput { return v.FwDefaultRuleAction }).(pulumi.StringPtrOutput)
}

// Enable default firewall rule (last in the processing
// order) logging. Default `false`.
func (o EdgegatewayOutput) FwDefaultRuleLoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.FwDefaultRuleLoggingEnabled }).(pulumi.BoolPtrOutput)
}

// Enable firewall. Default `true`. **Note:** Disabling Firewall will also
// disable NAT and other NAT dependent features like Load Balancer.
func (o EdgegatewayOutput) FwEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.FwEnabled }).(pulumi.BoolPtrOutput)
}

// Enable high availability on this edge gateway. Default is `false`.
func (o EdgegatewayOutput) HaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.HaEnabled }).(pulumi.BoolPtrOutput)
}

// Enable to configure the load balancer to use the faster L4
// engine rather than L7 engine. The L4 TCP VIP is processed before the edge gateway firewall so no
// `allow` firewall rule is required. Default is `false`. **Note:** L7 VIPs for HTTP and HTTPS are
// processed after the firewall, so when Acceleration Enabled is not selected, an edge gateway firewall
// rule must exist to allow access to the L7 VIP for those protocols. When Acceleration Enabled is
// selected and the server pool is in non-transparent mode, an SNAT rule is added, so you must ensure
// that the firewall is enabled on the edge gateway.
func (o EdgegatewayOutput) LbAccelerationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.LbAccelerationEnabled }).(pulumi.BoolPtrOutput)
}

// Enable load balancing. Default is `false`.
func (o EdgegatewayOutput) LbEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.LbEnabled }).(pulumi.BoolPtrOutput)
}

// Enables the edge gateway load balancer to collect traffic logs.
// Default is `false`.
func (o EdgegatewayOutput) LbLoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolPtrOutput { return v.LbLoggingEnabled }).(pulumi.BoolPtrOutput)
}

// Choose the severity of events to be logged. One of `emergency`,
// `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
func (o EdgegatewayOutput) LbLoglevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringPtrOutput { return v.LbLoglevel }).(pulumi.StringPtrOutput)
}

// A unique name for the edge gateway.
func (o EdgegatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to which the VDC belongs. Optional if defined at provider level.
func (o EdgegatewayOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// When default route is set, it will be used for
// gateways' default routing and DNS forwarding. Default is `false`.
func (o EdgegatewayOutput) UseDefaultRouteForDnsRelay() pulumi.BoolOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.BoolOutput { return v.UseDefaultRouteForDnsRelay }).(pulumi.BoolOutput)
}

// The name of VDC that owns the edge gateway. Optional if defined at provider level.
func (o EdgegatewayOutput) Vdc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Edgegateway) pulumi.StringPtrOutput { return v.Vdc }).(pulumi.StringPtrOutput)
}

type EdgegatewayArrayOutput struct{ *pulumi.OutputState }

func (EdgegatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Edgegateway)(nil)).Elem()
}

func (o EdgegatewayArrayOutput) ToEdgegatewayArrayOutput() EdgegatewayArrayOutput {
	return o
}

func (o EdgegatewayArrayOutput) ToEdgegatewayArrayOutputWithContext(ctx context.Context) EdgegatewayArrayOutput {
	return o
}

func (o EdgegatewayArrayOutput) Index(i pulumi.IntInput) EdgegatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Edgegateway {
		return vs[0].([]*Edgegateway)[vs[1].(int)]
	}).(EdgegatewayOutput)
}

type EdgegatewayMapOutput struct{ *pulumi.OutputState }

func (EdgegatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Edgegateway)(nil)).Elem()
}

func (o EdgegatewayMapOutput) ToEdgegatewayMapOutput() EdgegatewayMapOutput {
	return o
}

func (o EdgegatewayMapOutput) ToEdgegatewayMapOutputWithContext(ctx context.Context) EdgegatewayMapOutput {
	return o
}

func (o EdgegatewayMapOutput) MapIndex(k pulumi.StringInput) EdgegatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Edgegateway {
		return vs[0].(map[string]*Edgegateway)[vs[1].(string)]
	}).(EdgegatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayInput)(nil)).Elem(), &Edgegateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayArrayInput)(nil)).Elem(), EdgegatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgegatewayMapInput)(nil)).Elem(), EdgegatewayMap{})
	pulumi.RegisterOutputType(EdgegatewayOutput{})
	pulumi.RegisterOutputType(EdgegatewayArrayOutput{})
	pulumi.RegisterOutputType(EdgegatewayMapOutput{})
}
