// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a data source to read a VMware Cloud Director Site in the context of multi-site operatioos
//
// Supported in provider *v3.13+*
//
// > Note: this data source requires System Administrator privileges
//
// ## Example Usage
//
// Note: there is only one site available for each VCD. No ID or name is necessary to identify it.
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcd.GetMultisiteSite(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## More information
//
// See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
// of association workflows.
func GetMultisiteSite(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetMultisiteSiteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMultisiteSiteResult
	err := ctx.Invoke("vcd:index/getMultisiteSite:getMultisiteSite", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getMultisiteSite.
type GetMultisiteSiteResult struct {
	// An alphabetically sorted list of current associations.
	Associations []string `pulumi:"associations"`
	// An optional description of the site.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the site, which usually corresponds to its host name.
	Name string `pulumi:"name"`
	// The number of current associations with other sites.
	NumberOfAssociations int `pulumi:"numberOfAssociations"`
}

func GetMultisiteSiteOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetMultisiteSiteResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetMultisiteSiteResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("vcd:index/getMultisiteSite:getMultisiteSite", nil, GetMultisiteSiteResultOutput{}, options).(GetMultisiteSiteResultOutput), nil
	}).(GetMultisiteSiteResultOutput)
}

// A collection of values returned by getMultisiteSite.
type GetMultisiteSiteResultOutput struct{ *pulumi.OutputState }

func (GetMultisiteSiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMultisiteSiteResult)(nil)).Elem()
}

func (o GetMultisiteSiteResultOutput) ToGetMultisiteSiteResultOutput() GetMultisiteSiteResultOutput {
	return o
}

func (o GetMultisiteSiteResultOutput) ToGetMultisiteSiteResultOutputWithContext(ctx context.Context) GetMultisiteSiteResultOutput {
	return o
}

// An alphabetically sorted list of current associations.
func (o GetMultisiteSiteResultOutput) Associations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMultisiteSiteResult) []string { return v.Associations }).(pulumi.StringArrayOutput)
}

// An optional description of the site.
func (o GetMultisiteSiteResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteSiteResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMultisiteSiteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteSiteResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the site, which usually corresponds to its host name.
func (o GetMultisiteSiteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMultisiteSiteResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of current associations with other sites.
func (o GetMultisiteSiteResultOutput) NumberOfAssociations() pulumi.IntOutput {
	return o.ApplyT(func(v GetMultisiteSiteResult) int { return v.NumberOfAssociations }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMultisiteSiteResultOutput{})
}
