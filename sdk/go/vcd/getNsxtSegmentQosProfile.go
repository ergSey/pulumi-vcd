// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
//
// Supported in provider *v3.11+*.
//
// ## Example Usage
//
// ### QoS Profile)
//
// ```go
// package main
//
// import (
//
//	"github.com/ergSey/pulumi-vcd/sdk/go/vcd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			nsxt, err := vcd.GetNsxtManager(ctx, &vcd.GetNsxtManagerArgs{
//				Name: "nsxManager1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vcd.GetNsxtSegmentQosProfile(ctx, &vcd.GetNsxtSegmentQosProfileArgs{
//				Name:          "qos-profile-0",
//				NsxtManagerId: pulumi.StringRef(nsxt.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNsxtSegmentQosProfile(ctx *pulumi.Context, args *GetNsxtSegmentQosProfileArgs, opts ...pulumi.InvokeOption) (*GetNsxtSegmentQosProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNsxtSegmentQosProfileResult
	err := ctx.Invoke("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNsxtSegmentQosProfile.
type GetNsxtSegmentQosProfileArgs struct {
	// The name of Segment Profile
	Name string `pulumi:"name"`
	// Segment Profile search context. Use when searching by NSX-T manager
	NsxtManagerId *string `pulumi:"nsxtManagerId"`
	// Segment Profile search context. Use when searching by VDC group
	//
	// > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
	VdcGroupId *string `pulumi:"vdcGroupId"`
	// Segment Profile search context. Use when searching by VDC
	VdcId *string `pulumi:"vdcId"`
}

// A collection of values returned by getNsxtSegmentQosProfile.
type GetNsxtSegmentQosProfileResult struct {
	// Class of service groups similar types of traffic in the network and each type
	// of traffic is treated as a class with its own level of service priority. The lower priority
	// traffic is slowed down or in some cases dropped to provide better throughput for higher priority
	// traffic.
	ClassOfService int `pulumi:"classOfService"`
	// Description of QoS Profile
	Description string `pulumi:"description"`
	// A Differentiated Services Code Point (DSCP) priority
	// Profile.
	DscpPriority int `pulumi:"dscpPriority"`
	// A Differentiated Services Code Point (DSCP) trust mode. Values are below:
	// * `TRUSTED` - With Trusted mode the inner header DSCP value is applied to the outer IP header for
	//   IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.
	// * `UNTRUSTED` - Untrusted mode is supported on overlay-based and VLAN-based logical port.
	DscpTrustMode string `pulumi:"dscpTrustMode"`
	// Average egress bandwidth in Mb/s.
	EgressRateLimiterAvgBandwidth int `pulumi:"egressRateLimiterAvgBandwidth"`
	// Egress burst size in bytes.
	EgressRateLimiterBurstSize int `pulumi:"egressRateLimiterBurstSize"`
	// Peak egress bandwidth in Mb/s.
	EgressRateLimiterPeakBandwidth int `pulumi:"egressRateLimiterPeakBandwidth"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Average ingress broadcast bandwidth in Mb/s.
	IngressBroadcastRateLimiterAvgBandwidth int `pulumi:"ingressBroadcastRateLimiterAvgBandwidth"`
	// Ingress broadcast burst size in bytes.
	IngressBroadcastRateLimiterBurstSize int `pulumi:"ingressBroadcastRateLimiterBurstSize"`
	// Peak ingress broadcast bandwidth in Mb/s.
	IngressBroadcastRateLimiterPeakBandwidth int `pulumi:"ingressBroadcastRateLimiterPeakBandwidth"`
	// Average ingress bandwidth in Mb/s.
	IngressRateLimiterAvgBandwidth int `pulumi:"ingressRateLimiterAvgBandwidth"`
	// Ingress burst size in bytes.
	IngressRateLimiterBurstSize int `pulumi:"ingressRateLimiterBurstSize"`
	// Peak ingress broadcast bandwidth in Mb/s.
	IngressRateLimiterPeakBandwidth int     `pulumi:"ingressRateLimiterPeakBandwidth"`
	Name                            string  `pulumi:"name"`
	NsxtManagerId                   *string `pulumi:"nsxtManagerId"`
	VdcGroupId                      *string `pulumi:"vdcGroupId"`
	VdcId                           *string `pulumi:"vdcId"`
}

func GetNsxtSegmentQosProfileOutput(ctx *pulumi.Context, args GetNsxtSegmentQosProfileOutputArgs, opts ...pulumi.InvokeOption) GetNsxtSegmentQosProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNsxtSegmentQosProfileResultOutput, error) {
			args := v.(GetNsxtSegmentQosProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", args, GetNsxtSegmentQosProfileResultOutput{}, options).(GetNsxtSegmentQosProfileResultOutput), nil
		}).(GetNsxtSegmentQosProfileResultOutput)
}

// A collection of arguments for invoking getNsxtSegmentQosProfile.
type GetNsxtSegmentQosProfileOutputArgs struct {
	// The name of Segment Profile
	Name pulumi.StringInput `pulumi:"name"`
	// Segment Profile search context. Use when searching by NSX-T manager
	NsxtManagerId pulumi.StringPtrInput `pulumi:"nsxtManagerId"`
	// Segment Profile search context. Use when searching by VDC group
	//
	// > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
	VdcGroupId pulumi.StringPtrInput `pulumi:"vdcGroupId"`
	// Segment Profile search context. Use when searching by VDC
	VdcId pulumi.StringPtrInput `pulumi:"vdcId"`
}

func (GetNsxtSegmentQosProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtSegmentQosProfileArgs)(nil)).Elem()
}

// A collection of values returned by getNsxtSegmentQosProfile.
type GetNsxtSegmentQosProfileResultOutput struct{ *pulumi.OutputState }

func (GetNsxtSegmentQosProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtSegmentQosProfileResult)(nil)).Elem()
}

func (o GetNsxtSegmentQosProfileResultOutput) ToGetNsxtSegmentQosProfileResultOutput() GetNsxtSegmentQosProfileResultOutput {
	return o
}

func (o GetNsxtSegmentQosProfileResultOutput) ToGetNsxtSegmentQosProfileResultOutputWithContext(ctx context.Context) GetNsxtSegmentQosProfileResultOutput {
	return o
}

// Class of service groups similar types of traffic in the network and each type
// of traffic is treated as a class with its own level of service priority. The lower priority
// traffic is slowed down or in some cases dropped to provide better throughput for higher priority
// traffic.
func (o GetNsxtSegmentQosProfileResultOutput) ClassOfService() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.ClassOfService }).(pulumi.IntOutput)
}

// Description of QoS Profile
func (o GetNsxtSegmentQosProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// A Differentiated Services Code Point (DSCP) priority
// Profile.
func (o GetNsxtSegmentQosProfileResultOutput) DscpPriority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.DscpPriority }).(pulumi.IntOutput)
}

// A Differentiated Services Code Point (DSCP) trust mode. Values are below:
//   - `TRUSTED` - With Trusted mode the inner header DSCP value is applied to the outer IP header for
//     IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.
//   - `UNTRUSTED` - Untrusted mode is supported on overlay-based and VLAN-based logical port.
func (o GetNsxtSegmentQosProfileResultOutput) DscpTrustMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) string { return v.DscpTrustMode }).(pulumi.StringOutput)
}

// Average egress bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) EgressRateLimiterAvgBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.EgressRateLimiterAvgBandwidth }).(pulumi.IntOutput)
}

// Egress burst size in bytes.
func (o GetNsxtSegmentQosProfileResultOutput) EgressRateLimiterBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.EgressRateLimiterBurstSize }).(pulumi.IntOutput)
}

// Peak egress bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) EgressRateLimiterPeakBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.EgressRateLimiterPeakBandwidth }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNsxtSegmentQosProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Average ingress broadcast bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) IngressBroadcastRateLimiterAvgBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressBroadcastRateLimiterAvgBandwidth }).(pulumi.IntOutput)
}

// Ingress broadcast burst size in bytes.
func (o GetNsxtSegmentQosProfileResultOutput) IngressBroadcastRateLimiterBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressBroadcastRateLimiterBurstSize }).(pulumi.IntOutput)
}

// Peak ingress broadcast bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) IngressBroadcastRateLimiterPeakBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressBroadcastRateLimiterPeakBandwidth }).(pulumi.IntOutput)
}

// Average ingress bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) IngressRateLimiterAvgBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressRateLimiterAvgBandwidth }).(pulumi.IntOutput)
}

// Ingress burst size in bytes.
func (o GetNsxtSegmentQosProfileResultOutput) IngressRateLimiterBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressRateLimiterBurstSize }).(pulumi.IntOutput)
}

// Peak ingress broadcast bandwidth in Mb/s.
func (o GetNsxtSegmentQosProfileResultOutput) IngressRateLimiterPeakBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) int { return v.IngressRateLimiterPeakBandwidth }).(pulumi.IntOutput)
}

func (o GetNsxtSegmentQosProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNsxtSegmentQosProfileResultOutput) NsxtManagerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) *string { return v.NsxtManagerId }).(pulumi.StringPtrOutput)
}

func (o GetNsxtSegmentQosProfileResultOutput) VdcGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) *string { return v.VdcGroupId }).(pulumi.StringPtrOutput)
}

func (o GetNsxtSegmentQosProfileResultOutput) VdcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtSegmentQosProfileResult) *string { return v.VdcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNsxtSegmentQosProfileResultOutput{})
}
