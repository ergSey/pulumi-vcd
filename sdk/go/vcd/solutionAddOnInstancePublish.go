// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SolutionAddOnInstancePublish struct {
	pulumi.CustomResourceState

	// Solution Add-On instance ID
	AddOnInstanceId pulumi.StringOutput `pulumi:"addOnInstanceId"`
	// Recipient Organization IDs
	OrgIds pulumi.StringArrayOutput `pulumi:"orgIds"`
	// Set to `true` to publish to everyone
	PublishToAllTenants pulumi.BoolPtrOutput `pulumi:"publishToAllTenants"`
	// Parent RDE state
	RdeState pulumi.StringOutput `pulumi:"rdeState"`
}

// NewSolutionAddOnInstancePublish registers a new resource with the given unique name, arguments, and options.
func NewSolutionAddOnInstancePublish(ctx *pulumi.Context,
	name string, args *SolutionAddOnInstancePublishArgs, opts ...pulumi.ResourceOption) (*SolutionAddOnInstancePublish, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddOnInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'AddOnInstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SolutionAddOnInstancePublish
	err := ctx.RegisterResource("vcd:index/solutionAddOnInstancePublish:SolutionAddOnInstancePublish", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionAddOnInstancePublish gets an existing SolutionAddOnInstancePublish resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionAddOnInstancePublish(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionAddOnInstancePublishState, opts ...pulumi.ResourceOption) (*SolutionAddOnInstancePublish, error) {
	var resource SolutionAddOnInstancePublish
	err := ctx.ReadResource("vcd:index/solutionAddOnInstancePublish:SolutionAddOnInstancePublish", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionAddOnInstancePublish resources.
type solutionAddOnInstancePublishState struct {
	// Solution Add-On instance ID
	AddOnInstanceId *string `pulumi:"addOnInstanceId"`
	// Recipient Organization IDs
	OrgIds []string `pulumi:"orgIds"`
	// Set to `true` to publish to everyone
	PublishToAllTenants *bool `pulumi:"publishToAllTenants"`
	// Parent RDE state
	RdeState *string `pulumi:"rdeState"`
}

type SolutionAddOnInstancePublishState struct {
	// Solution Add-On instance ID
	AddOnInstanceId pulumi.StringPtrInput
	// Recipient Organization IDs
	OrgIds pulumi.StringArrayInput
	// Set to `true` to publish to everyone
	PublishToAllTenants pulumi.BoolPtrInput
	// Parent RDE state
	RdeState pulumi.StringPtrInput
}

func (SolutionAddOnInstancePublishState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionAddOnInstancePublishState)(nil)).Elem()
}

type solutionAddOnInstancePublishArgs struct {
	// Solution Add-On instance ID
	AddOnInstanceId string `pulumi:"addOnInstanceId"`
	// Recipient Organization IDs
	OrgIds []string `pulumi:"orgIds"`
	// Set to `true` to publish to everyone
	PublishToAllTenants *bool `pulumi:"publishToAllTenants"`
}

// The set of arguments for constructing a SolutionAddOnInstancePublish resource.
type SolutionAddOnInstancePublishArgs struct {
	// Solution Add-On instance ID
	AddOnInstanceId pulumi.StringInput
	// Recipient Organization IDs
	OrgIds pulumi.StringArrayInput
	// Set to `true` to publish to everyone
	PublishToAllTenants pulumi.BoolPtrInput
}

func (SolutionAddOnInstancePublishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionAddOnInstancePublishArgs)(nil)).Elem()
}

type SolutionAddOnInstancePublishInput interface {
	pulumi.Input

	ToSolutionAddOnInstancePublishOutput() SolutionAddOnInstancePublishOutput
	ToSolutionAddOnInstancePublishOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishOutput
}

func (*SolutionAddOnInstancePublish) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionAddOnInstancePublish)(nil)).Elem()
}

func (i *SolutionAddOnInstancePublish) ToSolutionAddOnInstancePublishOutput() SolutionAddOnInstancePublishOutput {
	return i.ToSolutionAddOnInstancePublishOutputWithContext(context.Background())
}

func (i *SolutionAddOnInstancePublish) ToSolutionAddOnInstancePublishOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnInstancePublishOutput)
}

// SolutionAddOnInstancePublishArrayInput is an input type that accepts SolutionAddOnInstancePublishArray and SolutionAddOnInstancePublishArrayOutput values.
// You can construct a concrete instance of `SolutionAddOnInstancePublishArrayInput` via:
//
//	SolutionAddOnInstancePublishArray{ SolutionAddOnInstancePublishArgs{...} }
type SolutionAddOnInstancePublishArrayInput interface {
	pulumi.Input

	ToSolutionAddOnInstancePublishArrayOutput() SolutionAddOnInstancePublishArrayOutput
	ToSolutionAddOnInstancePublishArrayOutputWithContext(context.Context) SolutionAddOnInstancePublishArrayOutput
}

type SolutionAddOnInstancePublishArray []SolutionAddOnInstancePublishInput

func (SolutionAddOnInstancePublishArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionAddOnInstancePublish)(nil)).Elem()
}

func (i SolutionAddOnInstancePublishArray) ToSolutionAddOnInstancePublishArrayOutput() SolutionAddOnInstancePublishArrayOutput {
	return i.ToSolutionAddOnInstancePublishArrayOutputWithContext(context.Background())
}

func (i SolutionAddOnInstancePublishArray) ToSolutionAddOnInstancePublishArrayOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnInstancePublishArrayOutput)
}

// SolutionAddOnInstancePublishMapInput is an input type that accepts SolutionAddOnInstancePublishMap and SolutionAddOnInstancePublishMapOutput values.
// You can construct a concrete instance of `SolutionAddOnInstancePublishMapInput` via:
//
//	SolutionAddOnInstancePublishMap{ "key": SolutionAddOnInstancePublishArgs{...} }
type SolutionAddOnInstancePublishMapInput interface {
	pulumi.Input

	ToSolutionAddOnInstancePublishMapOutput() SolutionAddOnInstancePublishMapOutput
	ToSolutionAddOnInstancePublishMapOutputWithContext(context.Context) SolutionAddOnInstancePublishMapOutput
}

type SolutionAddOnInstancePublishMap map[string]SolutionAddOnInstancePublishInput

func (SolutionAddOnInstancePublishMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionAddOnInstancePublish)(nil)).Elem()
}

func (i SolutionAddOnInstancePublishMap) ToSolutionAddOnInstancePublishMapOutput() SolutionAddOnInstancePublishMapOutput {
	return i.ToSolutionAddOnInstancePublishMapOutputWithContext(context.Background())
}

func (i SolutionAddOnInstancePublishMap) ToSolutionAddOnInstancePublishMapOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionAddOnInstancePublishMapOutput)
}

type SolutionAddOnInstancePublishOutput struct{ *pulumi.OutputState }

func (SolutionAddOnInstancePublishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionAddOnInstancePublish)(nil)).Elem()
}

func (o SolutionAddOnInstancePublishOutput) ToSolutionAddOnInstancePublishOutput() SolutionAddOnInstancePublishOutput {
	return o
}

func (o SolutionAddOnInstancePublishOutput) ToSolutionAddOnInstancePublishOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishOutput {
	return o
}

// Solution Add-On instance ID
func (o SolutionAddOnInstancePublishOutput) AddOnInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOnInstancePublish) pulumi.StringOutput { return v.AddOnInstanceId }).(pulumi.StringOutput)
}

// Recipient Organization IDs
func (o SolutionAddOnInstancePublishOutput) OrgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SolutionAddOnInstancePublish) pulumi.StringArrayOutput { return v.OrgIds }).(pulumi.StringArrayOutput)
}

// Set to `true` to publish to everyone
func (o SolutionAddOnInstancePublishOutput) PublishToAllTenants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SolutionAddOnInstancePublish) pulumi.BoolPtrOutput { return v.PublishToAllTenants }).(pulumi.BoolPtrOutput)
}

// Parent RDE state
func (o SolutionAddOnInstancePublishOutput) RdeState() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionAddOnInstancePublish) pulumi.StringOutput { return v.RdeState }).(pulumi.StringOutput)
}

type SolutionAddOnInstancePublishArrayOutput struct{ *pulumi.OutputState }

func (SolutionAddOnInstancePublishArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolutionAddOnInstancePublish)(nil)).Elem()
}

func (o SolutionAddOnInstancePublishArrayOutput) ToSolutionAddOnInstancePublishArrayOutput() SolutionAddOnInstancePublishArrayOutput {
	return o
}

func (o SolutionAddOnInstancePublishArrayOutput) ToSolutionAddOnInstancePublishArrayOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishArrayOutput {
	return o
}

func (o SolutionAddOnInstancePublishArrayOutput) Index(i pulumi.IntInput) SolutionAddOnInstancePublishOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolutionAddOnInstancePublish {
		return vs[0].([]*SolutionAddOnInstancePublish)[vs[1].(int)]
	}).(SolutionAddOnInstancePublishOutput)
}

type SolutionAddOnInstancePublishMapOutput struct{ *pulumi.OutputState }

func (SolutionAddOnInstancePublishMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolutionAddOnInstancePublish)(nil)).Elem()
}

func (o SolutionAddOnInstancePublishMapOutput) ToSolutionAddOnInstancePublishMapOutput() SolutionAddOnInstancePublishMapOutput {
	return o
}

func (o SolutionAddOnInstancePublishMapOutput) ToSolutionAddOnInstancePublishMapOutputWithContext(ctx context.Context) SolutionAddOnInstancePublishMapOutput {
	return o
}

func (o SolutionAddOnInstancePublishMapOutput) MapIndex(k pulumi.StringInput) SolutionAddOnInstancePublishOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolutionAddOnInstancePublish {
		return vs[0].(map[string]*SolutionAddOnInstancePublish)[vs[1].(string)]
	}).(SolutionAddOnInstancePublishOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnInstancePublishInput)(nil)).Elem(), &SolutionAddOnInstancePublish{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnInstancePublishArrayInput)(nil)).Elem(), SolutionAddOnInstancePublishArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionAddOnInstancePublishMapInput)(nil)).Elem(), SolutionAddOnInstancePublishMap{})
	pulumi.RegisterOutputType(SolutionAddOnInstancePublishOutput{})
	pulumi.RegisterOutputType(SolutionAddOnInstancePublishArrayOutput{})
	pulumi.RegisterOutputType(SolutionAddOnInstancePublishMapOutput{})
}
