// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ergSey/pulumi-vcd/sdk/go/vcd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NsxtAlbVirtualService struct {
	pulumi.CustomResourceState

	// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
	ApplicationProfileType pulumi.StringOutput `pulumi:"applicationProfileType"`
	// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
	// or `L4_TLS`
	CaCertificateId pulumi.StringPtrOutput `pulumi:"caCertificateId"`
	// An optional description ALB Virtual Service
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An ID of NSX-T Edge Gateway. Can be looked up using
	// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId pulumi.StringOutput `pulumi:"edgeGatewayId"`
	// Virtual Service is enabled or disabled (default true)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// IPv6 Address for the service to listen on.
	Ipv6VirtualIpAddress pulumi.StringPtrOutput `pulumi:"ipv6VirtualIpAddress"`
	// Preserves Client IP on a
	// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
	// * ALB Pool membership must be configured in Group mode
	// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
	//
	// <a id="service-port-block"></a>
	IsTransparentModeEnabled pulumi.BoolOutput `pulumi:"isTransparentModeEnabled"`
	// A name for ALB Virtual Service
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrOutput `pulumi:"org"`
	// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
	// source
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// A reference to ALB Service Engine Group. Can be looked up using
	// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
	ServiceEngineGroupId pulumi.StringOutput `pulumi:"serviceEngineGroupId"`
	// A block to define port, port range and traffic type. Multiple can be used. See
	// servicePort and example for usage details.
	ServicePorts NsxtAlbVirtualServiceServicePortArrayOutput `pulumi:"servicePorts"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringOutput `pulumi:"vdc"`
	// IP Address for the service to listen on.
	VirtualIpAddress pulumi.StringOutput `pulumi:"virtualIpAddress"`
}

// NewNsxtAlbVirtualService registers a new resource with the given unique name, arguments, and options.
func NewNsxtAlbVirtualService(ctx *pulumi.Context,
	name string, args *NsxtAlbVirtualServiceArgs, opts ...pulumi.ResourceOption) (*NsxtAlbVirtualService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationProfileType == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationProfileType'")
	}
	if args.EdgeGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'EdgeGatewayId'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.ServiceEngineGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEngineGroupId'")
	}
	if args.VirtualIpAddress == nil {
		return nil, errors.New("invalid value for required argument 'VirtualIpAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NsxtAlbVirtualService
	err := ctx.RegisterResource("vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsxtAlbVirtualService gets an existing NsxtAlbVirtualService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsxtAlbVirtualService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsxtAlbVirtualServiceState, opts ...pulumi.ResourceOption) (*NsxtAlbVirtualService, error) {
	var resource NsxtAlbVirtualService
	err := ctx.ReadResource("vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsxtAlbVirtualService resources.
type nsxtAlbVirtualServiceState struct {
	// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
	ApplicationProfileType *string `pulumi:"applicationProfileType"`
	// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
	// or `L4_TLS`
	CaCertificateId *string `pulumi:"caCertificateId"`
	// An optional description ALB Virtual Service
	Description *string `pulumi:"description"`
	// An ID of NSX-T Edge Gateway. Can be looked up using
	// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId *string `pulumi:"edgeGatewayId"`
	// Virtual Service is enabled or disabled (default true)
	Enabled *bool `pulumi:"enabled"`
	// IPv6 Address for the service to listen on.
	Ipv6VirtualIpAddress *string `pulumi:"ipv6VirtualIpAddress"`
	// Preserves Client IP on a
	// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
	// * ALB Pool membership must be configured in Group mode
	// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
	//
	// <a id="service-port-block"></a>
	IsTransparentModeEnabled *bool `pulumi:"isTransparentModeEnabled"`
	// A name for ALB Virtual Service
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
	// source
	PoolId *string `pulumi:"poolId"`
	// A reference to ALB Service Engine Group. Can be looked up using
	// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
	ServiceEngineGroupId *string `pulumi:"serviceEngineGroupId"`
	// A block to define port, port range and traffic type. Multiple can be used. See
	// servicePort and example for usage details.
	ServicePorts []NsxtAlbVirtualServiceServicePort `pulumi:"servicePorts"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
	// IP Address for the service to listen on.
	VirtualIpAddress *string `pulumi:"virtualIpAddress"`
}

type NsxtAlbVirtualServiceState struct {
	// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
	ApplicationProfileType pulumi.StringPtrInput
	// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
	// or `L4_TLS`
	CaCertificateId pulumi.StringPtrInput
	// An optional description ALB Virtual Service
	Description pulumi.StringPtrInput
	// An ID of NSX-T Edge Gateway. Can be looked up using
	// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId pulumi.StringPtrInput
	// Virtual Service is enabled or disabled (default true)
	Enabled pulumi.BoolPtrInput
	// IPv6 Address for the service to listen on.
	Ipv6VirtualIpAddress pulumi.StringPtrInput
	// Preserves Client IP on a
	// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
	// * ALB Pool membership must be configured in Group mode
	// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
	//
	// <a id="service-port-block"></a>
	IsTransparentModeEnabled pulumi.BoolPtrInput
	// A name for ALB Virtual Service
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
	// source
	PoolId pulumi.StringPtrInput
	// A reference to ALB Service Engine Group. Can be looked up using
	// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
	ServiceEngineGroupId pulumi.StringPtrInput
	// A block to define port, port range and traffic type. Multiple can be used. See
	// servicePort and example for usage details.
	ServicePorts NsxtAlbVirtualServiceServicePortArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
	// IP Address for the service to listen on.
	VirtualIpAddress pulumi.StringPtrInput
}

func (NsxtAlbVirtualServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbVirtualServiceState)(nil)).Elem()
}

type nsxtAlbVirtualServiceArgs struct {
	// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
	ApplicationProfileType string `pulumi:"applicationProfileType"`
	// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
	// or `L4_TLS`
	CaCertificateId *string `pulumi:"caCertificateId"`
	// An optional description ALB Virtual Service
	Description *string `pulumi:"description"`
	// An ID of NSX-T Edge Gateway. Can be looked up using
	// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId string `pulumi:"edgeGatewayId"`
	// Virtual Service is enabled or disabled (default true)
	Enabled *bool `pulumi:"enabled"`
	// IPv6 Address for the service to listen on.
	Ipv6VirtualIpAddress *string `pulumi:"ipv6VirtualIpAddress"`
	// Preserves Client IP on a
	// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
	// * ALB Pool membership must be configured in Group mode
	// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
	//
	// <a id="service-port-block"></a>
	IsTransparentModeEnabled *bool `pulumi:"isTransparentModeEnabled"`
	// A name for ALB Virtual Service
	Name *string `pulumi:"name"`
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org *string `pulumi:"org"`
	// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
	// source
	PoolId string `pulumi:"poolId"`
	// A reference to ALB Service Engine Group. Can be looked up using
	// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
	ServiceEngineGroupId string `pulumi:"serviceEngineGroupId"`
	// A block to define port, port range and traffic type. Multiple can be used. See
	// servicePort and example for usage details.
	ServicePorts []NsxtAlbVirtualServiceServicePort `pulumi:"servicePorts"`
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc *string `pulumi:"vdc"`
	// IP Address for the service to listen on.
	VirtualIpAddress string `pulumi:"virtualIpAddress"`
}

// The set of arguments for constructing a NsxtAlbVirtualService resource.
type NsxtAlbVirtualServiceArgs struct {
	// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
	ApplicationProfileType pulumi.StringInput
	// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
	// or `L4_TLS`
	CaCertificateId pulumi.StringPtrInput
	// An optional description ALB Virtual Service
	Description pulumi.StringPtrInput
	// An ID of NSX-T Edge Gateway. Can be looked up using
	// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
	EdgeGatewayId pulumi.StringInput
	// Virtual Service is enabled or disabled (default true)
	Enabled pulumi.BoolPtrInput
	// IPv6 Address for the service to listen on.
	Ipv6VirtualIpAddress pulumi.StringPtrInput
	// Preserves Client IP on a
	// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
	// * ALB Pool membership must be configured in Group mode
	// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
	//
	// <a id="service-port-block"></a>
	IsTransparentModeEnabled pulumi.BoolPtrInput
	// A name for ALB Virtual Service
	Name pulumi.StringPtrInput
	// The name of organization to use, optional if defined at provider level. Useful
	// when connected as sysadmin working across different organisations.
	Org pulumi.StringPtrInput
	// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
	// source
	PoolId pulumi.StringInput
	// A reference to ALB Service Engine Group. Can be looked up using
	// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
	ServiceEngineGroupId pulumi.StringInput
	// A block to define port, port range and traffic type. Multiple can be used. See
	// servicePort and example for usage details.
	ServicePorts NsxtAlbVirtualServiceServicePortArrayInput
	// The name of VDC to use, optional if defined at provider level
	//
	// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
	Vdc pulumi.StringPtrInput
	// IP Address for the service to listen on.
	VirtualIpAddress pulumi.StringInput
}

func (NsxtAlbVirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsxtAlbVirtualServiceArgs)(nil)).Elem()
}

type NsxtAlbVirtualServiceInput interface {
	pulumi.Input

	ToNsxtAlbVirtualServiceOutput() NsxtAlbVirtualServiceOutput
	ToNsxtAlbVirtualServiceOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceOutput
}

func (*NsxtAlbVirtualService) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbVirtualService)(nil)).Elem()
}

func (i *NsxtAlbVirtualService) ToNsxtAlbVirtualServiceOutput() NsxtAlbVirtualServiceOutput {
	return i.ToNsxtAlbVirtualServiceOutputWithContext(context.Background())
}

func (i *NsxtAlbVirtualService) ToNsxtAlbVirtualServiceOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbVirtualServiceOutput)
}

// NsxtAlbVirtualServiceArrayInput is an input type that accepts NsxtAlbVirtualServiceArray and NsxtAlbVirtualServiceArrayOutput values.
// You can construct a concrete instance of `NsxtAlbVirtualServiceArrayInput` via:
//
//	NsxtAlbVirtualServiceArray{ NsxtAlbVirtualServiceArgs{...} }
type NsxtAlbVirtualServiceArrayInput interface {
	pulumi.Input

	ToNsxtAlbVirtualServiceArrayOutput() NsxtAlbVirtualServiceArrayOutput
	ToNsxtAlbVirtualServiceArrayOutputWithContext(context.Context) NsxtAlbVirtualServiceArrayOutput
}

type NsxtAlbVirtualServiceArray []NsxtAlbVirtualServiceInput

func (NsxtAlbVirtualServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbVirtualService)(nil)).Elem()
}

func (i NsxtAlbVirtualServiceArray) ToNsxtAlbVirtualServiceArrayOutput() NsxtAlbVirtualServiceArrayOutput {
	return i.ToNsxtAlbVirtualServiceArrayOutputWithContext(context.Background())
}

func (i NsxtAlbVirtualServiceArray) ToNsxtAlbVirtualServiceArrayOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbVirtualServiceArrayOutput)
}

// NsxtAlbVirtualServiceMapInput is an input type that accepts NsxtAlbVirtualServiceMap and NsxtAlbVirtualServiceMapOutput values.
// You can construct a concrete instance of `NsxtAlbVirtualServiceMapInput` via:
//
//	NsxtAlbVirtualServiceMap{ "key": NsxtAlbVirtualServiceArgs{...} }
type NsxtAlbVirtualServiceMapInput interface {
	pulumi.Input

	ToNsxtAlbVirtualServiceMapOutput() NsxtAlbVirtualServiceMapOutput
	ToNsxtAlbVirtualServiceMapOutputWithContext(context.Context) NsxtAlbVirtualServiceMapOutput
}

type NsxtAlbVirtualServiceMap map[string]NsxtAlbVirtualServiceInput

func (NsxtAlbVirtualServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbVirtualService)(nil)).Elem()
}

func (i NsxtAlbVirtualServiceMap) ToNsxtAlbVirtualServiceMapOutput() NsxtAlbVirtualServiceMapOutput {
	return i.ToNsxtAlbVirtualServiceMapOutputWithContext(context.Background())
}

func (i NsxtAlbVirtualServiceMap) ToNsxtAlbVirtualServiceMapOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtAlbVirtualServiceMapOutput)
}

type NsxtAlbVirtualServiceOutput struct{ *pulumi.OutputState }

func (NsxtAlbVirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NsxtAlbVirtualService)(nil)).Elem()
}

func (o NsxtAlbVirtualServiceOutput) ToNsxtAlbVirtualServiceOutput() NsxtAlbVirtualServiceOutput {
	return o
}

func (o NsxtAlbVirtualServiceOutput) ToNsxtAlbVirtualServiceOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceOutput {
	return o
}

// One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
func (o NsxtAlbVirtualServiceOutput) ApplicationProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.ApplicationProfileType }).(pulumi.StringOutput)
}

// ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
// or `L4_TLS`
func (o NsxtAlbVirtualServiceOutput) CaCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringPtrOutput { return v.CaCertificateId }).(pulumi.StringPtrOutput)
}

// An optional description ALB Virtual Service
func (o NsxtAlbVirtualServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An ID of NSX-T Edge Gateway. Can be looked up using
// [NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
func (o NsxtAlbVirtualServiceOutput) EdgeGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.EdgeGatewayId }).(pulumi.StringOutput)
}

// Virtual Service is enabled or disabled (default true)
func (o NsxtAlbVirtualServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// IPv6 Address for the service to listen on.
func (o NsxtAlbVirtualServiceOutput) Ipv6VirtualIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringPtrOutput { return v.Ipv6VirtualIpAddress }).(pulumi.StringPtrOutput)
}

// Preserves Client IP on a
// Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
// * ALB Pool membership must be configured in Group mode
// * Backing Avi Service Engine Group must be in Legacy Active Standby mode
//
// <a id="service-port-block"></a>
func (o NsxtAlbVirtualServiceOutput) IsTransparentModeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.BoolOutput { return v.IsTransparentModeEnabled }).(pulumi.BoolOutput)
}

// A name for ALB Virtual Service
func (o NsxtAlbVirtualServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of organization to use, optional if defined at provider level. Useful
// when connected as sysadmin working across different organisations.
func (o NsxtAlbVirtualServiceOutput) Org() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringPtrOutput { return v.Org }).(pulumi.StringPtrOutput)
}

// A reference to ALB Pool. Can be looked up using `NsxtAlbPool` resource or data
// source
func (o NsxtAlbVirtualServiceOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// A reference to ALB Service Engine Group. Can be looked up using
// `NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
func (o NsxtAlbVirtualServiceOutput) ServiceEngineGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.ServiceEngineGroupId }).(pulumi.StringOutput)
}

// A block to define port, port range and traffic type. Multiple can be used. See
// servicePort and example for usage details.
func (o NsxtAlbVirtualServiceOutput) ServicePorts() NsxtAlbVirtualServiceServicePortArrayOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) NsxtAlbVirtualServiceServicePortArrayOutput { return v.ServicePorts }).(NsxtAlbVirtualServiceServicePortArrayOutput)
}

// The name of VDC to use, optional if defined at provider level
//
// Deprecated: Edge Gateway will be looked up based on 'edge_gateway_id' field
func (o NsxtAlbVirtualServiceOutput) Vdc() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.Vdc }).(pulumi.StringOutput)
}

// IP Address for the service to listen on.
func (o NsxtAlbVirtualServiceOutput) VirtualIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NsxtAlbVirtualService) pulumi.StringOutput { return v.VirtualIpAddress }).(pulumi.StringOutput)
}

type NsxtAlbVirtualServiceArrayOutput struct{ *pulumi.OutputState }

func (NsxtAlbVirtualServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NsxtAlbVirtualService)(nil)).Elem()
}

func (o NsxtAlbVirtualServiceArrayOutput) ToNsxtAlbVirtualServiceArrayOutput() NsxtAlbVirtualServiceArrayOutput {
	return o
}

func (o NsxtAlbVirtualServiceArrayOutput) ToNsxtAlbVirtualServiceArrayOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceArrayOutput {
	return o
}

func (o NsxtAlbVirtualServiceArrayOutput) Index(i pulumi.IntInput) NsxtAlbVirtualServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NsxtAlbVirtualService {
		return vs[0].([]*NsxtAlbVirtualService)[vs[1].(int)]
	}).(NsxtAlbVirtualServiceOutput)
}

type NsxtAlbVirtualServiceMapOutput struct{ *pulumi.OutputState }

func (NsxtAlbVirtualServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NsxtAlbVirtualService)(nil)).Elem()
}

func (o NsxtAlbVirtualServiceMapOutput) ToNsxtAlbVirtualServiceMapOutput() NsxtAlbVirtualServiceMapOutput {
	return o
}

func (o NsxtAlbVirtualServiceMapOutput) ToNsxtAlbVirtualServiceMapOutputWithContext(ctx context.Context) NsxtAlbVirtualServiceMapOutput {
	return o
}

func (o NsxtAlbVirtualServiceMapOutput) MapIndex(k pulumi.StringInput) NsxtAlbVirtualServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NsxtAlbVirtualService {
		return vs[0].(map[string]*NsxtAlbVirtualService)[vs[1].(string)]
	}).(NsxtAlbVirtualServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbVirtualServiceInput)(nil)).Elem(), &NsxtAlbVirtualService{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbVirtualServiceArrayInput)(nil)).Elem(), NsxtAlbVirtualServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtAlbVirtualServiceMapInput)(nil)).Elem(), NsxtAlbVirtualServiceMap{})
	pulumi.RegisterOutputType(NsxtAlbVirtualServiceOutput{})
	pulumi.RegisterOutputType(NsxtAlbVirtualServiceArrayOutput{})
	pulumi.RegisterOutputType(NsxtAlbVirtualServiceMapOutput{})
}
