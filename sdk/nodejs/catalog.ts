// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class Catalog extends pulumi.CustomResource {
    /**
     * Get an existing Catalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogState, opts?: pulumi.CustomResourceOptions): Catalog {
        return new Catalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/catalog:Catalog';

    /**
     * Returns true if the given object is an instance of Catalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Catalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Catalog.__pulumiType;
    }

    /**
     * Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
     */
    public readonly cacheEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * (*v3.6+*) Version number from this catalog.
     */
    public /*out*/ readonly catalogVersion!: pulumi.Output<number>;
    /**
     * (*v3.6+*) Date and time of catalog creation
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
     */
    public readonly deleteForce!: pulumi.Output<boolean | undefined>;
    /**
     * When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
     */
    public readonly deleteRecursive!: pulumi.Output<boolean | undefined>;
    /**
     * Description of catalog
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Catalog HREF
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * (*v3.8.1+*) Indicates if this catalog was created in the current organization.
     */
    public /*out*/ readonly isLocal!: pulumi.Output<boolean>;
    /**
     * (*v3.6+*) Indicates if this catalog is shared to all organizations.
     */
    public /*out*/ readonly isPublished!: pulumi.Output<boolean>;
    /**
     * (*v3.6+*) Indicates if the catalog is shared.
     */
    public /*out*/ readonly isShared!: pulumi.Output<boolean>;
    /**
     * (*v3.8+*) List of media item names in this catalog, in alphabetical order.
     */
    public /*out*/ readonly mediaItemLists!: pulumi.Output<string[]>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign.
     *
     * @deprecated Use metadataEntry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    public readonly metadataEntries!: pulumi.Output<outputs.CatalogMetadataEntry[]>;
    /**
     * Catalog name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (*v3.6+*) Number of media items available in this catalog.
     */
    public /*out*/ readonly numberOfMedia!: pulumi.Output<number>;
    /**
     * (*v3.6+*) Number of vApp templates available in this catalog.
     */
    public /*out*/ readonly numberOfVappTemplates!: pulumi.Output<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
     * When using a catalog shared from another organization, this field must have the name of that one, not the current one.
     * If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * (*v3.6+*) Owner of the catalog.
     */
    public /*out*/ readonly ownerName!: pulumi.Output<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
     */
    public readonly preserveIdentityInformation!: pulumi.Output<boolean | undefined>;
    /**
     * Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
     */
    public readonly publishEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
     */
    public /*out*/ readonly publishSubscriptionType!: pulumi.Output<string>;
    /**
     * (*v3.8+*) URL to which other catalogs can subscribe.
     */
    public /*out*/ readonly publishSubscriptionUrl!: pulumi.Output<string>;
    /**
     * Allows to set specific storage profile to be used for catalog. **Note.** Data
     * source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
     */
    public readonly storageProfileId!: pulumi.Output<string | undefined>;
    /**
     * (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
     */
    public /*out*/ readonly vappTemplateLists!: pulumi.Output<string[]>;

    /**
     * Create a Catalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogArgs | CatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogState | undefined;
            resourceInputs["cacheEnabled"] = state ? state.cacheEnabled : undefined;
            resourceInputs["catalogVersion"] = state ? state.catalogVersion : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["deleteForce"] = state ? state.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = state ? state.deleteRecursive : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isLocal"] = state ? state.isLocal : undefined;
            resourceInputs["isPublished"] = state ? state.isPublished : undefined;
            resourceInputs["isShared"] = state ? state.isShared : undefined;
            resourceInputs["mediaItemLists"] = state ? state.mediaItemLists : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfMedia"] = state ? state.numberOfMedia : undefined;
            resourceInputs["numberOfVappTemplates"] = state ? state.numberOfVappTemplates : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["preserveIdentityInformation"] = state ? state.preserveIdentityInformation : undefined;
            resourceInputs["publishEnabled"] = state ? state.publishEnabled : undefined;
            resourceInputs["publishSubscriptionType"] = state ? state.publishSubscriptionType : undefined;
            resourceInputs["publishSubscriptionUrl"] = state ? state.publishSubscriptionUrl : undefined;
            resourceInputs["storageProfileId"] = state ? state.storageProfileId : undefined;
            resourceInputs["vappTemplateLists"] = state ? state.vappTemplateLists : undefined;
        } else {
            const args = argsOrState as CatalogArgs | undefined;
            resourceInputs["cacheEnabled"] = args ? args.cacheEnabled : undefined;
            resourceInputs["deleteForce"] = args ? args.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = args ? args.deleteRecursive : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["preserveIdentityInformation"] = args ? args.preserveIdentityInformation : undefined;
            resourceInputs["publishEnabled"] = args ? args.publishEnabled : undefined;
            resourceInputs["storageProfileId"] = args ? args.storageProfileId : undefined;
            resourceInputs["catalogVersion"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isLocal"] = undefined /*out*/;
            resourceInputs["isPublished"] = undefined /*out*/;
            resourceInputs["isShared"] = undefined /*out*/;
            resourceInputs["mediaItemLists"] = undefined /*out*/;
            resourceInputs["numberOfMedia"] = undefined /*out*/;
            resourceInputs["numberOfVappTemplates"] = undefined /*out*/;
            resourceInputs["ownerName"] = undefined /*out*/;
            resourceInputs["publishSubscriptionType"] = undefined /*out*/;
            resourceInputs["publishSubscriptionUrl"] = undefined /*out*/;
            resourceInputs["vappTemplateLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Catalog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Catalog resources.
 */
export interface CatalogState {
    /**
     * Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * (*v3.6+*) Version number from this catalog.
     */
    catalogVersion?: pulumi.Input<number>;
    /**
     * (*v3.6+*) Date and time of catalog creation
     */
    created?: pulumi.Input<string>;
    /**
     * When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
     */
    deleteRecursive?: pulumi.Input<boolean>;
    /**
     * Description of catalog
     */
    description?: pulumi.Input<string>;
    /**
     * Catalog HREF
     */
    href?: pulumi.Input<string>;
    /**
     * (*v3.8.1+*) Indicates if this catalog was created in the current organization.
     */
    isLocal?: pulumi.Input<boolean>;
    /**
     * (*v3.6+*) Indicates if this catalog is shared to all organizations.
     */
    isPublished?: pulumi.Input<boolean>;
    /**
     * (*v3.6+*) Indicates if the catalog is shared.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * (*v3.8+*) List of media item names in this catalog, in alphabetical order.
     */
    mediaItemLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogMetadataEntry>[]>;
    /**
     * Catalog name
     */
    name?: pulumi.Input<string>;
    /**
     * (*v3.6+*) Number of media items available in this catalog.
     */
    numberOfMedia?: pulumi.Input<number>;
    /**
     * (*v3.6+*) Number of vApp templates available in this catalog.
     */
    numberOfVappTemplates?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
     * When using a catalog shared from another organization, this field must have the name of that one, not the current one.
     * If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
     */
    org?: pulumi.Input<string>;
    /**
     * (*v3.6+*) Owner of the catalog.
     */
    ownerName?: pulumi.Input<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    password?: pulumi.Input<string>;
    /**
     * Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
     */
    preserveIdentityInformation?: pulumi.Input<boolean>;
    /**
     * Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
     */
    publishEnabled?: pulumi.Input<boolean>;
    /**
     * (*v3.6+*) Shows if the catalog is `PUBLISHED`, if it is a subscription from another one (`SUBSCRIBED`), or none of those (`UNPUBLISHED`).
     */
    publishSubscriptionType?: pulumi.Input<string>;
    /**
     * (*v3.8+*) URL to which other catalogs can subscribe.
     */
    publishSubscriptionUrl?: pulumi.Input<string>;
    /**
     * Allows to set specific storage profile to be used for catalog. **Note.** Data
     * source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
     */
    storageProfileId?: pulumi.Input<string>;
    /**
     * (*v3.8+*) List of vApp template names in this catalog, in alphabetical order.
     */
    vappTemplateLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Catalog resource.
 */
export interface CatalogArgs {
    /**
     * Enable early catalog export to optimize synchronization. Default is `false`. It is recommended to set it to `true` when publishing the catalog.
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * When destroying use `delete_force=true` with `delete_recursive=true` to remove a catalog and any objects it contains, regardless of their state. Default is `false`
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use `delete_recursive=true` to remove the catalog and any objects it contains that are in a state that normally allows removal. Default is `false`
     */
    deleteRecursive?: pulumi.Input<boolean>;
    /**
     * Description of catalog
     */
    description?: pulumi.Input<string>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogMetadataEntry>[]>;
    /**
     * Catalog name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations. 
     * When using a catalog shared from another organization, this field must have the name of that one, not the current one.
     * If you don't know the name of the sharing org, and put the current one, an error message will list the possible names.
     */
    org?: pulumi.Input<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    password?: pulumi.Input<string>;
    /**
     * Enable include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package, and you should use it only when necessary. Default is `false`.
     */
    preserveIdentityInformation?: pulumi.Input<boolean>;
    /**
     * Enable allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation. Default is `false`.
     */
    publishEnabled?: pulumi.Input<boolean>;
    /**
     * Allows to set specific storage profile to be used for catalog. **Note.** Data
     * source [vcd.getStorageProfile](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/storage_profile) can help to lookup storage profile ID.
     */
    storageProfileId?: pulumi.Input<string>;
}
