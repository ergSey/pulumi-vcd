// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NsxtAppPortProfile extends pulumi.CustomResource {
    /**
     * Get an existing NsxtAppPortProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtAppPortProfileState, opts?: pulumi.CustomResourceOptions): NsxtAppPortProfile {
        return new NsxtAppPortProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtAppPortProfile:NsxtAppPortProfile';

    /**
     * Returns true if the given object is an instance of NsxtAppPortProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtAppPortProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtAppPortProfile.__pulumiType;
    }

    /**
     * At least one block of Application Port definition
     *
     *
     * <a id="app-port"></a>
     */
    public readonly appPorts!: pulumi.Output<outputs.NsxtAppPortProfileAppPort[]>;
    /**
     * ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
     * and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
     */
    public readonly contextId!: pulumi.Output<string>;
    /**
     * Application Port Profile description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A unique name for Security Group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Required only when `scope` is `PROVIDER`. Deprecated
     * and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    public readonly nsxtManagerId!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Application Port Profile scope - `PROVIDER`, `TENANT`
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     * Deprecated and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtAppPortProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtAppPortProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtAppPortProfileArgs | NsxtAppPortProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtAppPortProfileState | undefined;
            resourceInputs["appPorts"] = state ? state.appPorts : undefined;
            resourceInputs["contextId"] = state ? state.contextId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxtManagerId"] = state ? state.nsxtManagerId : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtAppPortProfileArgs | undefined;
            if ((!args || args.appPorts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appPorts'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["appPorts"] = args ? args.appPorts : undefined;
            resourceInputs["contextId"] = args ? args.contextId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxtManagerId"] = args ? args.nsxtManagerId : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtAppPortProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtAppPortProfile resources.
 */
export interface NsxtAppPortProfileState {
    /**
     * At least one block of Application Port definition
     *
     *
     * <a id="app-port"></a>
     */
    appPorts?: pulumi.Input<pulumi.Input<inputs.NsxtAppPortProfileAppPort>[]>;
    /**
     * ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
     * and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
     */
    contextId?: pulumi.Input<string>;
    /**
     * Application Port Profile description
     */
    description?: pulumi.Input<string>;
    /**
     * A unique name for Security Group
     */
    name?: pulumi.Input<string>;
    /**
     * Required only when `scope` is `PROVIDER`. Deprecated
     * and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * Application Port Profile scope - `PROVIDER`, `TENANT`
     */
    scope?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     * Deprecated and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtAppPortProfile resource.
 */
export interface NsxtAppPortProfileArgs {
    /**
     * At least one block of Application Port definition
     *
     *
     * <a id="app-port"></a>
     */
    appPorts: pulumi.Input<pulumi.Input<inputs.NsxtAppPortProfileAppPort>[]>;
    /**
     * ID of NSX-T Manager, VDC or VDC Group. Replaces deprecated fields `vdc`
     * and `nsxtManagerId`. It accepts VDC, VDC Group or NSX-T Manager ID.
     */
    contextId?: pulumi.Input<string>;
    /**
     * Application Port Profile description
     */
    description?: pulumi.Input<string>;
    /**
     * A unique name for Security Group
     */
    name?: pulumi.Input<string>;
    /**
     * Required only when `scope` is `PROVIDER`. Deprecated
     * and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * Application Port Profile scope - `PROVIDER`, `TENANT`
     */
    scope: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     * Deprecated and replaced by `contextId`
     *
     * @deprecated Deprecated in favor of 'context_id'
     */
    vdc?: pulumi.Input<string>;
}
