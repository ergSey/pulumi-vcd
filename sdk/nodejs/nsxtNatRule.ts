// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsxtNatRule extends pulumi.CustomResource {
    /**
     * Get an existing NsxtNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtNatRuleState, opts?: pulumi.CustomResourceOptions): NsxtNatRule {
        return new NsxtNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtNatRule:NsxtNatRule';

    /**
     * Returns true if the given object is an instance of NsxtNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtNatRule.__pulumiType;
    }

    /**
     * Application Port Profile to which to apply the rule. The
     * Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
     * gateway to connect to the internal network.  Can be looked up using `vcd.NsxtAppPortProfile`
     * data source or created using `vcd.NsxtAppPortProfile` resource
     */
    public readonly appPortProfileId!: pulumi.Output<string | undefined>;
    /**
     * An optional description of the NAT rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * For `DNAT` only. This represents the external port number or port range when doing 
     * `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
     * for the given IPs selected will be translated.
     */
    public readonly dnatExternalPort!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Edge Gateway (NSX-T only). Can be looked up using
     * `vcd.NsxtEdgegateway` data source
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * Enables or disables NAT rule (default `true`)
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The external address for the NAT Rule. This must be supplied as a single IP or Network
     * CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
     * external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
     * Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
     */
    public readonly externalAddress!: pulumi.Output<string | undefined>;
    /**
     * You can set a firewall match rule to determine how
     * firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
     * `BYPASS`
     * * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
     * * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
     * * `BYPASS` - skip applying firewall rules to NAT rule
     */
    public readonly firewallMatch!: pulumi.Output<string>;
    /**
     * The internal address for the NAT Rule. This must be supplied as a single IP or
     * Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
     * internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
     * These IPs are typically the Private IPs that are allocated to workloads.
     */
    public readonly internalAddress!: pulumi.Output<string | undefined>;
    /**
     * Enable to have the address translation performed by this rule logged
     * (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
     * is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
     * return error and it is not possible to validate it. `pulumi preview` might show difference on
     * every update.
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * A name for NAT rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * if an address has multiple NAT rules, you can assign these
     * rules different priorities to determine the order in which they are applied. A lower value means a
     * higher priority for this rule.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
     * * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
     * * `NO_DNAT` prevents external IP translation
     * * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
     * * `NO_SNAT` prevents internal IP translation
     * * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
     * versa. The number of internal addresses should be exactly the same as that of external addresses.
     */
    public readonly ruleType!: pulumi.Output<string>;
    /**
     * For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This 
     * must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
     * destination network.
     */
    public readonly snatDestinationAddress!: pulumi.Output<string | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtNatRuleArgs | NsxtNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtNatRuleState | undefined;
            resourceInputs["appPortProfileId"] = state ? state.appPortProfileId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnatExternalPort"] = state ? state.dnatExternalPort : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalAddress"] = state ? state.externalAddress : undefined;
            resourceInputs["firewallMatch"] = state ? state.firewallMatch : undefined;
            resourceInputs["internalAddress"] = state ? state.internalAddress : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["snatDestinationAddress"] = state ? state.snatDestinationAddress : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtNatRuleArgs | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            resourceInputs["appPortProfileId"] = args ? args.appPortProfileId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnatExternalPort"] = args ? args.dnatExternalPort : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalAddress"] = args ? args.externalAddress : undefined;
            resourceInputs["firewallMatch"] = args ? args.firewallMatch : undefined;
            resourceInputs["internalAddress"] = args ? args.internalAddress : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["snatDestinationAddress"] = args ? args.snatDestinationAddress : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtNatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtNatRule resources.
 */
export interface NsxtNatRuleState {
    /**
     * Application Port Profile to which to apply the rule. The
     * Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
     * gateway to connect to the internal network.  Can be looked up using `vcd.NsxtAppPortProfile`
     * data source or created using `vcd.NsxtAppPortProfile` resource
     */
    appPortProfileId?: pulumi.Input<string>;
    /**
     * An optional description of the NAT rule
     */
    description?: pulumi.Input<string>;
    /**
     * For `DNAT` only. This represents the external port number or port range when doing 
     * `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
     * for the given IPs selected will be translated.
     */
    dnatExternalPort?: pulumi.Input<string>;
    /**
     * The ID of the Edge Gateway (NSX-T only). Can be looked up using
     * `vcd.NsxtEdgegateway` data source
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * Enables or disables NAT rule (default `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The external address for the NAT Rule. This must be supplied as a single IP or Network
     * CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
     * external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
     * Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * You can set a firewall match rule to determine how
     * firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
     * `BYPASS`
     * * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
     * * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
     * * `BYPASS` - skip applying firewall rules to NAT rule
     */
    firewallMatch?: pulumi.Input<string>;
    /**
     * The internal address for the NAT Rule. This must be supplied as a single IP or
     * Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
     * internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
     * These IPs are typically the Private IPs that are allocated to workloads.
     */
    internalAddress?: pulumi.Input<string>;
    /**
     * Enable to have the address translation performed by this rule logged
     * (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
     * is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
     * return error and it is not possible to validate it. `pulumi preview` might show difference on
     * every update.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * A name for NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * if an address has multiple NAT rules, you can assign these
     * rules different priorities to determine the order in which they are applied. A lower value means a
     * higher priority for this rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
     * * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
     * * `NO_DNAT` prevents external IP translation
     * * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
     * * `NO_SNAT` prevents internal IP translation
     * * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
     * versa. The number of internal addresses should be exactly the same as that of external addresses.
     */
    ruleType?: pulumi.Input<string>;
    /**
     * For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This 
     * must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
     * destination network.
     */
    snatDestinationAddress?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtNatRule resource.
 */
export interface NsxtNatRuleArgs {
    /**
     * Application Port Profile to which to apply the rule. The
     * Application Port Profile includes a port, and a protocol that the incoming traffic uses on the edge
     * gateway to connect to the internal network.  Can be looked up using `vcd.NsxtAppPortProfile`
     * data source or created using `vcd.NsxtAppPortProfile` resource
     */
    appPortProfileId?: pulumi.Input<string>;
    /**
     * An optional description of the NAT rule
     */
    description?: pulumi.Input<string>;
    /**
     * For `DNAT` only. This represents the external port number or port range when doing 
     * `DNAT` port forwarding from external to internal. The default dnatExternalPort is “ANY” meaning traffic on any port
     * for the given IPs selected will be translated.
     */
    dnatExternalPort?: pulumi.Input<string>;
    /**
     * The ID of the Edge Gateway (NSX-T only). Can be looked up using
     * `vcd.NsxtEdgegateway` data source
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Enables or disables NAT rule (default `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The external address for the NAT Rule. This must be supplied as a single IP or Network
     * CIDR. For a `DNAT` rule, this is the external facing IP Address for incoming traffic. For an `SNAT` rule, this is the
     * external facing IP Address for outgoing traffic. These IPs are typically allocated/suballocated IP Addresses on the
     * Edge Gateway. For a `REFLEXIVE` rule, these are the external facing IPs.
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * You can set a firewall match rule to determine how
     * firewall is applied during NAT. One of `MATCH_INTERNAL_ADDRESS`, `MATCH_EXTERNAL_ADDRESS`,
     * `BYPASS`
     * * `MATCH_INTERNAL_ADDRESS` - applies firewall rules to the internal address of a NAT rule
     * * `MATCH_EXTERNAL_ADDRESS` - applies firewall rules to the external address of a NAT rule
     * * `BYPASS` - skip applying firewall rules to NAT rule
     */
    firewallMatch?: pulumi.Input<string>;
    /**
     * The internal address for the NAT Rule. This must be supplied as a single IP or
     * Network CIDR. For a `DNAT` rule, this is the internal IP address for incoming traffic. For an `SNAT` rule, this is the
     * internal IP Address for outgoing traffic. For a `REFLEXIVE` rule, these are the internal IPs.
     * These IPs are typically the Private IPs that are allocated to workloads.
     */
    internalAddress?: pulumi.Input<string>;
    /**
     * Enable to have the address translation performed by this rule logged
     * (default `false`). **Note** User might lack rights (**Organization Administrator** role by default
     * is missing **Gateway > Configure System Logging** right) to enable logging, but API does not
     * return error and it is not possible to validate it. `pulumi preview` might show difference on
     * every update.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * A name for NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * if an address has multiple NAT rules, you can assign these
     * rules different priorities to determine the order in which they are applied. A lower value means a
     * higher priority for this rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * One of `DNAT`, `NO_DNAT`, `SNAT`, `NO_SNAT`, `REFLEXIVE`
     * * `DNAT` rule translates the external IP to an internal IP and is used for inbound traffic
     * * `NO_DNAT` prevents external IP translation
     * * `SNAT` translates an internal IP to an external IP and is used for outbound traffic
     * * `NO_SNAT` prevents internal IP translation
     * * `REFLEXIVE` (VCD 10.3+)  is also known as Stateless NAT. This translates an internal IP to an external IP and vice
     * versa. The number of internal addresses should be exactly the same as that of external addresses.
     */
    ruleType: pulumi.Input<string>;
    /**
     * For `SNAT` only. The destination addresses to match in the `SNAT` Rule. This 
     * must be supplied as a single IP or Network CIDR. Providing no value for this field results in match with ANY
     * destination network.
     */
    snatDestinationAddress?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    vdc?: pulumi.Input<string>;
}
