// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DseSolutionPublish extends pulumi.CustomResource {
    /**
     * Get an existing DseSolutionPublish resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DseSolutionPublishState, opts?: pulumi.CustomResourceOptions): DseSolutionPublish {
        return new DseSolutionPublish(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/dseSolutionPublish:DseSolutionPublish';

    /**
     * Returns true if the given object is an instance of DseSolutionPublish.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DseSolutionPublish {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DseSolutionPublish.__pulumiType;
    }

    /**
     * Required for `Confluent Platform` Data Solution if . One of
     * `confluentLicenseType` is set to `With License`.
     */
    public readonly confluentLicenseKey!: pulumi.Output<string | undefined>;
    /**
     * Required for `Confluent Platform` Data Solution. One of
     * `With License`, `No License`.
     */
    public readonly confluentLicenseType!: pulumi.Output<string | undefined>;
    /**
     * ID of Data Solution
     */
    public readonly dataSolutionId!: pulumi.Output<string>;
    /**
     * Data Solution Org Configuration ID (only available for `Confluent Platform`
     * which has additional licensing configuration)
     */
    public /*out*/ readonly dsOrgConfigId!: pulumi.Output<string>;
    /**
     * Data Solutions Operator ACL ID
     */
    public /*out*/ readonly dsoAclId!: pulumi.Output<string>;
    /**
     * Organization ID
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * A set of Data Solution Instance Template ACL IDs
     */
    public /*out*/ readonly templateAclIds!: pulumi.Output<string[]>;

    /**
     * Create a DseSolutionPublish resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DseSolutionPublishArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DseSolutionPublishArgs | DseSolutionPublishState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DseSolutionPublishState | undefined;
            resourceInputs["confluentLicenseKey"] = state ? state.confluentLicenseKey : undefined;
            resourceInputs["confluentLicenseType"] = state ? state.confluentLicenseType : undefined;
            resourceInputs["dataSolutionId"] = state ? state.dataSolutionId : undefined;
            resourceInputs["dsOrgConfigId"] = state ? state.dsOrgConfigId : undefined;
            resourceInputs["dsoAclId"] = state ? state.dsoAclId : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["templateAclIds"] = state ? state.templateAclIds : undefined;
        } else {
            const args = argsOrState as DseSolutionPublishArgs | undefined;
            if ((!args || args.dataSolutionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSolutionId'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["confluentLicenseKey"] = args ? args.confluentLicenseKey : undefined;
            resourceInputs["confluentLicenseType"] = args ? args.confluentLicenseType : undefined;
            resourceInputs["dataSolutionId"] = args ? args.dataSolutionId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["dsOrgConfigId"] = undefined /*out*/;
            resourceInputs["dsoAclId"] = undefined /*out*/;
            resourceInputs["templateAclIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DseSolutionPublish.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DseSolutionPublish resources.
 */
export interface DseSolutionPublishState {
    /**
     * Required for `Confluent Platform` Data Solution if . One of
     * `confluentLicenseType` is set to `With License`.
     */
    confluentLicenseKey?: pulumi.Input<string>;
    /**
     * Required for `Confluent Platform` Data Solution. One of
     * `With License`, `No License`.
     */
    confluentLicenseType?: pulumi.Input<string>;
    /**
     * ID of Data Solution
     */
    dataSolutionId?: pulumi.Input<string>;
    /**
     * Data Solution Org Configuration ID (only available for `Confluent Platform`
     * which has additional licensing configuration)
     */
    dsOrgConfigId?: pulumi.Input<string>;
    /**
     * Data Solutions Operator ACL ID
     */
    dsoAclId?: pulumi.Input<string>;
    /**
     * Organization ID
     */
    orgId?: pulumi.Input<string>;
    /**
     * A set of Data Solution Instance Template ACL IDs
     */
    templateAclIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DseSolutionPublish resource.
 */
export interface DseSolutionPublishArgs {
    /**
     * Required for `Confluent Platform` Data Solution if . One of
     * `confluentLicenseType` is set to `With License`.
     */
    confluentLicenseKey?: pulumi.Input<string>;
    /**
     * Required for `Confluent Platform` Data Solution. One of
     * `With License`, `No License`.
     */
    confluentLicenseType?: pulumi.Input<string>;
    /**
     * ID of Data Solution
     */
    dataSolutionId: pulumi.Input<string>;
    /**
     * Organization ID
     */
    orgId: pulumi.Input<string>;
}
