// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
 * perform some optional checks with version constraints.
 *
 * Supported in provider *v3.12+*. Requires System Administrator privileges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * // This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
 * const eq1051 = vcd.getVersion({
 *     condition: "= 10.5.1",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
 * const gte1042 = vcd.getVersion({
 *     condition: ">= 10.4.2",
 *     failIfNotMatch: false,
 * });
 * export const isGte1042 = gte1042.then(gte1042 => gte1042.matchesCondition);
 * // This data source will assert that the VCD version is less than 10.5.0
 * const lt1050 = vcd.getVersion({
 *     condition: "< 10.5.0",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is 10.5.X
 * const is105 = vcd.getVersion({
 *     condition: "~> 10.5",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is not 10.5.1
 * const not1051 = vcd.getVersion({
 *     condition: "!= 10.5.1",
 *     failIfNotMatch: true,
 * });
 * ```
 */
export function getVersion(args?: GetVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetVersionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVersion:getVersion", {
        "condition": args.condition,
        "failIfNotMatch": args.failIfNotMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getVersion.
 */
export interface GetVersionArgs {
    /**
     * A version constraint to check against the VCD version
     */
    condition?: string;
    /**
     * Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
     */
    failIfNotMatch?: boolean;
}

/**
 * A collection of values returned by getVersion.
 */
export interface GetVersionResult {
    /**
     * The maximum supported API version
     */
    readonly apiVersion: string;
    readonly condition?: string;
    readonly failIfNotMatch?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * It is true if the VCD version matches the constraint set in `condition`
     */
    readonly matchesCondition: boolean;
    /**
     * The VCD version
     */
    readonly vcdVersion: string;
}
/**
 * Provides a VMware Cloud Director version data source to fetch the VCD version, the maximum supported API version and
 * perform some optional checks with version constraints.
 *
 * Supported in provider *v3.12+*. Requires System Administrator privileges.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * // This data source will assert that the VCD version is exactly 10.5.1, otherwise it will fail
 * const eq1051 = vcd.getVersion({
 *     condition: "= 10.5.1",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is greater than or equal to 10.4.2, but it won't fail if it is not
 * const gte1042 = vcd.getVersion({
 *     condition: ">= 10.4.2",
 *     failIfNotMatch: false,
 * });
 * export const isGte1042 = gte1042.then(gte1042 => gte1042.matchesCondition);
 * // This data source will assert that the VCD version is less than 10.5.0
 * const lt1050 = vcd.getVersion({
 *     condition: "< 10.5.0",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is 10.5.X
 * const is105 = vcd.getVersion({
 *     condition: "~> 10.5",
 *     failIfNotMatch: true,
 * });
 * // This data source will assert that the VCD version is not 10.5.1
 * const not1051 = vcd.getVersion({
 *     condition: "!= 10.5.1",
 *     failIfNotMatch: true,
 * });
 * ```
 */
export function getVersionOutput(args?: GetVersionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVersionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getVersion:getVersion", {
        "condition": args.condition,
        "failIfNotMatch": args.failIfNotMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getVersion.
 */
export interface GetVersionOutputArgs {
    /**
     * A version constraint to check against the VCD version
     */
    condition?: pulumi.Input<string>;
    /**
     * Required if `condition` is set. Throws an error if the version constraint set in `condition` is not met
     */
    failIfNotMatch?: pulumi.Input<boolean>;
}
