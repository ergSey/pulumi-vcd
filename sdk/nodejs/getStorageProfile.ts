// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a data source for VDC storage profile.
 *
 * Supported in provider *v3.1+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const sp = vcd.getStorageProfile({
 *     org: "my-org",
 *     vdc: "my-vdc",
 *     name: "ssd-storage-profile",
 * });
 * ```
 *
 * ## IOPS settings
 *
 * (Supported from VCD *v10.2*)
 *
 * * `iopsLimitingEnabled` - True if this storage profile is IOPS-based placement enabled
 * * `maximumDiskIops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
 * * `defaultDiskIops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
 * * `diskIopsPerGbMax` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
 * * `iopsLimit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
 */
export function getStorageProfile(args: GetStorageProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getStorageProfile:getStorageProfile", {
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageProfile.
 */
export interface GetStorageProfileArgs {
    /**
     * Storage profile name.
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
     */
    org?: string;
    /**
     * The name of VDC to use, optional if defined at provider level.
     */
    vdc?: string;
}

/**
 * A collection of values returned by getStorageProfile.
 */
export interface GetStorageProfileResult {
    /**
     * True if this is default storage profile for this VDC. The default storage profile is used when an object that can specify a storage profile is created with no storage profile specified
     */
    readonly default: boolean;
    /**
     * True if this storage profile is enabled for use in the VDC
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Total IOPS currently allocated to this storage profile
     */
    readonly iopsAllocated: number;
    /**
     * A block providing IOPS settings. See IOPS settings below for details.
     */
    readonly iopsSettings: outputs.GetStorageProfileIopsSetting[];
    /**
     * Maximum number of storage bytes (scaled by 'units' field) allocated for this profile. `0` means `maximum possible`
     */
    readonly limit: number;
    /**
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    readonly metadataEntries: outputs.GetStorageProfileMetadataEntry[];
    readonly name: string;
    readonly org?: string;
    /**
     * Scale used to define Limit
     */
    readonly units: string;
    /**
     * Storage used, by the storage profile (in Megabytes)
     */
    readonly usedStorage: number;
    readonly vdc?: string;
}
/**
 * Provides a data source for VDC storage profile.
 *
 * Supported in provider *v3.1+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const sp = vcd.getStorageProfile({
 *     org: "my-org",
 *     vdc: "my-vdc",
 *     name: "ssd-storage-profile",
 * });
 * ```
 *
 * ## IOPS settings
 *
 * (Supported from VCD *v10.2*)
 *
 * * `iopsLimitingEnabled` - True if this storage profile is IOPS-based placement enabled
 * * `maximumDiskIops` - The maximum IOPS value that this storage profile is permitted to deliver. Value of 0 means this max setting is disabled and there is no max disk IOPS restriction
 * * `defaultDiskIops` - Value of 0 for disk IOPS means that no IOPS would be reserved or provisioned for that virtual disk
 * * `diskIopsPerGbMax` - The maximum disk IOPs per GB value that this storage profile is permitted to deliver. A value of 0 means there is no per GB IOPS restriction
 * * `iopsLimit` - Maximum number of IOPs that can be allocated for this profile. `0` means `maximum possible`
 */
export function getStorageProfileOutput(args: GetStorageProfileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStorageProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getStorageProfile:getStorageProfile", {
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getStorageProfile.
 */
export interface GetStorageProfileOutputArgs {
    /**
     * Storage profile name.
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     */
    vdc?: pulumi.Input<string>;
}
