// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NetworkRoutedV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkRoutedV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkRoutedV2State, opts?: pulumi.CustomResourceOptions): NetworkRoutedV2 {
        return new NetworkRoutedV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/networkRoutedV2:NetworkRoutedV2';

    /**
     * Returns true if the given object is an instance of NetworkRoutedV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkRoutedV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkRoutedV2.__pulumiType;
    }

    /**
     * An optional description of the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * First DNS server to use.
     */
    public readonly dns1!: pulumi.Output<string | undefined>;
    /**
     * Second DNS server to use.
     */
    public readonly dns2!: pulumi.Output<string | undefined>;
    /**
     * A FQDN for the virtual machines on this network
     */
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    public readonly dualStackEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Edge Gateway (NSX-V or NSX-T)
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    public readonly guestVlanAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * An interface for the network. One of `internal` (default),
     * `subinterface`, `distributed`, `nonDistributed` (requires the Edge Gateway to support distributed
     * networks). NSX-T supports only `internal` and `nonDistributed` (*v3.14+*, requires Edge Gateway
     * to have [non-distributed routing
     * enabled](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway#non_distributed_routing_enabled)).
     */
    public readonly interfaceType!: pulumi.Output<string | undefined>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the owner edge gateway belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    public readonly metadataEntries!: pulumi.Output<outputs.NetworkRoutedV2MetadataEntry[]>;
    /**
     * A unique name for the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organisations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * ID of VDC or VDC Group
     */
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    public readonly prefixLength!: pulumi.Output<number>;
    /**
     * Enables route advertising for
     * this network. **Note** This requires Edge Gateway to use IP Spaces and IP Space *must have* route
     * advertisement
     * enabled.
     */
    public readonly routeAdvertisementEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    public readonly secondaryGateway!: pulumi.Output<string | undefined>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    public readonly secondaryPrefixLength!: pulumi.Output<string | undefined>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    public readonly secondaryStaticIpPools!: pulumi.Output<outputs.NetworkRoutedV2SecondaryStaticIpPool[] | undefined>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    public readonly staticIpPools!: pulumi.Output<outputs.NetworkRoutedV2StaticIpPool[] | undefined>;
    /**
     * The name of VDC to use. *v3.6+* inherits parent VDC or VDC Group
     * from `edgeGatewayId`)
     *
     * @deprecated 'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NetworkRoutedV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkRoutedV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkRoutedV2Args | NetworkRoutedV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkRoutedV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dns1"] = state ? state.dns1 : undefined;
            resourceInputs["dns2"] = state ? state.dns2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["dualStackEnabled"] = state ? state.dualStackEnabled : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = state ? state.guestVlanAllowed : undefined;
            resourceInputs["interfaceType"] = state ? state.interfaceType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["routeAdvertisementEnabled"] = state ? state.routeAdvertisementEnabled : undefined;
            resourceInputs["secondaryGateway"] = state ? state.secondaryGateway : undefined;
            resourceInputs["secondaryPrefixLength"] = state ? state.secondaryPrefixLength : undefined;
            resourceInputs["secondaryStaticIpPools"] = state ? state.secondaryStaticIpPools : undefined;
            resourceInputs["staticIpPools"] = state ? state.staticIpPools : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NetworkRoutedV2Args | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.prefixLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixLength'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dns1"] = args ? args.dns1 : undefined;
            resourceInputs["dns2"] = args ? args.dns2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["dualStackEnabled"] = args ? args.dualStackEnabled : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = args ? args.guestVlanAllowed : undefined;
            resourceInputs["interfaceType"] = args ? args.interfaceType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["routeAdvertisementEnabled"] = args ? args.routeAdvertisementEnabled : undefined;
            resourceInputs["secondaryGateway"] = args ? args.secondaryGateway : undefined;
            resourceInputs["secondaryPrefixLength"] = args ? args.secondaryPrefixLength : undefined;
            resourceInputs["secondaryStaticIpPools"] = args ? args.secondaryStaticIpPools : undefined;
            resourceInputs["staticIpPools"] = args ? args.staticIpPools : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["ownerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkRoutedV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkRoutedV2 resources.
 */
export interface NetworkRoutedV2State {
    /**
     * An optional description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * First DNS server to use.
     */
    dns1?: pulumi.Input<string>;
    /**
     * Second DNS server to use.
     */
    dns2?: pulumi.Input<string>;
    /**
     * A FQDN for the virtual machines on this network
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    dualStackEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Edge Gateway (NSX-V or NSX-T)
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    gateway?: pulumi.Input<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * An interface for the network. One of `internal` (default),
     * `subinterface`, `distributed`, `nonDistributed` (requires the Edge Gateway to support distributed
     * networks). NSX-T supports only `internal` and `nonDistributed` (*v3.14+*, requires Edge Gateway
     * to have [non-distributed routing
     * enabled](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway#non_distributed_routing_enabled)).
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the owner edge gateway belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2MetadataEntry>[]>;
    /**
     * A unique name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * ID of VDC or VDC Group
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * Enables route advertising for
     * this network. **Note** This requires Edge Gateway to use IP Spaces and IP Space *must have* route
     * advertisement
     * enabled.
     */
    routeAdvertisementEnabled?: pulumi.Input<boolean>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    secondaryGateway?: pulumi.Input<string>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    secondaryPrefixLength?: pulumi.Input<string>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    secondaryStaticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2SecondaryStaticIpPool>[]>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2StaticIpPool>[]>;
    /**
     * The name of VDC to use. *v3.6+* inherits parent VDC or VDC Group
     * from `edgeGatewayId`)
     *
     * @deprecated 'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkRoutedV2 resource.
 */
export interface NetworkRoutedV2Args {
    /**
     * An optional description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * First DNS server to use.
     */
    dns1?: pulumi.Input<string>;
    /**
     * Second DNS server to use.
     */
    dns2?: pulumi.Input<string>;
    /**
     * A FQDN for the virtual machines on this network
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    dualStackEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Edge Gateway (NSX-V or NSX-T)
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    gateway: pulumi.Input<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * An interface for the network. One of `internal` (default),
     * `subinterface`, `distributed`, `nonDistributed` (requires the Edge Gateway to support distributed
     * networks). NSX-T supports only `internal` and `nonDistributed` (*v3.14+*, requires Edge Gateway
     * to have [non-distributed routing
     * enabled](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_edgegateway#non_distributed_routing_enabled)).
     */
    interfaceType?: pulumi.Input<string>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the owner edge gateway belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2MetadataEntry>[]>;
    /**
     * A unique name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    prefixLength: pulumi.Input<number>;
    /**
     * Enables route advertising for
     * this network. **Note** This requires Edge Gateway to use IP Spaces and IP Space *must have* route
     * advertisement
     * enabled.
     */
    routeAdvertisementEnabled?: pulumi.Input<boolean>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    secondaryGateway?: pulumi.Input<string>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    secondaryPrefixLength?: pulumi.Input<string>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    secondaryStaticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2SecondaryStaticIpPool>[]>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkRoutedV2StaticIpPool>[]>;
    /**
     * The name of VDC to use. *v3.6+* inherits parent VDC or VDC Group
     * from `edgeGatewayId`)
     *
     * @deprecated 'vdc' is deprecated and ineffective. Routed networks will inherit VDC setting from parent Edge Gateway
     */
    vdc?: pulumi.Input<string>;
}
