// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
 *
 * Supported in provider *v3.11+*.
 *
 * ## Example Usage
 *
 * ### QoS Profile)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const nsxt = vcd.getNsxtManager({
 *     name: "nsxManager1",
 * });
 * const first = nsxt.then(nsxt => vcd.getNsxtSegmentQosProfile({
 *     name: "qos-profile-0",
 *     nsxtManagerId: nsxt.id,
 * }));
 * ```
 */
export function getNsxtSegmentQosProfile(args: GetNsxtSegmentQosProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtSegmentQosProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", {
        "name": args.name,
        "nsxtManagerId": args.nsxtManagerId,
        "vdcGroupId": args.vdcGroupId,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtSegmentQosProfile.
 */
export interface GetNsxtSegmentQosProfileArgs {
    /**
     * The name of Segment Profile
     */
    name: string;
    /**
     * Segment Profile search context. Use when searching by NSX-T manager
     */
    nsxtManagerId?: string;
    /**
     * Segment Profile search context. Use when searching by VDC group
     *
     * > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
     */
    vdcGroupId?: string;
    /**
     * Segment Profile search context. Use when searching by VDC
     */
    vdcId?: string;
}

/**
 * A collection of values returned by getNsxtSegmentQosProfile.
 */
export interface GetNsxtSegmentQosProfileResult {
    /**
     * Class of service groups similar types of traffic in the network and each type
     * of traffic is treated as a class with its own level of service priority. The lower priority
     * traffic is slowed down or in some cases dropped to provide better throughput for higher priority
     * traffic.
     */
    readonly classOfService: number;
    /**
     * Description of QoS Profile
     */
    readonly description: string;
    /**
     * A Differentiated Services Code Point (DSCP) priority
     * Profile.
     */
    readonly dscpPriority: number;
    /**
     * A Differentiated Services Code Point (DSCP) trust mode. Values are below:
     * * `TRUSTED` - With Trusted mode the inner header DSCP value is applied to the outer IP header for
     * IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.
     * * `UNTRUSTED` - Untrusted mode is supported on overlay-based and VLAN-based logical port.
     */
    readonly dscpTrustMode: string;
    /**
     * Average egress bandwidth in Mb/s.
     */
    readonly egressRateLimiterAvgBandwidth: number;
    /**
     * Egress burst size in bytes.
     */
    readonly egressRateLimiterBurstSize: number;
    /**
     * Peak egress bandwidth in Mb/s.
     */
    readonly egressRateLimiterPeakBandwidth: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Average ingress broadcast bandwidth in Mb/s.
     */
    readonly ingressBroadcastRateLimiterAvgBandwidth: number;
    /**
     * Ingress broadcast burst size in bytes.
     */
    readonly ingressBroadcastRateLimiterBurstSize: number;
    /**
     * Peak ingress broadcast bandwidth in Mb/s.
     */
    readonly ingressBroadcastRateLimiterPeakBandwidth: number;
    /**
     * Average ingress bandwidth in Mb/s.
     */
    readonly ingressRateLimiterAvgBandwidth: number;
    /**
     * Ingress burst size in bytes.
     */
    readonly ingressRateLimiterBurstSize: number;
    /**
     * Peak ingress broadcast bandwidth in Mb/s.
     */
    readonly ingressRateLimiterPeakBandwidth: number;
    readonly name: string;
    readonly nsxtManagerId?: string;
    readonly vdcGroupId?: string;
    readonly vdcId?: string;
}
/**
 * Provides a VMware Cloud Director NSX-T QoS Profile data source. This can be used to read NSX-T Segment Profile definitions.
 *
 * Supported in provider *v3.11+*.
 *
 * ## Example Usage
 *
 * ### QoS Profile)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const nsxt = vcd.getNsxtManager({
 *     name: "nsxManager1",
 * });
 * const first = nsxt.then(nsxt => vcd.getNsxtSegmentQosProfile({
 *     name: "qos-profile-0",
 *     nsxtManagerId: nsxt.id,
 * }));
 * ```
 */
export function getNsxtSegmentQosProfileOutput(args: GetNsxtSegmentQosProfileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtSegmentQosProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtSegmentQosProfile:getNsxtSegmentQosProfile", {
        "name": args.name,
        "nsxtManagerId": args.nsxtManagerId,
        "vdcGroupId": args.vdcGroupId,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtSegmentQosProfile.
 */
export interface GetNsxtSegmentQosProfileOutputArgs {
    /**
     * The name of Segment Profile
     */
    name: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by NSX-T manager
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by VDC group
     *
     * > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
     */
    vdcGroupId?: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by VDC
     */
    vdcId?: pulumi.Input<string>;
}
