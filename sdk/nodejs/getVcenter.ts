// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a data source for vCenter server attached to VCD.
 *
 * Supported in provider *v3.0+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const vc = vcd.getVcenter({
 *     name: "vcenter-one",
 * });
 * ```
 */
export function getVcenter(args: GetVcenterArgs, opts?: pulumi.InvokeOptions): Promise<GetVcenterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVcenter:getVcenter", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getVcenter.
 */
export interface GetVcenterArgs {
    /**
     * vCenter name
     */
    name: string;
}

/**
 * A collection of values returned by getVcenter.
 */
export interface GetVcenterResult {
    /**
     * vCenter connection status (e.g. `CONNECTED`).
     */
    readonly connectionStatus: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Boolean value if vCenter is enabled.
     */
    readonly isEnabled: boolean;
    readonly name: string;
    /**
     * vCenter status (e.g. `READY`).
     */
    readonly status: string;
    /**
     * Hostname of configured vCenter.
     */
    readonly vcenterHost: string;
    /**
     * vCenter version (e.g. `6.7.0`)
     */
    readonly vcenterVersion: string;
}
/**
 * Provides a data source for vCenter server attached to VCD.
 *
 * Supported in provider *v3.0+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const vc = vcd.getVcenter({
 *     name: "vcenter-one",
 * });
 * ```
 */
export function getVcenterOutput(args: GetVcenterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVcenterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getVcenter:getVcenter", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getVcenter.
 */
export interface GetVcenterOutputArgs {
    /**
     * vCenter name
     */
    name: pulumi.Input<string>;
}
