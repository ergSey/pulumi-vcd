// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class LbServerPool extends pulumi.CustomResource {
    /**
     * Get an existing LbServerPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbServerPoolState, opts?: pulumi.CustomResourceOptions): LbServerPool {
        return new LbServerPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/lbServerPool:LbServerPool';

    /**
     * Returns true if the given object is an instance of LbServerPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbServerPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbServerPool.__pulumiType;
    }

    /**
     * Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
     * parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
     */
    public readonly algorithmParameters!: pulumi.Output<string | undefined>;
    /**
     * Server Pool description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the edge gateway on which the server pool is to be created
     */
    public readonly edgeGateway!: pulumi.Output<string>;
    /**
     * When transparency is `false` (default) backend servers see the IP address of the
     * traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
     * address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
     * the edge gateway.
     */
    public readonly enableTransparency!: pulumi.Output<boolean | undefined>;
    /**
     * A block to define server pool members. Multiple can be used. See Member and 
     * example for usage details.
     *
     *
     * <a id="member"></a>
     */
    public readonly members!: pulumi.Output<outputs.LbServerPoolMember[] | undefined>;
    /**
     * `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
     */
    public readonly monitorId!: pulumi.Output<string | undefined>;
    /**
     * Server Pool name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a LbServerPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbServerPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbServerPoolArgs | LbServerPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbServerPoolState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["algorithmParameters"] = state ? state.algorithmParameters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeGateway"] = state ? state.edgeGateway : undefined;
            resourceInputs["enableTransparency"] = state ? state.enableTransparency : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as LbServerPoolArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.edgeGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGateway'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["algorithmParameters"] = args ? args.algorithmParameters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeGateway"] = args ? args.edgeGateway : undefined;
            resourceInputs["enableTransparency"] = args ? args.enableTransparency : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["monitorId"] = args ? args.monitorId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbServerPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LbServerPool resources.
 */
export interface LbServerPoolState {
    /**
     * Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
     * parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
     */
    algorithmParameters?: pulumi.Input<string>;
    /**
     * Server Pool description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the edge gateway on which the server pool is to be created
     */
    edgeGateway?: pulumi.Input<string>;
    /**
     * When transparency is `false` (default) backend servers see the IP address of the
     * traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
     * address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
     * the edge gateway.
     */
    enableTransparency?: pulumi.Input<boolean>;
    /**
     * A block to define server pool members. Multiple can be used. See Member and 
     * example for usage details.
     *
     *
     * <a id="member"></a>
     */
    members?: pulumi.Input<pulumi.Input<inputs.LbServerPoolMember>[]>;
    /**
     * `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
     */
    monitorId?: pulumi.Input<string>;
    /**
     * Server Pool name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbServerPool resource.
 */
export interface LbServerPoolArgs {
    /**
     * Server Pool load balancing method. Can be one of `ip-hash`, `round-robin`, `uri`, `leastconn`, `url`, or `httpheader`
     */
    algorithm: pulumi.Input<string>;
    /**
     * Valid only when `algorithm` is `httpheader` or `url`. The `httpheader` algorithm
     * parameter has one option `headerName=<name>` while the `url` algorithm parameter has option `urlParam=<url>`.
     */
    algorithmParameters?: pulumi.Input<string>;
    /**
     * Server Pool description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the edge gateway on which the server pool is to be created
     */
    edgeGateway: pulumi.Input<string>;
    /**
     * When transparency is `false` (default) backend servers see the IP address of the
     * traffic source as the internal IP address of the load balancer. When it is `true` the source IP address is the actual IP
     * address of the client and the edge gateway must be set as the default gateway to ensure that return packets go through
     * the edge gateway.
     */
    enableTransparency?: pulumi.Input<boolean>;
    /**
     * A block to define server pool members. Multiple can be used. See Member and 
     * example for usage details.
     *
     *
     * <a id="member"></a>
     */
    members?: pulumi.Input<pulumi.Input<inputs.LbServerPoolMember>[]>;
    /**
     * `vcd.LbServiceMonitor` resource `id` to attach to server pool for health check parameters
     */
    monitorId?: pulumi.Input<string>;
    /**
     * Server Pool name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
