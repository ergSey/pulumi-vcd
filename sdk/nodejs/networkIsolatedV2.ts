// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NetworkIsolatedV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkIsolatedV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkIsolatedV2State, opts?: pulumi.CustomResourceOptions): NetworkIsolatedV2 {
        return new NetworkIsolatedV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/networkIsolatedV2:NetworkIsolatedV2';

    /**
     * Returns true if the given object is an instance of NetworkIsolatedV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkIsolatedV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkIsolatedV2.__pulumiType;
    }

    /**
     * An optional description of the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * First DNS server to use.
     */
    public readonly dns1!: pulumi.Output<string | undefined>;
    /**
     * Second DNS server to use.
     */
    public readonly dns2!: pulumi.Output<string | undefined>;
    /**
     * A FQDN for the virtual machines on this network
     */
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    public readonly dualStackEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    public readonly guestVlanAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * **NSX-V only.** Defines if this network is shared between multiple VDCs
     * in the Org.  Defaults to `false`.
     */
    public readonly isShared!: pulumi.Output<boolean>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    public readonly metadataEntries!: pulumi.Output<outputs.NetworkIsolatedV2MetadataEntry[]>;
    /**
     * A unique name for the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful 
     * when connected as sysadmin working across different organisations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
     * and inherited from provider configuration)
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    public readonly prefixLength!: pulumi.Output<number>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    public readonly secondaryGateway!: pulumi.Output<string | undefined>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    public readonly secondaryPrefixLength!: pulumi.Output<string | undefined>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    public readonly secondaryStaticIpPools!: pulumi.Output<outputs.NetworkIsolatedV2SecondaryStaticIpPool[] | undefined>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    public readonly staticIpPools!: pulumi.Output<outputs.NetworkIsolatedV2StaticIpPool[] | undefined>;
    /**
     * The name of VDC to use. **Deprecated**  in favor of new field
     * `ownerId` which supports VDC and VDC Group IDs.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NetworkIsolatedV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkIsolatedV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkIsolatedV2Args | NetworkIsolatedV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkIsolatedV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dns1"] = state ? state.dns1 : undefined;
            resourceInputs["dns2"] = state ? state.dns2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["dualStackEnabled"] = state ? state.dualStackEnabled : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = state ? state.guestVlanAllowed : undefined;
            resourceInputs["isShared"] = state ? state.isShared : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["secondaryGateway"] = state ? state.secondaryGateway : undefined;
            resourceInputs["secondaryPrefixLength"] = state ? state.secondaryPrefixLength : undefined;
            resourceInputs["secondaryStaticIpPools"] = state ? state.secondaryStaticIpPools : undefined;
            resourceInputs["staticIpPools"] = state ? state.staticIpPools : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NetworkIsolatedV2Args | undefined;
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.prefixLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixLength'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dns1"] = args ? args.dns1 : undefined;
            resourceInputs["dns2"] = args ? args.dns2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["dualStackEnabled"] = args ? args.dualStackEnabled : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = args ? args.guestVlanAllowed : undefined;
            resourceInputs["isShared"] = args ? args.isShared : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["secondaryGateway"] = args ? args.secondaryGateway : undefined;
            resourceInputs["secondaryPrefixLength"] = args ? args.secondaryPrefixLength : undefined;
            resourceInputs["secondaryStaticIpPools"] = args ? args.secondaryStaticIpPools : undefined;
            resourceInputs["staticIpPools"] = args ? args.staticIpPools : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkIsolatedV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkIsolatedV2 resources.
 */
export interface NetworkIsolatedV2State {
    /**
     * An optional description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * First DNS server to use.
     */
    dns1?: pulumi.Input<string>;
    /**
     * Second DNS server to use.
     */
    dns2?: pulumi.Input<string>;
    /**
     * A FQDN for the virtual machines on this network
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    dualStackEnabled?: pulumi.Input<boolean>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    gateway?: pulumi.Input<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * **NSX-V only.** Defines if this network is shared between multiple VDCs
     * in the Org.  Defaults to `false`.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2MetadataEntry>[]>;
    /**
     * A unique name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful 
     * when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
     * and inherited from provider configuration)
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    secondaryGateway?: pulumi.Input<string>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    secondaryPrefixLength?: pulumi.Input<string>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    secondaryStaticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2SecondaryStaticIpPool>[]>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2StaticIpPool>[]>;
    /**
     * The name of VDC to use. **Deprecated**  in favor of new field
     * `ownerId` which supports VDC and VDC Group IDs.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkIsolatedV2 resource.
 */
export interface NetworkIsolatedV2Args {
    /**
     * An optional description of the network
     */
    description?: pulumi.Input<string>;
    /**
     * First DNS server to use.
     */
    dns1?: pulumi.Input<string>;
    /**
     * Second DNS server to use.
     */
    dns2?: pulumi.Input<string>;
    /**
     * A FQDN for the virtual machines on this network
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Enables Dual-Stack mode so that one can configure one
     * IPv4 and one IPv6 networks. **Note** In such case *IPv4* addresses must be used in `gateway`,
     * `prefixLength` and `staticIpPool` while *IPv6* addresses in `secondaryGateway`,
     * `secondaryPrefixLength` and `secondaryStaticIpPool` fields.
     */
    dualStackEnabled?: pulumi.Input<boolean>;
    /**
     * The gateway for this network (e.g. 192.168.1.1, 2002:0:0:1234:abcd:ffff:c0a7:121)
     */
    gateway: pulumi.Input<string>;
    /**
     * Set to `true` if network should allow guest VLAN tagging.
     * Default `false`.
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * **NSX-V only.** Defines if this network is shared between multiple VDCs
     * in the Org.  Defaults to `false`.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this network. **Not supported** if the network belongs to a VDC Group.
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2MetadataEntry>[]>;
    /**
     * A unique name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful 
     * when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
     * and inherited from provider configuration)
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The prefix length for the new network (e.g. 24 for netmask 255.255.255.0).
     */
    prefixLength: pulumi.Input<number>;
    /**
     * IPv6 gateway *when Dual-Stack mode is enabled*
     */
    secondaryGateway?: pulumi.Input<string>;
    /**
     * IPv6 prefix length *when Dual-Stack mode is
     * enabled*
     */
    secondaryPrefixLength?: pulumi.Input<string>;
    /**
     * One or more IPv6 static
     * pools *when Dual-Stack mode is enabled*
     *
     * > When using IPv6, VCD API will expand IP Addresses if they are specified using *double colon*
     * notation and it will cause inconsistent plan. (e.g. `2002::1234:abcd:ffff:c0a6:121` will be
     * converted to `2002:0:0:1234:abcd:ffff:c0a6:121`)
     *
     * <a id="ip-pools"></a>
     */
    secondaryStaticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2SecondaryStaticIpPool>[]>;
    /**
     * A range of IPs permitted to be used as static IPs for
     * virtual machines; see IP Pools below for details.
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.NetworkIsolatedV2StaticIpPool>[]>;
    /**
     * The name of VDC to use. **Deprecated**  in favor of new field
     * `ownerId` which supports VDC and VDC Group IDs.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: pulumi.Input<string>;
}
