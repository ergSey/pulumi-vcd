// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a data source for NSX-T Network Context Profile lookup to later be used in Distributed
 * Firewall.
 *
 * ## Example Usage
 *
 * ### SYSTEM Scope Network Context Profile Lookup In A VDC Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const existing = vcd.getVdcGroup({
 *     org: "my-org",
 *     name: "main-vdc-group",
 * });
 * const cp1 = existing.then(existing => vcd.getNsxtNetworkContextProfile({
 *     contextId: existing.id,
 *     name: "CTRXICA",
 *     scope: "SYSTEM",
 * }));
 * ```
 *
 * ### SYSTEM Profile Lookup In An NSX-T Manager)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getNsxtManager({
 *     name: "first-nsxt-manager",
 * });
 * const p = main.then(main => vcd.getNsxtNetworkContextProfile({
 *     contextId: main.id,
 *     name: "CTRXICA",
 *     scope: "SYSTEM",
 * }));
 * ```
 */
export function getNsxtNetworkContextProfile(args: GetNsxtNetworkContextProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtNetworkContextProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtNetworkContextProfile:getNsxtNetworkContextProfile", {
        "contextId": args.contextId,
        "name": args.name,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtNetworkContextProfile.
 */
export interface GetNsxtNetworkContextProfileArgs {
    /**
     * Context ID specifies the context for Network Context Profile look up.
     * This ID can be one of `VDC Group ID` (data source `vcd.VdcGroup`), `Org VDC ID` (data source
     * `vcd.OrgVdc`), or `NSX-T Manager ID` (data source `vcd.getNsxtManager`)
     */
    contextId: string;
    /**
     * Name of Network Context Profile
     */
    name: string;
    /**
     * Can be one of `SYSTEM`, `TENANT`, `PROVIDER`. (default `SYSTEM`)
     */
    scope?: string;
}

/**
 * A collection of values returned by getNsxtNetworkContextProfile.
 */
export interface GetNsxtNetworkContextProfileResult {
    readonly contextId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly scope?: string;
}
/**
 * Provides a data source for NSX-T Network Context Profile lookup to later be used in Distributed
 * Firewall.
 *
 * ## Example Usage
 *
 * ### SYSTEM Scope Network Context Profile Lookup In A VDC Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const existing = vcd.getVdcGroup({
 *     org: "my-org",
 *     name: "main-vdc-group",
 * });
 * const cp1 = existing.then(existing => vcd.getNsxtNetworkContextProfile({
 *     contextId: existing.id,
 *     name: "CTRXICA",
 *     scope: "SYSTEM",
 * }));
 * ```
 *
 * ### SYSTEM Profile Lookup In An NSX-T Manager)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getNsxtManager({
 *     name: "first-nsxt-manager",
 * });
 * const p = main.then(main => vcd.getNsxtNetworkContextProfile({
 *     contextId: main.id,
 *     name: "CTRXICA",
 *     scope: "SYSTEM",
 * }));
 * ```
 */
export function getNsxtNetworkContextProfileOutput(args: GetNsxtNetworkContextProfileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtNetworkContextProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtNetworkContextProfile:getNsxtNetworkContextProfile", {
        "contextId": args.contextId,
        "name": args.name,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtNetworkContextProfile.
 */
export interface GetNsxtNetworkContextProfileOutputArgs {
    /**
     * Context ID specifies the context for Network Context Profile look up.
     * This ID can be one of `VDC Group ID` (data source `vcd.VdcGroup`), `Org VDC ID` (data source
     * `vcd.OrgVdc`), or `NSX-T Manager ID` (data source `vcd.getNsxtManager`)
     */
    contextId: pulumi.Input<string>;
    /**
     * Name of Network Context Profile
     */
    name: pulumi.Input<string>;
    /**
     * Can be one of `SYSTEM`, `TENANT`, `PROVIDER`. (default `SYSTEM`)
     */
    scope?: pulumi.Input<string>;
}
