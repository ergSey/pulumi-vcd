// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class VappVm extends pulumi.CustomResource {
    /**
     * Get an existing VappVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappVmState, opts?: pulumi.CustomResourceOptions): VappVm {
        return new VappVm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vappVm:VappVm';

    /**
     * Returns true if the given object is an instance of VappVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappVm.__pulumiType;
    }

    /**
     * Automatically accept EULA if OVA has it. Default is `true`
     */
    public readonly acceptAllEulas!: pulumi.Output<boolean | undefined>;
    /**
     * Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     *
     * @deprecated Use `bootImageId` instead
     */
    public readonly bootImage!: pulumi.Output<string | undefined>;
    /**
     * Media URN to mount as boot image. You can fetch it using a [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
     * Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     */
    public readonly bootImageId!: pulumi.Output<string | undefined>;
    /**
     * A block to define boot options of the VM. See Boot Options
     */
    public readonly bootOptions!: pulumi.Output<outputs.VappVmBootOptions>;
    /**
     * Use a [`vcd.Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
     *
     * @deprecated You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
     */
    public readonly catalogName!: pulumi.Output<string | undefined>;
    /**
     * Computer name to assign to this virtual machine.
     */
    public readonly computerName!: pulumi.Output<string>;
    /**
     * Performs disk consolidation during creation.
     * The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
     * fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
     * Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
     * storage performance.
     */
    public readonly consolidateDisksOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of *an existing VM* to make a copy of it (it
     * cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
     * *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `vcd.Vm`
     * resource) and using different source/destination VDCs.
     */
    public readonly copyFromVmId!: pulumi.Output<string | undefined>;
    /**
     * The number of cores per socket.
     */
    public readonly cpuCores!: pulumi.Output<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
     */
    public readonly cpuHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    public readonly cpuLimit!: pulumi.Output<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    public readonly cpuPriority!: pulumi.Output<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure.
     */
    public readonly cpuReservation!: pulumi.Output<number>;
    /**
     * Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
     */
    public readonly cpuShares!: pulumi.Output<number>;
    /**
     * The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * A block to define for guest customization options. See Customization
     */
    public readonly customization!: pulumi.Output<outputs.VappVmCustomization>;
    /**
     * The VM description. Note: for VM from Template `description` is read only. Currently, this field has
     * the description of the OVA used to create the VM.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Independent disk attachment configuration. See Disk below for details.
     */
    public readonly disks!: pulumi.Output<outputs.VappVmDisk[] | undefined>;
    /**
     * Boolean for exposing full CPU virtualization to the
     * guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
     * translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
     */
    public readonly exposeHardwareVirtualization!: pulumi.Output<boolean | undefined>;
    /**
     * (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
     */
    public /*out*/ readonly extraConfigs!: pulumi.Output<outputs.VappVmExtraConfig[]>;
    /**
     * Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
     */
    public readonly firmware!: pulumi.Output<string>;
    /**
     * Key value map of guest properties
     */
    public readonly guestProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
     */
    public readonly hardwareVersion!: pulumi.Output<string>;
    /**
     * VM Hyper Reference
     */
    public readonly href!: pulumi.Output<string>;
    /**
     * (*v3.13.+*) A true/false value telling whether the resource was imported.
     */
    public /*out*/ readonly imported!: pulumi.Output<boolean>;
    /**
     * (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
     * details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
     */
    public /*out*/ readonly inheritedMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
     */
    public /*out*/ readonly internalDisks!: pulumi.Output<outputs.VappVmInternalDisk[]>;
    /**
     * The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on. Default is `false`.
     */
    public readonly memoryHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    public readonly memoryPriority!: pulumi.Output<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    public readonly memoryReservation!: pulumi.Output<number>;
    /**
     * Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
     */
    public readonly memoryShares!: pulumi.Output<number>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this VM
     *
     * @deprecated Use metadataEntry instead
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    public readonly metadataEntries!: pulumi.Output<outputs.VappVmMetadataEntry[]>;
    /**
     * A name for the VM, unique within the vApp
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (only valid
     * for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
     * is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
     * * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
     * does not require for the VM to use Edge Gateways DHCP service.
     * * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
     * relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
     * until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
     * Tools are not present on the VM.
     */
    public readonly networkDhcpWaitSeconds!: pulumi.Output<number | undefined>;
    /**
     * A block to define network interface. Multiple can be used. See Network and 
     * example for usage details.
     */
    public readonly networks!: pulumi.Output<outputs.VappVmNetwork[] | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
     */
    public readonly overrideTemplateDisks!: pulumi.Output<outputs.VappVmOverrideTemplateDisk[] | undefined>;
    /**
     * VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    public readonly placementPolicyId!: pulumi.Output<string>;
    /**
     * A boolean value stating if this VM should be powered on. Default is `true`
     */
    public readonly powerOn!: pulumi.Output<boolean | undefined>;
    /**
     * True if the update of resource should fail when virtual machine power off needed. Default is `false`.
     */
    public readonly preventUpdatePowerOff!: pulumi.Output<boolean | undefined>;
    /**
     * Set of security tags to be managed by the `vcd.VappVm` resource.
     * To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
     * This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
     */
    public readonly securityTags!: pulumi.Output<string[]>;
    /**
     * Set of extra configuration key/values to be added or modified. See Extra Configuration
     *
     * > **Note:** Only one of `securityTags` attribute or [`vcd.SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
     * should be used. Using both would cause a behavioral conflict.
     */
    public readonly setExtraConfigs!: pulumi.Output<outputs.VappVmSetExtraConfig[] | undefined>;
    /**
     * VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
     * In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    public readonly sizingPolicyId!: pulumi.Output<string>;
    /**
     * (*v3.8+*) The vApp status as a numeric code.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * (*v3.8+*) The vApp status as text.
     */
    public /*out*/ readonly statusText!: pulumi.Output<string>;
    /**
     * Storage profile to override the default one
     */
    public readonly storageProfile!: pulumi.Output<string>;
    /**
     * Use `vappTemplateId` instead. The name of the vApp Template to use
     *
     * @deprecated Use `vappTemplateId` instead
     */
    public readonly templateName!: pulumi.Output<string | undefined>;
    /**
     * ID of parent vApp
     */
    public /*out*/ readonly vappId!: pulumi.Output<string>;
    /**
     * The vApp this VM belongs to.
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The URN of the vApp Template to use. You can fetch it using a [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
     */
    public readonly vappTemplateId!: pulumi.Output<string | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
     */
    public readonly vmNameInTemplate!: pulumi.Output<string | undefined>;
    /**
     * (*3.2+*) Type of the VM (either `vcd.VappVm` or `vcd.Vm`).
     */
    public /*out*/ readonly vmType!: pulumi.Output<string>;

    /**
     * Create a VappVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappVmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappVmArgs | VappVmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappVmState | undefined;
            resourceInputs["acceptAllEulas"] = state ? state.acceptAllEulas : undefined;
            resourceInputs["bootImage"] = state ? state.bootImage : undefined;
            resourceInputs["bootImageId"] = state ? state.bootImageId : undefined;
            resourceInputs["bootOptions"] = state ? state.bootOptions : undefined;
            resourceInputs["catalogName"] = state ? state.catalogName : undefined;
            resourceInputs["computerName"] = state ? state.computerName : undefined;
            resourceInputs["consolidateDisksOnCreate"] = state ? state.consolidateDisksOnCreate : undefined;
            resourceInputs["copyFromVmId"] = state ? state.copyFromVmId : undefined;
            resourceInputs["cpuCores"] = state ? state.cpuCores : undefined;
            resourceInputs["cpuHotAddEnabled"] = state ? state.cpuHotAddEnabled : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpuPriority"] = state ? state.cpuPriority : undefined;
            resourceInputs["cpuReservation"] = state ? state.cpuReservation : undefined;
            resourceInputs["cpuShares"] = state ? state.cpuShares : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["customization"] = state ? state.customization : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["exposeHardwareVirtualization"] = state ? state.exposeHardwareVirtualization : undefined;
            resourceInputs["extraConfigs"] = state ? state.extraConfigs : undefined;
            resourceInputs["firmware"] = state ? state.firmware : undefined;
            resourceInputs["guestProperties"] = state ? state.guestProperties : undefined;
            resourceInputs["hardwareVersion"] = state ? state.hardwareVersion : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["imported"] = state ? state.imported : undefined;
            resourceInputs["inheritedMetadata"] = state ? state.inheritedMetadata : undefined;
            resourceInputs["internalDisks"] = state ? state.internalDisks : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = state ? state.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryPriority"] = state ? state.memoryPriority : undefined;
            resourceInputs["memoryReservation"] = state ? state.memoryReservation : undefined;
            resourceInputs["memoryShares"] = state ? state.memoryShares : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDhcpWaitSeconds"] = state ? state.networkDhcpWaitSeconds : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["overrideTemplateDisks"] = state ? state.overrideTemplateDisks : undefined;
            resourceInputs["placementPolicyId"] = state ? state.placementPolicyId : undefined;
            resourceInputs["powerOn"] = state ? state.powerOn : undefined;
            resourceInputs["preventUpdatePowerOff"] = state ? state.preventUpdatePowerOff : undefined;
            resourceInputs["securityTags"] = state ? state.securityTags : undefined;
            resourceInputs["setExtraConfigs"] = state ? state.setExtraConfigs : undefined;
            resourceInputs["sizingPolicyId"] = state ? state.sizingPolicyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusText"] = state ? state.statusText : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["vappId"] = state ? state.vappId : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vappTemplateId"] = state ? state.vappTemplateId : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmNameInTemplate"] = state ? state.vmNameInTemplate : undefined;
            resourceInputs["vmType"] = state ? state.vmType : undefined;
        } else {
            const args = argsOrState as VappVmArgs | undefined;
            if ((!args || args.vappName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappName'");
            }
            resourceInputs["acceptAllEulas"] = args ? args.acceptAllEulas : undefined;
            resourceInputs["bootImage"] = args ? args.bootImage : undefined;
            resourceInputs["bootImageId"] = args ? args.bootImageId : undefined;
            resourceInputs["bootOptions"] = args ? args.bootOptions : undefined;
            resourceInputs["catalogName"] = args ? args.catalogName : undefined;
            resourceInputs["computerName"] = args ? args.computerName : undefined;
            resourceInputs["consolidateDisksOnCreate"] = args ? args.consolidateDisksOnCreate : undefined;
            resourceInputs["copyFromVmId"] = args ? args.copyFromVmId : undefined;
            resourceInputs["cpuCores"] = args ? args.cpuCores : undefined;
            resourceInputs["cpuHotAddEnabled"] = args ? args.cpuHotAddEnabled : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpuPriority"] = args ? args.cpuPriority : undefined;
            resourceInputs["cpuReservation"] = args ? args.cpuReservation : undefined;
            resourceInputs["cpuShares"] = args ? args.cpuShares : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["customization"] = args ? args.customization : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["exposeHardwareVirtualization"] = args ? args.exposeHardwareVirtualization : undefined;
            resourceInputs["firmware"] = args ? args.firmware : undefined;
            resourceInputs["guestProperties"] = args ? args.guestProperties : undefined;
            resourceInputs["hardwareVersion"] = args ? args.hardwareVersion : undefined;
            resourceInputs["href"] = args ? args.href : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = args ? args.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryPriority"] = args ? args.memoryPriority : undefined;
            resourceInputs["memoryReservation"] = args ? args.memoryReservation : undefined;
            resourceInputs["memoryShares"] = args ? args.memoryShares : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkDhcpWaitSeconds"] = args ? args.networkDhcpWaitSeconds : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["overrideTemplateDisks"] = args ? args.overrideTemplateDisks : undefined;
            resourceInputs["placementPolicyId"] = args ? args.placementPolicyId : undefined;
            resourceInputs["powerOn"] = args ? args.powerOn : undefined;
            resourceInputs["preventUpdatePowerOff"] = args ? args.preventUpdatePowerOff : undefined;
            resourceInputs["securityTags"] = args ? args.securityTags : undefined;
            resourceInputs["setExtraConfigs"] = args ? args.setExtraConfigs : undefined;
            resourceInputs["sizingPolicyId"] = args ? args.sizingPolicyId : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vappTemplateId"] = args ? args.vappTemplateId : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["vmNameInTemplate"] = args ? args.vmNameInTemplate : undefined;
            resourceInputs["extraConfigs"] = undefined /*out*/;
            resourceInputs["imported"] = undefined /*out*/;
            resourceInputs["inheritedMetadata"] = undefined /*out*/;
            resourceInputs["internalDisks"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusText"] = undefined /*out*/;
            resourceInputs["vappId"] = undefined /*out*/;
            resourceInputs["vmType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappVm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VappVm resources.
 */
export interface VappVmState {
    /**
     * Automatically accept EULA if OVA has it. Default is `true`
     */
    acceptAllEulas?: pulumi.Input<boolean>;
    /**
     * Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     *
     * @deprecated Use `bootImageId` instead
     */
    bootImage?: pulumi.Input<string>;
    /**
     * Media URN to mount as boot image. You can fetch it using a [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
     * Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     */
    bootImageId?: pulumi.Input<string>;
    /**
     * A block to define boot options of the VM. See Boot Options
     */
    bootOptions?: pulumi.Input<inputs.VappVmBootOptions>;
    /**
     * Use a [`vcd.Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
     *
     * @deprecated You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Computer name to assign to this virtual machine.
     */
    computerName?: pulumi.Input<string>;
    /**
     * Performs disk consolidation during creation.
     * The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
     * fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
     * Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
     * storage performance.
     */
    consolidateDisksOnCreate?: pulumi.Input<boolean>;
    /**
     * The ID of *an existing VM* to make a copy of it (it
     * cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
     * *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `vcd.Vm`
     * resource) and using different source/destination VDCs.
     */
    copyFromVmId?: pulumi.Input<string>;
    /**
     * The number of cores per socket.
     */
    cpuCores?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    cpuPriority?: pulumi.Input<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
     */
    cpus?: pulumi.Input<number>;
    /**
     * A block to define for guest customization options. See Customization
     */
    customization?: pulumi.Input<inputs.VappVmCustomization>;
    /**
     * The VM description. Note: for VM from Template `description` is read only. Currently, this field has
     * the description of the OVA used to create the VM.
     */
    description?: pulumi.Input<string>;
    /**
     * Independent disk attachment configuration. See Disk below for details.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VappVmDisk>[]>;
    /**
     * Boolean for exposing full CPU virtualization to the
     * guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
     * translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
     */
    exposeHardwareVirtualization?: pulumi.Input<boolean>;
    /**
     * (*v3.13.+*) The VM extra configuration. See Extra Configuration for more detail. *Not populated on VCD 10.4.0*.
     */
    extraConfigs?: pulumi.Input<pulumi.Input<inputs.VappVmExtraConfig>[]>;
    /**
     * Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
     */
    firmware?: pulumi.Input<string>;
    /**
     * Key value map of guest properties
     */
    guestProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
     */
    hardwareVersion?: pulumi.Input<string>;
    /**
     * VM Hyper Reference
     */
    href?: pulumi.Input<string>;
    /**
     * (*v3.13.+*) A true/false value telling whether the resource was imported.
     */
    imported?: pulumi.Input<boolean>;
    /**
     * (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
     * details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
     */
    inheritedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (*v2.7+*) A block providing internal disk of VM details. See Internal Disk below for details.
     */
    internalDisks?: pulumi.Input<pulumi.Input<inputs.VappVmInternalDisk>[]>;
    /**
     * The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
     */
    memory?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on. Default is `false`.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    memoryPriority?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this VM
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.VappVmMetadataEntry>[]>;
    /**
     * A name for the VM, unique within the vApp
     */
    name?: pulumi.Input<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (only valid
     * for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
     * is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
     * * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
     * does not require for the VM to use Edge Gateways DHCP service.
     * * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
     * relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
     * until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
     * Tools are not present on the VM.
     */
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    /**
     * A block to define network interface. Multiple can be used. See Network and 
     * example for usage details.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VappVmNetwork>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
     */
    osType?: pulumi.Input<string>;
    /**
     * Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
     */
    overrideTemplateDisks?: pulumi.Input<pulumi.Input<inputs.VappVmOverrideTemplateDisk>[]>;
    /**
     * VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    placementPolicyId?: pulumi.Input<string>;
    /**
     * A boolean value stating if this VM should be powered on. Default is `true`
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * True if the update of resource should fail when virtual machine power off needed. Default is `false`.
     */
    preventUpdatePowerOff?: pulumi.Input<boolean>;
    /**
     * Set of security tags to be managed by the `vcd.VappVm` resource.
     * To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
     * This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
     */
    securityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of extra configuration key/values to be added or modified. See Extra Configuration
     *
     * > **Note:** Only one of `securityTags` attribute or [`vcd.SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
     * should be used. Using both would cause a behavioral conflict.
     */
    setExtraConfigs?: pulumi.Input<pulumi.Input<inputs.VappVmSetExtraConfig>[]>;
    /**
     * VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
     * In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    sizingPolicyId?: pulumi.Input<string>;
    /**
     * (*v3.8+*) The vApp status as a numeric code.
     */
    status?: pulumi.Input<number>;
    /**
     * (*v3.8+*) The vApp status as text.
     */
    statusText?: pulumi.Input<string>;
    /**
     * Storage profile to override the default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * Use `vappTemplateId` instead. The name of the vApp Template to use
     *
     * @deprecated Use `vappTemplateId` instead
     */
    templateName?: pulumi.Input<string>;
    /**
     * ID of parent vApp
     */
    vappId?: pulumi.Input<string>;
    /**
     * The vApp this VM belongs to.
     */
    vappName?: pulumi.Input<string>;
    /**
     * The URN of the vApp Template to use. You can fetch it using a [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
     */
    vappTemplateId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
     */
    vmNameInTemplate?: pulumi.Input<string>;
    /**
     * (*3.2+*) Type of the VM (either `vcd.VappVm` or `vcd.Vm`).
     */
    vmType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VappVm resource.
 */
export interface VappVmArgs {
    /**
     * Automatically accept EULA if OVA has it. Default is `true`
     */
    acceptAllEulas?: pulumi.Input<boolean>;
    /**
     * Use `bootImageId` instead. Media name to mount as boot image. Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     *
     * @deprecated Use `bootImageId` instead
     */
    bootImage?: pulumi.Input<string>;
    /**
     * Media URN to mount as boot image. You can fetch it using a [`vcd.CatalogMedia`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_media) data source.
     * Image is mounted only during VM creation. On update if value is changed to empty it will eject the mounted media. If you want to mount an image later, please use [vcd.InsertedMedia](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/inserted_media).
     */
    bootImageId?: pulumi.Input<string>;
    /**
     * A block to define boot options of the VM. See Boot Options
     */
    bootOptions?: pulumi.Input<inputs.VappVmBootOptions>;
    /**
     * Use a [`vcd.Catalog`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog) data source along with `vappTemplateId` or `bootImageId` instead. The catalog name in which to find the given vApp Template or media for `bootImage`.
     *
     * @deprecated You should use `vappTemplateId` or `bootImageId` without the need of a catalog name
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Computer name to assign to this virtual machine.
     */
    computerName?: pulumi.Input<string>;
    /**
     * Performs disk consolidation during creation.
     * The main use case is when one wants to grow template disk size using `overrideTemplateDisk` in
     * fast provisioned VDCs. **Note:** Consolidating disks requires right `vApp: VM Migrate, Force
     * Undeploy, Relocate, Consolidate`. This operation _may take long time_ depending on disk size and
     * storage performance.
     */
    consolidateDisksOnCreate?: pulumi.Input<boolean>;
    /**
     * The ID of *an existing VM* to make a copy of it (it
     * cannot be a vApp template). The source VM *must be in the same Org* (but can be in different VDC).
     * *Note:* `sizingPolicyId` must be specified when creating a standalone VM (using `vcd.Vm`
     * resource) and using different source/destination VDCs.
     */
    copyFromVmId?: pulumi.Input<string>;
    /**
     * The number of cores per socket.
     */
    cpuCores?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on. Default is `false`.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    cpuPriority?: pulumi.Input<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource in MHz. This is a read-only, unless the `cpuPriority` is "CUSTOM"
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to allocate to the VM. Socket count is a result of: virtual logical processors/cores per socket. If `cpuHotAddEnabled` is true, then cpus will be increased without VM power off.
     */
    cpus?: pulumi.Input<number>;
    /**
     * A block to define for guest customization options. See Customization
     */
    customization?: pulumi.Input<inputs.VappVmCustomization>;
    /**
     * The VM description. Note: for VM from Template `description` is read only. Currently, this field has
     * the description of the OVA used to create the VM.
     */
    description?: pulumi.Input<string>;
    /**
     * Independent disk attachment configuration. See Disk below for details.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VappVmDisk>[]>;
    /**
     * Boolean for exposing full CPU virtualization to the
     * guest operating system so that applications that require hardware virtualization can run on virtual machines without binary
     * translation or paravirtualization. Useful for hypervisor nesting provided underlying hardware supports it. Default is `false`.
     */
    exposeHardwareVirtualization?: pulumi.Input<boolean>;
    /**
     * Specify boot firmware of the VM. Can be `efi` or `bios`. If unset, defaults to `bios`. Changing the value requires the VM to power off.
     */
    firmware?: pulumi.Input<string>;
    /**
     * Key value map of guest properties
     */
    guestProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.). Required when creating empty VM.
     */
    hardwareVersion?: pulumi.Input<string>;
    /**
     * VM Hyper Reference
     */
    href?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) to allocate to the VM. If `memoryHotAddEnabled` is true, then memory will be increased without VM power off
     */
    memory?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on. Default is `false`.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload
     */
    memoryPriority?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource in MB. This is a read-only, unless the `memoryPriority` is "CUSTOM"
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * Use `metadataEntry` instead. Key value map of metadata to assign to this VM
     *
     * @deprecated Use metadataEntry instead
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.VappVmMetadataEntry>[]>;
    /**
     * A name for the VM, unique within the vApp
     */
    name?: pulumi.Input<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (only valid
     * for adapters in `network` block with `ip_allocation_mode=DHCP`). It constantly checks if IP is present so the time given
     * is a maximum. VM must be powered on and _at least one_ of the following _must be true_:
     * * VM has Guest Tools. It waits for IP address to be reported by Guest Tools. This is a slower option, but
     * does not require for the VM to use Edge Gateways DHCP service.
     * * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
     * relayed). It works by querying DHCP leases on Edge Gateway. In general it is quicker than waiting
     * until Guest Tools report IP addresses, but is more constrained. However this is the only option if Guest
     * Tools are not present on the VM.
     */
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    /**
     * A block to define network interface. Multiple can be used. See Network and 
     * example for usage details.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VappVmNetwork>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * Operating System type. Possible values can be found in Os Types. Required when creating empty VM.
     */
    osType?: pulumi.Input<string>;
    /**
     * Allows to update internal disk in template before first VM boot. Disk is matched by `busType`, `busNumber` and `unitNumber`. See Override template Disk below for details.
     */
    overrideTemplateDisks?: pulumi.Input<pulumi.Input<inputs.VappVmOverrideTemplateDisk>[]>;
    /**
     * VM placement policy or [vGPU policy][vgpu-policy] (*3.11+*) ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * In this case, if the placement policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    placementPolicyId?: pulumi.Input<string>;
    /**
     * A boolean value stating if this VM should be powered on. Default is `true`
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * True if the update of resource should fail when virtual machine power off needed. Default is `false`.
     */
    preventUpdatePowerOff?: pulumi.Input<boolean>;
    /**
     * Set of security tags to be managed by the `vcd.VappVm` resource.
     * To remove `securityTags` you must set `securityTags = []` and do not remove the attribute. Removing the attribute will cause the tags to remain unchanged and just stop being managed by this resource.
     * This is to be consistent with existing security tags that were created by the `vcdSecurityTags` resource.
     */
    securityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of extra configuration key/values to be added or modified. See Extra Configuration
     *
     * > **Note:** Only one of `securityTags` attribute or [`vcd.SecurityTag`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/security_tag) resource
     * should be used. Using both would cause a behavioral conflict.
     */
    setExtraConfigs?: pulumi.Input<pulumi.Input<inputs.VappVmSetExtraConfig>[]>;
    /**
     * VM sizing policy ID. To be used, it needs to be assigned to [Org VDC](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_vdc)
     * using `vcd_org_vdc.vm_sizing_policy_ids` (and `vcd_org_vdc.default_compute_policy_id` to make it default).
     * In this case, if the sizing policy is not set, it will pick the VDC default on creation. It must be set explicitly
     * if one wants to update it to another policy (the VM requires at least one Compute Policy), and needs to be set to `""` to be removed.
     */
    sizingPolicyId?: pulumi.Input<string>;
    /**
     * Storage profile to override the default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * Use `vappTemplateId` instead. The name of the vApp Template to use
     *
     * @deprecated Use `vappTemplateId` instead
     */
    templateName?: pulumi.Input<string>;
    /**
     * The vApp this VM belongs to.
     */
    vappName: pulumi.Input<string>;
    /**
     * The URN of the vApp Template to use. You can fetch it using a [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) data source.
     */
    vappTemplateId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * The name of the VM in vApp Template to use. For cases when vApp template has more than one VM.
     */
    vmNameInTemplate?: pulumi.Input<string>;
}
