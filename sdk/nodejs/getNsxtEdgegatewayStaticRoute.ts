// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
 *
 * Provides a data source to read NSX-T Edge Gateway Static Routes.
 *
 * ## Example Usage
 *
 * ### By Name Only)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const by_name = vcd.getNsxtEdgegatewayStaticRoute({
 *     edgeGatewayId: existing.id,
 *     name: "existing-static-route",
 * });
 * ```
 *
 * ### By Name And Network CIDR )
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const by_name_and_cidr = vcd.getNsxtEdgegatewayStaticRoute({
 *     edgeGatewayId: existing.id,
 *     name: "duplicate-name-sr",
 *     networkCidr: "10.10.11.0/24",
 * });
 * ```
 */
export function getNsxtEdgegatewayStaticRoute(args: GetNsxtEdgegatewayStaticRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtEdgegatewayStaticRouteResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", {
        "edgeGatewayId": args.edgeGatewayId,
        "name": args.name,
        "networkCidr": args.networkCidr,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayStaticRoute.
 */
export interface GetNsxtEdgegatewayStaticRouteArgs {
    /**
     * NSX-T Edge Gateway ID
     */
    edgeGatewayId: string;
    /**
     * Name of Static Route. **Note** names *can be duplicate* and one can use
     * `networkCidr` to make filtering more precise
     */
    name: string;
    /**
     * Network CIDR for Static Route
     *
     * > It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
     * data source will return an error as it expects to find only one entity. If this happens, one can
     * make the filtering more precise by supplying `networkCidr` in addition to `name`.
     */
    networkCidr?: string;
    org?: string;
}

/**
 * A collection of values returned by getNsxtEdgegatewayStaticRoute.
 */
export interface GetNsxtEdgegatewayStaticRouteResult {
    readonly description: string;
    readonly edgeGatewayId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly networkCidr: string;
    readonly nextHops: outputs.GetNsxtEdgegatewayStaticRouteNextHop[];
    readonly org?: string;
}
/**
 * Supported in provider *v3.10+* and VCD 10.4.0+ with NSX-T.
 *
 * Provides a data source to read NSX-T Edge Gateway Static Routes.
 *
 * ## Example Usage
 *
 * ### By Name Only)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const by_name = vcd.getNsxtEdgegatewayStaticRoute({
 *     edgeGatewayId: existing.id,
 *     name: "existing-static-route",
 * });
 * ```
 *
 * ### By Name And Network CIDR )
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const by_name_and_cidr = vcd.getNsxtEdgegatewayStaticRoute({
 *     edgeGatewayId: existing.id,
 *     name: "duplicate-name-sr",
 *     networkCidr: "10.10.11.0/24",
 * });
 * ```
 */
export function getNsxtEdgegatewayStaticRouteOutput(args: GetNsxtEdgegatewayStaticRouteOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtEdgegatewayStaticRouteResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtEdgegatewayStaticRoute:getNsxtEdgegatewayStaticRoute", {
        "edgeGatewayId": args.edgeGatewayId,
        "name": args.name,
        "networkCidr": args.networkCidr,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayStaticRoute.
 */
export interface GetNsxtEdgegatewayStaticRouteOutputArgs {
    /**
     * NSX-T Edge Gateway ID
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Name of Static Route. **Note** names *can be duplicate* and one can use
     * `networkCidr` to make filtering more precise
     */
    name: pulumi.Input<string>;
    /**
     * Network CIDR for Static Route
     *
     * > It may happen that there are multiple NSX-T Static Routes with the same `name`. In such a case, a
     * data source will return an error as it expects to find only one entity. If this happens, one can
     * make the filtering more precise by supplying `networkCidr` in addition to `name`.
     */
    networkCidr?: pulumi.Input<string>;
    org?: pulumi.Input<string>;
}
