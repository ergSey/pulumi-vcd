// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_pvdc = vcd.getProviderVdc({
 *     name: "my-pvdc",
 * });
 * export const providerVdc = my_pvdc.then(my_pvdc => my_pvdc.id);
 * ```
 *
 * ## Compute Capacity
 *
 * The `computeCapacity` attribute is a list with a single item which has the following nested attributes:
 *
 * * `cpu` - An indicator of CPU. See CPU and memory below.
 * * `memory` - An indicator of memory. See CPU and memory below.
 * * `isElastic` -  True if compute capacity can grow or shrink based on demand.
 * * `isHa` - True if compute capacity is highly available.
 *
 * <a id="cpu-and-memory"></a>
 * ### CPU and memory
 *
 * The `cpu` and `memory` indicators have the following nested attributes:
 *
 * * `allocation` - Allocated CPU/Memory for this Provider VDC.
 * * `overhead` - CPU/Memory overhead for this Provider VDC.
 * * `reserved` - Reserved CPU/Memory for this Provider VDC.
 * * `total` - Total CPU/Memory for this Provider VDC.
 * * `units` - Units for the CPU/Memory of this Provider VDC.
 * * `used` - Used CPU/Memory in this Provider VDC.
 *
 * <a id="metadata"></a>
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getProviderVdc(args: GetProviderVdcArgs, opts?: pulumi.InvokeOptions): Promise<GetProviderVdcResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getProviderVdc:getProviderVdc", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderVdc.
 */
export interface GetProviderVdcArgs {
    /**
     * Provider VDC name
     */
    name: string;
}

/**
 * A collection of values returned by getProviderVdc.
 */
export interface GetProviderVdcResult {
    /**
     * Set of virtual hardware versions supported by this Provider VDC.
     */
    readonly capabilities: string[];
    /**
     * An indicator of CPU and memory capacity. See Compute Capacity below for details.
     */
    readonly computeCapacities: outputs.GetProviderVdcComputeCapacity[];
    /**
     * Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group).
     */
    readonly computeProviderScope: string;
    /**
     * Optional description of the Provider VDC.
     */
    readonly description: string;
    /**
     * Set of IDs of External Networks.
     */
    readonly externalNetworkIds: string[];
    /**
     * The highest virtual hardware version supported by this Provider VDC.
     */
    readonly highestSupportedHardwareVersion: string;
    /**
     * Set with all the hosts which are connected to VC server.
     */
    readonly hostIds: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation.
     */
    readonly isEnabled: boolean;
    /**
     * (Deprecated) Use `metadataEntry` instead. Key and value pairs for Provider VDC Metadata.
     *
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    /**
     * A set of metadata entries assigned to the Provider VDC. See Metadata section for details.
     */
    readonly metadataEntries: outputs.GetProviderVdcMetadataEntry[];
    readonly name: string;
    /**
     * Set IDs of the Network Pools used by this Provider VDC.
     */
    readonly networkPoolIds: string[];
    /**
     * ID of the registered NSX-T Manager that backs networking operations for this Provider VDC.
     */
    readonly nsxtManagerId: string;
    /**
     * Set of IDs of the Resource Pools backing this provider VDC.
     */
    readonly resourcePoolIds: string[];
    /**
     * Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized).
     */
    readonly status: number;
    readonly storageContainerIds: string[];
    /**
     * Set of IDs to the Storage Profiles available to this Provider VDC.
     */
    readonly storageProfileIds: string[];
    readonly storageProfileNames: string[];
    /**
     * ID of the universal network reference.
     */
    readonly universalNetworkPoolId: string;
    /**
     * ID of the vCenter Server that provides the Resource Pools and Datastores.
     */
    readonly vcenterId: string;
}
/**
 * Gives a VMware Cloud Director Provider VDC data source. This data source can be used to reference a Provider VDC and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_pvdc = vcd.getProviderVdc({
 *     name: "my-pvdc",
 * });
 * export const providerVdc = my_pvdc.then(my_pvdc => my_pvdc.id);
 * ```
 *
 * ## Compute Capacity
 *
 * The `computeCapacity` attribute is a list with a single item which has the following nested attributes:
 *
 * * `cpu` - An indicator of CPU. See CPU and memory below.
 * * `memory` - An indicator of memory. See CPU and memory below.
 * * `isElastic` -  True if compute capacity can grow or shrink based on demand.
 * * `isHa` - True if compute capacity is highly available.
 *
 * <a id="cpu-and-memory"></a>
 * ### CPU and memory
 *
 * The `cpu` and `memory` indicators have the following nested attributes:
 *
 * * `allocation` - Allocated CPU/Memory for this Provider VDC.
 * * `overhead` - CPU/Memory overhead for this Provider VDC.
 * * `reserved` - Reserved CPU/Memory for this Provider VDC.
 * * `total` - Total CPU/Memory for this Provider VDC.
 * * `units` - Units for the CPU/Memory of this Provider VDC.
 * * `used` - Used CPU/Memory in this Provider VDC.
 *
 * <a id="metadata"></a>
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getProviderVdcOutput(args: GetProviderVdcOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProviderVdcResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getProviderVdc:getProviderVdc", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderVdc.
 */
export interface GetProviderVdcOutputArgs {
    /**
     * Provider VDC name
     */
    name: pulumi.Input<string>;
}
