// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
 *
 * A `vcd.SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
 * like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
 * may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const subscriber = vcd.getSubscribedCatalog({
 *     org: "my-org",
 *     name: "subscriber",
 * });
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` (Optional) matches the name using a regular expression.
 * * `date` (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getSubscribedCatalog(args: GetSubscribedCatalogArgs, opts?: pulumi.InvokeOptions): Promise<GetSubscribedCatalogResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getSubscribedCatalog:getSubscribedCatalog", {
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubscribedCatalog.
 */
export interface GetSubscribedCatalogArgs {
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: inputs.GetSubscribedCatalogFilter;
    /**
     * Catalog name. Required if `filter` is not set.
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
}

/**
 * A collection of values returned by getSubscribedCatalog.
 */
export interface GetSubscribedCatalogResult {
    /**
     * Version number from this catalog.
     */
    readonly catalogVersion: number;
    /**
     * Date and time of catalog creation.
     */
    readonly created: string;
    /**
     * Description of the catalog. This is inherited from the publishing catalog
     */
    readonly description: string;
    /**
     * List of synchronization tasks that are have failed. They can refer to the catalog or any of its catalog items.
     */
    readonly failedTasks: string[];
    readonly filter?: outputs.GetSubscribedCatalogFilter;
    /**
     * the catalog's Hyper reference.
     */
    readonly href: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (*v3.8.1+*) Indicates if this catalog was created in the current organization.
     */
    readonly isLocal: boolean;
    /**
     * Indicates if this catalog is available for subscription. (Always return `false` for this data source)
     */
    readonly isPublished: boolean;
    /**
     * Indicates if the catalog is shared (`true` or `false`).
     */
    readonly isShared: boolean;
    readonly makeLocalCopy: boolean;
    /**
     * List of media item names in this catalog, in alphabetical order.
     */
    readonly mediaItemLists: string[];
    readonly name: string;
    /**
     * Number of media items available in this catalog.
     */
    readonly numberOfMedia: number;
    /**
     * Number of vApp templates available in this catalog.
     */
    readonly numberOfVappTemplates: number;
    readonly org?: string;
    /**
     * Owner of the catalog.
     */
    readonly ownerName: string;
    /**
     * Shows if the catalog is published, if it is a subscription from another one or none of those. (Always returns `SUBSCRIBED` for this data source)
     */
    readonly publishSubscriptionType: string;
    /**
     * List of running synchronization tasks that are still running. They can refer to the catalog or any of its catalog items.
     */
    readonly runningTasks: string[];
    /**
     * Allows to set specific storage profile to be used for catalog.
     */
    readonly storageProfileId: string;
    /**
     * The URL to which this catalog is subscribed.
     */
    readonly subscriptionUrl: string;
    /**
     * List of vApp template names in this catalog, in alphabetical order.
     */
    readonly vappTemplateLists: string[];
}
/**
 * Provides a VMware Cloud Director subscribed catalog resource. This can be used to read a subscribed catalog.
 *
 * A `vcd.SubscribedCatalog` is a catalog that was created by subscribing to another catalog. It can be used, to some extent,
 * like any other catalog, but users must keep in mind that this resource depends on the connection to another catalog, which
 * may not even be in the same VCD. For more information, see the full [Catalog subscription and sharing](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/catalog_subscription_and_sharing) guide.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const subscriber = vcd.getSubscribedCatalog({
 *     org: "my-org",
 *     name: "subscriber",
 * });
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` (Optional) matches the name using a regular expression.
 * * `date` (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getSubscribedCatalogOutput(args: GetSubscribedCatalogOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSubscribedCatalogResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getSubscribedCatalog:getSubscribedCatalog", {
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubscribedCatalog.
 */
export interface GetSubscribedCatalogOutputArgs {
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: pulumi.Input<inputs.GetSubscribedCatalogFilterArgs>;
    /**
     * Catalog name. Required if `filter` is not set.
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
}
