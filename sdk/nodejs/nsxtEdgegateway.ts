// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NsxtEdgegateway extends pulumi.CustomResource {
    /**
     * Get an existing NsxtEdgegateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtEdgegatewayState, opts?: pulumi.CustomResourceOptions): NsxtEdgegateway {
        return new NsxtEdgegateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtEdgegateway:NsxtEdgegateway';

    /**
     * Returns true if the given object is an instance of NsxtEdgegateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtEdgegateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtEdgegateway.__pulumiType;
    }

    /**
     * Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
     */
    public readonly dedicateExternalNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * `ACTIVE_STANDBY` (default) or
     * `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
     * router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
     * nature guarantees high north-south data throughput.
     */
    public readonly deploymentMode!: pulumi.Output<string>;
    /**
     * A unique name for the edge gateway.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specific Edge Cluster ID if required
     */
    public readonly edgeClusterId!: pulumi.Output<string>;
    /**
     * Total allocated IP count in attached NSX-T Segment backed
     * external networks
     */
    public /*out*/ readonly externalNetworkAllocatedIpCount!: pulumi.Output<number>;
    /**
     * An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
     * can be used to lookup ID by name.
     */
    public readonly externalNetworkId!: pulumi.Output<string>;
    /**
     * attaches NSX-T Segment backed External
     * Networks with a given configuration block. It *does not
     * support IP Spaces*.
     */
    public readonly externalNetworks!: pulumi.Output<outputs.NsxtEdgegatewayExternalNetwork[] | undefined>;
    /**
     * Sets a limit of IPs to count for
     * `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
     * counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
     * only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
     * data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
     * specify `0` for *unlimited* value.
     *
     * <a id="ip-allocation-modes"></a>
     */
    public readonly ipCountReadLimit!: pulumi.Output<number | undefined>;
    /**
     * A unique name for the edge gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Non-Distributed routing will allow
     * tenants the option of connecting Org Vdc networks to the Service
     * Router. This would
     * force all VM traffic through the service router for that network. Default `false`.
     */
    public readonly nonDistributedRoutingEnabled!: pulumi.Output<boolean>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The ID of VDC or VDC Group. **Note:** Data sources
     * [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
     * [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
     * name.
     *
     * > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
     * definition at provider level.
     *
     * > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
     * (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
     * is to pick egress traffic origin for multi datacenter VDC Groups.
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * Primary IP address exposed for an easy access without nesting.
     */
    public /*out*/ readonly primaryIp!: pulumi.Output<string>;
    /**
     * If `ownerId` is a VDC Group, by default Edge
     * Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
     * to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
     * Group) **Note:** It can only be used when `ownerId` is a VDC Group.
     */
    public readonly startingVdcId!: pulumi.Output<string | undefined>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    public readonly subnetWithIpCounts!: pulumi.Output<outputs.NsxtEdgegatewaySubnetWithIpCount[]>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    public readonly subnetWithTotalIpCounts!: pulumi.Output<outputs.NsxtEdgegatewaySubnetWithTotalIpCount[]>;
    /**
     * One or more subnets defined for Edge Gateway. One of
     * `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
     * network is backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    public readonly subnets!: pulumi.Output<outputs.NsxtEdgegatewaySubnet[]>;
    /**
     * Required with `subnetWithTotalIpCount`. It is
     * **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
     * **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
     */
    public readonly totalAllocatedIpCount!: pulumi.Output<number>;
    /**
     * Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
     * exposed when using IP Spaces.
     */
    public /*out*/ readonly unusedIpCount!: pulumi.Output<number>;
    /**
     * Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
     */
    public /*out*/ readonly useIpSpaces!: pulumi.Output<boolean>;
    /**
     * Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
     * exposed when using IP Spaces.
     */
    public /*out*/ readonly usedIpCount!: pulumi.Output<number>;
    /**
     * **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
     * gateway. Can be inherited from `provider` configuration if not defined here.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtEdgegateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtEdgegatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtEdgegatewayArgs | NsxtEdgegatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtEdgegatewayState | undefined;
            resourceInputs["dedicateExternalNetwork"] = state ? state.dedicateExternalNetwork : undefined;
            resourceInputs["deploymentMode"] = state ? state.deploymentMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeClusterId"] = state ? state.edgeClusterId : undefined;
            resourceInputs["externalNetworkAllocatedIpCount"] = state ? state.externalNetworkAllocatedIpCount : undefined;
            resourceInputs["externalNetworkId"] = state ? state.externalNetworkId : undefined;
            resourceInputs["externalNetworks"] = state ? state.externalNetworks : undefined;
            resourceInputs["ipCountReadLimit"] = state ? state.ipCountReadLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonDistributedRoutingEnabled"] = state ? state.nonDistributedRoutingEnabled : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["primaryIp"] = state ? state.primaryIp : undefined;
            resourceInputs["startingVdcId"] = state ? state.startingVdcId : undefined;
            resourceInputs["subnetWithIpCounts"] = state ? state.subnetWithIpCounts : undefined;
            resourceInputs["subnetWithTotalIpCounts"] = state ? state.subnetWithTotalIpCounts : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["totalAllocatedIpCount"] = state ? state.totalAllocatedIpCount : undefined;
            resourceInputs["unusedIpCount"] = state ? state.unusedIpCount : undefined;
            resourceInputs["useIpSpaces"] = state ? state.useIpSpaces : undefined;
            resourceInputs["usedIpCount"] = state ? state.usedIpCount : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtEdgegatewayArgs | undefined;
            if ((!args || args.externalNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalNetworkId'");
            }
            resourceInputs["dedicateExternalNetwork"] = args ? args.dedicateExternalNetwork : undefined;
            resourceInputs["deploymentMode"] = args ? args.deploymentMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeClusterId"] = args ? args.edgeClusterId : undefined;
            resourceInputs["externalNetworkId"] = args ? args.externalNetworkId : undefined;
            resourceInputs["externalNetworks"] = args ? args.externalNetworks : undefined;
            resourceInputs["ipCountReadLimit"] = args ? args.ipCountReadLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonDistributedRoutingEnabled"] = args ? args.nonDistributedRoutingEnabled : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["startingVdcId"] = args ? args.startingVdcId : undefined;
            resourceInputs["subnetWithIpCounts"] = args ? args.subnetWithIpCounts : undefined;
            resourceInputs["subnetWithTotalIpCounts"] = args ? args.subnetWithTotalIpCounts : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["totalAllocatedIpCount"] = args ? args.totalAllocatedIpCount : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["externalNetworkAllocatedIpCount"] = undefined /*out*/;
            resourceInputs["primaryIp"] = undefined /*out*/;
            resourceInputs["unusedIpCount"] = undefined /*out*/;
            resourceInputs["useIpSpaces"] = undefined /*out*/;
            resourceInputs["usedIpCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtEdgegateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtEdgegateway resources.
 */
export interface NsxtEdgegatewayState {
    /**
     * Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
     */
    dedicateExternalNetwork?: pulumi.Input<boolean>;
    /**
     * `ACTIVE_STANDBY` (default) or
     * `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
     * router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
     * nature guarantees high north-south data throughput.
     */
    deploymentMode?: pulumi.Input<string>;
    /**
     * A unique name for the edge gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * Specific Edge Cluster ID if required
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Total allocated IP count in attached NSX-T Segment backed
     * external networks
     */
    externalNetworkAllocatedIpCount?: pulumi.Input<number>;
    /**
     * An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
     * can be used to lookup ID by name.
     */
    externalNetworkId?: pulumi.Input<string>;
    /**
     * attaches NSX-T Segment backed External
     * Networks with a given configuration block. It *does not
     * support IP Spaces*.
     */
    externalNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayExternalNetwork>[]>;
    /**
     * Sets a limit of IPs to count for
     * `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
     * counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
     * only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
     * data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
     * specify `0` for *unlimited* value.
     *
     * <a id="ip-allocation-modes"></a>
     */
    ipCountReadLimit?: pulumi.Input<number>;
    /**
     * A unique name for the edge gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Non-Distributed routing will allow
     * tenants the option of connecting Org Vdc networks to the Service
     * Router. This would
     * force all VM traffic through the service router for that network. Default `false`.
     */
    nonDistributedRoutingEnabled?: pulumi.Input<boolean>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * The ID of VDC or VDC Group. **Note:** Data sources
     * [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
     * [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
     * name.
     *
     * > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
     * definition at provider level.
     *
     * > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
     * (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
     * is to pick egress traffic origin for multi datacenter VDC Groups.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * Primary IP address exposed for an easy access without nesting.
     */
    primaryIp?: pulumi.Input<string>;
    /**
     * If `ownerId` is a VDC Group, by default Edge
     * Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
     * to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
     * Group) **Note:** It can only be used when `ownerId` is a VDC Group.
     */
    startingVdcId?: pulumi.Input<string>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnetWithIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithIpCount>[]>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnetWithTotalIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithTotalIpCount>[]>;
    /**
     * One or more subnets defined for Edge Gateway. One of
     * `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
     * network is backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnet>[]>;
    /**
     * Required with `subnetWithTotalIpCount`. It is
     * **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
     * **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
     */
    totalAllocatedIpCount?: pulumi.Input<number>;
    /**
     * Unused IP count in this Edge Gateway (for all uplinks). **Note**: it is not
     * exposed when using IP Spaces.
     */
    unusedIpCount?: pulumi.Input<number>;
    /**
     * Boolean value that hints if the NSX-T Edge Gateway uses IP Spaces
     */
    useIpSpaces?: pulumi.Input<boolean>;
    /**
     * Used IP count in this Edge Gateway (for all uplinks). **Note**: it is not
     * exposed when using IP Spaces.
     */
    usedIpCount?: pulumi.Input<number>;
    /**
     * **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
     * gateway. Can be inherited from `provider` configuration if not defined here.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtEdgegateway resource.
 */
export interface NsxtEdgegatewayArgs {
    /**
     * Dedicating the external network will enable Route Advertisement for this Edge Gateway. Default `false`.
     */
    dedicateExternalNetwork?: pulumi.Input<boolean>;
    /**
     * `ACTIVE_STANDBY` (default) or
     * `DISTRIBUTED_ONLY` (VCD 10.6+). Distributed-only does not provide services that run on service
     * router such as firewalling, NAT, VPN, DNS forwarding or static routes, instead, the distributed
     * nature guarantees high north-south data throughput.
     */
    deploymentMode?: pulumi.Input<string>;
    /**
     * A unique name for the edge gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * Specific Edge Cluster ID if required
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * An external network ID. **Note:** Data source [vcd.ExternalNetworkV2](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/external_network_v2)
     * can be used to lookup ID by name.
     */
    externalNetworkId: pulumi.Input<string>;
    /**
     * attaches NSX-T Segment backed External
     * Networks with a given configuration block. It *does not
     * support IP Spaces*.
     */
    externalNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayExternalNetwork>[]>;
    /**
     * Sets a limit of IPs to count for
     * `usedIpCount` and `unusedIpCount` attributes to avoid exhausting compute resource while
     * counting IPs in large IPv6 subnets. It does not affect operation of Edge Gateway configuration,
     * only IP count reporting. Defaults to `1000000`, update is a no-op, but will affect newly read
     * data. While it is unlikely that a single Edge Gateway can effectively manage more IPs, one can
     * specify `0` for *unlimited* value.
     *
     * <a id="ip-allocation-modes"></a>
     */
    ipCountReadLimit?: pulumi.Input<number>;
    /**
     * A unique name for the edge gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * Non-Distributed routing will allow
     * tenants the option of connecting Org Vdc networks to the Service
     * Router. This would
     * force all VM traffic through the service router for that network. Default `false`.
     */
    nonDistributedRoutingEnabled?: pulumi.Input<boolean>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * The ID of VDC or VDC Group. **Note:** Data sources
     * [vcd.VdcGroup](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/vdc_group) or
     * [vcd.OrgVdc](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/org_vdc) can be used to lookup IDs by
     * name.
     *
     * > Only one of `vdc` or `ownerId` can be specified. `ownerId` takes precedence over `vdc`
     * definition at provider level.
     *
     * > When a VDC Group ID is specified in `ownerId` field, the Edge Gateway will be created in VDC
     * (random member of VDC Group or specified in `startingVdcId`). Main use case of `startingVdcId`
     * is to pick egress traffic origin for multi datacenter VDC Groups.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * If `ownerId` is a VDC Group, by default Edge
     * Gateway will be created in random member VDC and moved to destination VDC Group. This field allows
     * to specify initial VDC for Edge Gateway (this can define Egress location of traffic in the VDC
     * Group) **Note:** It can only be used when `ownerId` is a VDC Group.
     */
    startingVdcId?: pulumi.Input<string>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnetWithIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithIpCount>[]>;
    /**
     * One or more
     * subnets defined for Edge Gateway. One of `subnet`,
     * `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent network is
     * backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnetWithTotalIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithTotalIpCount>[]>;
    /**
     * One or more subnets defined for Edge Gateway. One of
     * `subnet`, `subnetWithTotalIpCount` or `subnetWithIpCount` is **required unless** parent
     * network is backed by *IP Spaces*. Read more in IP allocation modes section.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnet>[]>;
    /**
     * Required with `subnetWithTotalIpCount`. It is
     * **read-only** attribute with other other allocation models `subnet` and `subnetWithIpCount`.
     * **Note**. It sets or reports IP count *only for NSX-T Tier 0 backed external network Uplink*.
     */
    totalAllocatedIpCount?: pulumi.Input<number>;
    /**
     * **Deprecated** in favor of `ownerId`. The name of VDC that owns the edge
     * gateway. Can be inherited from `provider` configuration if not defined here.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: pulumi.Input<string>;
}
