// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Supported in provider *v3.13+* with Data Solution Extension.
 *
 * Provides a data source to read Data Solution publishing settings for a particular tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const tenant_org = vcd.getOrg({
 *     name: "tenant_org",
 * });
 * const mongodb_community = tenant_org.then(tenant_org => vcd.getDseSolutionPublish({
 *     dataSolutionId: mongodb_communityVcdDseRegistryConfiguration.id,
 *     orgId: tenant_org.id,
 * }));
 * ```
 */
export function getDseSolutionPublish(args: GetDseSolutionPublishArgs, opts?: pulumi.InvokeOptions): Promise<GetDseSolutionPublishResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getDseSolutionPublish:getDseSolutionPublish", {
        "dataSolutionId": args.dataSolutionId,
        "orgId": args.orgId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDseSolutionPublish.
 */
export interface GetDseSolutionPublishArgs {
    /**
     * ID of Data Solution
     */
    dataSolutionId: string;
    /**
     * Organization ID
     */
    orgId: string;
}

/**
 * A collection of values returned by getDseSolutionPublish.
 */
export interface GetDseSolutionPublishResult {
    readonly confluentLicenseType: string;
    readonly dataSolutionId: string;
    readonly dsOrgConfigId: string;
    readonly dsoAclId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly orgId: string;
    readonly templateAclIds: string[];
}
/**
 * Supported in provider *v3.13+* with Data Solution Extension.
 *
 * Provides a data source to read Data Solution publishing settings for a particular tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const tenant_org = vcd.getOrg({
 *     name: "tenant_org",
 * });
 * const mongodb_community = tenant_org.then(tenant_org => vcd.getDseSolutionPublish({
 *     dataSolutionId: mongodb_communityVcdDseRegistryConfiguration.id,
 *     orgId: tenant_org.id,
 * }));
 * ```
 */
export function getDseSolutionPublishOutput(args: GetDseSolutionPublishOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDseSolutionPublishResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getDseSolutionPublish:getDseSolutionPublish", {
        "dataSolutionId": args.dataSolutionId,
        "orgId": args.orgId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDseSolutionPublish.
 */
export interface GetDseSolutionPublishOutputArgs {
    /**
     * ID of Data Solution
     */
    dataSolutionId: pulumi.Input<string>;
    /**
     * Organization ID
     */
    orgId: pulumi.Input<string>;
}
