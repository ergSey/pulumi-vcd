// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NsxtEdgegatewayL2VpnTunnel extends pulumi.CustomResource {
    /**
     * Get an existing NsxtEdgegatewayL2VpnTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtEdgegatewayL2VpnTunnelState, opts?: pulumi.CustomResourceOptions): NsxtEdgegatewayL2VpnTunnel {
        return new NsxtEdgegatewayL2VpnTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtEdgegatewayL2VpnTunnel:NsxtEdgegatewayL2VpnTunnel';

    /**
     * Returns true if the given object is an instance of NsxtEdgegatewayL2VpnTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtEdgegatewayL2VpnTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtEdgegatewayL2VpnTunnel.__pulumiType;
    }

    /**
     * Mode in which the connection is formed. 
     * Required for `SERVER` mode sessions. One of:
     * * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
     * incoming tunnel setup requests from the peer gateway.
     * * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
     * requests, it shall not initiate the tunnel setup.
     * * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
     * first packet matching the policy rule is received, and will also respond to
     * incoming initiation requests.
     */
    public readonly connectorInitiationMode!: pulumi.Output<string | undefined>;
    /**
     * The description of the tunnel.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Edge Gateway (NSX-T only). 
     * Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * State of the `SERVER` mode session, always set to `true` for `CLIENT` 
     * mode sessions. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The IP address corresponding to the Edge 
     * Gateway the tunnel is being configured on. The IP must be sub-allocated
     * on the Edge Gateway.
     */
    public readonly localEndpointIp!: pulumi.Output<string>;
    /**
     * The name of the tunnel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at 
     * provider level. Useful when connected as sysadmin working across different organisations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
     * SERVER sessions and is a required field for CLIENT sessions.
     */
    public readonly peerCode!: pulumi.Output<string>;
    /**
     * The key that is used for authenticating the 
     * connection. Required for `SERVER` mode sessions.
     */
    public readonly preSharedKey!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the remote endpoint, which 
     * corresponds to the device on the remote site terminating the VPN tunnel.
     */
    public readonly remoteEndpointIp!: pulumi.Output<string>;
    /**
     * Mode of the tunnel session (SERVER or CLIENT).
     */
    public readonly sessionMode!: pulumi.Output<string>;
    /**
     * One or more stretched networks for the tunnel. 
     * See `stretchedNetwork` for more detail.
     */
    public readonly stretchedNetworks!: pulumi.Output<outputs.NsxtEdgegatewayL2VpnTunnelStretchedNetwork[] | undefined>;
    /**
     * The network CIDR block over which the session 
     * interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
     * Director will attempt to automatically allocate a tunnel interface.
     */
    public readonly tunnelInterface!: pulumi.Output<string>;

    /**
     * Create a NsxtEdgegatewayL2VpnTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtEdgegatewayL2VpnTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtEdgegatewayL2VpnTunnelArgs | NsxtEdgegatewayL2VpnTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtEdgegatewayL2VpnTunnelState | undefined;
            resourceInputs["connectorInitiationMode"] = state ? state.connectorInitiationMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["localEndpointIp"] = state ? state.localEndpointIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["peerCode"] = state ? state.peerCode : undefined;
            resourceInputs["preSharedKey"] = state ? state.preSharedKey : undefined;
            resourceInputs["remoteEndpointIp"] = state ? state.remoteEndpointIp : undefined;
            resourceInputs["sessionMode"] = state ? state.sessionMode : undefined;
            resourceInputs["stretchedNetworks"] = state ? state.stretchedNetworks : undefined;
            resourceInputs["tunnelInterface"] = state ? state.tunnelInterface : undefined;
        } else {
            const args = argsOrState as NsxtEdgegatewayL2VpnTunnelArgs | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            if ((!args || args.localEndpointIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localEndpointIp'");
            }
            if ((!args || args.remoteEndpointIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteEndpointIp'");
            }
            if ((!args || args.sessionMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionMode'");
            }
            resourceInputs["connectorInitiationMode"] = args ? args.connectorInitiationMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["localEndpointIp"] = args ? args.localEndpointIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["peerCode"] = args ? args.peerCode : undefined;
            resourceInputs["preSharedKey"] = args ? args.preSharedKey : undefined;
            resourceInputs["remoteEndpointIp"] = args ? args.remoteEndpointIp : undefined;
            resourceInputs["sessionMode"] = args ? args.sessionMode : undefined;
            resourceInputs["stretchedNetworks"] = args ? args.stretchedNetworks : undefined;
            resourceInputs["tunnelInterface"] = args ? args.tunnelInterface : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtEdgegatewayL2VpnTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtEdgegatewayL2VpnTunnel resources.
 */
export interface NsxtEdgegatewayL2VpnTunnelState {
    /**
     * Mode in which the connection is formed. 
     * Required for `SERVER` mode sessions. One of:
     * * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
     * incoming tunnel setup requests from the peer gateway.
     * * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
     * requests, it shall not initiate the tunnel setup.
     * * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
     * first packet matching the policy rule is received, and will also respond to
     * incoming initiation requests.
     */
    connectorInitiationMode?: pulumi.Input<string>;
    /**
     * The description of the tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Edge Gateway (NSX-T only). 
     * Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * State of the `SERVER` mode session, always set to `true` for `CLIENT` 
     * mode sessions. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The IP address corresponding to the Edge 
     * Gateway the tunnel is being configured on. The IP must be sub-allocated
     * on the Edge Gateway.
     */
    localEndpointIp?: pulumi.Input<string>;
    /**
     * The name of the tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at 
     * provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
     * SERVER sessions and is a required field for CLIENT sessions.
     */
    peerCode?: pulumi.Input<string>;
    /**
     * The key that is used for authenticating the 
     * connection. Required for `SERVER` mode sessions.
     */
    preSharedKey?: pulumi.Input<string>;
    /**
     * The IP address of the remote endpoint, which 
     * corresponds to the device on the remote site terminating the VPN tunnel.
     */
    remoteEndpointIp?: pulumi.Input<string>;
    /**
     * Mode of the tunnel session (SERVER or CLIENT).
     */
    sessionMode?: pulumi.Input<string>;
    /**
     * One or more stretched networks for the tunnel. 
     * See `stretchedNetwork` for more detail.
     */
    stretchedNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayL2VpnTunnelStretchedNetwork>[]>;
    /**
     * The network CIDR block over which the session 
     * interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
     * Director will attempt to automatically allocate a tunnel interface.
     */
    tunnelInterface?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtEdgegatewayL2VpnTunnel resource.
 */
export interface NsxtEdgegatewayL2VpnTunnelArgs {
    /**
     * Mode in which the connection is formed. 
     * Required for `SERVER` mode sessions. One of:
     * * `INITIATOR` - Local endpoint initiates tunnel setup and will also respond to
     * incoming tunnel setup requests from the peer gateway.
     * * `RESPOND_ONLY` - Local endpoint shall only respond to incoming tunnel setup
     * requests, it shall not initiate the tunnel setup.
     * * `ON_DEMAND` - In this mode local endpoint will initiate tunnel creation once
     * first packet matching the policy rule is received, and will also respond to
     * incoming initiation requests.
     */
    connectorInitiationMode?: pulumi.Input<string>;
    /**
     * The description of the tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Edge Gateway (NSX-T only). 
     * Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * State of the `SERVER` mode session, always set to `true` for `CLIENT` 
     * mode sessions. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The IP address corresponding to the Edge 
     * Gateway the tunnel is being configured on. The IP must be sub-allocated
     * on the Edge Gateway.
     */
    localEndpointIp: pulumi.Input<string>;
    /**
     * The name of the tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at 
     * provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * Base64 encoded string of the full configuration of the tunnel provided by the SERVER session. It is a computed field for
     * SERVER sessions and is a required field for CLIENT sessions.
     */
    peerCode?: pulumi.Input<string>;
    /**
     * The key that is used for authenticating the 
     * connection. Required for `SERVER` mode sessions.
     */
    preSharedKey?: pulumi.Input<string>;
    /**
     * The IP address of the remote endpoint, which 
     * corresponds to the device on the remote site terminating the VPN tunnel.
     */
    remoteEndpointIp: pulumi.Input<string>;
    /**
     * Mode of the tunnel session (SERVER or CLIENT).
     */
    sessionMode: pulumi.Input<string>;
    /**
     * One or more stretched networks for the tunnel. 
     * See `stretchedNetwork` for more detail.
     */
    stretchedNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayL2VpnTunnelStretchedNetwork>[]>;
    /**
     * The network CIDR block over which the session 
     * interfaces. Relevant only for `SERVER` mode sessions. If not provided, Cloud
     * Director will attempt to automatically allocate a tunnel interface.
     */
    tunnelInterface?: pulumi.Input<string>;
}
