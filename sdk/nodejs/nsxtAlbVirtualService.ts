// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class NsxtAlbVirtualService extends pulumi.CustomResource {
    /**
     * Get an existing NsxtAlbVirtualService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtAlbVirtualServiceState, opts?: pulumi.CustomResourceOptions): NsxtAlbVirtualService {
        return new NsxtAlbVirtualService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtAlbVirtualService:NsxtAlbVirtualService';

    /**
     * Returns true if the given object is an instance of NsxtAlbVirtualService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtAlbVirtualService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtAlbVirtualService.__pulumiType;
    }

    /**
     * One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
     */
    public readonly applicationProfileType!: pulumi.Output<string>;
    /**
     * ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
     * or `L4_TLS`
     */
    public readonly caCertificateId!: pulumi.Output<string | undefined>;
    /**
     * An optional description ALB Virtual Service
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An ID of NSX-T Edge Gateway. Can be looked up using
     * [vcd.NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * Virtual Service is enabled or disabled (default true)
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 Address for the service to listen on.
     */
    public readonly ipv6VirtualIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Preserves Client IP on a
     * Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
     * * ALB Pool membership must be configured in Group mode
     * * Backing Avi Service Engine Group must be in Legacy Active Standby mode
     *
     * <a id="service-port-block"></a>
     */
    public readonly isTransparentModeEnabled!: pulumi.Output<boolean>;
    /**
     * A name for ALB Virtual Service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * A reference to ALB Pool. Can be looked up using `vcd.NsxtAlbPool` resource or data
     * source
     */
    public readonly poolId!: pulumi.Output<string>;
    /**
     * A reference to ALB Service Engine Group. Can be looked up using
     * `vcd.NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
     */
    public readonly serviceEngineGroupId!: pulumi.Output<string>;
    /**
     * A block to define port, port range and traffic type. Multiple can be used. See
     * servicePort and example for usage details.
     */
    public readonly servicePorts!: pulumi.Output<outputs.NsxtAlbVirtualServiceServicePort[] | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    public readonly vdc!: pulumi.Output<string>;
    /**
     * IP Address for the service to listen on.
     */
    public readonly virtualIpAddress!: pulumi.Output<string>;

    /**
     * Create a NsxtAlbVirtualService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtAlbVirtualServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtAlbVirtualServiceArgs | NsxtAlbVirtualServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtAlbVirtualServiceState | undefined;
            resourceInputs["applicationProfileType"] = state ? state.applicationProfileType : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipv6VirtualIpAddress"] = state ? state.ipv6VirtualIpAddress : undefined;
            resourceInputs["isTransparentModeEnabled"] = state ? state.isTransparentModeEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["serviceEngineGroupId"] = state ? state.serviceEngineGroupId : undefined;
            resourceInputs["servicePorts"] = state ? state.servicePorts : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["virtualIpAddress"] = state ? state.virtualIpAddress : undefined;
        } else {
            const args = argsOrState as NsxtAlbVirtualServiceArgs | undefined;
            if ((!args || args.applicationProfileType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationProfileType'");
            }
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.serviceEngineGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceEngineGroupId'");
            }
            if ((!args || args.virtualIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualIpAddress'");
            }
            resourceInputs["applicationProfileType"] = args ? args.applicationProfileType : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipv6VirtualIpAddress"] = args ? args.ipv6VirtualIpAddress : undefined;
            resourceInputs["isTransparentModeEnabled"] = args ? args.isTransparentModeEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["serviceEngineGroupId"] = args ? args.serviceEngineGroupId : undefined;
            resourceInputs["servicePorts"] = args ? args.servicePorts : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["virtualIpAddress"] = args ? args.virtualIpAddress : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtAlbVirtualService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtAlbVirtualService resources.
 */
export interface NsxtAlbVirtualServiceState {
    /**
     * One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
     */
    applicationProfileType?: pulumi.Input<string>;
    /**
     * ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
     * or `L4_TLS`
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * An optional description ALB Virtual Service
     */
    description?: pulumi.Input<string>;
    /**
     * An ID of NSX-T Edge Gateway. Can be looked up using
     * [vcd.NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * Virtual Service is enabled or disabled (default true)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * IPv6 Address for the service to listen on.
     */
    ipv6VirtualIpAddress?: pulumi.Input<string>;
    /**
     * Preserves Client IP on a
     * Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
     * * ALB Pool membership must be configured in Group mode
     * * Backing Avi Service Engine Group must be in Legacy Active Standby mode
     *
     * <a id="service-port-block"></a>
     */
    isTransparentModeEnabled?: pulumi.Input<boolean>;
    /**
     * A name for ALB Virtual Service
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * A reference to ALB Pool. Can be looked up using `vcd.NsxtAlbPool` resource or data
     * source
     */
    poolId?: pulumi.Input<string>;
    /**
     * A reference to ALB Service Engine Group. Can be looked up using
     * `vcd.NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
     */
    serviceEngineGroupId?: pulumi.Input<string>;
    /**
     * A block to define port, port range and traffic type. Multiple can be used. See
     * servicePort and example for usage details.
     */
    servicePorts?: pulumi.Input<pulumi.Input<inputs.NsxtAlbVirtualServiceServicePort>[]>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    vdc?: pulumi.Input<string>;
    /**
     * IP Address for the service to listen on.
     */
    virtualIpAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtAlbVirtualService resource.
 */
export interface NsxtAlbVirtualServiceArgs {
    /**
     * One of `HTTP`, `HTTPS`, `L4`, `L4_TLS`.
     */
    applicationProfileType: pulumi.Input<string>;
    /**
     * ID reference of CA certificate. Required when `applicationProfileType` is `HTTPS`
     * or `L4_TLS`
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * An optional description ALB Virtual Service
     */
    description?: pulumi.Input<string>;
    /**
     * An ID of NSX-T Edge Gateway. Can be looked up using
     * [vcd.NsxtEdgegateway](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Virtual Service is enabled or disabled (default true)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * IPv6 Address for the service to listen on.
     */
    ipv6VirtualIpAddress?: pulumi.Input<string>;
    /**
     * Preserves Client IP on a
     * Virtual Service. **Note** - the following criteria must be matched to make transparent mode work:
     * * ALB Pool membership must be configured in Group mode
     * * Backing Avi Service Engine Group must be in Legacy Active Standby mode
     *
     * <a id="service-port-block"></a>
     */
    isTransparentModeEnabled?: pulumi.Input<boolean>;
    /**
     * A name for ALB Virtual Service
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * A reference to ALB Pool. Can be looked up using `vcd.NsxtAlbPool` resource or data
     * source
     */
    poolId: pulumi.Input<string>;
    /**
     * A reference to ALB Service Engine Group. Can be looked up using
     * `vcd.NsxtAlbEdgegatewayServiceEngineGroup` resource or data source
     */
    serviceEngineGroupId: pulumi.Input<string>;
    /**
     * A block to define port, port range and traffic type. Multiple can be used. See
     * servicePort and example for usage details.
     */
    servicePorts?: pulumi.Input<pulumi.Input<inputs.NsxtAlbVirtualServiceServicePort>[]>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Edge Gateway will be looked up based on 'edge_gateway_id' field
     */
    vdc?: pulumi.Input<string>;
    /**
     * IP Address for the service to listen on.
     */
    virtualIpAddress: pulumi.Input<string>;
}
