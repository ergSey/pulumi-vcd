// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director VM affinity rule data source. This can be
 * used to read VM affinity and anti-affinity rules.
 *
 * Supported in provider *v2.9+*
 *
 * > **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
 * entities: they are differentiated by the `polarity` property (See below).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const tf_rule_by_name = vcd.getVmAffinityRule({
 *     name: "my-rule",
 * });
 * const tf_rule_by_id = vcd.getVmAffinityRule({
 *     ruleId: "eda9011c-6841-4060-9336-d2f609c110c3",
 * });
 * ```
 */
export function getVmAffinityRule(args?: GetVmAffinityRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetVmAffinityRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVmAffinityRule:getVmAffinityRule", {
        "name": args.name,
        "org": args.org,
        "ruleId": args.ruleId,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVmAffinityRule.
 */
export interface GetVmAffinityRuleArgs {
    /**
     * The name of VM affinity rule. Needed if we don't provide `ruleId`
     */
    name?: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
    /**
     * Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
     * rule, especially if the rule name could have duplicates
     */
    ruleId?: string;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: string;
}

/**
 * A collection of values returned by getVmAffinityRule.
 */
export interface GetVmAffinityRuleResult {
    /**
     * True if this affinity rule is enabled.
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly org?: string;
    /**
     * One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
     * need to change polarity, we need to remove the rule and create a new one.
     */
    readonly polarity: string;
    /**
     * True if this affinity rule is required. When a rule is mandatory, a host failover will not 
     * power on the VM if doing so would violate the rule.
     */
    readonly required: boolean;
    readonly ruleId?: string;
    readonly vdc?: string;
    /**
     * A set of virtual machine IDs that compose this rule.
     */
    readonly vmIds: string[];
}
/**
 * Provides a VMware Cloud Director VM affinity rule data source. This can be
 * used to read VM affinity and anti-affinity rules.
 *
 * Supported in provider *v2.9+*
 *
 * > **Note:** The vCD UI defines two different entities (*Affinity Rules* and *Anti-Affinity Rules*). This data source combines both
 * entities: they are differentiated by the `polarity` property (See below).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const tf_rule_by_name = vcd.getVmAffinityRule({
 *     name: "my-rule",
 * });
 * const tf_rule_by_id = vcd.getVmAffinityRule({
 *     ruleId: "eda9011c-6841-4060-9336-d2f609c110c3",
 * });
 * ```
 */
export function getVmAffinityRuleOutput(args?: GetVmAffinityRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVmAffinityRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getVmAffinityRule:getVmAffinityRule", {
        "name": args.name,
        "org": args.org,
        "ruleId": args.ruleId,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVmAffinityRule.
 */
export interface GetVmAffinityRuleOutputArgs {
    /**
     * The name of VM affinity rule. Needed if we don't provide `ruleId`
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * Is the ID of the affinity rule. It's the preferred way to retrieve the affinity
     * rule, especially if the rule name could have duplicates
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
