// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Supported in provider *v3.7+* and VCD 10.3+ with NSX-T backed VDC Groups.
 *
 * Provides a data source to read NSX-T Dynamic Security Groups. Dynamic Security Groups group Virtual
 * Machines based on specific criteria (VM Names or Security tags) to which Distributed Firewall Rules
 * apply.
 *
 * ## Example Usage
 *
 * ### 1 (Existing Dynamic Security Group Lookup)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const group1 = vcd.getVdcGroup({
 *     org: "cloud",
 *     name: "vdc-group-cloud",
 * });
 * const group1GetNsxtDynamicSecurityGroup = group1.then(group1 => vcd.getNsxtDynamicSecurityGroup({
 *     org: "cloud",
 *     vdcGroupId: group1.id,
 *     name: "cloud-dynamic-security-group",
 * }));
 * ```
 */
export function getNsxtDynamicSecurityGroup(args: GetNsxtDynamicSecurityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtDynamicSecurityGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtDynamicSecurityGroup:getNsxtDynamicSecurityGroup", {
        "description": args.description,
        "name": args.name,
        "org": args.org,
        "vdcGroupId": args.vdcGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtDynamicSecurityGroup.
 */
export interface GetNsxtDynamicSecurityGroupArgs {
    description?: string;
    /**
     * A unique name for existing Dynamic Security Group
     *
     * All the arguments and attributes defined in
     * [`vcd.NsxtDynamicSecurityGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_dynamic_security_group) resource are available.
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: string;
    /**
     * VDC Group ID hosting existing Dynamic Security Group.
     */
    vdcGroupId: string;
}

/**
 * A collection of values returned by getNsxtDynamicSecurityGroup.
 */
export interface GetNsxtDynamicSecurityGroupResult {
    readonly criterias: outputs.GetNsxtDynamicSecurityGroupCriteria[];
    readonly description?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly memberVms: outputs.GetNsxtDynamicSecurityGroupMemberVm[];
    readonly name: string;
    readonly org?: string;
    readonly vdcGroupId: string;
}
/**
 * Supported in provider *v3.7+* and VCD 10.3+ with NSX-T backed VDC Groups.
 *
 * Provides a data source to read NSX-T Dynamic Security Groups. Dynamic Security Groups group Virtual
 * Machines based on specific criteria (VM Names or Security tags) to which Distributed Firewall Rules
 * apply.
 *
 * ## Example Usage
 *
 * ### 1 (Existing Dynamic Security Group Lookup)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const group1 = vcd.getVdcGroup({
 *     org: "cloud",
 *     name: "vdc-group-cloud",
 * });
 * const group1GetNsxtDynamicSecurityGroup = group1.then(group1 => vcd.getNsxtDynamicSecurityGroup({
 *     org: "cloud",
 *     vdcGroupId: group1.id,
 *     name: "cloud-dynamic-security-group",
 * }));
 * ```
 */
export function getNsxtDynamicSecurityGroupOutput(args: GetNsxtDynamicSecurityGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtDynamicSecurityGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtDynamicSecurityGroup:getNsxtDynamicSecurityGroup", {
        "description": args.description,
        "name": args.name,
        "org": args.org,
        "vdcGroupId": args.vdcGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtDynamicSecurityGroup.
 */
export interface GetNsxtDynamicSecurityGroupOutputArgs {
    description?: pulumi.Input<string>;
    /**
     * A unique name for existing Dynamic Security Group
     *
     * All the arguments and attributes defined in
     * [`vcd.NsxtDynamicSecurityGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_dynamic_security_group) resource are available.
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * VDC Group ID hosting existing Dynamic Security Group.
     */
    vdcGroupId: pulumi.Input<string>;
}
