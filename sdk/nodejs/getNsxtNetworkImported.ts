// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Looking Up Imported Network In VDC)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getOrgVdc({
 *     org: "my-org",
 *     name: "main-edge",
 * });
 * const net = main.then(main => vcd.getNsxtNetworkImported({
 *     org: "my-org",
 *     ownerId: main.id,
 *     name: "my-net",
 * }));
 * ```
 *
 * ### Looking Up Imported Network In VDC Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getVdcGroup({
 *     org: "my-org",
 *     name: "main-group",
 * });
 * const net = main.then(main => vcd.getNsxtNetworkImported({
 *     org: "my-org",
 *     ownerId: main.id,
 *     name: "my-net",
 * }));
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `ip` - (Optional) matches the IP of the resource using a regular expression.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getNsxtNetworkImported(args?: GetNsxtNetworkImportedArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtNetworkImportedResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", {
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
        "ownerId": args.ownerId,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtNetworkImported.
 */
export interface GetNsxtNetworkImportedArgs {
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: inputs.GetNsxtNetworkImportedFilter;
    /**
     * A unique name for the network (optional when `filter` is used)
     */
    name?: string;
    /**
     * The name of organization to use, optional if defined at provider level
     */
    org?: string;
    /**
     * VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
     * and inherited from provider configuration)
     */
    ownerId?: string;
    /**
     * The name of VDC to use. **Deprecated**  in favor of new field
     * `ownerId` which supports VDC and VDC Group IDs.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: string;
}

/**
 * A collection of values returned by getNsxtNetworkImported.
 */
export interface GetNsxtNetworkImportedResult {
    readonly description: string;
    readonly dns1: string;
    readonly dns2: string;
    readonly dnsSuffix: string;
    readonly dualStackEnabled: boolean;
    readonly dvpgId: string;
    readonly filter?: outputs.GetNsxtNetworkImportedFilter;
    readonly gateway: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly nsxtLogicalSwitchId: string;
    readonly org?: string;
    readonly ownerId: string;
    readonly prefixLength: number;
    readonly secondaryGateway: string;
    readonly secondaryPrefixLength: string;
    readonly secondaryStaticIpPools: outputs.GetNsxtNetworkImportedSecondaryStaticIpPool[];
    readonly staticIpPools: outputs.GetNsxtNetworkImportedStaticIpPool[];
    /**
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    readonly vdc?: string;
}
/**
 * ## Example Usage
 *
 * ### Looking Up Imported Network In VDC)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getOrgVdc({
 *     org: "my-org",
 *     name: "main-edge",
 * });
 * const net = main.then(main => vcd.getNsxtNetworkImported({
 *     org: "my-org",
 *     ownerId: main.id,
 *     name: "my-net",
 * }));
 * ```
 *
 * ### Looking Up Imported Network In VDC Group)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const main = vcd.getVdcGroup({
 *     org: "my-org",
 *     name: "main-group",
 * });
 * const net = main.then(main => vcd.getNsxtNetworkImported({
 *     org: "my-org",
 *     ownerId: main.id,
 *     name: "my-net",
 * }));
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `ip` - (Optional) matches the IP of the resource using a regular expression.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getNsxtNetworkImportedOutput(args?: GetNsxtNetworkImportedOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtNetworkImportedResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtNetworkImported:getNsxtNetworkImported", {
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
        "ownerId": args.ownerId,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtNetworkImported.
 */
export interface GetNsxtNetworkImportedOutputArgs {
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: pulumi.Input<inputs.GetNsxtNetworkImportedFilterArgs>;
    /**
     * A unique name for the network (optional when `filter` is used)
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level
     */
    org?: pulumi.Input<string>;
    /**
     * VDC or VDC Group ID. Always takes precedence over `vdc` fields (in resource
     * and inherited from provider configuration)
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The name of VDC to use. **Deprecated**  in favor of new field
     * `ownerId` which supports VDC and VDC Group IDs.
     *
     * @deprecated This field is deprecated in favor of 'owner_id' which supports both - VDC and VDC Group IDs
     */
    vdc?: pulumi.Input<string>;
}
