// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Experimental in provider *3.11*.
 *
 * > **Note:** This resource requires system administrator privileges.
 *
 * Provides a resource to manage vGPU policies for virtual machines in VMware Cloud Director.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const exampleOrg = vcd.getOrg({
 *     name: "test_org",
 * });
 * const exampleVgpuProfile = vcd.getVgpuProfile({
 *     name: "grid_a100-10c",
 * });
 * const exampleProviderVdc = vcd.getProviderVdc({
 *     name: "example_provider_vdc",
 * });
 * const vmGroupExample = vcd.getVmGroup({
 *     name: "vm-group-1",
 * });
 * const exampleVgpuPolicy = new vcd.VmVgpuPolicy("example_vgpu_policy", {
 *     name: "example-vgpu-policy",
 *     description: "An example vGPU policy configuration",
 *     vgpuProfile: {
 *         id: exampleVgpuProfile.then(exampleVgpuProfile => exampleVgpuProfile.id),
 *         count: 1,
 *     },
 *     cpu: {
 *         shares: "886",
 *         limitInMhz: "2400",
 *         count: "9",
 *         speedInMhz: "2500",
 *         coresPerSocket: "3",
 *         reservationGuarantee: "0.55",
 *     },
 *     memory: {
 *         shares: "1580",
 *         sizeInMb: "3200",
 *         limitInMb: "2800",
 *     },
 *     providerVdcScopes: [{
 *         providerVdcId: exampleProviderVdc.then(exampleProviderVdc => exampleProviderVdc.id),
 *         clusterNames: ["cluster1"],
 *         vmGroupId: vmGroupExample.then(vmGroupExample => vmGroupExample.id),
 *     }],
 * });
 * const exampleOrgVdc = new vcd.OrgVdc("example_org_vdc", {
 *     org: exampleOrg.then(exampleOrg => exampleOrg.name),
 *     name: "test-org-vdc",
 *     providerVdcName: exampleProviderVdc.then(exampleProviderVdc => exampleProviderVdc.name),
 *     allocationModel: "Flex",
 *     deleteForce: true,
 *     computeCapacity: {
 *         cpu: {
 *             allocated: 2048,
 *         },
 *         memory: {
 *             allocated: 2048,
 *         },
 *     },
 *     storageProfiles: [{
 *         name: "*",
 *         limit: 10240,
 *         "default": true,
 *     }],
 *     elasticity: true,
 *     includeVmMemoryOverhead: true,
 *     memoryGuaranteed: 1,
 *     defaultComputePolicyId: exampleVgpuPolicy.id,
 *     vmVgpuPolicyIds: [exampleVgpuPolicy.id],
 * });
 * const testVm = new vcd.Vm("test_vm", {
 *     org: exampleOrg.then(exampleOrg => exampleOrg.name),
 *     vdc: exampleOrgVdc.name,
 *     name: "terraform-provider-vm",
 *     computerName: "emptyVM",
 *     memory: 2048,
 *     cpus: 2,
 *     cpuCores: 1,
 *     powerOn: false,
 *     osType: "sles11_64Guest",
 *     hardwareVersion: "vmx-19",
 *     placementPolicyId: exampleVgpuPolicy.id,
 * });
 * ```
 *
 * ### Without A Sizing Policy)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const exampleVgpuPolicyWithoutSizing = new vcd.VmVgpuPolicy("example_vgpu_policy_without_sizing", {
 *     name: "example-vgpu-policy-without-sizing",
 *     description: "An example vGPU policy configuration",
 *     vgpuProfile: {
 *         id: exampleVgpuProfile.id,
 *         count: 1,
 *     },
 *     providerVdcScopes: [{
 *         providerVdcId: exampleProviderVdc.id,
 *         clusterNames: ["cluster1"],
 *         vmGroupId: vmGroupExample.id,
 *     }],
 * });
 * ```
 */
export class VmVgpuPolicy extends pulumi.CustomResource {
    /**
     * Get an existing VmVgpuPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmVgpuPolicyState, opts?: pulumi.CustomResourceOptions): VmVgpuPolicy {
        return new VmVgpuPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vmVgpuPolicy:VmVgpuPolicy';

    /**
     * Returns true if the given object is an instance of VmVgpuPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmVgpuPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmVgpuPolicy.__pulumiType;
    }

    /**
     * Configuration options for CPU resources. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
     */
    public readonly cpu!: pulumi.Output<outputs.VmVgpuPolicyCpu | undefined>;
    /**
     * A brief description of the vGPU policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Memory resource configuration settings. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
     */
    public readonly memory!: pulumi.Output<outputs.VmVgpuPolicyMemory | undefined>;
    /**
     * The unique name assigned to the vGPU policy for a virtual machine.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the scope of the policy within 
     * provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
     * See `providerVdcScope` for more details.
     */
    public readonly providerVdcScopes!: pulumi.Output<outputs.VmVgpuPolicyProviderVdcScope[] | undefined>;
    /**
     * Defines the vGPU profile ID and count.
     */
    public readonly vgpuProfile!: pulumi.Output<outputs.VmVgpuPolicyVgpuProfile>;

    /**
     * Create a VmVgpuPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmVgpuPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmVgpuPolicyArgs | VmVgpuPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmVgpuPolicyState | undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerVdcScopes"] = state ? state.providerVdcScopes : undefined;
            resourceInputs["vgpuProfile"] = state ? state.vgpuProfile : undefined;
        } else {
            const args = argsOrState as VmVgpuPolicyArgs | undefined;
            if ((!args || args.vgpuProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vgpuProfile'");
            }
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerVdcScopes"] = args ? args.providerVdcScopes : undefined;
            resourceInputs["vgpuProfile"] = args ? args.vgpuProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmVgpuPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmVgpuPolicy resources.
 */
export interface VmVgpuPolicyState {
    /**
     * Configuration options for CPU resources. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
     */
    cpu?: pulumi.Input<inputs.VmVgpuPolicyCpu>;
    /**
     * A brief description of the vGPU policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Memory resource configuration settings. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
     */
    memory?: pulumi.Input<inputs.VmVgpuPolicyMemory>;
    /**
     * The unique name assigned to the vGPU policy for a virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the scope of the policy within 
     * provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
     * See `providerVdcScope` for more details.
     */
    providerVdcScopes?: pulumi.Input<pulumi.Input<inputs.VmVgpuPolicyProviderVdcScope>[]>;
    /**
     * Defines the vGPU profile ID and count.
     */
    vgpuProfile?: pulumi.Input<inputs.VmVgpuPolicyVgpuProfile>;
}

/**
 * The set of arguments for constructing a VmVgpuPolicy resource.
 */
export interface VmVgpuPolicyArgs {
    /**
     * Configuration options for CPU resources. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [cpu] for more details.
     */
    cpu?: pulumi.Input<inputs.VmVgpuPolicyCpu>;
    /**
     * A brief description of the vGPU policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Memory resource configuration settings. If this is set, 
     * a VM created with this policy can't specify a custom sizing policy. See [memory] for more details.
     */
    memory?: pulumi.Input<inputs.VmVgpuPolicyMemory>;
    /**
     * The unique name assigned to the vGPU policy for a virtual machine.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the scope of the policy within 
     * provider virtual data centers. If not provided, applies to all the current ant future PVDCs.
     * See `providerVdcScope` for more details.
     */
    providerVdcScopes?: pulumi.Input<pulumi.Input<inputs.VmVgpuPolicyProviderVdcScope>[]>;
    /**
     * Defines the vGPU profile ID and count.
     */
    vgpuProfile: pulumi.Input<inputs.VmVgpuPolicyVgpuProfile>;
}
