// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a data source to read a VMware Cloud Director site association information.
 *
 * > Note: this data source requires System Administrator privileges
 *
 * Supported in provider *v3.13+*
 *
 * ## Example Usage
 *
 * ### 1
 *
 * Retrieving a site association using the associated site ID.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const site1_site2 = vcd.getMultisiteSiteAssociation({
 *     associatedSiteId: "urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b",
 * });
 * ```
 *
 * ### 2
 *
 * Retrieving a site association using the association data file.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const site1_site2 = vcd.getMultisiteSiteAssociation({
 *     associationDataFile: "remote-site.xml",
 * });
 * ```
 *
 * ## More information
 *
 * See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
 * of association workflows.
 */
export function getMultisiteSiteAssociation(args?: GetMultisiteSiteAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetMultisiteSiteAssociationResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", {
        "associatedSiteId": args.associatedSiteId,
        "associationDataFile": args.associationDataFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationArgs {
    /**
     * ID of the remote site associated with the current one. (Used in alternative to
     * `associatedDataFile`)
     */
    associatedSiteId?: string;
    /**
     * Name of the file containing the data used to associate this site to another one.
     * (Used when `associatedSiteId` is not known)
     */
    associationDataFile?: string;
}

/**
 * A collection of values returned by getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationResult {
    /**
     * The URL of the associated site.
     */
    readonly associatedSiteHref: string;
    readonly associatedSiteId?: string;
    /**
     * The name of the associated site.
     */
    readonly associatedSiteName: string;
    readonly associationDataFile?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The status of the association (one of `ASYMMETRIC`, `ACTIVE`, `UNREACHABLE`, `ERROR`)
     */
    readonly status: string;
}
/**
 * Provides a data source to read a VMware Cloud Director site association information.
 *
 * > Note: this data source requires System Administrator privileges
 *
 * Supported in provider *v3.13+*
 *
 * ## Example Usage
 *
 * ### 1
 *
 * Retrieving a site association using the associated site ID.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const site1_site2 = vcd.getMultisiteSiteAssociation({
 *     associatedSiteId: "urn:vcloud:site:dca02216-fcf3-414a-be95-a3e26cf1296b",
 * });
 * ```
 *
 * ### 2
 *
 * Retrieving a site association using the association data file.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const site1_site2 = vcd.getMultisiteSiteAssociation({
 *     associationDataFile: "remote-site.xml",
 * });
 * ```
 *
 * ## More information
 *
 * See [Site and Org association](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/site_org_association) for a broader description
 * of association workflows.
 */
export function getMultisiteSiteAssociationOutput(args?: GetMultisiteSiteAssociationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMultisiteSiteAssociationResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", {
        "associatedSiteId": args.associatedSiteId,
        "associationDataFile": args.associationDataFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationOutputArgs {
    /**
     * ID of the remote site associated with the current one. (Used in alternative to
     * `associatedDataFile`)
     */
    associatedSiteId?: pulumi.Input<string>;
    /**
     * Name of the file containing the data used to associate this site to another one.
     * (Used when `associatedSiteId` is not known)
     */
    associationDataFile?: pulumi.Input<string>;
}
