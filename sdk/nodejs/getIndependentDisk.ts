// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * export = async () => {
 *     const existing_disk = await vcd.getIndependentDisk({
 *         org: "my-org",
 *         vdc: "my-vdc",
 *         id: "urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
 *         name: "my-disk",
 *     });
 *     return {
 *         "disk-iops": existing_disk.iops,
 *         typeIsAttached: existing_disk.isAttached,
 *     };
 * }
 * ```
 */
export function getIndependentDisk(args?: GetIndependentDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetIndependentDiskResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getIndependentDisk:getIndependentDisk", {
        "id": args.id,
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getIndependentDisk.
 */
export interface GetIndependentDiskArgs {
    /**
     * Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
     */
    id?: string;
    /**
     * Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
     */
    name?: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: string;
}

/**
 * A collection of values returned by getIndependentDisk.
 */
export interface GetIndependentDiskResult {
    readonly attachedVmIds: string[];
    readonly busSubType: string;
    readonly busType: string;
    readonly datastoreName: string;
    readonly description: string;
    readonly encrypted: boolean;
    readonly id?: string;
    readonly iops: number;
    readonly isAttached: boolean;
    /**
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    readonly metadataEntries: outputs.GetIndependentDiskMetadataEntry[];
    readonly name?: string;
    readonly org?: string;
    readonly ownerName: string;
    readonly sharingType: string;
    readonly sizeInMb: number;
    readonly storageProfile: string;
    readonly uuid: string;
    readonly vdc?: string;
}
/**
 * Provides a VMware Cloud Director Independent disk data source. An independent disk data source can be used to reference an independent disk and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * export = async () => {
 *     const existing_disk = await vcd.getIndependentDisk({
 *         org: "my-org",
 *         vdc: "my-vdc",
 *         id: "urn:vcloud:disk:1bbc273d-7701-4f06-97be-428b46b0805e",
 *         name: "my-disk",
 *     });
 *     return {
 *         "disk-iops": existing_disk.iops,
 *         typeIsAttached: existing_disk.isAttached,
 *     };
 * }
 * ```
 */
export function getIndependentDiskOutput(args?: GetIndependentDiskOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIndependentDiskResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getIndependentDisk:getIndependentDisk", {
        "id": args.id,
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getIndependentDisk.
 */
export interface GetIndependentDiskOutputArgs {
    /**
     * Disk id or name is required. If both provided - Id is used. Id can be found by using import function [Listing independent disk IDs](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/independent_disk#listing-independent-disk-ids)
     */
    id?: pulumi.Input<string>;
    /**
     * Disk name.  **Warning** please use `id` as there is possibility to have more than one independent disk with same name. As result data source will fail.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
