// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class OrgOidc extends pulumi.CustomResource {
    /**
     * Get an existing OrgOidc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgOidcState, opts?: pulumi.CustomResourceOptions): OrgOidc {
        return new OrgOidc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/orgOidc:OrgOidc';

    /**
     * Returns true if the given object is an instance of OrgOidc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgOidc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgOidc.__pulumiType;
    }

    /**
     * The endpoint to use for access tokens.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    public readonly accessTokenEndpoint!: pulumi.Output<string>;
    /**
     * A single configuration block that specifies the claim mappings to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the claims given by `wellknownEndpoint`. The supported claims are:
     */
    public readonly claimsMapping!: pulumi.Output<outputs.OrgOidcClaimsMapping>;
    /**
     * Client ID to use with the OIDC provider
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * Client Secret to use with the OIDC provider
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The issuer ID for the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    public readonly issuerId!: pulumi.Output<string>;
    /**
     * Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
     * You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
     * Maximum value is `24`
     */
    public readonly keyExpireDurationHours!: pulumi.Output<number | undefined>;
    /**
     * Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
     * If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
     */
    public readonly keyRefreshEndpoint!: pulumi.Output<string>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
     */
    public readonly keyRefreshPeriodHours!: pulumi.Output<number | undefined>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
     * The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
     */
    public readonly keyRefreshStrategy!: pulumi.Output<string | undefined>;
    /**
     * One or more configuration blocks that specify the keys to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the keys given by `wellknownEndpoint`. Each key requires the following:
     */
    public readonly keys!: pulumi.Output<outputs.OrgOidcKey[]>;
    /**
     * The maximum clock skew is the maximum allowable time difference between the client and server.
     * This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
     */
    public readonly maxClockSkewSeconds!: pulumi.Output<number | undefined>;
    /**
     * ID of the Organization that will have the OpenID Connect settings configured. There must be only one
     * resource `vcd.OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
     * The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
     * VMware Cloud Director can fetch and consume claims from both sources
     */
    public readonly preferIdToken!: pulumi.Output<boolean | undefined>;
    /**
     * The client configuration redirect URI used to create a client application registration with an identity provider
     * that complies with the OpenID Connect standard
     */
    public /*out*/ readonly redirectUri!: pulumi.Output<string>;
    /**
     * A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
     * the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
     * overrides the obtained scopes
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Customizes the label of the UI button of the login screen
     */
    public readonly uiButtonLabel!: pulumi.Output<string | undefined>;
    /**
     * The endpoint to use for authorization.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    public readonly userAuthorizationEndpoint!: pulumi.Output<string>;
    /**
     * The endpoint to use for User Info.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    public readonly userinfoEndpoint!: pulumi.Output<string>;
    /**
     * This endpoint retrieves the OIDC provider configuration and automatically sets
     * the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
     * `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
     * can be overridden by setting them explicitly in HCL code
     */
    public readonly wellknownEndpoint!: pulumi.Output<string | undefined>;

    /**
     * Create a OrgOidc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgOidcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgOidcArgs | OrgOidcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgOidcState | undefined;
            resourceInputs["accessTokenEndpoint"] = state ? state.accessTokenEndpoint : undefined;
            resourceInputs["claimsMapping"] = state ? state.claimsMapping : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["issuerId"] = state ? state.issuerId : undefined;
            resourceInputs["keyExpireDurationHours"] = state ? state.keyExpireDurationHours : undefined;
            resourceInputs["keyRefreshEndpoint"] = state ? state.keyRefreshEndpoint : undefined;
            resourceInputs["keyRefreshPeriodHours"] = state ? state.keyRefreshPeriodHours : undefined;
            resourceInputs["keyRefreshStrategy"] = state ? state.keyRefreshStrategy : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["maxClockSkewSeconds"] = state ? state.maxClockSkewSeconds : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["preferIdToken"] = state ? state.preferIdToken : undefined;
            resourceInputs["redirectUri"] = state ? state.redirectUri : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["uiButtonLabel"] = state ? state.uiButtonLabel : undefined;
            resourceInputs["userAuthorizationEndpoint"] = state ? state.userAuthorizationEndpoint : undefined;
            resourceInputs["userinfoEndpoint"] = state ? state.userinfoEndpoint : undefined;
            resourceInputs["wellknownEndpoint"] = state ? state.wellknownEndpoint : undefined;
        } else {
            const args = argsOrState as OrgOidcArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["accessTokenEndpoint"] = args ? args.accessTokenEndpoint : undefined;
            resourceInputs["claimsMapping"] = args ? args.claimsMapping : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["issuerId"] = args ? args.issuerId : undefined;
            resourceInputs["keyExpireDurationHours"] = args ? args.keyExpireDurationHours : undefined;
            resourceInputs["keyRefreshEndpoint"] = args ? args.keyRefreshEndpoint : undefined;
            resourceInputs["keyRefreshPeriodHours"] = args ? args.keyRefreshPeriodHours : undefined;
            resourceInputs["keyRefreshStrategy"] = args ? args.keyRefreshStrategy : undefined;
            resourceInputs["keys"] = args ? args.keys : undefined;
            resourceInputs["maxClockSkewSeconds"] = args ? args.maxClockSkewSeconds : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["preferIdToken"] = args ? args.preferIdToken : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["uiButtonLabel"] = args ? args.uiButtonLabel : undefined;
            resourceInputs["userAuthorizationEndpoint"] = args ? args.userAuthorizationEndpoint : undefined;
            resourceInputs["userinfoEndpoint"] = args ? args.userinfoEndpoint : undefined;
            resourceInputs["wellknownEndpoint"] = args ? args.wellknownEndpoint : undefined;
            resourceInputs["redirectUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OrgOidc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgOidc resources.
 */
export interface OrgOidcState {
    /**
     * The endpoint to use for access tokens.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    accessTokenEndpoint?: pulumi.Input<string>;
    /**
     * A single configuration block that specifies the claim mappings to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the claims given by `wellknownEndpoint`. The supported claims are:
     */
    claimsMapping?: pulumi.Input<inputs.OrgOidcClaimsMapping>;
    /**
     * Client ID to use with the OIDC provider
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client Secret to use with the OIDC provider
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The issuer ID for the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    issuerId?: pulumi.Input<string>;
    /**
     * Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
     * You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
     * Maximum value is `24`
     */
    keyExpireDurationHours?: pulumi.Input<number>;
    /**
     * Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
     * If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
     */
    keyRefreshEndpoint?: pulumi.Input<string>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
     */
    keyRefreshPeriodHours?: pulumi.Input<number>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
     * The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
     */
    keyRefreshStrategy?: pulumi.Input<string>;
    /**
     * One or more configuration blocks that specify the keys to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the keys given by `wellknownEndpoint`. Each key requires the following:
     */
    keys?: pulumi.Input<pulumi.Input<inputs.OrgOidcKey>[]>;
    /**
     * The maximum clock skew is the maximum allowable time difference between the client and server.
     * This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
     */
    maxClockSkewSeconds?: pulumi.Input<number>;
    /**
     * ID of the Organization that will have the OpenID Connect settings configured. There must be only one
     * resource `vcd.OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
     * The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
     * VMware Cloud Director can fetch and consume claims from both sources
     */
    preferIdToken?: pulumi.Input<boolean>;
    /**
     * The client configuration redirect URI used to create a client application registration with an identity provider
     * that complies with the OpenID Connect standard
     */
    redirectUri?: pulumi.Input<string>;
    /**
     * A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
     * the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
     * overrides the obtained scopes
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Customizes the label of the UI button of the login screen
     */
    uiButtonLabel?: pulumi.Input<string>;
    /**
     * The endpoint to use for authorization.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    userAuthorizationEndpoint?: pulumi.Input<string>;
    /**
     * The endpoint to use for User Info.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    userinfoEndpoint?: pulumi.Input<string>;
    /**
     * This endpoint retrieves the OIDC provider configuration and automatically sets
     * the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
     * `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
     * can be overridden by setting them explicitly in HCL code
     */
    wellknownEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgOidc resource.
 */
export interface OrgOidcArgs {
    /**
     * The endpoint to use for access tokens.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    accessTokenEndpoint?: pulumi.Input<string>;
    /**
     * A single configuration block that specifies the claim mappings to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the claims given by `wellknownEndpoint`. The supported claims are:
     */
    claimsMapping?: pulumi.Input<inputs.OrgOidcClaimsMapping>;
    /**
     * Client ID to use with the OIDC provider
     */
    clientId: pulumi.Input<string>;
    /**
     * Client Secret to use with the OIDC provider
     */
    clientSecret: pulumi.Input<string>;
    /**
     * Either `true` or `false`, specifies whether the OIDC authentication is enabled for the given organization
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The issuer ID for the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    issuerId?: pulumi.Input<string>;
    /**
     * Required if `keyRefreshEndpoint` is set and `key_refresh_strategy=EXPIRE_AFTER`. Defines the expiration period of the key
     * You can get more details of the `EXPIRE_AFTER` strategy [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html).
     * Maximum value is `24`
     */
    keyExpireDurationHours?: pulumi.Input<number>;
    /**
     * Endpoint used to refresh the keys. If set, `keyRefreshPeriodHours` and `keyRefreshStrategy` will be required.
     * If `wellknownEndpoint` is set, then this argument will override the obtained endpoint
     */
    keyRefreshEndpoint?: pulumi.Input<string>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the frequency of key refresh. Maximum value is `720` (30 days)
     */
    keyRefreshPeriodHours?: pulumi.Input<number>;
    /**
     * Required if `keyRefreshEndpoint` is set. Defines the strategy of key refresh. One of `ADD`, `REPLACE`, `EXPIRE_AFTER`.
     * The different strategies are explained [here](https://docs.vmware.com/en/VMware-Cloud-Director/10.4/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-92C030BE-5444-45B4-891F-63EA6872FEA1.html)
     */
    keyRefreshStrategy?: pulumi.Input<string>;
    /**
     * One or more configuration blocks that specify the keys to use with the OIDC provider.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**. This allows users
     * to override the keys given by `wellknownEndpoint`. Each key requires the following:
     */
    keys?: pulumi.Input<pulumi.Input<inputs.OrgOidcKey>[]>;
    /**
     * The maximum clock skew is the maximum allowable time difference between the client and server.
     * This time compensates for any small-time differences in the timestamps when verifying tokens. The **default** value is `60` seconds
     */
    maxClockSkewSeconds?: pulumi.Input<number>;
    /**
     * ID of the Organization that will have the OpenID Connect settings configured. There must be only one
     * resource `vcd.OrgOidc` per `orgId`, as there is only one OpenID configuration per Organization
     */
    orgId: pulumi.Input<string>;
    /**
     * If you want to combine claims from `userinfoEndpoint` and the ID Token, set this to `true`.
     * The identity providers do not provide all the required claims set in `userinfoEndpoint`. By setting this argument to `true`,
     * VMware Cloud Director can fetch and consume claims from both sources
     */
    preferIdToken?: pulumi.Input<boolean>;
    /**
     * A set of scopes to use with the OpenID Connect provider. They are used to authorize access to user details, by defining
     * the permissions that the access tokens have to access user information. If 'wellknown_endpoint' is set, this attribute
     * overrides the obtained scopes
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Customizes the label of the UI button of the login screen
     */
    uiButtonLabel?: pulumi.Input<string>;
    /**
     * The endpoint to use for authorization.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    userAuthorizationEndpoint?: pulumi.Input<string>;
    /**
     * The endpoint to use for User Info.
     * If `wellknownEndpoint` is **not** set, then this argument is **required**. Otherwise, it is **optional**.
     * This allows users to override the configuration given by `wellknownEndpoint`
     */
    userinfoEndpoint?: pulumi.Input<string>;
    /**
     * This endpoint retrieves the OIDC provider configuration and automatically sets
     * the following arguments, without setting them explicitly: `issuerId`, `userAuthorizationEndpoint`, `accessTokenEndpoint`,
     * `userinfoEndpoint`, the `claimsMapping` block, the `key` blocks, and `scopes`. These mentioned attributes will be computed, and
     * can be overridden by setting them explicitly in HCL code
     */
    wellknownEndpoint?: pulumi.Input<string>;
}
