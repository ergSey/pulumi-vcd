// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director Org VDC access control resource. This can be
 * used to share VDC across users and/or groups.
 *
 * Supported in provider *v3.7+*
 *
 * > **Note:** This resource requires either system or org administrator privileges.
 *
 * ## Example Usage
 *
 * ### Example Usage 1 (Giving VDC read only access to a couple of users)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_user = vcd.getOrgUser({
 *     org: "my-org",
 *     name: "my-user",
 * });
 * const my_user2 = vcd.getOrgUser({
 *     org: "my-org",
 *     name: "my-user2",
 * });
 * const myAccessControl = new vcd.OrgVdcAccessControl("my_access_control", {
 *     org: "my-org",
 *     vdc: "my-vdc",
 *     sharedWithEveryone: false,
 *     sharedWiths: [
 *         {
 *             userId: my_user.then(my_user => my_user.id),
 *             accessLevel: "ReadOnly",
 *         },
 *         {
 *             userId: my_user2.then(my_user2 => my_user2.id),
 *             accessLevel: "ReadOnly",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Example Usage 2 (Giving VDC read only access to everybody)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const myAccessControl = new vcd.OrgVdcAccessControl("my_access_control", {
 *     org: "my-org",
 *     vdc: "my-vdc",
 *     sharedWithEveryone: true,
 *     everyoneAccessLevel: "ReadOnly",
 * });
 * ```
 *
 * ### Example Usage 3 (Creating a VDC and setting VDC read only access to everybody)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const myVdc = new vcd.OrgVdc("my_vdc", {
 *     name: "my-vdc",
 *     org: "my-org",
 *     allocationModel: "Flex",
 *     networkPoolName: "my-network-pool",
 *     providerVdcName: "my-provider-vdc",
 *     computeCapacity: {
 *         cpu: {
 *             allocated: 1024,
 *             limit: 1024,
 *         },
 *         memory: {
 *             allocated: 1024,
 *             limit: 1024,
 *         },
 *     },
 *     storageProfiles: [{
 *         name: "my-storage-profile",
 *         enabled: true,
 *         limit: 10240,
 *         "default": true,
 *     }],
 *     enabled: true,
 *     enableThinProvisioning: true,
 *     enableFastProvisioning: true,
 *     deleteForce: true,
 *     deleteRecursive: true,
 *     elasticity: false,
 *     includeVmMemoryOverhead: false,
 * });
 * const myAccessControl = new vcd.OrgVdcAccessControl("my_access_control", {
 *     org: "my-org",
 *     vdc: "my-vdc",
 *     sharedWithEveryone: true,
 *     everyoneAccessLevel: "ReadOnly",
 * });
 * ```
 */
export class OrgVdcAccessControl extends pulumi.CustomResource {
    /**
     * Get an existing OrgVdcAccessControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgVdcAccessControlState, opts?: pulumi.CustomResourceOptions): OrgVdcAccessControl {
        return new OrgVdcAccessControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/orgVdcAccessControl:OrgVdcAccessControl';

    /**
     * Returns true if the given object is an instance of OrgVdcAccessControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgVdcAccessControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgVdcAccessControl.__pulumiType;
    }

    /**
     * Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when sharedWithEveryone is set.
     */
    public readonly everyoneAccessLevel!: pulumi.Output<string | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Whether the VDC is shared with everyone.
     */
    public readonly sharedWithEveryone!: pulumi.Output<boolean>;
    /**
     * one or more blocks defining a subject to which we are sharing.
     * See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
     *
     * > **Note:** Users must either set sharing for everybody using `sharedWithEveryone` and `everyoneAccessLevel` arguments or per user/group access using `sharedWith` argument. Setting both will make the resource to error.
     *
     * <a id="sharedWith"></a>
     */
    public readonly sharedWiths!: pulumi.Output<outputs.OrgVdcAccessControlSharedWith[] | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a OrgVdcAccessControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgVdcAccessControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgVdcAccessControlArgs | OrgVdcAccessControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgVdcAccessControlState | undefined;
            resourceInputs["everyoneAccessLevel"] = state ? state.everyoneAccessLevel : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["sharedWithEveryone"] = state ? state.sharedWithEveryone : undefined;
            resourceInputs["sharedWiths"] = state ? state.sharedWiths : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as OrgVdcAccessControlArgs | undefined;
            if ((!args || args.sharedWithEveryone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedWithEveryone'");
            }
            resourceInputs["everyoneAccessLevel"] = args ? args.everyoneAccessLevel : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sharedWithEveryone"] = args ? args.sharedWithEveryone : undefined;
            resourceInputs["sharedWiths"] = args ? args.sharedWiths : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgVdcAccessControl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgVdcAccessControl resources.
 */
export interface OrgVdcAccessControlState {
    /**
     * Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when sharedWithEveryone is set.
     */
    everyoneAccessLevel?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
     */
    org?: pulumi.Input<string>;
    /**
     * Whether the VDC is shared with everyone.
     */
    sharedWithEveryone?: pulumi.Input<boolean>;
    /**
     * one or more blocks defining a subject to which we are sharing.
     * See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
     *
     * > **Note:** Users must either set sharing for everybody using `sharedWithEveryone` and `everyoneAccessLevel` arguments or per user/group access using `sharedWith` argument. Setting both will make the resource to error.
     *
     * <a id="sharedWith"></a>
     */
    sharedWiths?: pulumi.Input<pulumi.Input<inputs.OrgVdcAccessControlSharedWith>[]>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgVdcAccessControl resource.
 */
export interface OrgVdcAccessControlArgs {
    /**
     * Access level when the VDC is shared with everyone (only `ReadOnly` is available). Required when sharedWithEveryone is set.
     */
    everyoneAccessLevel?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations.
     */
    org?: pulumi.Input<string>;
    /**
     * Whether the VDC is shared with everyone.
     */
    sharedWithEveryone: pulumi.Input<boolean>;
    /**
     * one or more blocks defining a subject to which we are sharing.
     * See sharedWith below for detail. It cannot be used if `sharedWithEveryone` is set.
     *
     * > **Note:** Users must either set sharing for everybody using `sharedWithEveryone` and `everyoneAccessLevel` arguments or per user/group access using `sharedWith` argument. Setting both will make the resource to error.
     *
     * <a id="sharedWith"></a>
     */
    sharedWiths?: pulumi.Input<pulumi.Input<inputs.OrgVdcAccessControlSharedWith>[]>;
    /**
     * The name of VDC to use, optional if defined at provider level.
     */
    vdc?: pulumi.Input<string>;
}
