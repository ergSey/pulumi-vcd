// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsxtDistributedFirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing NsxtDistributedFirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtDistributedFirewallRuleState, opts?: pulumi.CustomResourceOptions): NsxtDistributedFirewallRule {
        return new NsxtDistributedFirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtDistributedFirewallRule:NsxtDistributedFirewallRule';

    /**
     * Returns true if the given object is an instance of NsxtDistributedFirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtDistributedFirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtDistributedFirewallRule.__pulumiType;
    }

    /**
     * ID of an existing `vcd.NsxtDistributedFirewallRule` entry, above
     * which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
     * created at the bottom of the list
     *
     * > When activating Distributed Firewall with resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
     * rule created which can make inconvenient to use this resource. For that reason, resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
     * `removeDefaultFirewallRule` which can remove default firewall rule.
     */
    public readonly aboveRuleId!: pulumi.Output<string | undefined>;
    /**
     * Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
     * supported in VCD 10.2.2+
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * An optional set of Application Port Profiles.
     */
    public readonly appPortProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * Comment field shown in UI
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Description of firewall rule (not shown in UI)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * reverses value of `destinationIds` for
     * the rule to match everything except specified IDs.
     */
    public readonly destinationGroupsExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security
     * groups`). Leaving it empty matches `Any` (all)
     */
    public readonly destinationIds!: pulumi.Output<string[] | undefined>;
    /**
     * One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * Defines if the rule is enabled (default `true`)
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
     */
    public readonly ipProtocol!: pulumi.Output<string | undefined>;
    /**
     * Defines if logging for this rule is enabled (default `false`)
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * Explanatory name for firewall rule (uniqueness not enforced)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An optional set of Network Context Profiles. Can be
     * looked up using `vcd.getNsxtNetworkContextProfile` data source.
     */
    public readonly networkContextProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * reverses value of `sourceIds` for the rule to
     * match everything except specified IDs.
     */
    public readonly sourceGroupsExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security groups`).
     * Leaving it empty matches `Any` (all)
     */
    public readonly sourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of VDC Group to manage Distributed Firewall in. Can be looked
     * up using `vcd.VdcGroup` resource or data source.
     */
    public readonly vdcGroupId!: pulumi.Output<string>;

    /**
     * Create a NsxtDistributedFirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtDistributedFirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtDistributedFirewallRuleArgs | NsxtDistributedFirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtDistributedFirewallRuleState | undefined;
            resourceInputs["aboveRuleId"] = state ? state.aboveRuleId : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["appPortProfileIds"] = state ? state.appPortProfileIds : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationGroupsExcluded"] = state ? state.destinationGroupsExcluded : undefined;
            resourceInputs["destinationIds"] = state ? state.destinationIds : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkContextProfileIds"] = state ? state.networkContextProfileIds : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["sourceGroupsExcluded"] = state ? state.sourceGroupsExcluded : undefined;
            resourceInputs["sourceIds"] = state ? state.sourceIds : undefined;
            resourceInputs["vdcGroupId"] = state ? state.vdcGroupId : undefined;
        } else {
            const args = argsOrState as NsxtDistributedFirewallRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.vdcGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vdcGroupId'");
            }
            resourceInputs["aboveRuleId"] = args ? args.aboveRuleId : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["appPortProfileIds"] = args ? args.appPortProfileIds : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationGroupsExcluded"] = args ? args.destinationGroupsExcluded : undefined;
            resourceInputs["destinationIds"] = args ? args.destinationIds : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkContextProfileIds"] = args ? args.networkContextProfileIds : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sourceGroupsExcluded"] = args ? args.sourceGroupsExcluded : undefined;
            resourceInputs["sourceIds"] = args ? args.sourceIds : undefined;
            resourceInputs["vdcGroupId"] = args ? args.vdcGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtDistributedFirewallRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NsxtDistributedFirewallRule resources.
 */
export interface NsxtDistributedFirewallRuleState {
    /**
     * ID of an existing `vcd.NsxtDistributedFirewallRule` entry, above
     * which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
     * created at the bottom of the list
     *
     * > When activating Distributed Firewall with resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
     * rule created which can make inconvenient to use this resource. For that reason, resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
     * `removeDefaultFirewallRule` which can remove default firewall rule.
     */
    aboveRuleId?: pulumi.Input<string>;
    /**
     * Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
     * supported in VCD 10.2.2+
     */
    action?: pulumi.Input<string>;
    /**
     * An optional set of Application Port Profiles.
     */
    appPortProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment field shown in UI
     */
    comment?: pulumi.Input<string>;
    /**
     * Description of firewall rule (not shown in UI)
     */
    description?: pulumi.Input<string>;
    /**
     * reverses value of `destinationIds` for
     * the rule to match everything except specified IDs.
     */
    destinationGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security
     * groups`). Leaving it empty matches `Any` (all)
     */
    destinationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
     */
    direction?: pulumi.Input<string>;
    /**
     * Defines if the rule is enabled (default `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * Defines if logging for this rule is enabled (default `false`)
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Explanatory name for firewall rule (uniqueness not enforced)
     */
    name?: pulumi.Input<string>;
    /**
     * An optional set of Network Context Profiles. Can be
     * looked up using `vcd.getNsxtNetworkContextProfile` data source.
     */
    networkContextProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * reverses value of `sourceIds` for the rule to
     * match everything except specified IDs.
     */
    sourceGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security groups`).
     * Leaving it empty matches `Any` (all)
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of VDC Group to manage Distributed Firewall in. Can be looked
     * up using `vcd.VdcGroup` resource or data source.
     */
    vdcGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtDistributedFirewallRule resource.
 */
export interface NsxtDistributedFirewallRuleArgs {
    /**
     * ID of an existing `vcd.NsxtDistributedFirewallRule` entry, above
     * which the newly created firewall rule will be positioned. **Note.** By default, new rule will be
     * created at the bottom of the list
     *
     * > When activating Distributed Firewall with resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group), there is a default firewall
     * rule created which can make inconvenient to use this resource. For that reason, resource
     * [`vcd.VdcGroup`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/vdc_group) has a parameter
     * `removeDefaultFirewallRule` which can remove default firewall rule.
     */
    aboveRuleId?: pulumi.Input<string>;
    /**
     * Defines if it should `ALLOW`, `DROP`, `REJECT` traffic. `REJECT` is only
     * supported in VCD 10.2.2+
     */
    action: pulumi.Input<string>;
    /**
     * An optional set of Application Port Profiles.
     */
    appPortProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment field shown in UI
     */
    comment?: pulumi.Input<string>;
    /**
     * Description of firewall rule (not shown in UI)
     */
    description?: pulumi.Input<string>;
    /**
     * reverses value of `destinationIds` for
     * the rule to match everything except specified IDs.
     */
    destinationGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security
     * groups`). Leaving it empty matches `Any` (all)
     */
    destinationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of `IN`, `OUT`, or `IN_OUT`. (default `IN_OUT`)
     */
    direction?: pulumi.Input<string>;
    /**
     * Defines if the rule is enabled (default `true`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * One of `IPV4`,  `IPV6`, or `IPV4_IPV6` (default `IPV4_IPV6`)
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * Defines if logging for this rule is enabled (default `false`)
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Explanatory name for firewall rule (uniqueness not enforced)
     */
    name?: pulumi.Input<string>;
    /**
     * An optional set of Network Context Profiles. Can be
     * looked up using `vcd.getNsxtNetworkContextProfile` data source.
     */
    networkContextProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful
     * when connected as sysadmin working across different organisations.
     */
    org?: pulumi.Input<string>;
    /**
     * reverses value of `sourceIds` for the rule to
     * match everything except specified IDs.
     */
    sourceGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of source object Firewall Groups (`IP Sets` or `Security groups`).
     * Leaving it empty matches `Any` (all)
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of VDC Group to manage Distributed Firewall in. Can be looked
     * up using `vcd.VdcGroup` resource or data source.
     */
    vdcGroupId: pulumi.Input<string>;
}
