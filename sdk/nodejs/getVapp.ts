// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const test_tf = vcd.getVapp({
 *     name: "test-tf",
 *     org: "tf",
 *     vdc: "vdc-tf",
 * });
 * export const id = test_tf.then(test_tf => test_tf.id);
 * export const name = test_tf.then(test_tf => test_tf.name);
 * export const description = test_tf.then(test_tf => test_tf.description);
 * export const href = test_tf.then(test_tf => test_tf.href);
 * export const statusText = test_tf.then(test_tf => test_tf.statusText);
 * ```
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getVapp(args: GetVappArgs, opts?: pulumi.InvokeOptions): Promise<GetVappResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVapp:getVapp", {
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVapp.
 */
export interface GetVappArgs {
    /**
     * A unique name for the vApp
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: string;
}

/**
 * A collection of values returned by getVapp.
 */
export interface GetVappResult {
    /**
     * An optional description for the vApp
     */
    readonly description: string;
    /**
     * Key value map of vApp guest properties.
     */
    readonly guestProperties: {[key: string]: string};
    /**
     * The vApp Hyper Reference
     */
    readonly href: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
     * details on the origin of the vApp (e.g. `vapp.origin.id`, `vapp.origin.name`, `vapp.origin.type`).
     */
    readonly inheritedMetadata: {[key: string]: string};
    /**
     * (*v3.5+*) - The information about the vApp lease. It includes the following fields:
     */
    readonly leases: outputs.GetVappLease[];
    /**
     * (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to this vApp. Key and value can be any string.
     *
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    /**
     * A set of metadata entries assigned to this vApp. See Metadata section for details.
     */
    readonly metadataEntries: outputs.GetVappMetadataEntry[];
    readonly name: string;
    readonly org?: string;
    /**
     * The vApp status as a numeric code
     */
    readonly status: number;
    /**
     * The vApp status as text.
     */
    readonly statusText: string;
    /**
     * (*3.13.0+*) A list of vApp network names included in this vApp
     */
    readonly vappNetworkNames: string[];
    /**
     * (*v3.13.0+*) A list of vApp Org network names included in this vApp
     */
    readonly vappOrgNetworkNames: string[];
    readonly vdc?: string;
    /**
     * (*v3.13.0+*) A list of VM names included in this vApp
     */
    readonly vmNames: string[];
}
/**
 * Provides a VMware Cloud Director vApp data source. This can be used to reference vApps.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const test_tf = vcd.getVapp({
 *     name: "test-tf",
 *     org: "tf",
 *     vdc: "vdc-tf",
 * });
 * export const id = test_tf.then(test_tf => test_tf.id);
 * export const name = test_tf.then(test_tf => test_tf.name);
 * export const description = test_tf.then(test_tf => test_tf.description);
 * export const href = test_tf.then(test_tf => test_tf.href);
 * export const statusText = test_tf.then(test_tf => test_tf.statusText);
 * ```
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getVappOutput(args: GetVappOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVappResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getVapp:getVapp", {
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVapp.
 */
export interface GetVappOutputArgs {
    /**
     * A unique name for the vApp
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
