// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director vApp Template data source. A vApp Template can be used to reference an already existing
 * vApp Template in VCD and use its data within other resources or data sources.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example: Fetching a vApp Template from a Catalog
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_catalog = vcd.getCatalog({
 *     org: "my-org",
 *     name: "my-catalog",
 * });
 * const my_first_vapp_template = my_catalog.then(my_catalog => vcd.getCatalogVappTemplate({
 *     org: "my-org",
 *     catalogId: my_catalog.id,
 *     name: "my-first-vapp-template",
 * }));
 * const my_second_vappTemplate = new vcd.CatalogVappTemplate("my-second-vapp_template", {
 *     metadataEntries: Object.entries(photon.metadataEntry).map(([k, v]) => ({key: k, value: v})).map(entry => ({
 *         key: entry.value.key,
 *         value: entry.value.value,
 *         type: entry.value.type,
 *         isSystem: entry.value.is_system,
 *         userAccess: entry.value.user_access,
 *     })),
 *     org: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.org),
 *     catalogId: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.catalogId),
 *     name: "my-second-item",
 *     description: my_catalog.then(my_catalog => `Belongs to ${my_catalog.name}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 * });
 * ```
 *
 * ## Example: Fetching a vApp Template from a VDC
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_vdc = vcd.getOrgVdc({
 *     org: "my-org",
 *     name: "my-vdc",
 * });
 * const my_first_vapp_template = my_vdc.then(my_vdc => vcd.getCatalogVappTemplate({
 *     org: "my-org",
 *     vdcId: my_vdc.id,
 *     name: "my-first-vapp-template",
 * }));
 * const my_second_vappTemplate = new vcd.CatalogVappTemplate("my-second-vapp_template", {
 *     metadataEntries: Object.entries(photon.metadataEntry).map(([k, v]) => ({key: k, value: v})).map(entry => ({
 *         key: entry.value.key,
 *         value: entry.value.value,
 *         type: entry.value.type,
 *         isSystem: entry.value.is_system,
 *         userAccess: entry.value.user_access,
 *     })),
 *     org: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.org),
 *     catalogId: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.catalogId),
 *     name: "my-second-item",
 *     description: my_vdc.then(my_vdc => `Belongs to ${my_vdc.name}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 * });
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` - (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getCatalogVappTemplate(args?: GetCatalogVappTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalogVappTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getCatalogVappTemplate:getCatalogVappTemplate", {
        "catalogId": args.catalogId,
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogVappTemplate.
 */
export interface GetCatalogVappTemplateArgs {
    /**
     * ID of the catalog containing the vApp Template. Can't be used if a specific VDC identifier is set (`vdcId`).
     */
    catalogId?: string;
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: inputs.GetCatalogVappTemplateFilter;
    /**
     * vApp Template name (optional when `filter` is used)
     */
    name?: string;
    /**
     * Org name
     */
    org?: string;
    /**
     * ID of the VDC to which the vApp Template belongs. Can't be used if a specific Catalog is set (`catalogId`).
     */
    vdcId?: string;
}

/**
 * A collection of values returned by getCatalogVappTemplate.
 */
export interface GetCatalogVappTemplateResult {
    readonly catalogId?: string;
    readonly catalogItemId: string;
    readonly created: string;
    /**
     * vApp Template description
     */
    readonly description: string;
    readonly filter?: outputs.GetCatalogVappTemplateFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly inheritedMetadata: {[key: string]: string};
    /**
     * (*v3.11+*) - The information about the vApp Template lease. It includes the following field:
     */
    readonly leases: outputs.GetCatalogVappTemplateLease[];
    /**
     * (Deprecated) Use `metadataEntry` instead. Key/value map of metadata for the associated vApp template.
     *
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    /**
     * A set of metadata entries assigned to this vApp Template. See [Metadata](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/catalog_vapp_template#metadata) section for details.
     */
    readonly metadataEntries: outputs.GetCatalogVappTemplateMetadataEntry[];
    readonly name?: string;
    readonly org?: string;
    readonly vdcId?: string;
    /**
     * Set of VM names within the vApp template
     */
    readonly vmNames: string[];
}
/**
 * Provides a VMware Cloud Director vApp Template data source. A vApp Template can be used to reference an already existing
 * vApp Template in VCD and use its data within other resources or data sources.
 *
 * Supported in provider *v3.8+*
 *
 * ## Example: Fetching a vApp Template from a Catalog
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_catalog = vcd.getCatalog({
 *     org: "my-org",
 *     name: "my-catalog",
 * });
 * const my_first_vapp_template = my_catalog.then(my_catalog => vcd.getCatalogVappTemplate({
 *     org: "my-org",
 *     catalogId: my_catalog.id,
 *     name: "my-first-vapp-template",
 * }));
 * const my_second_vappTemplate = new vcd.CatalogVappTemplate("my-second-vapp_template", {
 *     metadataEntries: Object.entries(photon.metadataEntry).map(([k, v]) => ({key: k, value: v})).map(entry => ({
 *         key: entry.value.key,
 *         value: entry.value.value,
 *         type: entry.value.type,
 *         isSystem: entry.value.is_system,
 *         userAccess: entry.value.user_access,
 *     })),
 *     org: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.org),
 *     catalogId: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.catalogId),
 *     name: "my-second-item",
 *     description: my_catalog.then(my_catalog => `Belongs to ${my_catalog.name}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 * });
 * ```
 *
 * ## Example: Fetching a vApp Template from a VDC
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_vdc = vcd.getOrgVdc({
 *     org: "my-org",
 *     name: "my-vdc",
 * });
 * const my_first_vapp_template = my_vdc.then(my_vdc => vcd.getCatalogVappTemplate({
 *     org: "my-org",
 *     vdcId: my_vdc.id,
 *     name: "my-first-vapp-template",
 * }));
 * const my_second_vappTemplate = new vcd.CatalogVappTemplate("my-second-vapp_template", {
 *     metadataEntries: Object.entries(photon.metadataEntry).map(([k, v]) => ({key: k, value: v})).map(entry => ({
 *         key: entry.value.key,
 *         value: entry.value.value,
 *         type: entry.value.type,
 *         isSystem: entry.value.is_system,
 *         userAccess: entry.value.user_access,
 *     })),
 *     org: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.org),
 *     catalogId: my_first_vapp_template.then(my_first_vapp_template => my_first_vapp_template.catalogId),
 *     name: "my-second-item",
 *     description: my_vdc.then(my_vdc => `Belongs to ${my_vdc.name}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 * });
 * ```
 *
 * ## Filter arguments
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` - (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getCatalogVappTemplateOutput(args?: GetCatalogVappTemplateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCatalogVappTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getCatalogVappTemplate:getCatalogVappTemplate", {
        "catalogId": args.catalogId,
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogVappTemplate.
 */
export interface GetCatalogVappTemplateOutputArgs {
    /**
     * ID of the catalog containing the vApp Template. Can't be used if a specific VDC identifier is set (`vdcId`).
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: pulumi.Input<inputs.GetCatalogVappTemplateFilterArgs>;
    /**
     * vApp Template name (optional when `filter` is used)
     */
    name?: pulumi.Input<string>;
    /**
     * Org name
     */
    org?: pulumi.Input<string>;
    /**
     * ID of the VDC to which the vApp Template belongs. Can't be used if a specific Catalog is set (`catalogId`).
     */
    vdcId?: pulumi.Input<string>;
}
