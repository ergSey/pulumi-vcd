// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * > If you only need vApp Template features, you may use [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
 *
 * Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_first_item = vcd.getCatalogItem({
 *     org: "my-org",
 *     catalog: "my-cat",
 *     name: "my-first-item",
 * });
 * const my_second_item = new vcd.CatalogItem("my-second-item", {
 *     org: my_first_item.then(my_first_item => my_first_item.org),
 *     catalog: my_first_item.then(my_first_item => my_first_item.catalog),
 *     name: "my-second-item",
 *     description: my_first_item.then(my_first_item => `Belongs to ${my_first_item.catalog}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 *     metadata: my_first_item.then(my_first_item => my_first_item.metadata),
 * });
 * ```
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 *
 * ## Filter arguments
 *
 * (Supported in provider *v2.9+*)
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` - (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getCatalogItem(args: GetCatalogItemArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalogItemResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getCatalogItem:getCatalogItem", {
        "catalog": args.catalog,
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogItem.
 */
export interface GetCatalogItemArgs {
    /**
     * Catalog name
     */
    catalog: string;
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: inputs.GetCatalogItemFilter;
    /**
     * Catalog Item name (optional when `filter` is used)
     */
    name?: string;
    /**
     * Org name
     */
    org?: string;
}

/**
 * A collection of values returned by getCatalogItem.
 */
export interface GetCatalogItemResult {
    readonly catalog: string;
    /**
     * (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to the catalog item.
     */
    readonly catalogItemMetadata: {[key: string]: string};
    readonly created: string;
    /**
     * Catalog item description.
     */
    readonly description: string;
    readonly filter?: outputs.GetCatalogItemFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Key value map of metadata assigned to the associated vApp template.
     *
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    /**
     * A set of metadata entries assigned to the catalog item. See Metadata section for details.
     */
    readonly metadataEntries: outputs.GetCatalogItemMetadataEntry[];
    readonly name?: string;
    readonly org?: string;
}
/**
 * > If you only need vApp Template features, you may use [`vcd.CatalogVappTemplate`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/catalog_vapp_template) instead.
 *
 * Provides a VMware Cloud Director Catalog item data source. A Catalog item can be used to reference a catalog item and use its
 * data within other resources or data sources.
 *
 * Supported in provider *v2.5+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_first_item = vcd.getCatalogItem({
 *     org: "my-org",
 *     catalog: "my-cat",
 *     name: "my-first-item",
 * });
 * const my_second_item = new vcd.CatalogItem("my-second-item", {
 *     org: my_first_item.then(my_first_item => my_first_item.org),
 *     catalog: my_first_item.then(my_first_item => my_first_item.catalog),
 *     name: "my-second-item",
 *     description: my_first_item.then(my_first_item => `Belongs to ${my_first_item.catalog}`),
 *     ovaPath: "/path/to/test_vapp_template.ova",
 *     uploadPieceSize: 5,
 *     metadata: my_first_item.then(my_first_item => my_first_item.metadata),
 * });
 * ```
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 *
 * ## Filter arguments
 *
 * (Supported in provider *v2.9+*)
 *
 * * `nameRegex` - (Optional) matches the name using a regular expression.
 * * `date` - (Optional) is an expression starting with an operator (`>`, `<`, `>=`, `<=`, `==`), followed by a date, with
 *   optional spaces in between. For example: `> 2020-02-01 12:35:00.523Z`
 *   The filter recognizes several formats, but one of `yyyy-mm-dd [hh:mm[:ss[.nnnZ]]]` or `dd-MMM-yyyy [hh:mm[:ss[.nnnZ]]]`
 *   is recommended.
 *   Comparison with equality operator (`==`) need to define the date to the microseconds.
 * * `latest` - (Optional) If `true`, retrieve the latest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the newest item.
 * * `earliest` - (Optional) If `true`, retrieve the earliest item among the ones matching other parameters. If no other parameters
 *   are set, it retrieves the oldest item.
 * * `metadata` - (Optional) One or more parameters that will match metadata contents.
 *
 * See [Filters reference](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/data_source_filters) for details and examples.
 */
export function getCatalogItemOutput(args: GetCatalogItemOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCatalogItemResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getCatalogItem:getCatalogItem", {
        "catalog": args.catalog,
        "filter": args.filter,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogItem.
 */
export interface GetCatalogItemOutputArgs {
    /**
     * Catalog name
     */
    catalog: pulumi.Input<string>;
    /**
     * Retrieves the data source using one or more filter parameters
     */
    filter?: pulumi.Input<inputs.GetCatalogItemFilterArgs>;
    /**
     * Catalog Item name (optional when `filter` is used)
     */
    name?: pulumi.Input<string>;
    /**
     * Org name
     */
    org?: pulumi.Input<string>;
}
