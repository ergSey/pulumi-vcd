// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.
 *
 * Supported in provider *v3.12+*
 *
 * Supports the following **Container Service Extension** versions:
 *
 * * 4.1.0
 * * 4.1.1 / 4.1.1a
 * * 4.2.0
 * * 4.2.1
 * * 4.2.2
 * * 4.2.3
 *
 * > To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)
 *
 * ## Example Usage
 *
 * ### With ID
 *
 * The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
 * the desired cluster and obtaining the ID from the displayed information.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const myCluster = vcd.getCseKubernetesCluster({
 *     clusterId: "urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865",
 * });
 * ```
 */
export function getCseKubernetesCluster(args?: GetCseKubernetesClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetCseKubernetesClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getCseKubernetesCluster:getCseKubernetesCluster", {
        "clusterId": args.clusterId,
        "cseVersion": args.cseVersion,
        "name": args.name,
        "orgId": args.orgId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCseKubernetesCluster.
 */
export interface GetCseKubernetesClusterArgs {
    /**
     * Unequivocally identifies a cluster in VCD. Either `clusterId` or `name` must be set.
     */
    clusterId?: string;
    /**
     * Specifies the CSE Version of the cluster to find when `name` is used instead of `clusterId`.
     */
    cseVersion?: string;
    /**
     * Allows to find a Kubernetes cluster by name inside the given Organization with ID `orgId`. Either `clusterId` or `name` must be set. This argument requires `cseVersion` and `orgId` to be set.
     */
    name?: string;
    /**
     * The ID of the Organization to which the Kubernetes cluster belongs. Only used if `clusterId` is not set. Must be present if `name` is used.
     */
    orgId?: string;
}

/**
 * A collection of values returned by getCseKubernetesCluster.
 */
export interface GetCseKubernetesClusterResult {
    readonly autoRepairOnErrors: boolean;
    readonly capvcdVersion: string;
    readonly clusterId?: string;
    readonly clusterResourceSetBindings: string[];
    readonly controlPlanes: outputs.GetCseKubernetesClusterControlPlane[];
    readonly cpiVersion: string;
    readonly cseVersion?: string;
    readonly csiVersion: string;
    readonly defaultStorageClasses: outputs.GetCseKubernetesClusterDefaultStorageClass[];
    readonly events: outputs.GetCseKubernetesClusterEvent[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kubeconfig: string;
    readonly kubernetesTemplateId: string;
    readonly kubernetesVersion: string;
    readonly name?: string;
    readonly networkId: string;
    readonly nodeHealthCheck: boolean;
    readonly orgId?: string;
    readonly owner: string;
    readonly podsCidr: string;
    readonly runtime: string;
    readonly servicesCidr: string;
    readonly sshPublicKey: string;
    readonly state: string;
    readonly supportedUpgrades: string[];
    readonly tkgProductVersion: string;
    readonly vdcId: string;
    readonly virtualIpSubnet: string;
    readonly workerPools: outputs.GetCseKubernetesClusterWorkerPool[];
}
/**
 * Provides a data source to read Kubernetes clusters in VMware Cloud Director with Container Service Extension (CSE) installed and running.
 *
 * Supported in provider *v3.12+*
 *
 * Supports the following **Container Service Extension** versions:
 *
 * * 4.1.0
 * * 4.1.1 / 4.1.1a
 * * 4.2.0
 * * 4.2.1
 * * 4.2.2
 * * 4.2.3
 *
 * > To install CSE in VMware Cloud Director, please follow [this guide](https://www.terraform.io/providers/vmware/vcd/latest/docs/guides/container_service_extension_4_x_install)
 *
 * ## Example Usage
 *
 * ### With ID
 *
 * The cluster ID identifies unequivocally the cluster within VCD, and can be obtained with the CSE Kubernetes Clusters UI Plugin, by selecting
 * the desired cluster and obtaining the ID from the displayed information.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const myCluster = vcd.getCseKubernetesCluster({
 *     clusterId: "urn:vcloud:entity:vmware:capvcdCluster:e8e82bcc-50a1-484f-9dd0-20965ab3e865",
 * });
 * ```
 */
export function getCseKubernetesClusterOutput(args?: GetCseKubernetesClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCseKubernetesClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getCseKubernetesCluster:getCseKubernetesCluster", {
        "clusterId": args.clusterId,
        "cseVersion": args.cseVersion,
        "name": args.name,
        "orgId": args.orgId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCseKubernetesCluster.
 */
export interface GetCseKubernetesClusterOutputArgs {
    /**
     * Unequivocally identifies a cluster in VCD. Either `clusterId` or `name` must be set.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies the CSE Version of the cluster to find when `name` is used instead of `clusterId`.
     */
    cseVersion?: pulumi.Input<string>;
    /**
     * Allows to find a Kubernetes cluster by name inside the given Organization with ID `orgId`. Either `clusterId` or `name` must be set. This argument requires `cseVersion` and `orgId` to be set.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Organization to which the Kubernetes cluster belongs. Only used if `clusterId` is not set. Must be present if `name` is used.
     */
    orgId?: pulumi.Input<string>;
}
