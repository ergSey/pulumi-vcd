// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
 * (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
 *
 * IP Spaces require VCD 10.4.1+ with NSX-T.
 *
 * ## Example Usage
 *
 * ### IP Space IP Prefix Allocation)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const ip_prefix = vcd.getIpSpaceIpAllocation({
 *     orgId: org1.id,
 *     ipSpaceId: space1.id,
 *     type: "IP_PREFIX",
 *     ipAddress: "192.168.1.1/24",
 * });
 * ```
 *
 * ### IP Space Floating IP Allocation)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const floating_ip = vcd.getIpSpaceIpAllocation({
 *     orgId: org1.id,
 *     ipSpaceId: space1.id,
 *     type: "FLOATING_IP",
 *     ipAddress: "192.168.1.1",
 * });
 * ```
 */
export function getIpSpaceIpAllocation(args: GetIpSpaceIpAllocationArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSpaceIpAllocationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", {
        "description": args.description,
        "ipAddress": args.ipAddress,
        "ipSpaceId": args.ipSpaceId,
        "orgId": args.orgId,
        "type": args.type,
        "usageState": args.usageState,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationArgs {
    description?: string;
    /**
     * IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
     */
    ipAddress: string;
    /**
     * Parent IP Space ID of IP Allocation
     */
    ipSpaceId: string;
    /**
     * Parent Org ID of IP Allocation
     */
    orgId: string;
    /**
     * Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
     */
    type: string;
    usageState?: string;
}

/**
 * A collection of values returned by getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationResult {
    readonly allocationDate: string;
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ip: string;
    readonly ipAddress: string;
    readonly ipSpaceId: string;
    readonly orgId: string;
    readonly prefixLength: string;
    readonly type: string;
    readonly usageState: string;
    readonly usedById: string;
}
/**
 * Provides a data source to read IP Allocations within IP Spaces. It supports both - Floating IPs
 * (IPs from IP Ranges) and IP Prefix (subnet) allocations with manual and automatic reservations.
 *
 * IP Spaces require VCD 10.4.1+ with NSX-T.
 *
 * ## Example Usage
 *
 * ### IP Space IP Prefix Allocation)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const ip_prefix = vcd.getIpSpaceIpAllocation({
 *     orgId: org1.id,
 *     ipSpaceId: space1.id,
 *     type: "IP_PREFIX",
 *     ipAddress: "192.168.1.1/24",
 * });
 * ```
 *
 * ### IP Space Floating IP Allocation)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const floating_ip = vcd.getIpSpaceIpAllocation({
 *     orgId: org1.id,
 *     ipSpaceId: space1.id,
 *     type: "FLOATING_IP",
 *     ipAddress: "192.168.1.1",
 * });
 * ```
 */
export function getIpSpaceIpAllocationOutput(args: GetIpSpaceIpAllocationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIpSpaceIpAllocationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", {
        "description": args.description,
        "ipAddress": args.ipAddress,
        "ipSpaceId": args.ipSpaceId,
        "orgId": args.orgId,
        "type": args.type,
        "usageState": args.usageState,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationOutputArgs {
    description?: pulumi.Input<string>;
    /**
     * IP Address or CIDR of IP allocation (e.g. "192.168.1.1/24", "192.168.1.1")
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Parent IP Space ID of IP Allocation
     */
    ipSpaceId: pulumi.Input<string>;
    /**
     * Parent Org ID of IP Allocation
     */
    orgId: pulumi.Input<string>;
    /**
     * Type of IP Allocation. One of `FLOATING_IP` or `IP_PREFIX`
     */
    type: pulumi.Input<string>;
    usageState?: pulumi.Input<string>;
}
