// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OrgGroup extends pulumi.CustomResource {
    /**
     * Get an existing OrgGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgGroupState, opts?: pulumi.CustomResourceOptions): OrgGroup {
        return new OrgGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/orgGroup:OrgGroup';

    /**
     * Returns true if the given object is an instance of OrgGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgGroup.__pulumiType;
    }

    /**
     * The description of Organization group
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A unique name for the group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Identity provider type for this this group. One of `SAML`, `OAUTH` or
     * `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
     * match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * The role of the group. Role names can be retrieved from the organization. Both built-in roles and
     * custom built can be used. The roles normally available are:
     * * `Organization Administrator`
     * * `Catalog Author`
     * * `vApp Author`
     * * `vApp User`
     * * `Console Access Only`
     * * `Defer to Identity Provider`
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The set of user names that belong to this group. It's only populated if the users
     * are created after the group (with `dependsOn` the given group).
     */
    public /*out*/ readonly userNames!: pulumi.Output<string[]>;

    /**
     * Create a OrgGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgGroupArgs | OrgGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["userNames"] = state ? state.userNames : undefined;
        } else {
            const args = argsOrState as OrgGroupArgs | undefined;
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["userNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgGroup resources.
 */
export interface OrgGroupState {
    /**
     * The description of Organization group
     */
    description?: pulumi.Input<string>;
    /**
     * A unique name for the group.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * Identity provider type for this this group. One of `SAML`, `OAUTH` or
     * `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
     * match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
     */
    providerType?: pulumi.Input<string>;
    /**
     * The role of the group. Role names can be retrieved from the organization. Both built-in roles and
     * custom built can be used. The roles normally available are:
     * * `Organization Administrator`
     * * `Catalog Author`
     * * `vApp Author`
     * * `vApp User`
     * * `Console Access Only`
     * * `Defer to Identity Provider`
     */
    role?: pulumi.Input<string>;
    /**
     * The set of user names that belong to this group. It's only populated if the users
     * are created after the group (with `dependsOn` the given group).
     */
    userNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OrgGroup resource.
 */
export interface OrgGroupArgs {
    /**
     * The description of Organization group
     */
    description?: pulumi.Input<string>;
    /**
     * A unique name for the group.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to which the VDC belongs. Optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * Identity provider type for this this group. One of `SAML`, `OAUTH` or
     * `INTEGRATED`. **Note** `LDAP` must be configured to create `INTEGRATED` groups and names must
     * match `LDAP` group names. If LDAP is not configured - it will return 403 errors.
     */
    providerType: pulumi.Input<string>;
    /**
     * The role of the group. Role names can be retrieved from the organization. Both built-in roles and
     * custom built can be used. The roles normally available are:
     * * `Organization Administrator`
     * * `Catalog Author`
     * * `vApp Author`
     * * `vApp User`
     * * `Console Access Only`
     * * `Defer to Identity Provider`
     */
    role: pulumi.Input<string>;
}
