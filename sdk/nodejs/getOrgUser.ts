// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director Org User data source. This can be used to read organization users, including org administrators.
 *
 * Supported in provider *v3.0+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_org_admin = vcd.getOrgUser({
 *     org: "my-org",
 *     name: "my-org-admin",
 * });
 * const my_vapp_creator = vcd.getOrgUser({
 *     org: "my-org",
 *     userId: "urn:vcloud:user:c311eb35-6984-4d26-3ee9-0000deadbeef",
 * });
 * export const adminUser = my_org_admin;
 * export const vappCreatorUser = my_vapp_creator;
 * ```
 */
export function getOrgUser(args?: GetOrgUserArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgUserResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getOrgUser:getOrgUser", {
        "name": args.name,
        "org": args.org,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrgUser.
 */
export interface GetOrgUserArgs {
    /**
     * The name of the user. Required if `userId` is not set.
     */
    name?: string;
    /**
     * The name of organization to which the user belongs. Optional if defined at provider level.
     */
    org?: string;
    /**
     * The ID of the user. Required if `name` is not set.
     */
    userId?: string;
}

/**
 * A collection of values returned by getOrgUser.
 */
export interface GetOrgUserResult {
    /**
     * Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
     */
    readonly deployedVmQuota: number;
    /**
     * An optional description of the user.
     */
    readonly description: string;
    /**
     * The Org User email address.
     */
    readonly emailAddress: string;
    /**
     * True if the user is enabled and can log in.
     */
    readonly enabled: boolean;
    /**
     * The full name of the user.
     */
    readonly fullName: string;
    /**
     * The set of group names to which this user belongs. It's only populated if the users
     * are created after the group (with this user having a `dependsOn` of the given group).
     */
    readonly groupNames: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Org User instant messaging.
     */
    readonly instantMessaging: string;
    /**
     * If the user account was imported from an external resource, like an LDAP.
     */
    readonly isExternal: boolean;
    /**
     * True if this user has a group role.
     */
    readonly isGroupRole: boolean;
    /**
     * If the user account has been locked due to too many invalid login attempts, the value will be true.
     */
    readonly isLocked: boolean;
    readonly name?: string;
    readonly org?: string;
    /**
     * Identity provider type for this user.
     */
    readonly providerType: string;
    /**
     * The role of the user.
     */
    readonly role: string;
    /**
     * Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
     */
    readonly storedVmQuota: number;
    /**
     * The Org User telephone number.
     */
    readonly telephone: string;
    readonly userId?: string;
}
/**
 * Provides a VMware Cloud Director Org User data source. This can be used to read organization users, including org administrators.
 *
 * Supported in provider *v3.0+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_org_admin = vcd.getOrgUser({
 *     org: "my-org",
 *     name: "my-org-admin",
 * });
 * const my_vapp_creator = vcd.getOrgUser({
 *     org: "my-org",
 *     userId: "urn:vcloud:user:c311eb35-6984-4d26-3ee9-0000deadbeef",
 * });
 * export const adminUser = my_org_admin;
 * export const vappCreatorUser = my_vapp_creator;
 * ```
 */
export function getOrgUserOutput(args?: GetOrgUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrgUserResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getOrgUser:getOrgUser", {
        "name": args.name,
        "org": args.org,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrgUser.
 */
export interface GetOrgUserOutputArgs {
    /**
     * The name of the user. Required if `userId` is not set.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to which the user belongs. Optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * The ID of the user. Required if `name` is not set.
     */
    userId?: pulumi.Input<string>;
}
