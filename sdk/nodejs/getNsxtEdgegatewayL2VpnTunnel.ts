// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
 *
 * Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
 *
 * ## Example Usage
 *
 * ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const existing = vcd.getOrgVdc({
 *     name: "existing-vdc",
 * });
 * const server_testing = existing.then(existing => vcd.getNsxtEdgegateway({
 *     ownerId: existing.id,
 *     name: "server-testing",
 * }));
 * const client_testing = existing.then(existing => vcd.getNsxtEdgegateway({
 *     ownerId: existing.id,
 *     name: "client-testing",
 * }));
 * const server_session = server_testing.then(server_testing => vcd.getNsxtEdgegatewayL2VpnTunnel({
 *     org: "datacloud",
 *     edgeGatewayId: server_testing.id,
 *     name: "server-session",
 * }));
 * const client_session = new vcd.NsxtEdgegatewayL2VpnTunnel("client-session", {
 *     org: "datacloud",
 *     edgeGatewayId: client_testing.then(client_testing => client_testing.id),
 *     sessionMode: "CLIENT",
 *     enabled: true,
 *     localEndpointIp: "101.22.30.3",
 *     remoteEndpointIp: "1.2.2.3",
 *     peerCode: server_session.then(server_session => server_session.peerCode),
 * });
 * ```
 */
export function getNsxtEdgegatewayL2VpnTunnel(args: GetNsxtEdgegatewayL2VpnTunnelArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtEdgegatewayL2VpnTunnelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", {
        "edgeGatewayId": args.edgeGatewayId,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayL2VpnTunnel.
 */
export interface GetNsxtEdgegatewayL2VpnTunnelArgs {
    /**
     * The ID of the Edge Gateway (NSX-T only). 
     * Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId: string;
    /**
     * The name of the tunnel.
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at 
     * provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
}

/**
 * A collection of values returned by getNsxtEdgegatewayL2VpnTunnel.
 */
export interface GetNsxtEdgegatewayL2VpnTunnelResult {
    readonly connectorInitiationMode: string;
    readonly description: string;
    readonly edgeGatewayId: string;
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly localEndpointIp: string;
    readonly name: string;
    readonly org?: string;
    readonly peerCode: string;
    readonly preSharedKey: string;
    readonly remoteEndpointIp: string;
    readonly sessionMode: string;
    readonly stretchedNetworks: outputs.GetNsxtEdgegatewayL2VpnTunnelStretchedNetwork[];
    readonly tunnelInterface: string;
}
/**
 * Supported in provider *v3.11+* and VCD *10.4+* with NSX-T.
 *
 * Provides a data source to read NSX-T Edge Gateway L2 VPN Tunnel sessions and their configurations.
 *
 * ## Example Usage
 *
 * ### Reading A Tunnel's Server Session To Get The Peer Code For The Client Session)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const existing = vcd.getOrgVdc({
 *     name: "existing-vdc",
 * });
 * const server_testing = existing.then(existing => vcd.getNsxtEdgegateway({
 *     ownerId: existing.id,
 *     name: "server-testing",
 * }));
 * const client_testing = existing.then(existing => vcd.getNsxtEdgegateway({
 *     ownerId: existing.id,
 *     name: "client-testing",
 * }));
 * const server_session = server_testing.then(server_testing => vcd.getNsxtEdgegatewayL2VpnTunnel({
 *     org: "datacloud",
 *     edgeGatewayId: server_testing.id,
 *     name: "server-session",
 * }));
 * const client_session = new vcd.NsxtEdgegatewayL2VpnTunnel("client-session", {
 *     org: "datacloud",
 *     edgeGatewayId: client_testing.then(client_testing => client_testing.id),
 *     sessionMode: "CLIENT",
 *     enabled: true,
 *     localEndpointIp: "101.22.30.3",
 *     remoteEndpointIp: "1.2.2.3",
 *     peerCode: server_session.then(server_session => server_session.peerCode),
 * });
 * ```
 */
export function getNsxtEdgegatewayL2VpnTunnelOutput(args: GetNsxtEdgegatewayL2VpnTunnelOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtEdgegatewayL2VpnTunnelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtEdgegatewayL2VpnTunnel:getNsxtEdgegatewayL2VpnTunnel", {
        "edgeGatewayId": args.edgeGatewayId,
        "name": args.name,
        "org": args.org,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayL2VpnTunnel.
 */
export interface GetNsxtEdgegatewayL2VpnTunnelOutputArgs {
    /**
     * The ID of the Edge Gateway (NSX-T only). 
     * Can be looked up using [`vcd.NsxtEdgegateway`](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/nsxt_edgegateway) data source
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * The name of the tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at 
     * provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
}
