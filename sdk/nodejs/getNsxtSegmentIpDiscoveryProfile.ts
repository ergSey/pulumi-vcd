// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
 *
 * Supported in provider *v3.11+*.
 *
 * ## Example Usage
 *
 * ### IP Discovery Profile)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const nsxt = vcd.getNsxtManager({
 *     name: "nsxManager1",
 * });
 * const first = nsxt.then(nsxt => vcd.getNsxtSegmentIpDiscoveryProfile({
 *     name: "ip-discovery-profile-0",
 *     nsxtManagerId: nsxt.id,
 * }));
 * ```
 */
export function getNsxtSegmentIpDiscoveryProfile(args: GetNsxtSegmentIpDiscoveryProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtSegmentIpDiscoveryProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", {
        "name": args.name,
        "nsxtManagerId": args.nsxtManagerId,
        "vdcGroupId": args.vdcGroupId,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtSegmentIpDiscoveryProfile.
 */
export interface GetNsxtSegmentIpDiscoveryProfileArgs {
    /**
     * The name of Segment Profile
     */
    name: string;
    /**
     * Segment Profile search context. Use when searching by NSX-T manager
     */
    nsxtManagerId?: string;
    /**
     * Segment Profile search context. Use when searching by VDC group
     *
     * > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
     */
    vdcGroupId?: string;
    /**
     * Segment Profile search context. Use when searching by VDC
     */
    vdcId?: string;
}

/**
 * A collection of values returned by getNsxtSegmentIpDiscoveryProfile.
 */
export interface GetNsxtSegmentIpDiscoveryProfileResult {
    /**
     * Indicates the number of ARP snooped IP addresses to be remembered per
     * logical port
     */
    readonly arpBindingLimit: number;
    /**
     * ARP and ND (Neighbor Discovery) cache timeout (in minutes)
     */
    readonly arpBindingTimeout: number;
    /**
     * Description of IP Discovery Profile
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Defines whether ARP snooping is enabled
     */
    readonly isArpSnoopingEnabled: boolean;
    /**
     * Defines whether DHCP snooping for IPv4 is enabled
     */
    readonly isDhcpSnoopingV4Enabled: boolean;
    /**
     * Defines whether DHCP snooping for IPv6 is enabled
     */
    readonly isDhcpSnoopingV6Enabled: boolean;
    /**
     * Defines whether duplicate IP detection is enabled. Duplicate
     * IP detection is used to determine if there is any IP conflict with any other port on the same
     * logical switch. If a conflict is detected, then the IP is marked as a duplicate on the port where
     * the IP was discovered last
     */
    readonly isDuplicateIpDetectionEnabled: boolean;
    /**
     * Defines whether ND (Neighbor Discovery) snooping is enabled. If true,
     * this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in
     * the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS
     * messages, we will learn about the source which sent this NS message. From the NA message, we will
     * learn the resolved address in the message which the VM is a recipient of. Addresses snooped by
     * this method are subject to TOFU
     */
    readonly isNdSnoopingEnabled: boolean;
    /**
     * Defines whether `Trust on First Use(TOFU)` paradigm is enabled
     */
    readonly isTofuEnabled: boolean;
    /**
     * Defines whether fetching IPv4 address using vm-tools is enabled. This
     * option is only supported on ESX where vm-tools is installed
     */
    readonly isVmtoolsV4Enabled: boolean;
    /**
     * Defines whether fetching IPv6 address using vm-tools is enabled. This
     * will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the
     * VMTools software
     */
    readonly isVmtoolsV6Enabled: boolean;
    readonly name: string;
    /**
     * Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses
     */
    readonly ndSnoopingLimit: number;
    readonly nsxtManagerId?: string;
    readonly vdcGroupId?: string;
    readonly vdcId?: string;
}
/**
 * Provides a VMware Cloud Director NSX-T IP Discovery Profile data source. This can be used to read NSX-T Segment Profile definitions.
 *
 * Supported in provider *v3.11+*.
 *
 * ## Example Usage
 *
 * ### IP Discovery Profile)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const nsxt = vcd.getNsxtManager({
 *     name: "nsxManager1",
 * });
 * const first = nsxt.then(nsxt => vcd.getNsxtSegmentIpDiscoveryProfile({
 *     name: "ip-discovery-profile-0",
 *     nsxtManagerId: nsxt.id,
 * }));
 * ```
 */
export function getNsxtSegmentIpDiscoveryProfileOutput(args: GetNsxtSegmentIpDiscoveryProfileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNsxtSegmentIpDiscoveryProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getNsxtSegmentIpDiscoveryProfile:getNsxtSegmentIpDiscoveryProfile", {
        "name": args.name,
        "nsxtManagerId": args.nsxtManagerId,
        "vdcGroupId": args.vdcGroupId,
        "vdcId": args.vdcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNsxtSegmentIpDiscoveryProfile.
 */
export interface GetNsxtSegmentIpDiscoveryProfileOutputArgs {
    /**
     * The name of Segment Profile
     */
    name: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by NSX-T manager
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by VDC group
     *
     * > Note: only one of `nsxtManagerId`, `vdcId`, `vdcGroupId` can be used
     */
    vdcGroupId?: pulumi.Input<string>;
    /**
     * Segment Profile search context. Use when searching by VDC
     */
    vdcId?: pulumi.Input<string>;
}
