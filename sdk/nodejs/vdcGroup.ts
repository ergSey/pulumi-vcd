// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class VdcGroup extends pulumi.CustomResource {
    /**
     * Get an existing VdcGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VdcGroupState, opts?: pulumi.CustomResourceOptions): VdcGroup {
        return new VdcGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vdcGroup:VdcGroup';

    /**
     * Returns true if the given object is an instance of VdcGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VdcGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VdcGroup.__pulumiType;
    }

    /**
     * Whether this security policy is enabled. `dfwEnabled` must be `true`.
     */
    public readonly defaultPolicyStatus!: pulumi.Output<boolean>;
    /**
     * VDC group description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether Distributed Firewall is enabled for this VDC group.
     */
    public readonly dfwEnabled!: pulumi.Output<boolean>;
    /**
     * More detailed error message when VDC group has error status
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * When `true`, will request VCD to force VDC Group deletion. It
     * should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
     * child components remaining). **Note:** when setting it to `true` for existing resource, it will
     * cause a plan change (update), but this will not alter the resource in any way.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Status whether local egress is enabled for a universal router belonging to a universal VDC group.
     */
    public /*out*/ readonly localEgress!: pulumi.Output<boolean>;
    /**
     * The name for VDC group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of used network pool.
     */
    public /*out*/ readonly networkPoolId!: pulumi.Output<string>;
    /**
     * The network providerâ€™s universal id that is backing the universal network pool.
     */
    public /*out*/ readonly networkPoolUniversalId!: pulumi.Output<string>;
    /**
     * Defines the networking provider backing the VDC group.
     */
    public /*out*/ readonly networkProviderType!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
     */
    public /*out*/ readonly participatingOrgVdcs!: pulumi.Output<outputs.VdcGroupParticipatingOrgVdc[]>;
    /**
     * The list of organization VDCs that are participating in this group. **Note**: `startingVdcId` isn't automatically included in this list.
     */
    public readonly participatingVdcIds!: pulumi.Output<string[]>;
    /**
     * Marks whether default firewall rule should be
     * removed after activating. Both `dfwEnabled` and `defaultPolicyStatus` must be true. **Note.**
     * This is mainly useful when using
     * [`vcd.NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
     * resource as it cannot remove the default rule.
     */
    public readonly removeDefaultFirewallRule!: pulumi.Output<boolean | undefined>;
    /**
     * With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `startingVdcId` must be included in `participatingVdcIds` to participate in this group.
     */
    public readonly startingVdcId!: pulumi.Output<string>;
    /**
     * The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Defines the group as LOCAL or UNIVERSAL.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * True means that a VDC group router has been created.
     */
    public /*out*/ readonly universalNetworkingEnabled!: pulumi.Output<boolean>;

    /**
     * Create a VdcGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VdcGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VdcGroupArgs | VdcGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VdcGroupState | undefined;
            resourceInputs["defaultPolicyStatus"] = state ? state.defaultPolicyStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dfwEnabled"] = state ? state.dfwEnabled : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["localEgress"] = state ? state.localEgress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPoolId"] = state ? state.networkPoolId : undefined;
            resourceInputs["networkPoolUniversalId"] = state ? state.networkPoolUniversalId : undefined;
            resourceInputs["networkProviderType"] = state ? state.networkProviderType : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["participatingOrgVdcs"] = state ? state.participatingOrgVdcs : undefined;
            resourceInputs["participatingVdcIds"] = state ? state.participatingVdcIds : undefined;
            resourceInputs["removeDefaultFirewallRule"] = state ? state.removeDefaultFirewallRule : undefined;
            resourceInputs["startingVdcId"] = state ? state.startingVdcId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["universalNetworkingEnabled"] = state ? state.universalNetworkingEnabled : undefined;
        } else {
            const args = argsOrState as VdcGroupArgs | undefined;
            if ((!args || args.participatingVdcIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'participatingVdcIds'");
            }
            if ((!args || args.startingVdcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startingVdcId'");
            }
            resourceInputs["defaultPolicyStatus"] = args ? args.defaultPolicyStatus : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dfwEnabled"] = args ? args.dfwEnabled : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["participatingVdcIds"] = args ? args.participatingVdcIds : undefined;
            resourceInputs["removeDefaultFirewallRule"] = args ? args.removeDefaultFirewallRule : undefined;
            resourceInputs["startingVdcId"] = args ? args.startingVdcId : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["localEgress"] = undefined /*out*/;
            resourceInputs["networkPoolId"] = undefined /*out*/;
            resourceInputs["networkPoolUniversalId"] = undefined /*out*/;
            resourceInputs["networkProviderType"] = undefined /*out*/;
            resourceInputs["participatingOrgVdcs"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["universalNetworkingEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VdcGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VdcGroup resources.
 */
export interface VdcGroupState {
    /**
     * Whether this security policy is enabled. `dfwEnabled` must be `true`.
     */
    defaultPolicyStatus?: pulumi.Input<boolean>;
    /**
     * VDC group description
     */
    description?: pulumi.Input<string>;
    /**
     * Whether Distributed Firewall is enabled for this VDC group.
     */
    dfwEnabled?: pulumi.Input<boolean>;
    /**
     * More detailed error message when VDC group has error status
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * When `true`, will request VCD to force VDC Group deletion. It
     * should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
     * child components remaining). **Note:** when setting it to `true` for existing resource, it will
     * cause a plan change (update), but this will not alter the resource in any way.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Status whether local egress is enabled for a universal router belonging to a universal VDC group.
     */
    localEgress?: pulumi.Input<boolean>;
    /**
     * The name for VDC group
     */
    name?: pulumi.Input<string>;
    /**
     * ID of used network pool.
     */
    networkPoolId?: pulumi.Input<string>;
    /**
     * The network providerâ€™s universal id that is backing the universal network pool.
     */
    networkPoolUniversalId?: pulumi.Input<string>;
    /**
     * Defines the networking provider backing the VDC group.
     */
    networkProviderType?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * A list of blocks providing organization VDCs that are participating in this group details. See Participating Org VDCs below for details.
     */
    participatingOrgVdcs?: pulumi.Input<pulumi.Input<inputs.VdcGroupParticipatingOrgVdc>[]>;
    /**
     * The list of organization VDCs that are participating in this group. **Note**: `startingVdcId` isn't automatically included in this list.
     */
    participatingVdcIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Marks whether default firewall rule should be
     * removed after activating. Both `dfwEnabled` and `defaultPolicyStatus` must be true. **Note.**
     * This is mainly useful when using
     * [`vcd.NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
     * resource as it cannot remove the default rule.
     */
    removeDefaultFirewallRule?: pulumi.Input<boolean>;
    /**
     * With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `startingVdcId` must be included in `participatingVdcIds` to participate in this group.
     */
    startingVdcId?: pulumi.Input<string>;
    /**
     * The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED').
     */
    status?: pulumi.Input<string>;
    /**
     * Defines the group as LOCAL or UNIVERSAL.
     */
    type?: pulumi.Input<string>;
    /**
     * True means that a VDC group router has been created.
     */
    universalNetworkingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VdcGroup resource.
 */
export interface VdcGroupArgs {
    /**
     * Whether this security policy is enabled. `dfwEnabled` must be `true`.
     */
    defaultPolicyStatus?: pulumi.Input<boolean>;
    /**
     * VDC group description
     */
    description?: pulumi.Input<string>;
    /**
     * Whether Distributed Firewall is enabled for this VDC group.
     */
    dfwEnabled?: pulumi.Input<boolean>;
    /**
     * When `true`, will request VCD to force VDC Group deletion. It
     * should clean up child components. Default `false` (VCD may fail removing VDC Group if there are
     * child components remaining). **Note:** when setting it to `true` for existing resource, it will
     * cause a plan change (update), but this will not alter the resource in any way.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The name for VDC group
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The list of organization VDCs that are participating in this group. **Note**: `startingVdcId` isn't automatically included in this list.
     */
    participatingVdcIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Marks whether default firewall rule should be
     * removed after activating. Both `dfwEnabled` and `defaultPolicyStatus` must be true. **Note.**
     * This is mainly useful when using
     * [`vcd.NsxtDistributedFirewallRule`](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/nsxt_distributed_firewall_rule)
     * resource as it cannot remove the default rule.
     */
    removeDefaultFirewallRule?: pulumi.Input<boolean>;
    /**
     * With selecting a starting VDC you will be able to create a group in which this VDC can participate. **Note**: `startingVdcId` must be included in `participatingVdcIds` to participate in this group.
     */
    startingVdcId: pulumi.Input<string>;
}
