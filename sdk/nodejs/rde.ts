// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class Rde extends pulumi.CustomResource {
    /**
     * Get an existing Rde resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdeState, opts?: pulumi.CustomResourceOptions): Rde {
        return new Rde(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/rde:Rde';

    /**
     * Returns true if the given object is an instance of Rde.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rde {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rde.__pulumiType;
    }

    /**
     * The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
     */
    public /*out*/ readonly computedEntity!: pulumi.Output<string>;
    /**
     * It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
     * meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
     */
    public /*out*/ readonly entityInSync!: pulumi.Output<boolean>;
    /**
     * An external input_entity's ID that this Runtime Defined Entity may have a relation to.
     */
    public readonly externalId!: pulumi.Output<string>;
    /**
     * A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
     */
    public readonly inputEntity!: pulumi.Output<string | undefined>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    public readonly inputEntityUrl!: pulumi.Output<string | undefined>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    public readonly metadataEntries!: pulumi.Output<outputs.RdeMetadataEntry[] | undefined>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
     */
    public /*out*/ readonly ownerUserId!: pulumi.Output<string>;
    /**
     * The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
     * updating to a **newer/lower** `version` of the **same** RDE Type.
     */
    public readonly rdeTypeId!: pulumi.Output<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
     * resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
     * deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
     */
    public readonly resolve!: pulumi.Output<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
     */
    public readonly resolveOnRemoval!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
     * If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
     * otherwise it will be `RESOLUTION_ERROR`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Rde resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdeArgs | RdeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdeState | undefined;
            resourceInputs["computedEntity"] = state ? state.computedEntity : undefined;
            resourceInputs["entityInSync"] = state ? state.entityInSync : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["inputEntity"] = state ? state.inputEntity : undefined;
            resourceInputs["inputEntityUrl"] = state ? state.inputEntityUrl : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["ownerUserId"] = state ? state.ownerUserId : undefined;
            resourceInputs["rdeTypeId"] = state ? state.rdeTypeId : undefined;
            resourceInputs["resolve"] = state ? state.resolve : undefined;
            resourceInputs["resolveOnRemoval"] = state ? state.resolveOnRemoval : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as RdeArgs | undefined;
            if ((!args || args.rdeTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdeTypeId'");
            }
            if ((!args || args.resolve === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolve'");
            }
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["inputEntity"] = args ? args.inputEntity : undefined;
            resourceInputs["inputEntityUrl"] = args ? args.inputEntityUrl : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["rdeTypeId"] = args ? args.rdeTypeId : undefined;
            resourceInputs["resolve"] = args ? args.resolve : undefined;
            resourceInputs["resolveOnRemoval"] = args ? args.resolveOnRemoval : undefined;
            resourceInputs["computedEntity"] = undefined /*out*/;
            resourceInputs["entityInSync"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["ownerUserId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rde.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rde resources.
 */
export interface RdeState {
    /**
     * The real state of this RDE in VCD. See Input entity vs Computed entity below for details.
     */
    computedEntity?: pulumi.Input<string>;
    /**
     * It's `true` when `computedEntity` is equal to either `inputEntity` or the contents of `inputEntityUrl`,
     * meaning that the computed RDE retrieved from VCD is synchronized with the input RDE.
     */
    entityInSync?: pulumi.Input<boolean>;
    /**
     * An external input_entity's ID that this Runtime Defined Entity may have a relation to.
     */
    externalId?: pulumi.Input<string>;
    /**
     * A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
     */
    inputEntity?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    inputEntityUrl?: pulumi.Input<string>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.RdeMetadataEntry>[]>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * The ID of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) to which the Runtime Defined Entity belongs.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the [Organization user](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org_user) that owns this Runtime Defined Entity.
     */
    ownerUserId?: pulumi.Input<string>;
    /**
     * The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
     * updating to a **newer/lower** `version` of the **same** RDE Type.
     */
    rdeTypeId?: pulumi.Input<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
     * resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
     * deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
     */
    resolve?: pulumi.Input<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
     */
    resolveOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the entity is correctly resolved or not. When created it will be in `PRE_CREATED` state.
     * If the entity is correctly validated against its [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/rde_type) schema, the state will be `RESOLVED`,
     * otherwise it will be `RESOLUTION_ERROR`.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rde resource.
 */
export interface RdeArgs {
    /**
     * An external input_entity's ID that this Runtime Defined Entity may have a relation to.
     */
    externalId?: pulumi.Input<string>;
    /**
     * A string that specifies a valid JSON for the RDE. It can be retrieved with functions such as `file`, `templatefile`... Either `inputEntity` or `inputEntityUrl` is required.
     */
    inputEntity?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    inputEntityUrl?: pulumi.Input<string>;
    /**
     * A set of metadata entries to assign. See Metadata section for details.
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.RdeMetadataEntry>[]>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the [Organization](https://www.terraform.io/providers/vmware/vcd/latest/docs/resources/org) that will own the RDE, optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * The ID of the [RDE Type](https://www.terraform.io/providers/vmware/vcd/latest/docs/data-sources/rde_type) to instantiate. It only supports
     * updating to a **newer/lower** `version` of the **same** RDE Type.
     */
    rdeTypeId: pulumi.Input<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't be
     * resolved and must be done either by an external component action or by an update. The Runtime Defined Entity can't be
     * deleted until the inputEntity is resolved by either party, unless `resolve_on_removal=true`. See RDE resolution for more details.
     */
    resolve: pulumi.Input<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion. Destroy will fail if it is not resolved. It is `false` by default.
     */
    resolveOnRemoval?: pulumi.Input<boolean>;
}
