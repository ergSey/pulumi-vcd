// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
 * internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests.
 *
 * > **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
 * This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&29=&93=)
 * to check supported VMware Cloud Director and NSX for vSphere configurations.
 *
 * > **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere
 * API Guide. The API supports NSX 6.2, 6.3, and 6.4.
 *
 * Supported in provider *v2.4+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_vs = vcd.getLbVirtualServer({
 *     org: "my-org",
 *     vdc: "my-org-vdc",
 *     edgeGateway: "my-edge-gw",
 *     name: "not-managed",
 * });
 * ```
 */
export function getLbVirtualServer(args: GetLbVirtualServerArgs, opts?: pulumi.InvokeOptions): Promise<GetLbVirtualServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getLbVirtualServer:getLbVirtualServer", {
        "edgeGateway": args.edgeGateway,
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getLbVirtualServer.
 */
export interface GetLbVirtualServerArgs {
    /**
     * The name of the edge gateway on which the virtual server is defined
     */
    edgeGateway: string;
    /**
     * Name for identifying the exact virtual server
     */
    name: string;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: string;
}

/**
 * A collection of values returned by getLbVirtualServer.
 */
export interface GetLbVirtualServerResult {
    readonly appProfileId: string;
    readonly appRuleIds: string[];
    readonly connectionLimit: number;
    readonly connectionRateLimit: number;
    readonly description: string;
    readonly edgeGateway: string;
    readonly enableAcceleration: boolean;
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly name: string;
    readonly org?: string;
    readonly port: number;
    readonly protocol: string;
    readonly serverPoolId: string;
    readonly vdc?: string;
}
/**
 * Provides a VMware Cloud Director edge gateway load balancer virtual server data source. Adds an edge gateway
 * internal or uplink interface as a virtual server. A virtual server has a public IP address and services all incoming client requests.
 *
 * > **Note:** To make load balancing work one must ensure that load balancing is enabled on edge gateway (edge gateway must be advanced).
 * This depends on NSX version to work properly. Please refer to [VMware Product Interoperability Matrices](https://www.vmware.com/resources/compatibility/sim/interop_matrix.php#interop&29=&93=)
 * to check supported VMware Cloud Director and NSX for vSphere configurations.
 *
 * > **Note:** The VMware Cloud Director API for NSX supports a subset of the operations and objects defined in the NSX vSphere
 * API Guide. The API supports NSX 6.2, 6.3, and 6.4.
 *
 * Supported in provider *v2.4+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const my_vs = vcd.getLbVirtualServer({
 *     org: "my-org",
 *     vdc: "my-org-vdc",
 *     edgeGateway: "my-edge-gw",
 *     name: "not-managed",
 * });
 * ```
 */
export function getLbVirtualServerOutput(args: GetLbVirtualServerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLbVirtualServerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getLbVirtualServer:getLbVirtualServer", {
        "edgeGateway": args.edgeGateway,
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getLbVirtualServer.
 */
export interface GetLbVirtualServerOutputArgs {
    /**
     * The name of the edge gateway on which the virtual server is defined
     */
    edgeGateway: pulumi.Input<string>;
    /**
     * Name for identifying the exact virtual server
     */
    name: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
