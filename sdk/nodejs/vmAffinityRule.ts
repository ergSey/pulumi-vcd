// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmAffinityRule extends pulumi.CustomResource {
    /**
     * Get an existing VmAffinityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmAffinityRuleState, opts?: pulumi.CustomResourceOptions): VmAffinityRule {
        return new VmAffinityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vmAffinityRule:VmAffinityRule';

    /**
     * Returns true if the given object is an instance of VmAffinityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmAffinityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmAffinityRule.__pulumiType;
    }

    /**
     * True if this affinity rule is enabled. The default is `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
     * the rule (as data source or when importing) only if it is unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
     * need to change polarity, we need to remove the rule and create a new one.
     */
    public readonly polarity!: pulumi.Output<string>;
    /**
     * True if this affinity rule is required. When a rule is mandatory, a host failover will not 
     * power on the VM if doing so would violate the rule. The default is `true`
     */
    public readonly required!: pulumi.Output<boolean | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
     */
    public readonly vmIds!: pulumi.Output<string[]>;

    /**
     * Create a VmAffinityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmAffinityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmAffinityRuleArgs | VmAffinityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmAffinityRuleState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["polarity"] = state ? state.polarity : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmIds"] = state ? state.vmIds : undefined;
        } else {
            const args = argsOrState as VmAffinityRuleArgs | undefined;
            if ((!args || args.polarity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'polarity'");
            }
            if ((!args || args.vmIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmIds'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["polarity"] = args ? args.polarity : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["vmIds"] = args ? args.vmIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmAffinityRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmAffinityRule resources.
 */
export interface VmAffinityRuleState {
    /**
     * True if this affinity rule is enabled. The default is `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
     * the rule (as data source or when importing) only if it is unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
     * need to change polarity, we need to remove the rule and create a new one.
     */
    polarity?: pulumi.Input<string>;
    /**
     * True if this affinity rule is required. When a rule is mandatory, a host failover will not 
     * power on the VM if doing so would violate the rule. The default is `true`
     */
    required?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
     */
    vmIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VmAffinityRule resource.
 */
export interface VmAffinityRuleArgs {
    /**
     * True if this affinity rule is enabled. The default is `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of VM affinity rule. Duplicates are allowed, although the name can be used to retrieve
     * the rule (as data source or when importing) only if it is unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * One of `Affinity` or `Anti-Affinity`. This property cannot be changed. Once created, if we
     * need to change polarity, we need to remove the rule and create a new one.
     */
    polarity: pulumi.Input<string>;
    /**
     * True if this affinity rule is required. When a rule is mandatory, a host failover will not 
     * power on the VM if doing so would violate the rule. The default is `true`
     */
    required?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * A set of virtual machine IDs that compose this rule. At least 2 IDs must be provided.
     */
    vmIds: pulumi.Input<pulumi.Input<string>[]>;
}
