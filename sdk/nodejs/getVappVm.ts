// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
 *
 * Supported in provider *v2.6+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const web = vcd.getVapp({
 *     name: "web",
 * });
 * const web1 = web.then(web => vcd.getVappVm({
 *     vappName: web.name,
 *     name: "web1",
 * }));
 * export const vmId = id;
 * export const vm = web1;
 * ```
 *
 * Sample output:
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getVappVm(args: GetVappVmArgs, opts?: pulumi.InvokeOptions): Promise<GetVappVmResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVappVm:getVappVm", {
        "name": args.name,
        "networkDhcpWaitSeconds": args.networkDhcpWaitSeconds,
        "org": args.org,
        "placementPolicyId": args.placementPolicyId,
        "sizingPolicyId": args.sizingPolicyId,
        "vappName": args.vappName,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVappVm.
 */
export interface GetVappVmArgs {
    /**
     * A name for the VM, unique within the vApp
     */
    name: string;
    /**
     * Allows to wait for up to a defined amount of
     * seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
     * constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
     * __at least one__ of the following __must be true__:
     * * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
     * does not require for the VM to use Edge Gateways DHCP service.
     * * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
     * relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
     * until UI reports IP addresses, but is more constrained. However this is the only option if guest
     * tools are not present on the VM.
     */
    networkDhcpWaitSeconds?: number;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: string;
    /**
     * (*v3.8+*) VM placement policy ID.
     */
    placementPolicyId?: string;
    /**
     * (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
     */
    sizingPolicyId?: string;
    /**
     * The vApp this VM belongs to.
     */
    vappName: string;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: string;
}

/**
 * A collection of values returned by getVappVm.
 */
export interface GetVappVmResult {
    readonly bootOptions: outputs.GetVappVmBootOption[];
    /**
     * Computer name to assign to this virtual machine.
     */
    readonly computerName: string;
    /**
     * The number of cores per socket
     */
    readonly cpuCores: number;
    readonly cpuHotAddEnabled: boolean;
    /**
     * The limit (in MHz) for how much of CPU can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    readonly cpuLimit: number;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
     */
    readonly cpuPriority: string;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure
     */
    readonly cpuReservation: number;
    /**
     * Custom priority for the resource in MHz
     */
    readonly cpuShares: number;
    /**
     * The number of virtual CPUs allocated to the VM
     */
    readonly cpus: number;
    readonly customizations: outputs.GetVappVmCustomization[];
    /**
     * The VM description. Note: description is read only. Currently, this field has
     * the description of the OVA used to create the VM
     */
    readonly description: string;
    /**
     * Independent disk attachment configuration.
     */
    readonly disks: outputs.GetVappVmDisk[];
    /**
     * Expose hardware-assisted CPU virtualization to guest OS
     */
    readonly exposeHardwareVirtualization: boolean;
    readonly extraConfigs: outputs.GetVappVmExtraConfig[];
    readonly firmware: string;
    /**
     * Key value map of guest properties
     */
    readonly guestProperties: {[key: string]: string};
    /**
     * (*v2.9+*) Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.).
     */
    readonly hardwareVersion: string;
    readonly href: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (*v3.11+*; *VCD 10.5.1+*) A map that contains read-only metadata that is automatically added by VCD (10.5.1+) and provides
     * details on the origin of the VM (e.g. `vm.origin.id`, `vm.origin.name`, `vm.origin.type`).
     */
    readonly inheritedMetadata: {[key: string]: string};
    /**
     * (*v2.7+*) A block providing internal disk of VM details
     */
    readonly internalDisks: outputs.GetVappVmInternalDisk[];
    /**
     * The amount of RAM (in MB) allocated to the VM
     */
    readonly memory: number;
    readonly memoryHotAddEnabled: boolean;
    /**
     * The limit (in MB) for how much of memory can be consumed on the underlying virtualization infrastructure. `-1` value for unlimited.
     */
    readonly memoryLimit: number;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the virtualized workload. Values can be: `LOW`, `NORMAL`, `HIGH` and `CUSTOM`
     */
    readonly memoryPriority: string;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    readonly memoryReservation: number;
    /**
     * Custom priority for the resource in MB
     */
    readonly memoryShares: number;
    /**
     * (Deprecated) Use `metadataEntry` instead. Key value map of metadata assigned to this VM
     *
     * @deprecated Use metadataEntry instead
     */
    readonly metadata: {[key: string]: string};
    /**
     * A set of metadata entries assigned to this VM. See Metadata section for details
     */
    readonly metadataEntries: outputs.GetVappVmMetadataEntry[];
    readonly name: string;
    readonly networkDhcpWaitSeconds?: number;
    /**
     * A block defining a network interface. Multiple can be used.
     */
    readonly networks: outputs.GetVappVmNetwork[];
    readonly org?: string;
    /**
     * (*v2.9+*) Operating System type.
     */
    readonly osType: string;
    /**
     * (*v3.8+*) VM placement policy ID.
     */
    readonly placementPolicyId: string;
    /**
     * (*v3.9+*) Set of security tags assigned to this VM.
     */
    readonly securityTags: string[];
    /**
     * (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
     */
    readonly sizingPolicyId: string;
    /**
     * (*v3.8+*) The vApp status as a numeric code.
     */
    readonly status: number;
    /**
     * (*v3.8+*) The vApp status as text.
     */
    readonly statusText: string;
    readonly storageProfile: string;
    readonly vappId: string;
    readonly vappName: string;
    readonly vdc?: string;
    /**
     * (*3.2+*) - type of the VM (either `vcd.VappVm` or `vcd.Vm`)
     */
    readonly vmType: string;
}
/**
 * Provides a VMware Cloud Director VM data source. This can be used to access VMs within a vApp.
 *
 * Supported in provider *v2.6+*
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vcd from "@pulumi/vcd";
 *
 * const web = vcd.getVapp({
 *     name: "web",
 * });
 * const web1 = web.then(web => vcd.getVappVm({
 *     vappName: web.name,
 *     name: "web1",
 * }));
 * export const vmId = id;
 * export const vm = web1;
 * ```
 *
 * Sample output:
 *
 * ## Metadata
 *
 * The `metadataEntry` (*v3.8+*) is a set of metadata entries that have the following structure:
 *
 * * `key` - Key of this metadata entry.
 * * `value` - Value of this metadata entry.
 * * `type` - Type of this metadata entry. One of: `MetadataStringValue`, `MetadataNumberValue`, `MetadataDateTimeValue`, `MetadataBooleanValue`.
 * * `userAccess` - User access level for this metadata entry. One of: `PRIVATE` (hidden), `READONLY` (read only), `READWRITE` (read/write).
 * * `isSystem` - Domain for this metadata entry. true if it belongs to `SYSTEM`, false if it belongs to `GENERAL`.
 */
export function getVappVmOutput(args: GetVappVmOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVappVmResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("vcd:index/getVappVm:getVappVm", {
        "name": args.name,
        "networkDhcpWaitSeconds": args.networkDhcpWaitSeconds,
        "org": args.org,
        "placementPolicyId": args.placementPolicyId,
        "sizingPolicyId": args.sizingPolicyId,
        "vappName": args.vappName,
        "vdc": args.vdc,
    }, opts);
}

/**
 * A collection of arguments for invoking getVappVm.
 */
export interface GetVappVmOutputArgs {
    /**
     * A name for the VM, unique within the vApp
     */
    name: pulumi.Input<string>;
    /**
     * Allows to wait for up to a defined amount of
     * seconds before IP address is reported for NICs with `ip_allocation_mode=DHCP` setting. It
     * constantly checks if IP is reported so the time given is a maximum. VM must be powered on and
     * __at least one__ of the following __must be true__:
     * * VM has guest tools. It waits for IP address to be reported in vCD UI. This is a slower option, but
     * does not require for the VM to use Edge Gateways DHCP service.
     * * VM DHCP interface is connected to routed Org network and is using Edge Gateways DHCP service (not
     * relayed). It works by querying DHCP leases on edge gateway. In general it is quicker than waiting
     * until UI reports IP addresses, but is more constrained. However this is the only option if guest
     * tools are not present on the VM.
     */
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organisations
     */
    org?: pulumi.Input<string>;
    /**
     * (*v3.8+*) VM placement policy ID.
     */
    placementPolicyId?: pulumi.Input<string>;
    /**
     * (*v3.0+*, *vCD 10.0+*) VM sizing policy ID.
     */
    sizingPolicyId?: pulumi.Input<string>;
    /**
     * The vApp this VM belongs to.
     */
    vappName: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
